{
    "title": "Prime Factorization (Hard)",
    "description": "Write a function `prime_factors` that takes a positive integer as input and returns a list of its prime factors. For example, the prime factors of 31 are [3, 7], and the prime factors of 9 are [3, 3].\n\n#### Function Signature\n```python\ndef prime_factors(n: int) -> List[int]:\n```\n\n#### Input\n- `n` (int): A positive integer greater than 1.\n\n#### Output\n- Returns a list of integers representing the prime factors of the input number, sorted in descending order.\n",
    "code": "def prime_factors(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    if n > 1:\n        factors.append(n)\n    return sorted(factors, reverse=True)",
    "tests": [
        "assert prime_factors(31) == [3, 7]",
        "assert prime_factors(9) == [3, 3]",
        "assert prime_factors(28) == [2, 2, 7]",
        "assert prime_factors(49) == [7, 7"
    ]
}