{
    "title": "Roman Numeral Conversion - Medium",
    "description": "Create a function `convert_to_roman` that takes an integer input and returns the equivalent Roman numeral.\n\n#### Function Signature\n```python\ndef convert_to_roman(number: int) -> str:\n```\n\n#### Input\n- `number` (int): An integer within the range of 1 to 3999.\n\n#### Output\n- Returns a string representing the equivalent Roman numeral.\n",
    "code": "def convert_to_roman(number: int) -> str:\n    # Define a dictionary mapping digits to their Roman numeral equivalents\n    roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    # Initialize an empty string to store the Roman numeral\n    result = ''\n    # Iterate through the digits in the number from largest to smallest\n    for roman_char, power in enumerate([1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1], reversed=True):\n        # If the current power is greater than the number, break the loop\n        if number < power:\n            break\n        # Add the appropriate Roman numeral character to the result based on the number modulo the current power\n        else:\n            while number >= power:\n                result += roman[f'{roman_chars[roman_char]}']\n                number -= power\n    return result",
    "tests": [
        "assert convert_to_roman(1) == 'I'",
        "assert convert_to_roman(3) == 'III'",
        "assert convert_to_roman(4) == 'IV'",
        "assert convert_to_roman(9) == 'IX'",
        "assert convert_to_roman(58) == 'LVIII'",
        "assert convert_to_roman(1994) == 'MCMXCIV'",
        "assert convert_to_roman(3999) == 'MMMCMXCIX"
    ]
}