"{'title': 'Largest Subarray with Sum Zero (Medium)', 'description': 'Given an array of integers, find the largest subarray with sum zero.\\n\\n#### Function Signature\\n```python\\ndef max_subarray_with_sum_zero(arr: list[int]) -> tuple[list[int], int]:\\n```\\n\\n#### Input\\n- `arr` (list[int]): A list of integers.\\n\\n#### Output\\n- Returns a tuple containing the largest subarray with sum zero and its length. If no such subarray exists, returns an empty list and 0.\\n', 'code': \"def max_subarray_with_sum_zero(arr: list[int]) -> tuple[list[int], int]:\\n    # Initialize variables to keep track of the maximum subarray and its sum\\n    max_subarray = []\\n    max_sum = 0\\n    current_subarray = []\\n    current_sum = 0\\n\\n    # Iterate over the array\\n    for num in arr:\\n        # Add the current number to the current subarray and update the current sum\\n        current_subarray.append(num)\\n        current_sum += num\\n\\n        # If the current sum is zero, update the maximum subarray and its sum if necessary\\n        if current_sum == 0:\\n            max_sum = 0\\n            max_subarray = [num for num in arr[:i + 1] if num == 0]\\n\\n        # If the current sum is less than the maximum sum, update the maximum sum and subarray\\n        elif current_sum < max_sum:\\n            max_sum = current_sum\\n            max_subarray = [num for num in current_subarray]\\n\\n    # Return the maximum subarray with sum zero and its length\\n    if max_sum == 0:\\n        return [], 0\\n    else:\\n        return max_subarray, len(max_subarray)\\n\", 'tests': ['assert max_subarray_with_sum_zero([1, -2, 3, 4, -2, 5, -2]) == ([], 0)', 'assert max_subarray_with_sum_zero([-1, 2, 3, -1]) == ([-1, 2, 3, -1], 4)', 'assert max_subarray_with_sum_zero([1, -1, 1, -1, 1, -1, 1, -1]) == ([], 0)', 'assert max_subarray_with_sum_zero([1, 2, 3, 4, 5, 6]) == ([-6], 1)']}"