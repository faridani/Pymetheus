"Here's your Python coding question:\n\n{\"title\": \"Hard: Minimum Window Substring\", \n\"description\": \"Given two strings `s1` and `s2`, write a function that returns the minimum window substring from `s1` that contains all characters of `s2`. If there are multiple such substrings, return any one.\\n\\n#### Function Signature\\n```python\\ndef min_window_substring(s1: str, s2: str) -> str:\\n```\\n\\n#### Input\\n- `s1` (str): The string to search for the minimum window substring.\\n- `s2` (str): The string that must be contained within the minimum window substring.\\n\\n#### Output\\n- Returns the minimum window substring from `s1` that contains all characters of `s2`, or an empty string if no such substring exists.\\n\", \n\"code\": \"from collections import Counter\\n\\ndef min_window_substring(s1: str, s2: str) -> str:\\n    counter_s2 = Counter(s2)\\n    required_chars = len(counter_s2)\\n    left = 0\\n    for right in range(len(s1)):\\n        if Counter(s1[:right+1]) & counter_s2 == counter_s2:\\n            while Counter(s1[left:right+1]) & counter_s2 == counter_s2 and left < right:\\n                left += 1\\n            return s1[left:right+1]\\n    return ''\\n\", \n\"tests\": [\"assert min_window_substring('ADOBECODEBANC', 'ABC') == 'BANC'\", \"assert min_window_substring('hello', 'lo') == 'lo'\", \"assert min_window_substring('abcde', 'ed') == 'ed'\", \"assert min_window_substring('', 'abc') == ''\"]}"