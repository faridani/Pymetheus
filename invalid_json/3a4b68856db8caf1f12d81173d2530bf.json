" {\n    \"title\": \"Anagram Detector (Hard)\",\n    \"description\": \"Given two strings, determine if they are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\\n\\n#### Function Signature\\n```python\\ndef are_anagrams(str1: str, str2: str) -> bool:\\n```\\n\\n#### Input\\n- `str1`, `str2` (str): Two strings that may contain letters (no numbers or special characters).\\n\\n#### Output\\n- Returns `True` if the two input strings are anagrams, `False` otherwise.\\n\",\n    \"code\": \"def are_anagrams(str1: str, str2: str) -> bool:\\n    # Remove spaces and convert to lowercase\\n    str1 = ''.join([char for char in str1 if char not in ' \\t\\n\\r\\f\\v'])\\n    str2 = ''.join([char for char in str2 if char not in ' \\t\\n\\r\\f\\v'])\\n    str1 = str1.lower()\\n    str2 = str2.lower()\\n    # Create a dictionary to count the frequency of each letter in the first string\\n    count_dict = {} \\n    for char in str1:\\n        if char not in count_dict:\\n            count_dict[char] = 1\\n        else:\\n            count_dict[char] += 1\\n    # If the two strings have a different number of letters, they cannot be anagrams\\n    if len(str1) != len(str2):\\n        return False\\n    # Check if every letter in the second string has a matching count in the first string's dictionary\\n    for char in str2:\\n        if char not in count_dict or count_dict[char] < 1:\\n            return False\\n        count_dict[char] -= 1\\n    # If all checks pass, the strings are anagrams\\n    return True\",\n    \"tests\": [\"assert are_anagrams('listen', 'silent') == True\", \"assert are_anagrams('hello', 'world') == False\", \"assert are_anagrams('eat', 'tea') == True\", \"assert are_anagrams('example', 'example') == True\"]\n   }"