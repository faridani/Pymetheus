" {\n       \"title\": \"Prime Factorization Generator (Hard)\",\n       \"description\": \"Write a function `prime_factors` that takes an integer as input and returns a list of prime numbers that are factors of the input number. The order of the returned list should be from largest to smallest.\\n\\n#### Function Signature\\n```python\\ndef prime_factors(n: int) -> List[int]:\\n```\\n\\n#### Input\\n- `n` (int): A positive integer greater than 1.\\n\\n#### Output\\n- Returns a list of prime numbers that are factors of the input number, in descending order.\\n\",\n       \"code\": \"def prime_factors(n: int) -> List[int]:\\n    # Initialize an empty list to store prime factors\\n    factors = []\\n    i = 2\\n    while i * i <= n:\\n        if n % i == 0:\\n            factors.append(i)\\n            n //= i\\n        i += 1\\n    # If the number is still greater than 1, it's a prime number and we append it to the list\\n    if n > 1:\\n        factors.append(n)\\n    return factors\",\n       \"tests\": [\n           'assert prime_factors(12) == [2, 2, 3]',\n           'assert prime_factors(9) == [3, 3]',\n           'assert prime_factors(17) == [17]',\n           'assert prime_factors(25) == [5, 5]',\n           'assert prime_factors(49) == [7, 7]'\n       ]\n   }"