"\nHere is a hard python coding question for you, along with the answer and test cases.\n\nTitle: Reverse Linked List\n\nDescription: Write a function `reverse_list` that takes a singly linked list as input and returns the reversed linked list. The function should not allocate any new memory or modify the original linked list.\n\nFunction Signature:\n```python\ndef reverse_list(head: ListNode) -> ListNode:\n```\nInput: A singly linked list represented as a ListNode object, where each node has a `val` attribute containing the value of the node and a `next` attribute containing the reference to the next node in the list.\n\nOutput: The reversed linked list, also represented as a ListNode object.\n\nConstraints:\n\n* The input linked list may have any number of nodes.\n* Each node in the input linked list has a unique `val` attribute.\n* The input linked list is not null (i.e., there is at least one node in the list).\n\nHints:\n\n* You can use recursion to solve this problem.\n* You can use a temporary variable to store the reference to the current node and then update the `next` attribute of the current node to point to the next node in the list.\n* You should not modify the original linked list.\n\nCode:\n```python\nclass ListNode(object):\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverse_list(head):\n    current = head\n    previous = None\n    while current is not None:\n        next = current.next\n        current.next = previous\n        previous = current\n        current = next\n    return previous\n\ntests = [\n    assert reverse_list(ListNode(1, ListNode(2, ListNode(3)))) == ListNode(3, ListNode(2, ListNode(1)),\n    assert reverse_list(ListNode(4, ListNode(5, ListNode(6))) == ListNode(6, ListNode(5, ListNode(4)),\n    assert reverse_list(ListNode(7)) == ListNode(7),\n    assert reverse_list(ListNode(1, ListNode(2, ListNode(3, ListNode(4)))) == ListNode(4, ListNode(3, ListNode(2, ListNode(1))),\n]\n```\nPlease note that this is a hard problem and the provided code is just one possible solution. There may be other ways to solve the problem as well."