"```json\n{\n    \"title\": \"Longest Common Prefix\",\n    \"description\": \"Write a function that takes a list of strings as input and returns the longest common prefix among all strings. The prefix must be at least 1 character long.\\n\\n#### Function Signature\\n```python\\ndef longest_common_prefix(strs: List[str]) -> str:\\n```\\n\\n#### Input\\n- `strs` (List[str]): A list of strings.\\n\\n#### Output\\n- Returns the longest common prefix among all strings. If no prefix is found, an empty string should be returned.\",\n    \"code\": \"\nimport os\nfrom typing import List\n\ndef longest_common_prefix(strs: List[str]) -> str:\n    \"\"\"\n    This function takes a list of strings as input and returns the longest common prefix among all strings.\n    \n    Args:\n        strs (List[str]): A list of strings.\n    \n    Returns:\n        str: The longest common prefix among all strings. If no prefix is found, an empty string is returned.\n    \"\"\"\n    # Check if the list is empty\n    if not strs:\n        return \"\"\n\n    # Sort the list of strings\n    strs.sort()\n\n    # Take the first and last string from the sorted list\n    first_str = strs[0]\n    last_str = strs[-1]\n\n    # Initialize the prefix as an empty string\n    prefix = \"\"\n\n    # Iterate over the characters in the first string\n    for char, other_char in zip(first_str, last_str):\n        # If the characters at the current position are equal, add the character to the prefix\n        if char == other_char:\n            prefix += char\n        # If the characters are not equal, break the loop\n        else:\n            break\n\n    return prefix\",\n    \"tests\": [\n        \"assert longest_common_prefix(['flower', 'flow', 'flight']) == 'fl'\",\n        \"assert longest_common_prefix(['dog', 'racecar', 'cat'])) == ''\",\n        \"assert longest_common_prefix([]) == ''\"\n    ]\n}\n```"