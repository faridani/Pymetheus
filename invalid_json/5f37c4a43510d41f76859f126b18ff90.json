"```json\n{\n  \"title\": \"Medium Python Coding Question: Find the Maximum Width of a Binary Tree\",\n  \"description\": \"Given the root of a binary tree, write a function to find the maximum width of the binary tree at any level.\\n\\nThe width of a tree at a given level can be calculated as follows:\\n- The number of nodes at the given level in the binary tree.\\n\\nNote: Each node has -1 <= Node.val <= 100.\\nNote: The total number of nodes in the tree is less than or equal to 30,000.\\n\\n#### Function Signature\\n```python\\ndef max_width_of_binary_tree(root: TreeNode) -> int:\\n```\",\n  \"code\": \"class TreeNode:\\n    def __init__(self, x):\\n        self.val = x\\n        self.left = None\\n        self.right = None\\n\\ndef max_width_of_binary_tree(root: TreeNode) -> int:\\n    if not root:\\n        return 0\\n\\n    width = 0\\n    queue = [(root, 0)]\\n    while queue:\\n        nodes_at_level = []\\n        level_width = 0\\n        for _ in range(len(queue)):\\n            node, offset = queue.pop(0)\\n            nodes_at_level.append((node.val, offset))\\n            if node.left:\\n                queue.append((node.left, offset * 2 + 1))\\n            if node.right:\\n                queue.append((node.right, offset * 2 + 1))\\n        nodes_at_level.sort(key=lambda x: x[1])\\n        level_width = max(offset for _, offset in nodes_at_level)\\n        width = max(width, level_width - min(offset for _, offset in nodes_at_level))\\n    return width\",\n  \"tests\": [\"assert max_width_of_binary_tree(TreeNode(1)) == 0\",\n           \"assert max_width_of_binary_tree(TreeNode(1, TreeNode(2), TreeNode(3))) == 1\",\n           \"assert max_width_of_binary_tree(TreeNode(1, TreeNode(93), TreeNode(2001))) == 3\"]\n}\n```"