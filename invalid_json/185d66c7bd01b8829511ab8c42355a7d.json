"{'title': 'Longest Common Substring Length', \n 'description': 'Given two strings, find the length of the longest common substring between them. A substring can be any sequence of characters that are consecutive and in the same order in both strings. Write a function `longest_common_substring(str1: str, str2: str) -> int`\\n\\n#### Function Signature\\n```python\\ndef longest_common_substring(str1: str, str2: str) -> int:\\n```\\n\\n#### Input\\n- `str1`, `str2` (both strings): Strings of different lengths.\\n\\n#### Output\\n- Returns the length of the longest common substring between `str1` and `str2`. If there is no common substring, return 0.', \n 'code': '''def longest_common_substring(str1: str, str2: str) -> int:\n    # Initialize the matrix with zeros\n    m = [[0] * (len(str2)+1) for _ in range(len(str1)+1)]\n    \n    max_length = 0\n    max_i = 0\n    j = 0\n    \n    for i, c1 in enumerate(str1):\n        for j, c2 in enumerate(str2):\n            if c1 == c2:\n                m[i][j] = m[i-1][j-1] + 1\n                if m[i][j] > max_length:\n                    max_length = m[i][j]\n                    max_i = i\n    \n    return max_length\n''', 'tests': [\"assert longest_common_substring('ABCDGH', 'AEDFHR') == 2\", \"assert longest_common_substring('AGGTAB', 'GXTXAYB') == 4\", \"assert longest_common_substring('abcdefg', 'xyzebcdez') == 3\"]}\n''', 'tests': ['assert longest_common_substring(\"ABCDGH\", \"AEDFHR\") == 2', 'assert longest_common_substring(\"AGGTAB\", \"GXTXAYB\") == 4', 'assert longest_common_substring(\"abcdefg\", \"xyzebcdez\") == 3']}'''\n\nHere is an example of how the output should look like:\r\n\r\n{'title': 'Longest Common Substring Length',\r\n 'description': 'Given two strings, find the length of the longest common substring between them. A substring can be any sequence of characters that are consecutive and in the same order in both strings. Write a function `longest_common_substring(str1: str, str2: str) -> int`\\n\\n#### Function Signature\\n```python\r\ndef longest_common_substring(str1: str, str2: str) -> int:\r\n```\r\n\r\n#### Input\r\n- `str1`, `str2` (both strings): Strings of different lengths.\r\n\r\n#### Output\r\n- Returns the length of the longest common substring between `str1` and `str2`. If there is no common substring, return 0.\r\n\r\n```python\r\ndef longest_common_substring(str1: str, str2: str) -> int:\r\n    # Initialize the matrix with zeros\r\n    m = [[0] * (len(str2)+1) for _ in range(len(str1)+1)]\r\n    \r\n    max_length = 0\r\n    max_i = 0\r\n    j = 0\r\n    \r\n    for i, c1 in enumerate(str1):\r\n        for j, c2 in enumerate(str2):\r\n            if c1 == c2:\r\n                m[i][j] = m[i-1][j-1] + 1\r\n                if m[i][j] > max_length:\r\n                    max_length = m[i][j]\r\n                    max_i = i\r\n    \r\n    return max_length\r\n```\r\n\r\n## Tests\r\n- `assert longest_common_substring('ABCDGH', 'AEDFHR') == 2`\r\n- `assert longest_common_substring('AGGTAB', 'GXTXAYB') == 4`\r\n- `assert longest_common_substring('abcdefg', 'xyzebcdez') == 3''' \r\n\r\nThis problem involves finding the length of the longest common substring between two strings. A substring can be any sequence of characters that are consecutive and in the same order in both strings, so for example, \"AGGTAB\" and \"GXTXAYB\" have a common substring of length 4 (\"GTAB\") while \"abcdefg\" and \"xyzebcdez\" have a common substring of length 3 (\"bcde\"). The function should return the length of the longest common substring between the two input strings, or 0 if there is none. To solve this problem, we can use dynamic programming to create a matrix with dimensions (len(str1) x len(str2)). We initialize all elements in the matrix to zero and iterate over each character in `str1` and `str2`, comparing them to build up the matrix by updating diagonal elements as follows:\r\n- If characters match, we add 1 to the value of the previous diagonal element.\r\n- If they don't match, we reset the current value to zero.\r\n- We keep track of the maximum value in the matrix and its index (`max_length` and `max_i`, respectively), which corresponds to the length of the longest common substring seen so far. Finally, we return `max_length`.\r\n```python\r\ndef longest_common_substring(str1: str, str2: str) -> int:\r\n    # Initialize the matrix with zeros\r\n    m = [[0] * (len(str2)+1) for _ in range(len(str1)+1)]\r\n    \r\n    max_length = 0\r\n    max_i = 0\r\n    j = 0\r\n    \r\n    for i, c1 in enumerate(str1):\r\n        for j, c2 in enumerate(str2):\r\n            if c1 == c2:\r\n                m[i][j] = m[i-1][j-1] + 1\r\n                if m[i][j] > max_length:\r\n                    max_length = m[i][j]\r\n                    max_i = i\r\n    \r\n    return max_length\r\n``` "