"```json\n{\"title\": \"Hard -  Binary Tree Zigzag Level Order Traversal\", \"description\": \"Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).\\n\\n#### Function Signature\\n```python\\ndef zigzagLevelOrder(root: TreeNode) -> list[list[int]]:\\n```\\n\\n#### Input\\n- `root` (TreeNode): The root of a binary tree.\\n\\n#### Output\\n- Returns a list of lists where each inner list represents the nodes at a particular level in zigzag order. \\n\", \"code\": \"from collections import deque\\nclass TreeNode:\\n    def __init__(self, val=0, left=None, right=None):\\n        self.val = val\\n        self.left = left\\n        self.right = right\\n\\ndef zigzagLevelOrder(root: TreeNode) -> list[list[int]]:\\n    if not root:\\n        return []\\n\\n    result = []\\n    queue = deque([root])\\n    left_to_right = True\\n\\n    while queue:\\n        level_size = len(queue)\\n        current_level = []\\n\\n        for _ in range(level_size):\\n            node = queue.popleft()\\n            current_level.append(node.val)\\n\\n            if node.left:\\n                queue.append(node.left)\\n            if node.right:\\n                queue.append(node.right)\\n\\n        if not left_to_right:\\n            current_level.reverse()\\n\\n        result.append(current_level)\\n        left_to_right = not left_to_right\\n\\n    return result\\n\", \"tests\": ['# Construct a binary tree (example)\\ntree = TreeNode(3, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7)))\\nassert zigzagLevelOrder(tree) == [[3], [20, 9], [15, 7]]', 'assert zigzagLevelOrder(None) == []']}\n\n```"