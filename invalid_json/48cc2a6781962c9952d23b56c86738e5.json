"Here's a new problem:\n\n```json\n{\n  'title': 'Minimum Window Substring',\n  'description': 'Given two strings `s` and `t`, find the minimum window that appears in `s` which contains all characters of `t`. If no such window exists, return an empty string.\\n\\n#### Function Signature\\n```python\\ndef min_window(s: str, t: str) -> str:\\n```\\n\\n#### Input\\n- `s` (str): The string to search in.\\n- `t` (str): The string containing the characters to search for.\\n\\n#### Output\\n- A minimum window that appears in `s` and contains all characters of `t`, or an empty string if no such window exists.',\n  'code': '''\nimport string\n\ndef min_window(s: str, t: str) -> str:\n    # Create a dictionary to store the frequency of each character in t\n    t_count = {}\n    for char in t:\n        if char not in t_count:\n            t_count[char] = 1\n        else:\n            t_count[char] += 1\n\n    # Initialize variables to keep track of the minimum window\n    min_window = \"\"\n    min_len = float('inf')\n\n    # Iterate over each substring of s\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Get the current substring\n            substring = s[i:j+1]\n\n            # Create a dictionary to store the frequency of each character in the substring\n            count = {}\n            for char in substring:\n                if char not in count:\n                    count[char] = 1\n                else:\n                    count[char] += 1\n\n            # Check if all characters of t are present in the substring\n            is_match = True\n            for key in t_count:\n                if key not in count or count[key] < t_count[key]:\n                    is_match = False\n                    break\n\n            # If a match is found, update the minimum window if necessary\n            if is_match and j - i + 1 < min_len:\n                min_window = substring\n                min_len = j - i + 1\n\n    return min_window\n''',\n  'tests': [\n      'assert min_window(\"ADOBECODEBANJDOFECD\", \"ABC\") == \"BCA\"',\n      'assert min_window(\"a\", \"b\") == \"\"',\n      'assert min_window(\"abc\", \"abc\") == \"abc\"',\n      'assert min_window(\"aa\", \"a\") == \"a\"'\n  ]\n}\n```"