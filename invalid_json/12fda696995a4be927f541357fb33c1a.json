"Here's an insanely difficult Python coding question for you:\n\n```json\n{\n    \"title\": \"Sudoku Solver (Hard)\",\n    \"description\": \"Write a function `solve_sudoku` that takes a 2D list of integers as input, representing a Sudoku board. The function should return the solution to the Sudoku puzzle if it exists, or an empty list if there is no solution.\\n\\nThe input Sudoku board will be represented as a 9x9 2D list of integers, where each integer represents a cell in the board. Each row and column should contain the numbers 1-9 without repetition. The function should fill in the blank cells (represented by zeros) with valid values to form a solvable Sudoku puzzle.\\n\\n#### Function Signature\\n```\\ndef solve_sudoku(board: list[list[int]]) -> list[list[int]]:\\n```\",\n    \"code\": \"\"\"\nimport copy\n\ndef solve_sudoku(board: list[list[int]]) -> list[list[int]]:\n    def is_valid(board, row, col, num):\n        for x in range(9):\n            if board[row][x] == num:\n                return False\n        for x in range(9):\n            if board[x][col] == num:\n                return False\n        start_row = row - row % 3\n        start_col = col - col % 3\n        for i in range(3):\n            for j in range(3):\n                if board[i + start_row][j + start_col] == num:\n                    return False\n        return True\n\n    def solve(board):\n        for i in range(9):\n            for j in range(9):\n                if board[i][j] == 0:\n                    for num in range(1, 10):\n                        if is_valid(board, i, j, num):\n                            board[i][j] = num\n                            if solve(board):\n                                return True\n                            else:\n                                board[i][j] = 0\n                    return False\n        return True\n\n    solution = copy.deepcopy(board)\n    if solve(solution):\n        return solution\n    else:\n        return []\n\"\"\",\n    \"tests\": [\n        'assert len(solve_sudoku([[5,3,0,0,7,0,0,0,0],[6,0,0,1,9,5,0,0,0],[0,9,8,0,0,0,0,6,0],\\n' +\n        '[1,0,0,0,0,4,3,0,0],[8,2,0,0,1,0,0,0,6],[4,5,0,0,3,7,0,0,9],\\n' +\n        '[7,0,0,0,2,0,0,0,0],[0,0,6,0,0,0,0,0,0],[0,0,0,8,1,0,0,0,3]])).count(0) == 0,\\n' +\n        'assert len(solve_sudoku([[0,0,0,0,0,0,0,0,0]])) == 9',\n    ]\n}\n```"