"Here is the Python question and answer:\n\nQuestion: \n{'title': 'Remove Duplicate Words (Easy)', 'description': 'Write a function `remove_duplicate_words` that removes duplicate words in a sentence. The function should maintain the original order of words.\\n\\n#### Function Signature\\n```python\\ndef remove_duplicate_words(sentence: str) -> str:\\n```\\n\\n#### Input\\n- `sentence` (str): A string representing a sentence with duplicate words.\\n\\n#### Output\\n- Returns a string with duplicate words removed, while maintaining the original order of words.\\n', 'code': \"def remove_duplicate_words(sentence: str) -> str:\\n    seen = set()\\n    words = []\\n    for word in sentence.split():\\n        if word not in seen:\\n            seen.add(word)\\n            words.append(word)\\n    return ' '.join(words)\\n\", 'tests': ['assert remove_duplicate_words(\"This is a test. This is only a test.\") == \"This is a test. only a test.\"']}\n\nAnswer:\n{'title': 'Find Longest Common Subsequence (Medium)', 'description': 'Write a function `longest_common_subsequence` that finds the longest common subsequence between two strings.\\n\\n#### Function Signature\\n```python\\ndef longest_common_subsequence(s1: str, s2: str) -> str:\\n```\\n\\n#### Input\\n- `s1` (str): A string representing the first sequence.\\n- `s2` (str): A string representing the second sequence.\\n\\n#### Output\\n- Returns a string representing the longest common subsequence of `s1` and `s2`.\\n', 'code': \"def longest_common_subsequence(s1: str, s2: str) -> str:\\n    m, n = len(s1), len(s2)\\n    dp = [[None] * (n + 1) for _ in range(m + 1)]\\n\\n    for i in range(m - 1, -1, -1):\\n        for j in range(n - 1, -1, -1):\\n            if s1[i] == s2[j]:\\n                dp[i][j] = dp[i + 1][j + 1] + [s1[i]]\\n            else:\\n                dp[i][j] = max(dp[i + 1][j], dp[i][j + 1], key=len)\\n\\n    return ''.join(dp[0][0])\\n\", 'tests': ['assert longest_common_subsequence(\"ABABC\", \"BABCA\") == \"BABC\"', 'assert longest_common_subsequence(\"abcde\", \"ace\") == \"ace\"']}"