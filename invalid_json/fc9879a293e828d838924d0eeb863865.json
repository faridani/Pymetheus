"Here is a super hard Python coding question for you:\n\n```json\n{\n    \"title\": \"Hard: Matrix Chain Multiplication\",\n    \"description\": \"Given a sequence of matrices, find the most efficient way to multiply them together. This problem is an extension of the previous one where we discussed matrix chain multiplication.\\n\\n#### Function Signature\\n```\\ndef matrix_chain_multiplication(p: list) -> int:\\n```\\n\\n#### Input\\n- `p` (list): A list of integers representing the sizes of a sequence of matrices, where each integer is the size of the corresponding matrix.\\n\\n#### Output\\n- Returns the minimum number of scalar multiplications required to multiply the given sequence of matrices together.\\n\",\n    \"code\": \"\"\"\nfrom functools import lru_cache\n\ndef matrix_chain_multiplication(p: list) -> int:\n    n = len(p) - 1\n    m = [[0] * n for _ in range(n)]\n    \n    @lru_cache(None)\n    def dp(i, j):\n        if i == j:\n            return 0\n        \n        min_val = float('inf')\n        \n        for k in range(i, j + 1):\n            q = m[i][k] + m[k + 1][j] + p[i] * p[k + 1] * p[j]\n            min_val = min(min_val, q)\n        \n        return min_val\n    \n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            m[i][j] = dp(i, j)\n    \n    return m[0][n - 1]\n    \"\"\",\n    \"tests\": [\n        \"assert matrix_chain_multiplication([30, 35, 15]) == 150\",\n        \"assert matrix_chain_multiplication([10, 50, 2, 5]) == 20\",\n        \"assert matrix_chain_multiplication([3, 8, 6, 9]) == 17\"\n    ]\n}\n```"