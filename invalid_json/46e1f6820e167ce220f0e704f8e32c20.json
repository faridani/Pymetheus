" ```json\n{\n  \"title\": \"Hard Python Coding Question\",\n  \"description\": \"Implement a function `find_longest_substring` that finds the longest substring without repeating characters. The function should return both the length of this substring and the substring itself.\\n\\n#### Function Signature\\n```python\\ndef find_longest_substring(s: str) -> (int, str):\\n```\\n\\n#### Input\\n- `s` (str): A string that may contain letters, numbers, spaces, etc.\\n\\n#### Output\\n- Returns a tuple where the first element is the length of the longest substring without repeating characters and the second element is the substring itself.\\n\",\n  \"code\": \"def find_longest_substring(s: str) -> (int, str):\\n    char_index = {}  # Dictionary to store character and its index\\n    max_length = 0  # Variable to track the maximum length of substring without repeating characters\\n    start = 0  # Start index of the current substring\\n    longest_substring = ''  # String to store the longest substring found\\n\\n    for i, char in enumerate(s):\\n        if char in char_index and char_index[char] >= start:\\n            start = char_index[char] + 1\\n        if i - start + 1 > max_length:\\n            max_length = i - start + 1\\n            longest_substring = s[start:i+1]\\n        char_index[char] = i\\n    return (max_length, longest_substring)\\n\",\n  \"tests\": [\n    'assert find_longest_substring(\"abcabcbb\") == (3, \"abc\")',\n    'assert find_longest_substring(\"bbbbb\") == (1, \"b\")',\n    'assert find_longest_substring(\"pwwkew\") == (3, \"wke\")',\n    'assert find_longest_substring(\"abcdefghijklmnopqrstuvwxyz\") == (26, \"abcdefghijklmnopqrstuvwxyz\")',\n    'assert find_longest_substring(\"a1b2c3d4e5f6g7h8i9j0\") == (10, \"a1b2c3d4e5\")'\n  ]\n}\n```"