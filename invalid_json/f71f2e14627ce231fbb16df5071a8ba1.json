"Here's the problem:\n\n{\"title\": \"Number of Islands\", \"description\": \"Given an `m x n` binary matrix where each element is either 0 (representing water) or 1 (representing land), return the number of islands. An island is a group of connected 1s that can be formed by adjacent elements with at least one 1.\n\n#### Function Signature\n```python\ndef num_islands(matrix: list[list[int]]) -> int:\n```\n\n#### Input\n- `matrix` (list[list[int]]): A binary matrix where each element is either 0 or 1, representing water and land respectively.\n\n#### Output\n- Returns the number of islands in the given binary matrix.\n\n\", 'code': \"\nimport copy\n\ndef num_islands(matrix: list[list[int]]) -> int:\n    if not matrix:\n        return 0\n    \n    count = 0\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == 1:\n                count += 1\n                dfs(matrix, i, j)\n                \n    return count\n\ndef dfs(matrix: list[list[int]], i: int, j: int) -> None:\n    if i < 0 or i >= len(matrix) or j < 0 or j >= len(matrix[0]) or matrix[i][j] == 0:\n        return\n    \n    matrix[i][j] = 0\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    for direction in directions:\n        new_i, new_j = i + direction[0], j + direction[1]\n        dfs(matrix, new_i, new_j)\n\", 'tests': ['assert num_islands([[0,0,1,0,0],[0,0,1,0,0],[0,0,1,0,0]]) == 1', 'assert num_islands([[0,0,0,0,0],[0,1,1,0,0],[0,1,0,0,0]]) == 1', 'assert num_islands([[0,0,0,0,0]] * 5) == 0']}"