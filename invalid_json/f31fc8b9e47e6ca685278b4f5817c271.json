"Here's your insanely difficult Python coding question:\n\n{\"title\": \"Hard: Maximum Sum of Non-Overlapping Subarrays\", \n\"description\": \"Given a 2D list of integers where each sublist represents the scores at different positions for a team, and an integer `k`, find the maximum sum of non-overlapping subarrays. A subarray is considered non-overlapping if it does not have any elements in common with another subarray.\\n\\n#### Function Signature\\n```python\\ndef max_non_overlapping_sum(scores: list[list[int]], k: int) -> int:\\n```\\n\\n#### Input\\n- `scores` (list[list[int]]): A 2D list of integers where each sublist represents the scores at different positions for a team.\\n- `k` (int): The number of non-overlapping subarrays to find.\\n\\n#### Output\\n- Returns the maximum sum of non-overlapping subarrays.\\n\", \n\"code\": \"import heapq\n\ndef max_non_overlapping_sum(scores: list[list[int]], k: int) -> int:\n    n = len(scores)\n    dp = [[0] * (k + 1) for _ in range(n)]\n    heap = []\n\n    for i in range(n):\n        for j in range(k + 1):\n            if i == 0 or j == 0:\n                continue\n            dp[i][j] = max(dp[i-1][j], sum(scores[i][:j+1]))\n            heapq.heappush(heap, (dp[i][j], i, j))\n\n    res = 0\n    for _ in range(k):\n        _, i, j = heapq.heappop(heap)\n        res += dp[i][j]\n        if j < k:\n            dp[i][j + 1] = max(dp[i-1][j+1], sum(scores[i][:k-j]))\n            heapq.heappush(heap, (dp[i][j+1], i, j+1))\n\n    return res\", \n\"tests\": [\"assert max_non_overlapping_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == 18\", \"assert max_non_overlapping_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == 27\"]}"