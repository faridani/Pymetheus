" {\n    \"title\": \"'Anagram Checker (Hard)',\n    \"description\": \"Write a function `is_anagram` that checks if two given strings are anagrams of each other.\\n\\n#### Function Signature\\n```python\\ndef is_anagram(str1: str, str2: str) -> bool:\\n```\\n\\n#### Input\\n- `str1`, `str2` (str): Two strings that may contain letters, numbers, and spaces.\\n\\n#### Output\\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.\\n\\n#### Constraints\\n- Case sensitivity doesn't matter, for example 'Hello' and 'hello' are considered as the same string.\\n- Consider spaces and special characters (if any) as part of the strings when comparing.\\n\",\n    \"code\": \"import collections\\n\\ndef is_anagram(str1: str, str2: str) -> bool:\\n    # Remove case sensitivity and spaces\\n    str1 = ''.join(c.lower() for c in str1 if c.isalnum()).strip()\\n    str2 = ''.join(c.lower() for c in str2 if c.isalnum()).strip()\\n    \\n    # If the strings are of different lengths, they cannot be anagrams\\n    if len(str1) != len(str2):\\n        return False\\n    \\n    # Use a dictionary to count the frequency of characters in each string\\n    char_count_dict = collections.Counter([c for c in str1 + str2])\\n    \\n    # Check if all characters in both strings have the same frequency\\n    return all(char_count_dict[c] == 2 for c in str1)\",\n    \"tests\": [\"assert is_anagram(\\\"listen\\\", \\\"silent\\\") == True\", \"assert is_anagram(\\\"hello\\\", \\\"world\\\") == False\", \"assert is_anagram(\\\"A man, a plan, a canal: Panama\\\", \\\"amanaplanacanalpanamajapanahalaplanamanapa\\\" ) == True\"]\n   }"