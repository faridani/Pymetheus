"Here is your super hard Python coding question:\n\n{\"title\": \"Hard: Maximal Rectangle\", \"description\": \"Given a 2D binary matrix where each element is either 0 or 1, you can treat the entire matrix as an image. You are asked to find the maximum area of any rectangle in this image that has all its cells as ones.\n\n#### Function Signature\n\n```python\ndef maximal_rectangle(matrix: list[list[int]]) -> int:\n```\n\n#### Input\n\n- `matrix` (list[list[int]]): A 2D binary matrix where each element is either 0 or 1. The matrix can be empty, in which case the function should return 0.\n\n#### Output\n\n- Returns an integer representing the maximum area of any rectangle in this image that has all its cells as ones.\n\n\", \"code\": \"import sys\\n\\ndef maximal_rectangle(matrix: list[list[int]]) -> int:\\n    if not matrix:\\n        return 0\\n    rows = len(matrix)\\n    cols = len(matrix[0])\\n    heights = [0] * cols\\n    max_area = 0\\n    for row in range(rows):\\n        for col in range(cols):\\n            heights[col] = heights[col] + (1 if matrix[row][col] else -1)\\n        stack = [-1]\\n        for i in range(cols+1):\\n            while len(stack) > 1 and stack[-1] > i:\\n                y = stack.pop()\\n                x = stack[-1]\\n                max_area = max(max_area, (x - i) * min(heights[y:] + [0]))\\n            stack.append(i)\\n    return max_area\\n\", \"tests\": [\"assert maximal_rectangle([[1, 0], [0, 1]]) == 2\", \"assert maximal_rectangle([[1, 1], [1, 0]]) == 2\", \"assert maximal_rectangle([]) == 0\", \"assert maximal_rectangle([[0, 0], [1, 1]]) == 1\"]}"