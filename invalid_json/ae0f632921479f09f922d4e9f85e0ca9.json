" {\n       \"title\": \"[Hard] Longest Increasing Subsequence\",\n       \"description\": \"Given an integer array `nums`, find the length of the longest strictly increasing subsequence. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\\n\\n#### Function Signature\\n```python\\ndef longest_increasing_subsequence(nums: List[int]) -> int:\\n```\\n\\n#### Input\\n- `nums` (List[int]): A list of integers, where the length of the list will be in the range [0, 2500] and each integer will be in the range [-10^4, 10^4].\\n\\n#### Output\\n- Returns an `int` representing the length of the longest increasing subsequence.\\n\",\n       \"code\": \"\"\"from typing import List\ndef longest_increasing_subsequence(nums: List[int]) -> int:\n    if not nums:\n        return 0\n    dp = [1] * len(nums)\n    for i in range(len(nums)):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j]+1)\n    return max(dp)\\n\"\"\",\n       \"tests\": ['assert longest_increasing_subsequence([10,9,2,5,3,7,101,18]) == 4', 'assert longest_increasing_subsequence([0,1,0,3,2,3]) == 4', 'assert longest_increasing_subsequence([7,7,7,7,7,7,7]) == 1']\n   }"