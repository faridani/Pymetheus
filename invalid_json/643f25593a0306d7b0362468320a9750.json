"Here's your Python coding question:\n\n{\n\"title\": \"Maximum Sum of Rectangle Submatrix (Hard)\", \n\"description\": \"Given a 2D binary matrix `matrix` where each element is either 0 or 1, write a function that returns the maximum sum of any rectangle submatrix within `matrix`. The size of the rectangle should be at least 1x1 and at most the size of the original matrix.\\n\\n#### Function Signature\\n```python\\ndef max_sum_rectangle_submatrix(matrix: List[List[int]]) -> int:\\n```\\n\\n#### Input\\n- `matrix` (List[List[int]]): A 2D binary matrix where each element is either 0 or 1.\\n\\n#### Output\\n- Returns the maximum sum of any rectangle submatrix within `matrix`.\",\n\"code\": \"\"\"\nfrom typing import List\n\ndef max_sum_rectangle_submatrix(matrix: List[List[int]]) -> int:\n    if not matrix:\n        return 0\n    \n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    prefix_sum = [[0] * (cols + 1) for _ in range(rows + 1)]\n    \n    max_sum = float('-inf')\n    \n    for i in range(1, rows + 1):\n        for j in range(1, cols + 1):\n            if matrix[i - 1][j - 1]:\n                prefix_sum[i][j] = prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1]\n            else:\n                prefix_sum[i][j] = prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1] + matrix[i - 1][j - 1]\n            \n            for k in range(i):\n                for m in range(j):\n                    max_sum = max(max_sum, prefix_sum[k][j] - prefix_sum[k][m] - prefix_sum[k + i - 1][j] + prefix_sum[k + i - 1][m])\n    \n    return max_sum\"\"\",\n\"tests\": [\"assert max_sum_rectangle_submatrix([[0, 1, 1, 0], [1, 1, 1, 0], [0, 0, 0, 1]]) == 4\", \"assert max_sum_rectangle_submatrix([[0, 1], [1, 1]]) == 2\", \"assert max_sum_rectangle_submatrix([[0], [1]]) == 1\", \"assert max_sum_rectangle_submatrix([]) == 0\"]\n}"