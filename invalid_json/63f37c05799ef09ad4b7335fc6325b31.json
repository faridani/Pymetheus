"Here is your requested Python coding question:\n\n{\"title\": \"Longest Increasing Subsequence (Hard)\", \"description\": \"Given a list of integers, write a function `longest_increasing_subsequence` that finds the length of the longest increasing subsequence.\\n\\n#### Function Signature\\n```python\\ndef longest_increasing_subsequence(nums: list[int]) -> int:\\n```\\n\\n#### Input\\n- `nums` (list[int]): A list of integers.\\n\\n#### Output\\n- Returns the length of the longest increasing subsequence in the input list.\", \"code\": \"\nimport heapq\n\ndef longest_increasing_subsequence(nums: list[int]) -> int:\n    if not nums:\n        return 0\n\n    dp = [1] * len(nums)\n    heap = [(nums[0], 0)]\n\n    for i in range(1, len(nums)):\n        while heap and heap[0][0] < nums[i]:\n            prev_val, j = heapq.heappop(heap)\n            dp[j] = i\n        if not heap or nums[i] > heap[0][0]:\n            heapq.heappush(heap, (nums[i], i))\n        else:\n            for pair in list(heap):\n                val, idx = pair\n                if val < nums[i]:\n                    pair = (nums[i], idx)\n                    break\n\n    max_length = 0\n    while heap:\n        _, idx = heapq.heappop(heap)\n        max_length = max(max_length, dp[idx] + 1)\n\n    return max_length\", \"tests\": [\"assert longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4\", \"assert longest_increasing_subsequence([]) == 0\", \"assert longest_increasing_subsequence([1]) == 1\"]}"