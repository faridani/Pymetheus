"Here is your requested problem in the given template:\n\n{\n\"title\": \"Evaluating Expressions\",\n\"description\": \"Write a function `evaluate_expression` that evaluates a mathematical expression. The input will be a string representing an expression, such as '2+3*4' or '5-1+2'. Assume the expression is valid and does not contain any variables.\\n\\n#### Function Signature\\n```python\\ndef evaluate_expression(expression: str) -> int:\\n```\\n\\n#### Input\\n- `expression` (str): A string representing a mathematical expression. The expression will consist of digits, '+', '-', '*', '/', '(', ')'.\\n\\n#### Output\\n- Returns the result of evaluating the input expression.\\n\",\n\"code\": \"\"\"\nimport re\n\ndef evaluate_expression(expression: str) -> int:\n    # Parse the expression into a list of operations and operands\n    ops = ['+', '-', '*']\n    tokens = []\n    num = ''\n    for char in expression:\n        if char.isdigit():\n            num += char\n        elif char in ops:\n            tokens.append(int(num))\n            tokens.append(char)\n            num = ''\n        elif char in '()' or char == ' ':\n            continue\n        else:\n            raise ValueError(\"Invalid character\")\n    tokens.append(int(num))\n\n    # Evaluate the expression\n    stack = []\n    for token in tokens:\n        if isinstance(token, int):\n            stack.append(token)\n        else:\n            b = stack.pop()\n            a = stack.pop()\n            if token == '+':\n                stack.append(a + b)\n            elif token == '-':\n                stack.append(a - b)\n            elif token == '*':\n                stack.append(a * b)\n\n    return stack[0]\n\"\"\",\n\"tests\": [\"assert evaluate_expression('2+3*4') == 14\", \"assert evaluate_expression('5-1+2') == 6\", \"assert evaluate_expression('(10-2)*3') == 24\", \"assert evaluate_expression('1+2*3') == 7\"]\n}"