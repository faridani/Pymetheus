"Here's an example of a hard problem that involves finding the frequency of all characters in a given string, including capital letters and punctuation marks. You can modify this to create your own problems as well.\r\n\r\n```python\r\nimport string\r\nfrom typing import Dict, Tuple\r\n\r\ndef char_frequency(s: str) -> Dict[str, int]:\r\n    \"\"\"\r\n    Returns a dictionary of character frequency in the input string s. The keys are all characters including capital letters and punctuation marks.\r\n    \"\"\"\r\n    # Remove non-alphanumeric characters from the string\r\n    s = ''.join(char for char in s if char in string.ascii_letters + string.punctuation)\r\n    # Count the frequency of each character using a dictionary comprehension\r\n    freq: Dict[str, int] = {char: s.count(char) for char in set(s)}\r\n    return freq\r\n```\r\n\r\n#### Tests\r\n```python\r\nassert char_frequency(\"hello world\") == {'h': 1, 'e': 1, 'l': 3, 'o': 2, 'w': 1, 'r': 1, 'd': 1}\r\nassert char_frequency(\"The quick brown fox jumps over the lazy dog.\") == {'t': 1, 'h': 1, 'e': 1, 'q': 1, 'u': 2, 'i': 1, 'c': 1, 'k': 1, 'b': 1, 'r': 2, 'o': 2, 'w': 1, 'n': 1, 'f': 1, 'x': 1, 'j': 1, 'm': 1, 'p': 1, 's': 1}\r\nassert char_frequency(\"This is a test. This is only a test!\") == {'t': 4, 'h': 2, 'i': 1, 's': 3, 'a': 2, 'e': 3, '.': 2, ' ': 5}\r\nassert char_frequency(\"What? Is this even a string?!\") == {'w': 1, 'h': 1, 'a': 1, 't': 1, '?': 1, 'i': 1, 's': 3, 'e': 4, 'n': 1}\r\n```\r\n\r\nThe title of the problem can be \"Character Frequency\". The description can be something like: \r\n\r\n```python\r\nWrite a function `char_frequency(s: str) -> Dict[str, int]` that returns a dictionary with keys as characters (including capital letters and punctuation marks) and values as their frequency in the input string `s`. The function should count all occurrences of each character regardless of case or punctuation marks.\r\n```\r\n\r\nThe code section is already provided above. The tests are a list of strings that test the function. "