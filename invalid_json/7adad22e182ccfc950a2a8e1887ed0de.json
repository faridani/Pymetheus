"{'title': 'Hard: Prime Factorization and LCM Calculation', 'description': 'Given two positive integers `num1` and `num2`, write a function that calculates the Least Common Multiple (LCM) of these numbers. Additionally, return a list containing the prime factors of each number.\\n\\n#### Function Signature\\n```python\\ndef calculate_lcm_and_factors(num1: int, num2: int) -> tuple:\\n    # ... function implementation ...\\n```\\n\\n#### Input\\n- `num1` (int): The first positive integer.\\n- `num2` (int): The second positive integer.\\n\\n#### Output\\n- A tuple containing two elements: \\n    1. `lcm`: The Least Common Multiple of `num1` and `num2`.\\n    2. `factors_list`: A list of tuples, where each tuple contains a prime factor and its power in the factorization of `num1` and `num2`.\\n\\n#### Constraints\\n- Both `num1` and `num2` are positive integers.\\n', 'code': 'import math\\n\\ndef calculate_lcm_and_factors(num1: int, num2: int) -> tuple:\\n    def prime_factors(n):\\n        factors = []\\n        # Handle 2 separately to avoid floating point issues with division\\n        if n % 2 == 0:\\n            power = 0\\n            while n % 2 == 0:\\n                n //= 2\\n                power += 1\\n            factors.append((2, power))\\n        # Find other prime factors\\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\\n            while n % i == 0:\\n                power = 0\\n                n //= i\\n                power += 1\\n            if power > 0: factors.append((i, power))\\n        # If n is still greater than 2, it must be prime\\n        if n > 2: factors.append((n, 1))\\n        return factors\\n\\n    # Calculate LCM using the formula: lcm(a, b) = (a * b) / gcd(a, b)\\n    def gcd(a, b):\\n        while b:\\n            a, b = b, a % b\\n        return a\\n\\n    factors1 = prime_factors(num1)\\n    factors2 = prime_factors(num2)\\n    lcm = (num1 * num2) // gcd(num1, num2)\\n    # Combine the factors and their powers from both numbers\\n    factors_list = [(factor, max(factors1[i][1], factors2[i][1])) for i, factor in enumerate(set(prime_factors(num1) + prime_factors(num2)))]\\n    return lcm, factors_list\\n', 'tests': ['assert calculate_lcm_and_factors(48, 18) == (72, [(2, 3), (3, 2), (4, 1), (6, 1), (9, 1)]),\\n        \"assert calculate_lcm_and_factors(10, 15) == (30, [(2, 1), (3, 1), (5, 1), (10, 1), (15, 1)])\",\\n        \"assert calculate_lcm_and_factors(2, 3) == (6, [(2, 1), (3, 1), (6, 1)])\"] }"