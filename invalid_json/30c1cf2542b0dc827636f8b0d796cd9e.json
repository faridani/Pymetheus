"{'title': 'Longest Common Subsequence Finder (Hard)', 'description': \"Write a function `longest_common_subsequence` that takes two strings as input and returns the longest common subsequence of these two strings. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements.\\n\\n#### Function Signature\\n```python\\ndef longest_common_subsequence(s1: str, s2: str) -> str:\\n```\\n\\n#### Input\\n- `s1` (str): The first string.\\n- `s2` (str): The second string.\\n\\n#### Output\\n- Returns the longest common subsequence of `s1` and `s2`.\\n\", 'code': \"import functools\n\ndef longest_common_subsequence(s1: str, s2: str) -> str:\n    # Create a 2D array to store the lengths of common subsequences\n    dp = [[0] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n\n    # Fill the 2D array using dynamic programming\n    for i in range(1, len(s1) + 1):\n        for j in range(1, len(s2) + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    # Backtrack to construct the longest common subsequence\n    lcs = []\n    i, j = len(s1), len(s2)\n    while i > 0 and j > 0:\n        if s1[i - 1] == s2[j - 1]:\n            lcs.append(s1[i - 1])\n            i -= 1\n            j -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Return the longest common subsequence in the correct order\n    return ''.join(reversed(lcs))\", 'tests': ['assert longest_common_subsequence(\"abcdef\", \"zbcdf\") == \"\"', 'assert longest_common_subsequence(\"abc\", \"bcd\") == \"bc\"', 'assert longest_common_subsequence(\"hello\", \"world\") == \"\"']}"