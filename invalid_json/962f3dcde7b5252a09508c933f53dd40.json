"Here is your Python coding question:\n\n{\"title\": \"Hardest to Win: Tic-Tac-Toe Solver\", \"description\": \"Write a function `solve_ttt` that takes as input the current state of a Tic-Tac-Toe game, represented as a 3x3 grid where 'X' represents X's moves, 'O' represents O's moves, and 'E' represents empty spaces. The function should return the optimal move for the next player (X or O), assuming that the opponent will make the best possible response.\n\nThe game state is given as a string in the following format: `grid = [['X', 'E', 'O'], ['E', 'O', 'X'], ['O', 'E', 'E']]`\n\n#### Function Signature\n```python\ndef solve_ttt(grid: list) -> str:\n```\n\n#### Input\n- `grid` (list): A 3x3 grid representing the current state of the game\n\n#### Output\n- Returns the optimal move for the next player as a string ('X' or 'O')\n\n\", \"code\": \"import numpy as np\\n\\ndef solve_ttt(grid: list) -> str:\\n    # Convert the grid to a NumPy array for easier manipulation\\n    board = np.array(grid)\\n    # Check if the game is already won by X or O\\n    if (board == 'X').any(axis=None): return 'O'\\n    elif (board == 'O').any(axis=None): return 'X'\\n    # Find all possible moves for X and their corresponding board states after making those moves\\n    for i in range(3):\\n        for j in range(3):\\n            if board[i, j] == 'E':\\n                temp_board = np.copy(board)\\n                temp_board[i, j] = 'X'\\n                # Check if the game is won after X's move\\n                if (temp_board == 'X').any(axis=None): return 'O'\\n    # If no winning moves are found, find all possible moves for O and their corresponding board states after making those moves\\n    for i in range(3):\\n        for j in range(3):\\n            if board[i, j] == 'E':\\n                temp_board = np.copy(board)\\n                temp_board[i, j] = 'O'\\n                # Check if the game is won after O's move\\n                if (temp_board == 'O').any(axis=None): return 'X'\\n    # If no winning moves are found for either player, make a random move\\n    import random\\n    possible_moves = [(i, j) for i in range(3) for j in range(3) if board[i, j] == 'E']\\n    optimal_move = random.choice(possible_moves)\\n    return f'X' if optimal_move[0] < 1 else 'O'\\n\", \"tests\": [\"assert solve_ttt([['X', 'E', 'O'], ['E', 'O', 'X'], ['O', 'E', 'E']]) == 'X'\", \"assert solve_ttt([['X', 'X', 'O'], ['E', 'O', 'X'], ['O', 'E', 'E']]) == 'O'\", \"assert solve_ttt([['X', 'E', 'E'], ['E', 'O', 'X'], ['O', 'E', 'E']]) == 'O'\", \"assert solve_ttt([['X', 'X', 'X'], ['O', 'O', 'O'], ['E', 'E', 'E']]) == None\"]}"