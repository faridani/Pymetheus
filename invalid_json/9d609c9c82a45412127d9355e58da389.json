"Here is your Python coding question:\n\n```json\n{\n  \"title\": \"Easy: Sudoku Solver\",\n  \"description\": \"A Sudoku solver function takes a partially filled 9x9 matrix (represented as a list of lists) as input and returns the completed grid if it is solvable. A valid solution must satisfy all the constraints of Sudoku: each number in a row, column, and box must be unique.\\n\\n#### Function Signature\\n```python\\ndef solve_sudoku(board: List[List[int]]) -> None:\\n```\\n\\n#### Input\\n- `board` (List[List[int]]): A 9x9 matrix where some cells are filled with numbers between 1 to 9 and others are empty (represented by 0). The input is valid if it follows Sudoku rules.\\n\\n#### Output\\n- Modify the given `board` in-place to represent a completed solution if one exists.\\n- If no solution exists, do nothing.\\n- You can assume that there is at most one unique solution.\\n\",\n  \"code\": \"from typing import List\\n\\ndef solve_sudoku(board: List[List[int]]) -> None:\\n    def is_valid(r, c, num):\\n        for i in range(9):\\n            if board[r][i] == num or board[i][c] == num:\\n                return False\\n        start_row, start_col = 3 * (r // 3), 3 * (c // 3)\\n        for i in range(start_row, start_row + 3):\\n            for j in range(start_col, start_col + 3):\\n                if board[i][j] == num:\\n                    return False\\n        return True\\n    \\n    def solve(board: List[List[int]]):\\n        for r in range(9):\\n            for c in range(9):\\n                if board[r][c] == 0:\\n                    for num in range(1, 10):\\n                        if is_valid(r, c, num):\\n                            board[r][c] = num\\n                            if solve(board):\\n                                return True\\n                            board[r][c] = 0\\n                    return False\\n        return True\\n    \\n    solve(board)\\n\",\n  \"tests\": [\n    \"assert solve_sudoku([[5,3,0,0,7,0,0,0,0], [6,0,0,1,9,5,0,0,0], [0,9,8,0,0,0,0,6,0], [8,0,0,0,6,0,0,0,3], [4,0,0,8,0,3,0,0,1], [7,0,0,0,2,0,0,0,6], [0,6,0,0,0,0,2,8,0], [0,0,0,4,1,9,0,0,5], [0,0,0,0,8,0,0,7,9]]) == True\",\n    \"assert solve_sudoku([[5,3,0,0,7,0,0,0,0], [6,0,0,1,9,5,0,0,0], [0,9,8,0,0,0,0,6,0], [8,0,0,0,6,0,0,0,3], [4,0,0,8,0,3,0,0,1], [7,0,0,0,2,0,0,0,6], [0,6,0,0,0,0,2,8,0], [0,0,0,4,1,9,0,0,5], [0,0,0,0,8,0,0,7,0]]) == False\"\n  ]\n}\n```\n\n**Explanation:**\n\nThe provided code defines a Sudoku solver function `solve_sudoku` that modifies the input board in-place to represent a completed solution if one exists.\n\n- The `is_valid` helper function checks whether a given number can be placed at a specific cell `(r, c)` without violating Sudoku rules.\n- The `solve` recursive function tries to place numbers from 1 to 9 in empty cells. If it finds a valid placement, it recursively attempts to solve the rest of the board. If all cells are successfully filled and no contradiction is found, the solution is complete.\n- If no number can be placed in an empty cell, the function backtracks by resetting the cell to 0 and trying the next possible number.\n\nThe two test cases check whether the `solve_sudoku` function correctly solves a Sudoku puzzle with a unique solution. The first test case represents a partially filled board that has a valid solution, while the second test case represents a board that cannot be solved (due to an incorrect initial configuration)."