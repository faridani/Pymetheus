"{\"title\": \"Hard: Palindromic Substring Search\", \"description\": \"A palindromic substring is a sequence of characters which reads the same forwards and backwards. Given a string `s`, write a function that finds and returns the longest palindromic substring in `s`. If there are multiple substrings of the same length, return any one.\\n\\n#### Function Signature\\n```python\\ndef longest_palindrome(s: str) -> str:\\n```\\n\\n#### Input\\n- `s` (str): A string consisting of lowercase English letters.\\n\\n#### Output\\n- Returns the longest palindromic substring in `s`. If no palindromic substrings are found, return an empty string.\", \"code\": \"def expand_around_center(s: str, left: int, right: int) -> str:\\n    while left >= 0 and right < len(s) and s[left] == s[right]:\\n        left -= 1\\n        right += 1\\n    return s[left + 1:right]\\n\\ndef longest_palindrome(s: str) -> str:\\n    if not s:\\n        return ''\\n    n = len(s)\\n    max_len, start_index = 0, 0\\n    for i in range(n):\\n        len1 = expand_around_center(s, i, i + 1)\\n        len2 = expand_around_center(s, i - 1, i + 1)\\n        max_len = max(len1, len2, key=len)\\n        if len(max_len) > len2:\\n            start_index = i - (len(max_len) // 2)\\n    return s[start_index:start_index + len(max_len)]\", \"tests\": ['assert longest_palindrome(\"babad\") == \"bab\"', 'assert longest_palindrome(\"cbbd\") == \"bb\"', 'assert longest_palindrome(\"a\") == \"a\"', 'assert longest_palindrome(\"\") == \"\"']}"