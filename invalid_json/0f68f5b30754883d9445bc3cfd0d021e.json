"Here is the problem you requested:\n\n{\"title\": \"Hard: Efficiently Calculating the Sum of Divisors\", \n\"description\": \"Write a function `sum_of_divisors` that takes an integer `n` as input and returns the sum of all divisors (excluding 1 and `n`) for the given number. The function should be efficient, meaning it should not have exponential time complexity.\\n\\n#### Function Signature\\n```python\\ndef sum_of_divisors(n: int) -> int:\\n```\\n\\n#### Input\\n- `n` (int): A positive integer.\\n\\n#### Output\\n- Returns the sum of all divisors (excluding 1 and `n`) for the given number.\\n\", \n\"code\": \"def sum_of_divisors(n: int) -> int:\n    def find_divisors(i):\n        return [j for j in range(2, i) if i % j == 0]\n\n    total = 0\n    for i in range(2, n):\n        if all(i % j != 0 for j in find_divisors(i)):\n            continue\n        total += i\n\n    return total\", \n\"tests\": [\"assert sum_of_divisors(28) == 60\", \"assert sum_of_divisors(36) == 84\", \"assert sum_of_divisors(10) == 18\", \"assert sum_of_divisors(15) == 24\"]}"