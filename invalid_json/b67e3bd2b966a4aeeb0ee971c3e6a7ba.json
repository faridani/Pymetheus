"{'title': 'Binary Search Tree to Greater Sum of Leaves', \n 'description': 'You are given a binary tree where each node has an integer value, and you need to find the sum of all greater values for each leaf node. For example, if we have a binary tree with root value 5, and the tree looks like this:\r\n\r\n```\r\n    5\r\n   / \\\r\n  4   7\r\n/ \\ / \\\r\n3 6 9 8\r\n```\r\n\r\nThen the sum of all greater values for each leaf node would be:\r\n\r\n- The root value (5) has no greater values, so we ignore it.\r\n- The left child of the root (4) has no greater values, so we ignore it.\r\n- The right child of the root (7) has two greater values (9 and 8).\r\n- The leaf nodes (3 and 6) have both 7 as a greater value, so we add them together to get 13.\r\n\r\nWrite a function `sum_greater(root: TreeNode) -> int` that returns the sum of all greater values for each leaf node in the tree.', \r\n 'code': \"\"\"from typing import List, Optional\r\n\r\nclass TreeNode:\r\n    def __init__(self, val=0, left=None, right=None):\r\n        self.val = val\r\n        self.left = left\r\n        self.right = right\r\n\r\ndef sum_greater(root: Optional[TreeNode]) -> int:\r\n    def helper(node: TreeNode) -> List[int]:\r\n        if not node:\r\n            return []\r\n\r\n        left = helper(node.left)\r\n        right = helper(node.right)\r\n\r\n        if not node.left and not node.right:\r\n            return [node.val]\r\n\r\n        return left + right\r\n\r\n    leaf_values = helper(root)\r\n    greater_sum = 0\r\n\r\n    for value in leaf_values:\r\n        if root.val < value:\r\n            greater_sum += value\r\n\r\n    return greater_sum\"\"\", \r\n 'tests': [\"assert sum_greater(TreeNode(5, TreeNode(4), TreeNode(7, TreeNode(3), TreeNode(6))) == 13\",\r\n          \"assert sum_greater(TreeNode(1, TreeNode(2, TreeNode(4, TreeNode(8, None, TreeNode(9)), TreeNode(5))) == 15\",\r\n          \"assert sum_greater(TreeNode(7)) == 0\"]}\r\n\r\n\"\"\"\r\nExample usage:\r\n```python\r\n# Input:\r\nroot = TreeNode(5, TreeNode(4, TreeNode(3), TreeNode(6))\r\n\r\n# Output:\r\n13 (or whatever the function returns)\r\n```\r\n\r\n#### Function Signature\r\n```python\r\nfrom typing import Optional\r\n\r\ndef sum_greater(root: Optional[TreeNode]) -> int:\r\n    pass\r\n```\r\n\r\n#### Input\r\n- `root` (`Optional[TreeNode]`): The root node of a binary search tree.\r\n\r\n#### Output\r\n- Returns the sum of all greater values for each leaf node in the tree. "