"Here is your generated python coding question:\n\n{\n\"title\": \"Hard: Minimum Window Substring\",\n\"description\": \"Given two strings `s1` and `s2`, write a function that finds the minimum window substring of `s1` that contains all characters of `s2`. The minimum window substring is the shortest possible substring of `s1` that includes all unique characters from `s2`.\n\n#### Function Signature\n```\ndef min_window_substring(s1: str, s2: str) -> str:\n```\n\n#### Input\n- `s1` (str): The string in which to find the minimum window substring.\n- `s2` (str): The string containing characters that must be included in the minimum window substring.\n\n#### Output\n- Returns the minimum window substring of `s1` that contains all unique characters from `s2`, or an empty string if no such substring exists.\n\nNote: If there are multiple minimum window substrings, return any one of them.\n\",\n\"code\": \"\nfrom collections import Counter\n\ndef min_window_substring(s1: str, s2: str) -> str:\n    if not s2 or not s1:\n        return \"\"\n\n    s2_count = Counter(s2)\n    required_chars = len(s2_count)\n\n    left = 0\n    for right in range(len(s1)):\n        if Counter({c: 1 for c in s1[right:right + len(s2)]}) == s2_count and set(s1[left:right + 1]) == set(s2):\n            return s1[left:right + 1]\n\n    return \"\"\n\",\n\"tests\": [\"assert min_window_substring('ADOBECODEBANC', 'ABC') == 'BANC'\", \"assert min_window_substring('hello', 'aeo') == ''\", \"assert min_window_substring('abcdebddefd', 'bce') == 'bdedefd'\", \"assert min_window_substring('abcdebddefd', 'ace') == 'abebfcd'\"]\n}"