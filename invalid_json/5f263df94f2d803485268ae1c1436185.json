"```json\n{\n  'title': 'Minimum Window Substring',\n  'description': 'Given two strings `s` and `t`, write a function that returns the minimum window substring of `s` containing all characters of `t`. If no such substring exists, return an empty string.\\n\\n#### Function Signature\\n```python\\ndef min_window_substring(s: str, t: str) -> str:\\n```\\n\\n#### Input\\n- `s` (str): The string to search in.\\n- `t` (str): The string containing the characters to find in `s`.\\n\\n#### Output\\n- A minimum window substring of `s` that contains all characters of `t`. If no such substring exists, return an empty string.\\n',\n  'code': \"from collections import Counter\\n\\ndef min_window_substring(s: str, t: str) -> str:\\n    # Count the frequency of characters in string t\\n    t_count = Counter(t)\\n    # Initialize the minimum window substring and its length\\n    min_window = \\\"]\\\"]\\n    min_len = float('inf')\\n\\n    # Iterate over all possible substrings of s\\n    for i in range(len(s)):\\n        # Initialize a counter for the current substring\\n        count = Counter()\\n\\n        # Extend the counter to include characters from the current substring\\n        for j in range(i, len(s)):\\n            count[s[j]] += 1\\n\\n            # If the current substring contains all characters of t, update the minimum window substring\\n            if all(count[char] >= t_count[char] for char in t_count):\\n                # Update the minimum window substring and its length\\n                min_window = s[i:j+1]\\n                min_len = min(min_len, j - i + 1)\\n                break\\n    \\n    # Return the minimum window substring or an empty string if no such substring exists\\n    return min_window\",\n  'tests': [\n      \"assert min_window_substring('ADOBECODEBANC', 'ABC') == 'BANC'\",\n      \"assert min_window_substring('a', 'b') == ''\",\n      \"assert min_window_substring('ab', 'b') == 'b'\",\n      \"assert min_window_substring('abc', 'd') == ''\"\n  ]\n}\n```"