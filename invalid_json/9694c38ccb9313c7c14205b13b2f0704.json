"Here's a hard python coding question for you:\n\n{'title': 'Minimum Window Substring', 'description': 'Given two strings `s` and `t`, find the minimum window of characters that appears in `t` which is also present in `s`. The search is case-sensitive.\\n\\n#### Function Signature\\n```python\\ndef min_window_substring(s: str, t: str) -> str:\\n```\\n\\n#### Input\\n- `s` (str): A string containing the characters that may appear in the minimum window.\\n- `t` (str): A string containing the target substring to be found.\\n\\n#### Output\\n- Returns the minimum window of characters from `s` that also appears in `t`. If no such window exists, return an empty string.', 'code': \"from collections import defaultdict\\n\\ndef min_window_substring(s: str, t: str) -> str:\\n    # Base case\\n    if not t or len(t) > len(s):\\n        return \\\"\\\"\\n\\n    # Create a dictionary to store the frequency of characters in `t`\\n    t_freq = defaultdict(int)\\n    for char in t:\\n        t_freq[char] += 1\\n\\n    # Initialize variables to keep track of the minimum window\\n    min_window = \\\"\\\"\\n    min_len = float('inf')\\n    required_chars = len(t_freq)\\n    formed_chars = 0\\n\\n    # Create a dictionary to store the frequency of characters in the current window\\n    window_freq = defaultdict(int)\\n\\n    # Initialize variables for the sliding window\\n    left = 0\\n    right = 0\\n\\n    # Expand the window to the right\\n    while right < len(s):\\n        char = s[right]\\n        window_freq[char] += 1\\n\\n        # If the current character is in `t`, increment the formed_chars count\\n        if char in t_freq and window_freq[char] <= t_freq[char]:\\n            formed_chars += 1\\n\\n        # While the window contains all characters in `t` and the left pointer is not at the start of the window\\n        while formed_chars == required_chars and left <= right:\\n            char = s[left]\\n            window_freq[char] -= 1\\n\\n            # If the current character is in `t`, decrement the formed_chars count\\n            if char in t_freq and window_freq[char] < t_freq[char]:\\n                formed_chars -= 1\\n\\n            # Update the minimum window if the current window is smaller\\n            if right - left + 1 < min_len:\\n                min_window = s[left:right+1]\\n                min_len = right - left + 1\\n\\n            # Move the left pointer to the right\\n            left += 1\\n\\n        # Move the right pointer to the right\\n        right += 1\\n\\n    return min_window\", 'tests': [\"assert min_window_substring('ADOBECODEBA Najdsjc', 'ABC\") == 'ABC'\", \"assert min_window_substring('a', 'aa\") == '', \"assert min_window_substring('', '') == ''\"]}"