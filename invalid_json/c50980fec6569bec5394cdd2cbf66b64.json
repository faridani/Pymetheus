"Here's the problem:\n\n{\n\"title\": \"Hard: Valid Parentheses Checker\",\n\"description\": \"Write a function `is_valid_parentheses` that takes a string of parentheses as input and returns whether the parentheses are valid. The string will only contain characters '(', ')', '[', ']', '{', and '}'. A set of parentheses is considered valid if every opening parenthesis has a corresponding closing parenthesis, and vice versa.\\n\\n#### Function Signature\\n```python\\ndef is_valid_parentheses(s: str) -> bool:\\n```\\n\\n#### Input\\n- `s` (str): A string that may contain characters '(', ')', '[', ']', '{', and '}'.\\n\\n#### Output\\n- Returns `True` if the input string contains valid parentheses, `False` otherwise.\\n\",\n\"code\": \"\"\"\ndef is_valid_parentheses(s: str) -> bool:\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n\n    for char in s:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or mapping[char] != stack.pop():\n                return False\n    return not stack\n\n\"\"\",\n\"tests\": [\"assert is_valid_parentheses(\"\"(1+2))\" == True\", \"assert is_valid_parentheses(\"(\") == False\", \"assert is_valid_parentheses(\"{([])}\") == True\", \"assert is_valid_parentheses(\"[{)}]\"}\") == False\"]\n}"