"Here's your super hard Python coding question:\n\n```\n{\n    \"title\": \"Hard: Finding the Shortest Path in a Maze\",\n    \"description\": \"Imagine you are given a 2D grid of size `n x m` where each cell represents a space in a maze. The maze has some paths and some walls marked by 'P' for path and '#' for wall, respectively. Your task is to write a function that finds the shortest path from the top-left corner `(0, 0)` to the bottom-right corner `(n-1, m-1)`. You can move either horizontally or vertically to adjacent cells, but you cannot go through walls.\\n\\n#### Function Signature\\n```python\\ndef find_shortest_path(maze: list[list[str]]) -> list[tuple[int, int]]:\\n```\\n\\n#### Input\\n- `maze` (list[list[str]]): A 2D grid of size `n x m`, where each cell is either 'P' for a path or '#' for a wall.\\n\\n#### Output\\n- Returns the shortest path from the top-left corner `(0, 0)` to the bottom-right corner `(n-1, m-1)` as a list of coordinates (x, y) in the format `[(x1, y1), (x2, y2), ..., (xn, yn)]`.\\n\",\n    \"code\": \"\"\"\nfrom collections import deque\n\ndef find_shortest_path(maze: list[list[str]]) -> list[tuple[int, int]]:\n    n, m = len(maze), len(maze[0])\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    queue = deque([(0, 0)])\n    visited = {(0, 0)}\n    path = []\n\n    while queue:\n        x, y = queue.popleft()\n        if x == n-1 and y == m-1:\n            return [(n-1, m-1)] + list(reversed(path))\n        \n        for dx, dy in directions:\n            nx, ny = x+dx, y+dy\n            if (0 <= nx < n) and (0 <= ny < m) and maze[nx][ny] == 'P' and (nx, ny) not in visited:\n                queue.append((nx, ny))\n                visited.add((nx, ny))\n                path.append((nx, ny))\n\n    return []\n    \"\"\",\n    \"tests\": [\n        \"assert find_shortest_path([['P', '#'], ['P', 'P']]) == [(0, 0), (1, 0)]\",\n        \"assert find_shortest_path([['P', 'P', 'P'], ['P', '#', 'P'], ['P', 'P', 'P']]) == [(0, 0), (0, 1), (0, 2), (1, 2)]\",\n        \"assert find_shortest_path([['#', '#', '#'], ['#', 'P', '#'], ['#', '#', '#']]) == []\"\n    ]\n}\n```"