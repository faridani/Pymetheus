"Here is a hard-level Python coding challenge for you:\n\n```json\n{\n    \"title\": \"Reverse String with K-Shifts (Hard)\",\n    \"description\": \"Given a string `s` and an integer `k`, write a function `reverse_string_with_k_shifts` that reverses the characters in the string while shifting each character by `k` positions. The function should return the new reversed string.\\n\\n#### Function Signature\\n```python\\ndef reverse_string_with_k_shifts(s: str, k: int) -> str:\\n```\\n\\n#### Input\\n- `s` (str): A string containing characters to be reversed and shifted.\\n- `k` (int): An integer indicating the number of positions to shift each character.\\n\\n#### Output\\n- Returns (str): The new string with characters reversed and shifted by `k` positions.\\n\\n#### Constraints\\n- `1 <= s.length <= 10^5`\\n- `0 <= k < s.length`\\n\\n#### Hint\\nYou can use Python's built-in `reversed` function to reverse the string, but you will need to shift each character by `k` positions.\\n\",\n    \"code\": \"def reverse_string_with_k_shifts(s: str, k: int) -> str:\\n    # Initialize an empty list to store the reversed and shifted characters\\n    reversed_s = []\\n    \\n    # Iterate through each character in the input string\\n    for char in s:\\n        # Calculate the new position by adding k to the current index\\n        new_pos = len(reversed_s) + k\\n        \\n        # Append the character to the reversed string at the new position\\n        reversed_s.insert(new_pos, char)\\n    \\n    # Return the reversed and shifted string\\n    return ''.join(reversed_s)\",\n    \"tests\": [\\n        'assert reverse_string_with_k_shifts(\\\"hello\\\", 1) == \\\"olleh\\\"\\',\\n        'assert reverse_string_with_k_shifts(\\\"world\\\", 2) == \\\"dlrow\\\"\\',\\n        'assert reverse_string_with_k_shifts(\\\"python\\\", 3) == \\\"nocpyt\\\"\\',\\n        'assert reverse_string_with_k_shifts(\\\"aabbcc\\\", 1) == \\\"cabbba\\\"\\',\\n    ]\\n}\"\n```\n\n### Title: Reverse String with K-Shifts (Hard)\n\n### Description: \n\nGiven a string `s` and an integer `k`, write a function `reverse_string_with_k_shifts` that reverses the characters in the string while shifting each character by `k` positions. The function should return the new reversed string.\n\n#### Function Signature: \n```python\ndef reverse_string_with_k_shifts(s: str, k: int) -> str:\n```\n\n#### Input: \n- `s` (str): A string containing characters to be reversed and shifted.\n- `k` (int): An integer indicating the number of positions to shift each character.\n\n#### Output: \n- Returns (str): The new string with characters reversed and shifted by `k` positions.\n\n#### Constraints: \n- `1 <= s.length <= 10^5`\n- `0 <= k < s.length`\n\n#### Hint: \nYou can use Python's built-in `reversed` function to reverse the string, but you will need to shift each character by `k` positions.\n\n### Code: \n\n```python\ndef reverse_string_with_k_shifts(s: str, k: int) -> str:\n    # Initialize an empty list to store the reversed and shifted characters\n    reversed_s = []\n\n    # Iterate through each character in the input string\n    for char in s:\n        # Calculate the new position by adding k to the current index\n        new_pos = len(reversed_s) + k\n\n        # Append the character to the reversed string at the new position\n        reversed_s.insert(new_pos, char)\n\n    # Return the reversed and shifted string\n    return ''.join(reversed_s)\n```\n\n### Tests: \n- `assert reverse_string_with_k_shifts(\"hello\", 1) == \"olleh\"`\n- `assert reverse_string_with_k_shifts(\"world\", 2) == \"dlrow\"`\n- `assert reverse_string_with_k_shifts(\"python\", 3) == \"nocpyt\"`\n- `assert reverse_string_with_k_shifts(\"aabbcc\", 1) == \"cabbba\"`"