"Here's your new Python coding question:\n\n{\"title\": \"Hard: Binary Tree Zigzag Level Order Traversal\", \"description\": \"Given a binary tree, write a function to traverse the tree in zigzag level order. The output should be a list of lists where each sublist represents a level and contains nodes from that level.\\n\\n#### Function Signature\\n```python\\ndef zigzag_traversal(root: TreeNode) -> List[List[int]]:\\n```\\n\\n#### Input\\n- `root` (TreeNode): The root node of the binary tree.\\n\\n#### Output\\n- Returns a list of lists where each sublist represents a level and contains nodes from that level.\", \"code\": \"\nimport collections\n\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef zigzag_traversal(root: TreeNode) -> List[List[int]]:\n    if not root:\n        return []\n\n    result = []\n    queue = collections.deque([(root, 0)])\n\n    while queue:\n        level = []\n        for _ in range(len(queue)):\n            node, level_num = queue.popleft()\n            level.append(node.val)\n\n            if node.left:\n                queue.append((node.left, level_num + 1))\n            if node.right:\n                queue.append((node.right, level_num + 1))\n\n        result.append(level)\n\n    return [level for level in result[:: -1] if level]\n\n\", \"tests\": [\"assert zigzag_traversal(TreeNode(3, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7)))) == [[3], [20, 9], [15, 7]]\", \"assert zigzag_traversal(None) == []\"]}"