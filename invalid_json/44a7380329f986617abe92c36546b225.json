"Here's a new Python coding question for you:\n\n{\"title\": \"Minimum Window Substring\", \"description\": \"Given two strings `s1` and `s2`, find the minimum window substring of `s1` that contains all characters of `s2`. If no such window exists, return an empty string. The window should be returned in its original order in `s1`.\n\n#### Function Signature\n```\ndef min_window_substring(s1: str, s2: str) -> str:\n```\n\n#### Input\n- `s1` (str): A string that may contain letters, numbers, spaces, and punctuation.\n- `s2` (str): A string that contains characters to be found in `s1`.\n\n#### Output\n- Returns the minimum window substring of `s1` that contains all characters of `s2`, or an empty string if no such window exists.\n\n\", \"code\": \"\nimport collections\n\ndef min_window_substring(s1: str, s2: str) -> str:\n    if not s2 or len(s2) > len(s1):\n        return ''\n\n    from collections import Counter\n    s1_count = Counter(s1)\n    s2_count = Counter(s2)\n\n    for i in range(len(s1) - len(s2) + 1):\n        window_count = Counter(s1[i:i+len(s2)])\n        if window_count >= s2_count:\n            return s1[i:i+len(s2)]\n\n    return ''\n\", \"tests\": [\"assert min_window_substring('ADOBECODEBANC', 'ABC') == 'BANC'\", \"assert min_window_substring('hello', 'll') == 'll'\", \"assert min_window_substring('', 'abc') == ''\", \"assert min_window_substring('abcde', 'cd') == 'cde'\"]}"