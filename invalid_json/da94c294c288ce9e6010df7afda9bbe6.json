"Here is the Python coding question:\n\n{\"title\": \"Maximum Path Sum in Binary Tree (Hard)\", \n\"description\": \"Given a binary tree where each node has an integer value, find the maximum path sum that starts at any node and goes down to any leaf. A path can only go down from a given node to its children or up to its parent.\\n\\n#### Function Signature\\n```python\\ndef max_path_sum(root: TreeNode) -> int:\\n```\\n\\n#### Input\\n- `root` (TreeNode): The root of the binary tree.\\n\\n#### Output\\n- Returns the maximum path sum that starts at any node and goes down to any leaf.\\n\", \n\"code\": \"\"\"\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef max_path_sum(root: TreeNode) -> int:\n    if root is None:\n        return 0\n    \n    # Calculate the maximum path sum for each node\n    memo = {}\n    \n    def dfs(node: TreeNode) -> int:\n        if node in memo:\n            return memo[node]\n        \n        left_sum = right_sum = 0\n        \n        if node.left:\n            left_sum = max(0, dfs(node.left))\n        if node.right:\n            right_sum = max(0, dfs(node.right))\n        \n        # Update the maximum path sum for the current node\n        memo[node] = node.val + max(left_sum, right_sum)\n        \n        return memo[node]\n    \n    # Find the maximum path sum among all nodes\n    max_sum = 0\n    \n    def traverse(node: TreeNode) -> None:\n        nonlocal max_sum\n        \n        if node is None:\n            return\n        \n        left_sum = dfs(node.left)\n        right_sum = dfs(node.right)\n        \n        max_sum = max(max_sum, left_sum + right_sum + node.val)\n        \n        traverse(node.left)\n        traverse(node.right)\n    \n    traverse(root)\n    \n    return max_sum\n\"\"\", \n\"tests\": [\"assert max_path_sum(TreeNode(1)) == 1\", \"assert max_path_sum(TreeNode(2, TreeNode(3), TreeNode(4))) == 6\", \"assert max_path_sum(None) == 0\"]}"