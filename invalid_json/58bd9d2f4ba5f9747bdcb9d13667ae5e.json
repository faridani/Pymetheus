"```json\n{'title': 'Hard: Lexicographical Order of Permutations', 'description': 'Given a string containing unique characters, find the lexicographically smallest permutation of the string that satisfies the following condition:\\n\\n- The first and last characters of the permutation must be different.\\n\\n#### Function Signature\\n```python\\ndef smallest_permutation(s: str) -> str:\\n```\\n\\n#### Input\\n- `s` (str): A string containing unique characters.\\n\\n#### Output\\n- Returns the lexicographically smallest permutation of the string that satisfies the given condition. If no such permutation exists, return an empty string.', 'code': \"def smallest_permutation(s: str) -> str:\\n    if len(s) <= 2:\\n        return s\\n    s = sorted(s)\\n    for i in range(len(s) - 1):\\n        if s[i] != s[i+1]:\\n            return ''.join(s[:i + 1]) + ''.join(s[i + 1:])\\n    return ''\", 'tests': ['assert smallest_permutation(\"cba\") == \"acb\"', 'assert smallest_permutation(\"abc\") == \"bac\"', 'assert smallest_permutation(\"abcd\") == \"badc\"', 'assert smallest_permutation(\"a\") == \"a\"']}\n```"