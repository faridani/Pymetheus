" {\n    \"title\": \"Anagram Checker (Hard)\",\n    \"description\": \"Given two strings, determine if they are anagrams of each other. An anagram is a word or phrase that is formed by rearranging the letters of another word or phrase, using all the original letters exactly once. If the input strings have different numbers of characters, they cannot be anagrams.\\n\\n#### Function Signature\\n```python\\ndef are_anagrams(a: str, b: str) -> bool:\\n```\\n\\n#### Input\\n- `a`, `b` (str): Two strings containing only lowercase alphabetic characters and with the same length.\\n\\n#### Output\\n- Returns `True` if the input strings are anagrams, `False` otherwise.\\n\",\n    \"code\": \"def are_anagrams(a: str, b: str) -> bool:\\n    # If the strings have different lengths, they cannot be anagrams\\n    if len(a) != len(b):\\n        return False\\n    # Create a dictionary to count the frequency of each letter in the first string\\n    freq = {char: a.count(char) for char in set(a)}\\n    # Decrease the count of each letter in the second string by one, and if a letter is not found, the strings cannot be anagrams\\n    for char in b:\\n        if char not in freq:\\n            return False\\n        freq[char] -= 1\\n    # If all letters have been accounted for and their counts are zero, the strings are anagrams\\n    return all(freq.values()) == 0\",\n    \"tests\": [\n        'assert are_anagrams(\"listen\", \"silent\") == True',\n        'assert are_anagrams(\"love\", \"evil\") == False',\n        'assert are_anagrams(\"hello\", \"olleh\") == True'\n    ]\n}"