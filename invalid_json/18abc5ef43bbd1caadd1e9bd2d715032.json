"Here's your next challenge:\n\n{\"title\": \"Hard: Validating Sudoku Boards\", \"description\": \"A Sudoku board consists of a 9x9 grid, divided into nine 3x3 sub-grids or 'regions'. Some regions may contain numbers, while others are blank. Write a function `validate_sudoku` that takes a list of lists representing the Sudoku board and checks if it is valid. A valid Sudoku board has the following properties:\\n\\n- Each row contains the integers from 1 to 9 without repetition.\\n- Each column contains the integers from 1 to 9 without repetition.\\n- Each region (3x3 sub-grid) contains the integers from 1 to 9 without repetition.\\n\\n#### Function Signature\\n```python\\ndef validate_sudoku(board: list[list[int]]) -> bool:\\n```\\n\\n#### Input\\n- `board` (list[list[int]]): A 9x9 grid representing a Sudoku board. The grid contains integers ranging from 0 to 9, where 0 represents an empty cell.\\n\\n#### Output\\n- Returns `True` if the input Sudoku board is valid, `False` otherwise.\", \"code\": \"from typing import List\n\ndef validate_sudoku(board: List[List[int]]) -> bool:\n    # Check each row\n    for row in board:\n        seen = set()\n        for num in row:\n            if num not in range(1, 10):\n                return False\n            if num in seen:\n                return False\n            seen.add(num)\n\n    # Check each column\n    for col in zip(*board):\n        seen = set()\n        for num in col:\n            if num not in range(1, 10):\n                return False\n            if num in seen:\n                return False\n            seen.add(num)\n\n    # Check each region (3x3 sub-grid)\n    for i in range(0, 9, 3):\n        for j in range(0, 9, 3):\n            seen = set()\n            for k in range(i, i+3):\n                for num in board[k][j:j+3]:\n                    if num not in range(1, 10):\n                        return False\n                    if num in seen:\n                        return False\n                    seen.add(num)\n\n    return True\", \"tests\": [\"assert validate_sudoku([[5,3,4,6,7,8,9,1,2], [6,7,8,9,1,2,3,4,5], [1,9,8,3,4,2,5,6,7], [8,5,3,4,2,6,7,9,1], [4,2,6,7,9,5,3,1,8], [3,1,8,5,6,4,2,7,9], [2,4,9,7,5,3,6,8,1], [9,6,1,3,5,7,4,2,8], [7,8,2,1,9,4,3,6,5]]) == True\", \"assert validate_sudoku([[1,2,3], [4,5,6], [7,8,9]]) == True\", \"assert validate_sudoku([[0, 0, 0, 0, 0, 0, 0, 0, 0]]) == False\", \"assert validate_sudoku([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24], [25, 26, 27]]) == False\"]}"