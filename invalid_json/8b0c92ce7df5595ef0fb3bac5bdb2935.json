"```json\n{'title': 'Hard: Word Ladder Solver', 'description': 'Given two words, beginWord and endWord, and a wordList of valid English words, find the shortest transformation sequence from beginWord to endWord such that:\\n\\n* Only one letter can be changed at a time.\\n* Each transformed word must exist in the given wordList.\n\nReturn the length of the shortest transformation sequence, or 0 if no such transformation sequence exists.\n\n#### Function Signature\n```python\ndef ladderLength(beginWord: str, endWord: str, wordList: list[str]) -> int:\n```\n\n#### Input\n- `beginWord` (str): The starting word.\n- `endWord` (str): The target word.\n- `wordList` (list[str]): A list of valid English words.\n\n#### Output\n- Returns the length of the shortest transformation sequence, or 0 if no such sequence exists.\n', 'code': \"from collections import deque\\n\\ndef ladderLength(beginWord: str, endWord: str, wordList: list[str]) -> int:\\n    if endWord not in wordList:\\n        return 0\\n\\n    wordList = set(wordList)\\n    queue = deque([(beginWord, 1)])\\n    visited = {beginWord}\\n\\n    while queue:\\n        current_word, level = queue.popleft()\\n\\n        for i in range(len(current_word)):\\n            for ch in 'abcdefghijklmnopqrstuvwxyz':\\n                new_word = current_word[:i] + ch + current_word[i+1:]\\n                if new_word == endWord:\\n                    return level + 1\\n                if new_word in wordList and new_word not in visited:\\n                    queue.append((new_word, level + 1))\\n                    visited.add(new_word)\\n    \\n    return 0\\n\", 'tests': ['assert ladderLength(\"hit\",\"cog\",[\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]) == 5', 'assert ladderLength(\"hit\",\"cog\",[\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]) == 0']}\n\n\n\n```"