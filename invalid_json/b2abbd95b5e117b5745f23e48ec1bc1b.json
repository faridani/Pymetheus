"```json\n{\n  \"title\": \"Medium: Find the City with the Smallest Distance\",\n  \"description\": \"Given a 2D array `dist` representing distances between cities, write a function to find the city with the smallest distance from any other city. The distance matrix is symmetric and non-negative.\\n\\n#### Function Signature\\ndef find_smallest_distance_city(dist: List[List[int]], start: str) -> str:\\n\",\n  \"code\": \"from collections import deque\\nimport heapq\\n\\ndef find_smallest_distance_city(dist: List[List[int]], start: str) -> str:\\n    n = len(dist)\\n    # Priority queue to store (distance, city) pairs\\n    pq = [(0, start)]\\n    visited = set()\\n\\n    while pq:\\n        dist_from_start, current_city = heapq.heappop(pq)\\n        if current_city in visited:\\n            continue\\n        visited.add(current_city)\\n        # Check all other cities\\n        for next_city, weight in enumerate(dist[current_city]):\\n            if weight != 0 and next_city not in visited:\\n                heapq.heappush(pq, (dist[current_city][next_city], next_city))\\n    # Find the city with the smallest distance from any other city\\n    min_distance = float('inf')\\n    closest_city = None\\n    for i in range(n):\\n        if i != int(start) and dist[int(start)][i] < min_distance:\\n            min_distance = dist[int(start)][i]\\n            closest_city = chr(97 + i)\\n    return closest_city\\n\",\n  \"tests\": [\"find_smallest_distance_city([[1, 4, 3], [5, 2, 6], [7, 8, 0]], 'A') == 'C'\\n         , \\\"\\\"\\\"\\n         find_smallest_distance_city([\\n            [1, 9, 3],\\n            [5, 2, 6],\\n            [7, 8, 4]\\n         ], 'B') == 'A'\\n         \\\"\\\"\\\", \\\"\\\"\\\"\\n        ]\n}\n```"