" {\n    \"title\": \"Hard: N-Queens Problem\",\n    \"description\": \"The N-Queens problem involves placing N queens on an N\u00d7N chessboard such that no two queens threaten each other. Write a recursive function `solve_nqueens` that solves the N-Queens problem for any given size of the chessboard.\\n\\n#### Function Signature\\n```python\\ndef solve_nqueens(N: int) -> List[List[str]]:\\n```\\n\\n#### Input\\n- `N` (int): The size of the chessboard. N must be greater than 0.\\n\\n#### Output\\n- Returns a list of all possible solutions to the N-Queens problem, where each solution is represented as a list of strings. In each string, 'Q' denotes a queen and '.' denotes an empty space.\",\n    \"code\": \"\"\"def solve_nqueens(N: int) -> List[List[str]]:\n    def can_place(pos, ocuppied_rows):\n        for i in range(ocuppied_rows):\n            if board[i] == pos or \\\n                board[i] - i == pos - ocuppied_rows or \\\n                board[i] + i == pos + ocuppied_rows:\n                    return False\n        return True\n\n    def place_queen(n, ocuppied_rows):\n        for row in range(n):\n            if can_place(row, ocuppied_rows):\n                board[ocuppied_rows] = row\n                if ocuppied_rows == n - 1:\n                    add_solution()\n                else:\n                    place_queen(n, ocuppied_rows + 1)\n\n    def add_solution():\n        nonlocal solutions\n        solution = []\n        for i in range(N):\n            row = ['.' * N]\n            row[0][board[i]] = 'Q'\n            solution.append(''.join(row))\n        solutions.append(solution)\n\n    board = [-1] * N\n    solutions = []\n    place_queen(N, 0)\n    return solutions\"\"\",\n    \"tests\": [\"assert len(solve_nqueens(4)) == 2\", \"assert len(solve_nqueens(8)) == 92\"]\n}"