" {\n       \"title\": \"Hard: Longest Common Subsequence\",\n       \"description\": \"Given two strings `text1` and `text2`, find the length of the longest common subsequence between them. A subsequence of a string is a new string generated from the original string by deleting some characters without changing their relative order. For example, 'ace' is a subsequence of 'abcde' while 'aec' is not.\\n\\n#### Function Signature\\n```python\\ndef longest_common_subsequence(text1: str, text2: str) -> int:\\n```\\n\\n#### Input\\n- `text1` (str): A string of lowercase English characters.\\n- `text2` (str): A string of lowercase English characters.\\n\\n#### Output\\n- Returns the length of the longest common subsequence between `text1` and `text2`.\\n\",\n       \"code\": \"\"\"def longest_common_subsequence(text1: str, text2: str) -> int:\n    dp = [[0] * (len(text2) + 1) for _ in range(len(text1) + 1)]\n    for i in range(len(text1) - 1, -1, -1):\n        for j in range(len(text2) - 1, -1, -1):\n            if text1[i] == text2[j]:\n                dp[i][j] = 1 + dp[i+1][j+1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j+1])\n    return dp[0][0]\"\"\",\n       \"tests\": [\n           'assert longest_common_subsequence(\"abcde\", \"ace\") == 3',\n           'assert longest_common_subsequence(\"abc\", \"def\") == 0',\n           'assert longest_common_subsequence(\"abc\", \"acf\") == 2'\n       ]\n   }"