"{'title': 'Maximum Length Subarray with Given Difference (Medium)', 'description': 'Given an array of integers and a difference, find the maximum length subarray where the sum of elements at each index is equal to the given difference.\\n\\n#### Function Signature\\n```python\\ndef max_subarray_with_diff(arr: list[int], diff: int) -> tuple[list[int], int]:\\n```\\n\\n#### Input\\n- `arr` (list[int]): A list of integers where each integer represents a sum of elements at some index in the array.\\n- `diff` (int): The given difference for which we need to find the maximum length subarray.\\n\\n#### Output\\n- Returns a tuple containing the maximum length subarray and its length. If no such subarray exists, return an empty list and 0 respectively.\\n', 'code': \"from typing import List, Tuple\\n\\ndef max_subarray_with_diff(arr: List[int], diff: int) -> Tuple[List[int], int]:\\n    \\n    n = len(arr)\\n    prefix_sum = [0] * (n + 1)\\n    for i in range(n):\\n        prefix_sum[i + 1] = prefix_sum[i] + arr[i]\\n\\n    max_length = 0\\n    max_subarray = []\\n    for i in range(n):\\n        for j in range(i, n):\\n            if prefix_sum[j + 1] - prefix_sum[i] == diff:\\n                current_length = j - i + 1\\n                if current_length > max_length:\\n                    max_length = current_length\\n                    max_subarray = arr[i:j+1]\\n    return max_subarray, max_length\\n\", 'tests': ['assert max_subarray_with_diff([4, 8, 12, 16], 8) == ([4, 8, 12, 16], 4)', \"assert max_subarray_with_diff([1, 2, 3, 4, 5], 0) == ([], 0)\", 'assert max_subarray_with_diff([-1, -2, -3, -4, -5], 3) == ([-1, -2, -3], 3)', \"assert max_subarray_with_diff([10, 20, 30, 40, 50], 60) == ([], 0)\", 'assert max_subarray_with_diff([5, 7, 9, 11, 13], 4) == ([-1], 1)']}"