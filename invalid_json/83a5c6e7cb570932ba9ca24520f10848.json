"Here is the python coding question:\n\n```json\n{\n    \"title\": \"Medium: Prime Factorization\",\n    \"description\": \"Prime factorization of a number is the process of breaking down a composite number into its prime factors. Write a function `prime_factors` that takes an integer `n` as input and returns a list of its prime factors in ascending order.\\n\\n#### Function Signature\\n```python\\ndef prime_factors(n: int) -> List[int]:\\n```\\n\\n#### Input\\n- `n` (int): A positive integer greater than 1.\\n\\n#### Output\\n- Returns a list of integers that are the prime factors of `n`, in ascending order.\\n\",\n    \"code\": \"def prime_factors(n: int) -> List[int]:\\n    factors = []\\n    # Check for divisibility by 2 first, then odd numbers starting from 3\\n    for i in range(2, n + 1):\\n        while n % i == 0:\\n            factors.append(i)\\n            n //= i\\n    return sorted(factors)\",\n    \"tests\": [\n        'assert prime_factors(12) == [2, 2, 3]',\n        'assert prime_factors(15) == [3, 5]',\n        'assert prime_factors(20) == [2, 2, 5]',\n        'assert prime_factors(37) == [37]'\n    ]\n}\n```\n\nThe function `prime_factors` takes an integer `n` as input and returns a list of its prime factors. The function first checks for divisibility by 2, then odd numbers starting from 3, and so on. If `n` is divisible by the current number `i`, it appends `i` to the list `factors` and updates `n` to `n // i`. This process continues until `n` becomes 1. Finally, the function returns the sorted list of prime factors."