"\nI understand, here's a new creative python question for you:\n\n**Title:** Reverse Linked List\n\n**Description:** Write a function that takes a linked list as input and reverses it. The linked list is represented by a sequence of nodes, where each node has a value and a next node. The function should return the reversed linked list as a new sequence of nodes.\n\n**Function Signature:** `def reverse_linked_list(head: Node) -> Node:`\n\n**Input:** A pointer to the head node of a linked list.\n\n**Output:** A pointer to the head node of the reversed linked list.\n\n**Hint:** You can use recursion or iterative approach to solve this problem.\n\nHere's an example of how you could implement the function using recursion:\n```python\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\ndef reverse_linked_list(head):\n    if not head:\n        return None\n    rev_head = reverse_linked_list(head.next)\n    head.next = rev_head\n    head.value = head.next.value\n    return head\n```\nNow, here are some test cases to check the function's correctness:\n```python\ntests = [\n    (\"\", \"\"),  # Test empty list\n    (\"A\", \"A\"),  # Test single node list\n    (\"ABC\", \"CBA\"),  # Test list with multiple nodes\n    (\"\", \"\"),  # Test empty list after reversal\n]\n```\nPlease write the function code in the `code` section, and provide the tests in the `tests` section."