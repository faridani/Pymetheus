"Here's a hard Python coding question for you:\n\n{\n    \"title\": \"Hard: Maximum Sum of Subsequence with Distinct Elements\",\n    \"description\": \"Write a function `max_sum_of_distinct_subsequence` that takes a list of integers as input and returns the maximum sum of a subsequence that contains exactly one element from each distinct value in the original sequence.\\n\\n#### Function Signature\\n```python\\ndef max_sum_of_distinct_subsequence(seq: list[int]) -> int:\\n```\\n\\n#### Input\\n- `seq` (list[int]): A list of integers.\\n\\n#### Output\\n- Returns the maximum sum of a subsequence that contains exactly one element from each distinct value in the original sequence.\\n\",\n    \"code\": \"\"\"\nfrom typing import List, Dict\n\ndef max_sum_of_distinct_subsequence(seq: List[int]) -> int:\n    # Calculate the frequency of each element\n    freq: Dict[int, int] = {}\n    for num in seq:\n        if num not in freq:\n            freq[num] = 1\n        else:\n            freq[num] += 1\n\n    # Sort the elements by their frequencies and values\n    sorted_freq: List[tuple] = sorted(freq.items(), key=lambda x: (x[1], -x[0]))\n\n    # Calculate the maximum sum of a subsequence with distinct elements\n    max_sum: int = 0\n    for i, (num, count) in enumerate(sorted_freq):\n        max_sum += num * (count - 2 ** i)\n\n    return max_sum\n\"\"\",\n    \"tests\": [\n        \"assert max_sum_of_distinct_subsequence([1, 3, 5, 4]) == 9\",\n        \"assert max_sum_of_distinct_subsequence([-10, 0, 10, 20]) == 30\",\n        \"assert max_sum_of_distinct_subsequence([1, -2, 3, 4, 5, 6, 7]) == 13\"\n    ]\n}"