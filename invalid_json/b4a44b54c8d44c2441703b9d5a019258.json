" {\n    \"title\": \"'Palindrome Index Calculator (Medium)'\",\n    \"description\": \"Write a function `palindrome_index` that calculates the Palindrome Index for a given string. The Palindrome Index is the probability that a given string is a palindrome, or in other words, how close the string is to being a palindrome.\\n\\nThe calculation of the Palindrome Index is based on the following formula:\\n- If the length of the string is 1, then the index is 1.\\n- For strings with more than one character, calculate the number of characters that are not in their matching position when reversed. This number will be half the total number of mismatched characters because the first character can't match its reverse position and also we are considering only odd length palindromes.\\n- Finally, divide this count by the length of the string minus one to get the index.\\n\\n#### Function Signature\\n```python\\ndef palindrome_index(s: str) -> float:\\n```\\n\\n#### Input\\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\\n\\n#### Output\\n- Returns the Palindrome Index as a float in the range [0.0, 1.0] where:\\n   - 0.0 indicates the string is not a palindrome at all,\\n   - 1.0 indicates the string is an exact palindrome.\\n\",\n    \"code\": \"def palindrome_index(s: str) -> float:\\n    # Convert to lowercase\\n    s = s.lower()\\n    # Remove non-alphanumeric characters\\n    s = ''.join(char for char in s if char in string.ascii_letters + string.digits)\\n    # If the length of the string is 1, return 1\\n    if len(s) == 1:\\n        return 1.0\\n    # Calculate the number of mismatched characters\\n    count = sum([s[i] != s[-(i+1)] for i in range(len(s)//2)])\\n    # Return the Palindrome Index\\n    return count / (len(s)-1)\",\n    \"tests\": [\"assert palindrome_index('A man, a plan, a canal, Panama') == 0.6\", \"assert palindrome_index('racecar') == 1.0\", \"assert palindrome_index('hello') == 0.0\", \"assert palindrome_index('No \\'x\\' in Nixon') == 0.4\"]\n   }"