"Here's a medium-level Python coding question for you:\n\n**Title: Valid Parentheses II**\n**Difficulty:** Medium\n```json\n{\n  \"title\": \"Valid Parentheses II\",\n  \"description\": \"A valid parenthesis sequence is one where every open parenthesis has a corresponding closed parenthesis.\nWrite a function `is_valid_parentheses` that takes a string of parentheses as input and returns True if the sequence is valid, False otherwise.\nThe string may contain '(', ')', '[', ']', '{', '}' characters only.\n\n#### Function Signature\n```python\ndef is_valid_parentheses(s: str) -> bool:\n```\n\n#### Input\n- `s` (str): A string of parentheses that may be empty or contain '(', ')', '[', ']', '{', '}' characters only\n\n#### Output\n- Returns True if the input string has a valid parenthesis sequence, False otherwise\n\",\n  \"code\": \"\nimport re\n\ndef is_valid_parentheses(s: str) -> bool:\n    # Use regular expression to match all parentheses that are not in pairs\n    if re.search(r'\\[([^]]\\])|({[^}]\\})', s):\n        return False\n    \n    # Check for unmatched '(' and '{'\n    if s.count('(') != s.count(')') or s.count('{') != s.count('}'):\n        return False\n    \n    # If all checks pass, the sequence is valid\n    return True\",\n  \"tests\": [\n      'assert not is_valid_parentheses(\"([)]\")',\n      'assert not is_valid_parentheses(\"{[}]\")',\n      'assert is_valid_parentheses(\"\")',\n      'assert is_valid_parentheses(\"(())\")',\n      'assert is_valid_parentheses(\"[()]\")'\n  ]\n}\n```"