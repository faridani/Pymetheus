"Here is your requested problem:\n\n```\n{\n    \"title\": \"Closest Pair of Numbers (Medium)\",\n    \"description\": \"Given an unsorted array of unique integers, write a function that returns the closest pair of numbers where one number is twice the other. If no such pair exists, return (-1, -1).\\n\\n#### Function Signature\\n```\\ndef closest_pair(nums: list[int]) -> tuple[int]:\\n```\\n\\n#### Input\\n- `nums` (list[int]): A list of unique integers.\\n\\n#### Output\\n- Returns a tuple containing the closest pair of numbers. If no such pair exists, returns (-1, -1).\\n\",\n    \"code\": \"\"\"\nimport math\n\ndef closest_pair(nums: list[int]) -> tuple[int]:\n    if len(nums) < 2:\n        return (-1, -1)\n    \n    min_diff = float('inf')\n    closest_pair = (-1, -1)\n\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            diff = abs(nums[i] - (nums[j] // 2 * 2))\n            if diff < min_diff:\n                min_diff = diff\n                closest_pair = (nums[i], nums[j] // 2 * 2)\n\n    return closest_pair\n\"\"\",\n    \"tests\": [\n        \"assert closest_pair([3, 6, 1, 2, 4]) == (2, 4)\",\n        \"assert closest_pair([-1, -2, -3, -4, -5, -10]) == (-5, -10)\",\n        \"assert closest_pair([1, 2, 4, 8, 16]) == (8, 16)\",\n        \"assert closest_pair([]) == (-1, -1)\",\n        \"assert closest_pair([5]) == (-1, -1)\"\n    ]\n}\n```"