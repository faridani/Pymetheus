"Here's your requested Python coding problem:\n\n\n```json\n{\n    'title': 'Minimum Window Substring',\n    'description': 'Given two strings `s` and `t`, find the minimum window that covers all characters of `t`.\nA sub-string is valid if it contains each character in `t` at least once.\nWrite a function `minimum_window_substring` that returns the minimum window substring or an empty string if no such window exists.\\n\\n#### Function Signature\\n```python\ndef minimum_window_substring(s: str, t: str) -> str:\n```\n\n#### Input\\n- `s` (str): The source string.\n- `t` (str): The target string containing all unique characters that must be covered by the minimum window substring.\\n\\n#### Output\\n- Returns the minimum window substring or an empty string if no such window exists.',\n    'code': \"from collections import Counter\n\ndef minimum_window_substring(s: str, t: str) -> str:\n    if not s or not t:\n        return ''\n\n    s_count = Counter(s)\n    t_count = Counter(t)\n\n    # Find the total number of unique characters in `t`\n    required_chars = len(t_count)\n\n    # Check if all characters in `t` are present in `s`\n    for char, count in t_count.items():\n        if count > s_count[char]:\n            return ''\n\n    min_window = ''\n    min_len = float('inf')\n\n    left = 0\n\n    for right in range(len(s)):\n        # Add the character at the current right pointer to the window\n        s_count[s[right]] += 1\n\n        # Shrink the window from the left until it contains all required characters\n        while (s_count[char] >= t_count[char] for char in t_count):\n            if right - left + 1 < min_len:\n                min_len = right - left + 1\n                min_window = s[left:right+1]\n\n            # Remove the character at the current left pointer from the window\n            s_count[s[left]] -= 1\n\n            # Move the left pointer to the next position\n            left += 1\n\n    return min_window\",\n    'tests': [\n        \"assert minimum_window_substring('ADOBECODEBANC', 'ABC') == 'BANC'\",\n        \"assert minimum_window_substring('a', 'aa') == ''\",\n        \"assert minimum_window_substring('', 'abc') == ''\",\n        \"assert minimum_window_substring('ab', 'b') == 'b'\"\n    ]\n}\n```"