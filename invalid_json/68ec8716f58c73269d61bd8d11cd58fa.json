" {\n       \"title\": \"[Medium] Anagram Checker\",\n       \"description\": \"Given two strings, write a function to determine if the second string is an anagram of the first. An anagram is a word, phrase, or name formed by rearranging the letters of another, such as 'cinema' formed from 'iceman'.\\n\\n#### Function Signature\\n```python\\ndef is_anagram(s1: str, s2: str) -> bool:\\n```\\n\\n#### Input\\n- `s1` (str): The first string to check.\\n- `s2` (str): The second string to check.\\n\\n#### Output\\n- Returns `True` if the second string is an anagram of the first, `False` otherwise.\",\n       \"code\": \"\"\"def is_anagram(s1: str, s2: str) -> bool:\n           # Remove spaces and convert to lowercase\n           s1 = s1.replace(' ', '').lower()\n           s2 = s2.replace(' ', '').lower()\n\n           # Check if lengths are equal\n           if len(s1) != len(s2):\n               return False\n\n           # Count characters in both strings\n           count = {}\n           for char in s1:\n               if char in count:\n                   count[char] += 1\n               else:\n                   count[char] = 1\n\n           for char in s2:\n               if char in count:\n                   count[char] -= 1\n               else:\n                   return False\n\n           # Check if all counts are zero\n           for k in count:\n               if count[k] != 0:\n                   return False\n\n           return True\"\"\",\n       \"tests\": [\"assert is_anagram('cinema', 'iceman') == True\", \"assert is_anagram('hello', 'world') == False\", \"assert is_anagram('Dormitory', 'Dirty Room') == True\", \"assert is_anagram('Astronomer', 'Moon starer') == True\"]\n   }"