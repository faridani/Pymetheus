"Here's your new Python coding question:\n\n{\"title\": \"Graph Connectivity Checker\", \"description\": \"Given a graph represented as an adjacency list, write a function to check if the graph is connected.\\n\\n#### Function Signature\\n```python\\ndef is_connected(graph: dict) -> bool:\\n```\\n\\n#### Input\\n- `graph` (dict): A dictionary representing the graph where each key is a node and its corresponding value is a list of neighboring nodes.\\n\\n#### Output\\n- Returns `True` if the graph is connected, `False` otherwise.\", \"code\": \"import collections\\n\\ndef is_connected(graph: dict) -> bool:\\n    visited = set()\\n    dfs_stack = collections.deque([next(iter(graph))])\\n    while dfs_stack:\\n        node = dfs_stack.pop()\\n        if node not in visited:\\n            visited.add(node)\\n            dfs_stack.extend(neighbor for neighbor in graph.get(node, []) if neighbor not in visited)\\n    return len(visited) == len(graph)\\n\", \"tests\": [\"assert is_connected({}) == False\", \"assert is_connected({'A': ['B', 'C'], 'B': ['A', 'D'], 'C': ['A', 'F'], 'D': ['B'], 'E': [], 'F': ['C']}) == True\", \"assert is_connected({'A': ['B', 'C'], 'B': ['A', 'D'], 'C': ['A'], 'D': ['B'], 'E': []}) == False\", \"assert is_connected({'A': ['B', 'C'], 'B': ['A', 'D'], 'C': ['A', 'F'], 'D': ['B'], 'E': [], 'F': ['C'], 'G': ['H']}) == True\"]}"