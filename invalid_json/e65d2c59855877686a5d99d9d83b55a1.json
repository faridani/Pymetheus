"Here is a new Python coding question:\n\n{\n    \"title\": \"Sudoku Validator (Hard)\",\n    \"description\": \"Write a function `validate_sudoku` that takes as input a 2D list of integers representing a Sudoku board. The function should check if the given Sudoku board is valid according to the standard rules of Sudoku.\n\nThe function signature is as follows:\n```\ndef validate_sudoku(board: List[List[int]]) -> bool:\n```\n\n#### Input\n- `board` (List[List[int]]): A 2D list of integers representing a Sudoku board. The board has 9 rows and 9 columns, with some cells containing values from 1 to 9 and others being empty (represented by the integer 0).\n\n#### Output\n- Returns `True` if the input Sudoku board is valid, `False` otherwise.\n\nA Sudoku board is considered valid if each row, column, and 3x3 sub-grid contains the numbers 1 through 9 without repetition.\n\n#### Constraints\nThe function should be able to handle any valid Sudoku board. You can assume that the input board will always have exactly 9 rows and 9 columns, but you do not know which values are present in each cell.\n\nHint: You may find it helpful to use a set to keep track of the unique values in each row, column, and sub-grid.\n```\n\", \"code\": \"\nimport copy\n\ndef validate_sudoku(board):\n    # Check rows\n    for row in board:\n        row_set = set()\n        for num in row:\n            if num == 0:\n                continue\n            if num not in row_set:\n                row_set.add(num)\n            else:\n                return False\n\n    # Check columns\n    for col_idx in range(9):\n        column_set = set()\n        for row in board:\n            num = row[col_idx]\n            if num == 0:\n                continue\n            if num not in column_set:\n                column_set.add(num)\n            else:\n                return False\n\n    # Check 3x3 sub-grids\n    for start_row in range(0, 9, 3):\n        for start_col in range(0, 9, 3):\n            sub_grid_set = set()\n            for row_idx in range(start_row, start_row + 3):\n                for col_idx in range(start_col, start_col + 3):\n                    num = board[row_idx][col_idx]\n                    if num == 0:\n                        continue\n                    if num not in sub_grid_set:\n                        sub_grid_set.add(num)\n                    else:\n                        return False\n\n    return True\n\", \"tests\": [\"assert validate_sudoku([[5,3,4,6,7,8,9,1,2],[6,7,8,9,1,2,3,4,5]]) == True\", \"assert validate_sudoku([[1,2,3,4,5,6,7,8,9],[9,8,7,6,5,4,3,2,1]]) == True\", \"assert validate_sudoku([[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]]) == False\"]}"