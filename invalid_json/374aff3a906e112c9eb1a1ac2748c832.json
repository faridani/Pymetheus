"```json\n{\n  \"title\": \"Dynamic Programming: Longest Increasing Subsequence with Constraints (Hard)\",\n  \"description\": \"Given an array of integers, find the length of the longest subsequence such that all elements of the subsequence are sorted in increasing order and each element is divisible by a given integer `k`. Implement a function `longest_increasing_subsequence` to solve this problem using dynamic programming.\\n\\n#### Function Signature\\n```python\\ndef longest_increasing_subsequence(arr: List[int], k: int) -> int:\\n```\\n\\n#### Input\\n- `arr` (List[int]): A list of integers.\\n- `k` (int): An integer divisor constraint, where each element in the subsequence must be divisible by `k`.\\n\\n#### Output\\n- Returns an integer representing the length of the longest increasing subsequence satisfying the divisibility condition.\\n\\n#### Constraints\\n- The length of `arr` is between 1 and 1000.\\n- Each element in `arr` is a positive integer between 1 and 10^6.\\n- `k` is a positive integer between 1 and 1000.\\n\\n#### Example\\nFor the array `[3, 5, 10, 20, 2, 8]` with `k = 2`, the longest increasing subsequence where each element is divisible by `2` is `[2, 8]`, so the function should return `2`.\\n\\n#### Hints\\n- Consider using dynamic programming to solve this problem efficiently.\\n- You might want to maintain an array that keeps track of the length of the longest subsequence ending at each index which satisfies both conditions.\",\n  \"code\": \"from typing import List\\n\\ndef longest_increasing_subsequence(arr: List[int], k: int) -> int:\\n    n = len(arr)\\n    # Create a list to store the maximum length of increasing subsequences ending at each position\\n    dp = [1] * n\\n    \\n    for i in range(n):\\n        if arr[i] % k != 0:\\n            continue\\n        for j in range(i):\\n            if arr[j] < arr[i] and arr[j] % k == 0:\\n                dp[i] = max(dp[i], dp[j] + 1)\\n    \\n    return max(dp) if any(x % k == 0 for x in arr) else 0\\n\",\n  \"tests\": [\n    'assert longest_increasing_subsequence([3, 5, 10, 20, 2, 8], 2) == 2',\n    'assert longest_increasing_subsequence([1, 2, 4, 8], 2) == 4',\n    'assert longest_increasing_subsequence([7, 14, 28, 56, 112], 7) == 5',\n    'assert longest_increasing_subsequence([9, 6, 3, 12, 24, 48], 3) == 4',\n    'assert longest_increasing_subsequence([1, 2, 3, 4, 5], 10) == 0'\n  ]\n}\n```"