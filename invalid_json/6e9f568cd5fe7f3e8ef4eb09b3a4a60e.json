"{'title': 'Longest Uncommon Subsequence', 'description': 'Given two strings, find the length of their longest uncommon subsequence. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Two sequences have different uncommon subsequences if one cannot be obtained from the other by removing any number of characters from it. For example, \"abc\" and \"abcef\" have different uncommon subsequences, but \"acb\" and \"abcf\" don\\'t.\\n\\n#### Function Signature\\n```python\\ndef longest_uncommon_subsequence(s1: str, s2: str) -> int:\\n```\\n\\n#### Input\\n- `s1`, `s2` (str): Two strings to compare.\\n\\n#### Output\\n- Returns the length of their longest uncommon subsequence. If they have no uncommon subsequences, return 0.\\n', 'code': \"from collections import Counter\\ndef longest_uncommon_subsequence(s1: str, s2: str) -> int:\\n    # Get the frequency count of each character in both strings\\n    c1 = Counter(s1)\\n    c2 = Counter(s2)\\n    # Calculate the intersection of the two counts\\n    intersection = c1 & c2\\n    # Calculate the difference between their counts\\n    diff1, diff2 = dict(c1 - intersection), dict(c2 - intersection)\\n    # Get the maximum count from each dictionary\\n    max_diff = max(max(diff1.values()) if diff1 else 0, max(diff2.values()) if diff2 else 0)\\n    return len(s1) + len(s2) - (max_diff * 2)\\n\", 'tests': ['assert longest_uncommon_subsequence(\"abc\", \"def\") == 3', 'assert longest_uncommon_subsequence(\"abcd\", \"efgh\") == 4', 'assert longest_uncommon_subsequence(\"hello\", \"world\") == 7']} "