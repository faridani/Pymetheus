"Here's a new question:\n\n{'title': 'Longest Increasing Subsequence (Easy)', 'description': 'A subsequence of a string is a sequence that can be derived from the original string by deleting some characters without changing the order of the remaining characters.\\n\\nWrite a function `longest_increasing_subsequence` that finds the longest increasing subsequence in a given string. The subsequence should only contain unique characters and be sorted in ascending order.', 'code': \"def longest_increasing_subsequence(s: str) -> str:\\n    # Initialize a list to store the longest increasing subsequences for each prefix of the input string\\n    dp = [\"\" for _ in range(len(s))]\\n\\n    # Initialize the maximum length of the longest increasing subsequence and its ending index\\n    max_length = 0\\n    end_index = -1\\n\\n    # Iterate over the input string from left to right\\n    for i in range(len(s)):\\n        # For each prefix, try to extend the longest increasing subsequences of its prefixes\\n        for j in range(i):\\n            if s[j] < s[i]:\\n                # If a longer subsequence is found, update dp[i] and the maximum length\\n                if len(dp[j]) + 1 > max_length:\\n                    end_index = i\\n                    max_length = len(dp[j]) + 1\\n                    dp[i] = dp[j] + s[i]\\n        # If no longer subsequence is found, set dp[i] to the current character\\n        else:\\n            dp[i] = s[i]\\n    # Return the longest increasing subsequence\\n    return dp[end_index]\", 'tests': ['assert longest_increasing_subsequence(\"abc\") == \"abc\"', 'assert longest_increasing_subsequence(\"bac\") == \"abc\"', 'assert longest_increasing_subsequence(\"cbad\") == \"bad\"']}"