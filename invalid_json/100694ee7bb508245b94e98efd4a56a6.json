"Here is your requested hard python coding question:\n\n```\n{\n    \"title\": \"Hard: Maximum Sum of an Increasing Subsequence\",\n    \"description\": \"An increasing subsequence is a sequence of distinct elements where each element is greater than the previous one. Write a function `max_sum_is` that finds the maximum sum of any increasing subsequence within a given list of integers.\\n\\n#### Function Signature\\n```\\ndef max_sum_is(nums: List[int]) -> int:\\n```\\n\\n#### Input\\n- `nums` (List[int]): A list of integers where each integer may be positive, negative or zero.\\n\\n#### Output\\n- Returns the maximum sum of any increasing subsequence within the input list.\",\n    \"code\": \"\"\"\nimport heapq\n\ndef max_sum_is(nums):\n    if not nums:\n        return 0\n\n    dp = [num for num in nums]\n    pq = []\n\n    for num in nums:\n        while pq and pq[0] < num:\n            heapq.heappop(pq)\n        heapq.heappush(pq, -num)\n\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for _ in range(len(nums)):\n        curr_sum += -heapq.heappop(pq)\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n\n    return max_sum\"\"\",\n    \"tests\": [\"assert max_sum_is([1, 2, 3, 4, 5]) == 15\", \"assert max_sum_is([-2, -3, 1, -2, -1]) == 1\", \"assert max_sum_is([0, 0, 1, 0, 0, 1]) == 2\", \"assert max_sum_is([]) == 0\"]\n}"