"{'title': 'Easy Python String Manipulation: Find the Length of the Shortest Substring with Unique Characters', 'description': 'Given a string `s` and an integer `length`, write a function that returns the length of the shortest substring within `s` that contains at least `length` unique characters.\\n\\n#### Function Signature\\n```python\\ndef shortest_substring_length(s: str, length: int) -> int:\\n```\\n\\n#### Input\\n- `s` (str): The input string. It can contain any characters including spaces and punctuation.\\n- `length` (int): The minimum number of unique characters required in the substring.\\n\\n#### Output\\n- Returns the length of the shortest substring with at least `length` unique characters, or -1 if no such substring exists.\\n', 'code': \"def shortest_substring_length(s: str, length: int) -> int:\\n    # Initialize variables to keep track of the minimum length and the current window\\n    min_length = float('inf')\\n    start = 0\\n    char_index_map = {}\\n\\n    for end in range(len(s)):\\n        # Add the current character to the map\\n        right_char = s[end]\\n        if right_char not in char_index_map:\\n            char_index_map[right_char] = end\\n        else:\\n            start = max(start, char_index_map[right_char] + 1)\\n\\n        # Update the minimum length if we have found a valid substring\\n        while len(char_index_map) >= length and start <= end:\\n            min_length = min(min_length, end - start + 1)\\n            left_char = s[start]\\n            del char_index_map[left_char]\\n            start += 1\\n    return int(min_length) if min_length != float('inf') else -1\", 'tests': ['assert shortest_substring_length(\"abcde\", 3) == 3', 'assert shortest_substring_length(\"abcda\", 2) == 2', 'assert shortest_substring_length(\"abcdefgh\", 4) == 4', 'assert shortest_substring_length(\"abcde\", 5) == -1']}"