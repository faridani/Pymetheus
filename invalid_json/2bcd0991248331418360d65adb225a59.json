"Here's your super hard python coding question:\n\n{\n\"title\": \"Hard: Minimum Window Substring\",\n\"description\": \"Given two strings `s1` and `s2`, write a function that finds the minimum window substring of `s1` that contains all characters from `s2`. If no such window exists, return an empty string.\\n\\n#### Function Signature\\n```python\\ndef min_window_substring(s1: str, s2: str) -> str:\\n```\\n\\n#### Input\\n- `s1` (str): The original string to search for the minimum window substring.\\n- `s2` (str): The string that contains all characters that must be present in the minimum window substring.\\n\\n#### Output\\n- Returns the minimum window substring of `s1` that contains all characters from `s2`, or an empty string if no such window exists.\",\n\"code\": \"\"\"\nimport collections\n\ndef min_window_substring(s1: str, s2: str) -> str:\n    if not s1 or not s2:\n        return \"\"\n\n    char_count = collections.Counter(s2)\n    required_chars = len(char_count)\n\n    left = 0\n    right = 0\n    formed_chars = 0\n\n    window_counts = collections.defaultdict(int)\n\n    min_length = float('inf')\n    min_window = \"\"\n\n    while right < len(s1):\n        character = s1[right]\n        window_counts[character] += 1\n\n        if character in char_count and window_counts[character] == char_count[character]:\n            formed_chars += 1\n\n        while left <= right and formed_chars == required_chars:\n            character = s1[left]\n\n            if right - left + 1 < min_length:\n                min_length = right - left + 1\n                min_window = s1[left:right + 1]\n\n            window_counts[character] -= 1\n            if character in char_count and window_counts[character] < char_count[character]:\n                formed_chars -= 1\n\n            left += 1\n\n        right += 1\n\n    return min_window,\n\"\"\", \"tests\": [\"assert min_window_substring(\"abc\", \"b\") == 'b'\", \"assert min_window_substring(\"abc\", \"bc\") == 'bc'\", \"assert min_window_substring(\"abcdz\", \"cd\") == 'cd'\", \"assert min_window_substring(\"\", \"\") == ''\"]}"