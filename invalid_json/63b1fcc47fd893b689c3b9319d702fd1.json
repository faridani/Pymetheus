"Here's your Python coding question:\n\n{\"title\": \"Hard: Maximum Sum of Divisors\", \n\"description\": \"Given a positive integer `n`, find the maximum sum of divisors that can be obtained by selecting some or all of the numbers from 1 to `n`.\\n\\n#### Function Signature\\n```python\\ndef max_sum_of_divisors(n: int) -> int:\\n```\\n\\n#### Input\\n- `n` (int): A positive integer.\\n\\n#### Output\\n- Returns an integer representing the maximum sum of divisors that can be obtained by selecting some or all of the numbers from 1 to `n`.\", \n\"code\": \"import math\\n\\ndef max_sum_of_divisors(n: int) -> int:\\n    # Initialize the maximum sum with 0.\\n    max_sum = 0\\n    for i in range(1, n + 1):\\n        # Calculate the sum of divisors for each number from 1 to `n`\\n        divisor_sum = 0\\n        for j in range(1, math.isqrt(i) + 1):\\n            if i % j == 0:\\n                divisor_sum += j\\n        max_sum = max(max_sum, i + divisor_sum)\\n    return max_sum\\n\", \n\"tests\": [\"assert max_sum_of_divisors(10) == 18\", \"assert max_sum_of_divisors(100) == 251\", \"assert max_sum_of_divisors(2000) == 4063\"]}\n\nThis problem is hard because it involves iterating over numbers from 1 to `n`, and for each number, calculating the sum of its divisors. The maximum sum is then determined by comparing the sums for all numbers."