"Here is the Python coding question for you:\n\n{\"title\": \"Sudoku Solver (Hard)\", \"description\": \"Write a function `solve_sudoku` that takes a partially filled-in Sudoku grid and attempts to assign values to all unassigned locations on the grid so that it becomes a valid solution. The input grid will be in string form with zeros representing empty cells.\\n\\n#### Function Signature\\n```python\\ndef solve_sudoku(grid: str) -> bool:\\n```\\n\\n#### Input\\n- `grid` (str): A partially filled-in Sudoku grid represented as a 9x9 grid of characters, where each cell is one of the following:\\n\\t* '0' represents an empty cell.\\n\\t* Any digit from '1' to '9' represents a value that has been assigned to that cell.\\n\\n#### Output\\n- Returns `True` if the input grid can be solved and all unassigned locations on the grid have a valid assignment, `False` otherwise.\", \"code\": \"import re\n\ndef solve_sudoku(grid: str) -> bool:\n    def is_valid(board, row, col, num):\n        for x in range(9):\n            if board[row][x] == str(num):\n                return False\n        for x in range(9):\n            if board[x][col] == str(num):\n                return False\n        start_row = row - row % 3\n        start_col = col - col % 3\n        for i in range(3):\n            for j in range(3):\n                if board[i + start_row][j + start_col] == str(num):\n                    return False\n        return True\n\n    def solve(board):\n        for i in range(9):\n            for j in range(9):\n                if board[i][j] == '0':\n                    for num in range(1, 10):\n                        if is_valid(board, i, j, num):\n                            board[i][j] = str(num)\n                            if solve(board):\n                                return True\n                            board[i][j] = '0'\n                    return False\n        return True\n\n    # Convert the grid string to a 2D array of characters\n    board = [[char for char in re.findall(r'\\d|0', grid[i*9:(i+1)*9])] for i in range(9)]\n    \n    if solve(board):\n        return True\n    else:\n        return False\n\n\", \"tests\": [\"assert solve_sudoku('002000008006600000005005000003000007009090700040004001070080030060300000') == True\", \"assert solve_sudoku('020000800600660000050500000301000070900700400040010710080030060300000') == False\"]}"