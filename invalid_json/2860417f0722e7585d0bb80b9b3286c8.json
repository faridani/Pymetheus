"\nHere is a medium python coding question for you:\n\nTitle: Reverse Linked List\n\nDescription: Write a function `reverse_ll` that takes a linked list as input and returns the reversed linked list. The function should not allocate any new memory, only manipulate the existing nodes of the linked list. The function should accept a list of integers as input and return a list of integers as output.\n\nFunction Signature:\n```python\ndef reverse_ll(ll: List[int]) -> List[int]\n```\nInput: A list of integers in linked list form, where each integer is represented by a Node object with `val` attribute containing the integer value and `next` attribute containing the reference to the next node in the list.\n\nOutput: A list of integers in reversed linked list form, where each integer is represented by a Node object with `val` attribute containing the integer value and `next` attribute containing the reference to the previous node in the list.\n\nConstraints:\n\n* The input list will contain at least one node.\n* The input list will not contain any null nodes (i.e., nodes with `next` attribute set to None).\n* The output list will contain the same number of nodes as the input list, but in reversed order.\n\nHere is a sample test case:\n```python\nassert reverse_ll([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\n```\nAnd here is the function code:\n```python\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\ndef reverse_ll(ll):\n    current = None\n    previous = None\n    for node in ll:\n        if current is None:\n            current = node\n        elif previous is not None:\n            previous.next = node\n        previous = node\n    return current\n```\nPlease note that the above code may have some typos or errors, it's just a sample and you can modify it as per your need. Also, I expect you to write the test cases for the function yourself."