"Here is a hard Python coding question:\n\n```json\n{\n    \"title\": \"Hard: Find the Longest Palindromic Substring\",\n    \"description\": \"Given a string `s`, return the longest palindromic substring. A palindrome is a string that reads the same backward as forward, ignoring spaces, punctuation and capitalization.\\n\\n#### Function Signature\\n```python\\ndef longest_palindrome(s: str) -> str:\\n```\\n\\n#### Input\\n- `s` (str): A string containing English letters (lowercase or uppercase).\\n\\n#### Output\\n- Returns the longest palindromic substring in the input string, as a string.\\n\\n#### Constraints\\n- 1 <= s.length <= 1000\\n\\n#### Example\\nFor the given input string `\\\"babad\\\"\", the function should return `\\\"bab\\\"` or `\\\"aba\\\"`, since both are palindromic and they are the longest ones in this case.\",\n    \"code\": \"def longest_palindrome(s: str) -> str:\\n    def is_palindrome_range(i, j):\\n        while i >= 0 and j < len(s) and s[i].lower() == s[j].lower():\\n            i -= 1\\n            j += 1\\n        return s[i+1:j]\\n    longest = \\\"\\\"\\n    for i in range(len(s)):\\n        # Check odd length palindromes\\n        temp = is_palindrome_range(i, i)\\n        if len(temp) > len(longest):\\n            longest = temp\\n        # Check even length palindromes\\n        temp = is_palindrome_range(i, i+1)\\n        if len(temp) > len(longest):\\n            longest = temp\\n    return longest\",\n    \"tests\": [\n        'assert longest_palindrome(\\\"babad\\\") in (\\\"bab\\\", \\\"aba\\\")',\n        'assert longest_palindrome(\\\"cbbd\\\") == \\\"bb\\\"',\n        'assert longest_palindrome(\\\"racecar\\\") == \\\"racecar\"',\n        'assert longest_palindrome(\\\"abccccdd\\\") == \\\"ccc\\\"'\n    ]\n}\n```\n\nThe function signature for the solution is `def longest_palindrome(s: str) -> str:`. The function takes in a string and returns the longest palindromic substring found within it."