"Here is a hard Python coding question for you:\n\n{\"title\": \"Number of Ways to Partition an Array\", \"description\": \"Write a function `partition_ways` that takes a list of integers as input and returns the number of ways to partition this array into two parts such that the sum of elements in each part is equal. For example, if the input is `[1, 2, 3, 4]`, there are 2 ways to partition it: `[1, 1, 2] + [3, 4]` and `[1, 2] + [1, 3, 4]`. If it's not possible to partition the array in this way, return `0`.\n\n#### Function Signature\n```python\ndef partition_ways(arr: list[int]) -> int:\n```\n\n#### Input\n- `arr` (list[int]): A list of integers.\n\n#### Output\n- Returns the number of ways to partition the input array into two parts with equal sum.\n\nNote that this problem requires dynamic programming and/or memoization to solve efficiently. Good luck!\", \"code\": \"\ndef partition_ways(arr: list[int]) -> int:\n    n = len(arr)\n    total_sum = sum(arr)\n\n    if total_sum % 2 != 0:\n        return 0\n\n    target_sum = total_sum // 2\n    dp = [False] * (target_sum + 1)\n    dp[0] = True\n\n    for num in arr:\n        for i in range(target_sum, num - 1, -1):\n            if dp[i - num]:\n                dp[i] = True\n\n    return sum(1 for x in dp if x)\n\", \"tests\": [\"assert partition_ways([1, 2, 3, 4]) == 2\", \"assert partition_ways([1, 1, 1, 1]) == 15\", \"assert partition_ways([1, 1, 2]) == 0\", \"assert partition_ways([]) == 1\"]}"