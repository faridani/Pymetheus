"{\n    'title': 'Subsequence Checker (Hard)',\n    'description': 'Given two strings, `s` and `t`, check if `t` can be obtained by removing characters from `s` without changing the order of the remaining characters. In other words, find out if `t` is a subsequence of `s`.\\n\\n#### Function Signature\\n```python\\ndef is_subsequence(s: str, t: str) -> bool:\\n```\\n\\n#### Input\\n- `s` (str): The source string from which characters are removed.\\n- `t` (str): The target string that should be formed by removing characters from `s`.\\n\\n#### Output\\n- Returns `True` if `t` can be obtained as a subsequence of `s`, `False` otherwise.\\n',\n    'code': '''python\ndef is_subsequence(s: str, t: str) -> bool:\n    \"\"\"\n    Checks if t can be obtained by removing characters from s without changing the order.\n\n    Args:\n        s (str): The source string.\n        t (str): The target string.\n\n    Returns:\n        bool: True if t is a subsequence of s, False otherwise.\n    \"\"\"\n    # Check if the length of t is less than or equal to the length of s\n    if len(t) > len(s):\n        return False\n\n    # Initialize a dictionary to store the index of each character in t\n    char_index = {}\n\n    # Fill the dictionary with initial values\n    for i, char in enumerate(s):\n        char_index[char] = i\n\n    # Iterate through the characters in t\n    for char in t:\n        # If the character is not found in the dictionary, return False\n        if char not in char_index or char_index[char] >= len(s):\n            return False\n\n        # Update the index of the character in the dictionary\n        char_index[char] += 1\n\n    # If all characters in t are subsequences of s, return True\n    return True\n''',\n    'tests': [\n        'assert is_subsequence(\"abc\", \"ab\") == True',\n        'assert is_subsequence(\"abc\", \"ac\") == True',\n        'assert is_subsequence(\"abc\", \"acbd\") == False',\n        'assert is_subsequence(\"abc\", \"bcd\") == False'\n    ]\n}"