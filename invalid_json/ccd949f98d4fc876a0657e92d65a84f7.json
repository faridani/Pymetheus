"Here's an insanely difficult Python coding question for you:\n\n```\n{\n    \"title\": \"Hard: Tree Traversals\",\n    \"description\": \"Given a binary tree, implement three functions: `pre_order`, `in_order`, and `post_order`. These functions should recursively traverse the tree in their respective order (pre-order, in-order, and post-order). The traversals should visit each node's value. If a node has no left child or right child, the traversal function should skip over it. For example:\\n\\n#### Pre-Order Traversal Example\\n```python\\ndef pre_order(node: Node) -> None:\\n    if node is not None:\\n        print(node.val)\\n        pre_order(node.left)\\n        pre_order(node.right)\\n```\\n\\n#### Function Signature\\n```python\\ndef tree_traversals(root_node: Node) -> (list, list, list):\\n```\\n\\n#### Input\\n- `root_node` (Node): The root node of a binary tree.\\n\\n#### Output\\n- A tuple containing three lists. The first list represents the pre-order traversal, the second list represents the in-order traversal, and the third list represents the post-order traversal. Each list contains the values of the nodes visited during the respective traversal.\",\n    \"code\": \"\"\"\nclass Node:\n    def __init__(self, val: int):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef tree_traversals(root_node: Node) -> (list, list, list):\n    if root_node is None:\n        return [], [], []\n\n    pre_order_values = []\n    in_order_values = []\n    post_order_values = []\n\n    def pre_order(node: Node) -> None:\n        if node is not None:\n            pre_order_values.append(node.val)\n            pre_order(node.left)\n            pre_order(node.right)\n\n    def in_order(node: Node) -> None:\n        if node is not None:\n            in_order(node.left)\n            in_order_values.append(node.val)\n            in_order(node.right)\n\n    def post_order(node: Node) -> None:\n        if node is not None:\n            post_order(node.left)\n            post_order(node.right)\n            post_order_values.append(node.val)\n\n    pre_order(root_node)\n    in_order(root_node)\n    post_order(root_node)\n\n    return pre_order_values, in_order_values, post_order_values\n\"\"\",\n    \"tests\": [\n        \"assert tree_traversals(None) == ([], [], [])\",\n        \"assert tree_traversals(Node(1)) == ([1], [1], [])\",\n        \"assert tree_traversals(Node(1, Node(2), None)) == ([1, 2], [2, 1], [2, 1])\",\n        \"assert tree_traversals(Node(1, Node(2), Node(3))) == ([1, 2, 3], [2, 1, 3], [3, 2, 1])\",\n        \"assert tree_traversals(Node(1, Node(2), Node(3, None, Node(4)))) == ([1, 2, 3, 4], [2, 1, 4, 3], [4, 3, 2, 1])\"\n    ]\n}\n```"