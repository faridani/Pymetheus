"{'title': 'Longest Common Subsequence', 'description': 'Write a function `longest_common_subsequence` that finds the longest common subsequence of two input strings. The longest common subsequence (LCS) of two strings is a string that can be formed by taking characters from both input strings and the resulting string should contain only those characters which are common in both strings.\\n\\n#### Function Signature\\n```python\\ndef longest_common_subsequence(s1: str, s2: str) -> str:\\n```\\n\\n#### Input\\n- `s1` (str): The first input string.\\n- `s2` (str): The second input string.\\n\\n#### Output\\n- Returns the longest common subsequence of `s1` and `s2`.\\n', 'code': \"def longest_common_subsequence(s1: str, s2: str) -> str:\\n    m, n = len(s1), len(s2)\\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\\n\\n    for i in range(1, m + 1):\\n        for j in range(1, n + 1):\\n            if s1[i - 1] == s2[j - 1]:\\n                dp[i][j] = dp[i - 1][j - 1] + 1\\n            else:\\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\\n\\n    lcs = ''\\n    i, j = m, n\\n    while i > 0 and j > 0:\\n        if s1[i - 1] == s2[j - 1]:\\n            lcs += s1[i - 1]\\n            i -= 1\\n            j -= 1\\n        elif dp[i - 1][j] > dp[i][j - 1]:\\n            i -= 1\\n        else:\\n            j -= 1\\n\\n    return lcs[::-1]\\n\", 'tests': ['assert longest_common_subsequence(\"AGGTAB\", \"GXTXAYB\") == \"GTAB\"', 'assert longest_common_subsequence(\"ABC\", \"DEF\") == \"\"', 'assert longest_common_subsequence(\"ABC\", \"CBA\") == \"ABC\"', 'assert longest_common_subsequence(\"ABC\", \"ABD\") == \"AB\"']}"