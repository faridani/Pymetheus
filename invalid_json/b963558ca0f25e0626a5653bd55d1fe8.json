"Here is a new Python coding question for you:\n\n```json\n{\n    \"title\": \"Hard: Maximum Area of Island\",\n    \"description\": \"Given an `m x n` binary grid `grid`, where each cell has either the value 0 or 1, write a function `max_area_of_island` that returns the maximum area of an island in the grid.\\n\\n#### Function Signature\\n```python\\ndef max_area_of_island(grid: list[list[int]]) -> int:\\n```\\n\\n#### Input\\n- `grid` (list[list[int]]): A binary grid, where each cell has either the value 0 or 1.\\n\\n#### Output\\n- Returns the maximum area of an island in the grid.\",\n    \"code\": \"\nimport heapq\n\ndef max_area_of_island(grid: list[list[int]]) -> int:\n    if not grid:\n        return 0\n    \n    m, n = len(grid), len(grid[0])\n    visited = [[False] * n for _ in range(m)]\n    max_area = 0\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    def dfs(i: int, j: int) -> int:\n        if i < 0 or i >= m or j < 0 or j >= n or visited[i][j] or grid[i][j] == 0:\n            return 0\n        \n        visited[i][j] = True\n        area = 1\n        \n        for direction in directions:\n            ni, nj = i + direction[0], j + direction[1]\n            area += dfs(ni, nj)\n        \n        return area\n\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1 and not visited[i][j]:\n                max_area = max(max_area, dfs(i, j))\n\n    return max_area\n\",\n    \"tests\": [\n        'assert max_area_of_island([[0,0,1,0,0],[0,0,1,0,0],[0,0,1,0,0]]) == 4',\n        'assert max_area_of_island([[1,1,0,0,0],[1,1,0,0,0],[0,0,0,1,1]]) == 9',\n        'assert max_area_of_island([[0,0,0,0,0],[0,1,0,0,0],[0,0,1,0,0]]) == 2',\n        'assert max_area_of_island([]) == 0'\n    ]\n}\n```"