"Here is the new Python coding question:\n\n{\n\"title\": \"Minimum Window Substring (Hard)\",\n\"description\": \"Write a function `min_window_substring` that takes two strings, `s1` and `s2`, as input. The function should find the minimum window in `s1` that contains all characters of `s2`. If there are multiple such windows, return the lexicographically smallest one.\\n\\n#### Function Signature\\n```python\\ndef min_window_substring(s1: str, s2: str) -> str:\\n```\\n\\n#### Input\\n- `s1` (str): The main string to search for the minimum window.\\n- `s2` (str): The target string that contains all characters of the desired window.\\n\\n#### Output\\n- Returns the lexicographically smallest minimum window in `s1` that contains all characters of `s2`. If no such window exists, return an empty string.\\n\",\n\"code\": \"\"\"\nfrom collections import defaultdict\n\ndef min_window_substring(s1: str, s2: str) -> str:\n    if not s2:\n        return \"\"\n\n    char_count = defaultdict(int)\n    for char in s2:\n        char_count[char] += 1\n\n    left = 0\n    formed = 0\n    window_counts = defaultdict(int)\n\n    ans = float(\"inf\"), None, None\n\n    for right in range(len(s1)):\n        character = s1[right]\n        window_counts[character] += 1\n\n        if char_count[character] == window_counts[character]:\n            formed += 1\n\n        while left <= right and formed == len(char_count):\n            character = s1[left]\n\n            if right - left + 1 < ans[0]:\n                ans = (right - left + 1, left, right)\n\n            window_counts[character] -= 1\n            if char_count[character] > window_counts[character]:\n                formed -= 1\n\n            left += 1\n\n    return \"\" if ans[0] == float(\"inf\") else s1[ans[1]:ans[2]+1]\n\"\"\",\n\"tests\": [\"assert min_window_substring('ADOBECODEBANC', 'ABC') == 'BANC'\", \"assert min_window_substring('hello', 'lo') == 'lo'\", \"assert min_window_substring('abc', 'def') == ''\", \"assert min_window_substring('', 'abc') == ''\"]\n}"