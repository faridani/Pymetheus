" Here's a Python question on finding the longest substring without repeating characters, which I consider to be of medium difficulty.\n\n```json\n{\n  \"title\": \"Medium Difficulty: Longest Unique Substring Finder\",\n  \"description\": \"Given a string `s`, find the length of the longest substring that does not contain any repeating characters.\\n\\n#### Function Signature\\n```python\\ndef longest_unique_substring(s: str) -> int:\\n```\\n\\n#### Input\\n- `s` (str): A string containing lowercase and uppercase English letters, digits, spaces or special characters. The length of the string is up to 200 characters.\\n\\n#### Output\\n- Returns an integer representing the length of the longest substring without repeating characters in the given string.\\n\",\n  \"code\": \"def longest_unique_substring(s: str) -> int:\\n    char_set = set()\\n    left, maxlen = 0, 0\\n    for right in range(len(s)):\\n        while s[right] in char_presset:\\n            if s[left] in char_set:\\n                char_set.remove(s[left])\\n                left += 1\\n        else:\\n            char_set.add(s[right])\\n            maxlen = max(maxlen, right - left + 1)\\n    return maxlen\",\n  \"tests\": [\n    \"assert longest_unique_substring(\\\"abcabcbb\\\") == 3\",\n    \"assert longest_unique_substring(\\\"bbbbb\\\") == 1\",\n    \"assert longest_unique_substring(\\\"pwwkew\\\") == 3\",\n    \"assert longest_unique_substring(\\\"anviaj\\)->\\\"\") == 5\",\n    \"assert longest_unique_substring(\\\" \\\") == 0\",\n    \"assert longest_unique_substring(\\\"\\u261D\\uFE0F\\ud83C\\udDEE\\uD83D\\uDC4F\\U0001F975\\\") == 5\"\n  ]\n}\n```"