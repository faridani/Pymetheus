"{'title': 'Minimum Window Substring', 'description': 'A minimum window substring of a given string `s` is the smallest substring that contains all characters from another string `t`. This problem requires you to write a function `min_window_substring` that returns the minimum window substring from `s` that contains all characters from `t`.\n\nYou can assume that both strings only contain lowercase letters and there will always be a solution. You should not use any external libraries like Python's `collections.Counter` or `heapq`. You should also avoid using any built-in functions that could help you solve this problem directly.\n\n#### Function Signature\n```python\ndef min_window_substring(s: str, t: str) -> str:\n```\n#### Input\n- `s` (str): The string in which to find the minimum window substring.\n- `t` (str): The string containing all characters that must be present in the minimum window substring.\n\n#### Output\n- Returns the minimum window substring of `s` that contains all characters from `t`. If no such substring exists, returns an empty string.', 'code': \"def min_window_substring(s: str, t: str) -> str:\\n    if not t or len(t) > len(s):\\n        return ''\\n\\n    left = 0\\n    right = 0\\n    min_len = float('inf')\\n    min_window = ''\\n\\n    char_count = {char: 0 for char in set(t)}\\n\\n    while right < len(s):\\n        if s[right] in char_count:\\n            char_count[s[right]] += 1\\n\\n        while left <= right and all(char_count[char] > 0 for char in set(t)):\\n            # Found a valid window\\n            if right - left + 1 < min_len:\\n                min_len = right - left + 1\\n                min_window = s[left:right+1]\\n\\n            # Shrink the window to the minimum size\\n            char_count[s[left]] -= 1\\n            if char_count[s[left]] == 0:\\n                del char_count[s[left]]\\n            left += 1\\n        right += 1\\n    return min_window\", 'tests': ['assert min_window_substring(\"ADOBECODEBANC\", \"ABC\") == \"BANC\"', 'assert min_window_substring(\"a\", \"aa\") == \"\"', 'assert min_window_substring(\"bba\", \"ab\") == \"ba\"']}"