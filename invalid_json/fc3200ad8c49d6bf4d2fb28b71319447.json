"Here's your new Python question:\n\n{\"title\": \"Minimum Window Substring\", \"description\": \"Given two strings `s1` and `s2`, write a function `min_window_substring` that returns the minimum window substring of `s1` that contains all characters of `s2`. If no such window exists, return an empty string.\\n\\n#### Function Signature\\n```python\\ndef min_window_substring(s1: str, s2: str) -> str:\\n```\\n\\n#### Input\\n- `s1` (str): The main string to search for the minimum window substring.\\n- `s2` (str): The string containing the characters that must be present in the minimum window substring of `s1`.\",\n\"code\": \"from collections import Counter\\n\\ndef min_window_substring(s1: str, s2: str) -> str:\\n    if len(s2) > len(s1):\\n        return \\\"\\\"\\n    d = Counter(s2)\\n    left, right = 0, 0\\n    formed = 0\\n    window_counts = {}\\n    ans = (float('inf'), \\\"\\\")\\n    while right < len(s1):\\n        character = s1[right]\\n        window_counts[character] = window_counts.get(character, 0) + 1\\n        if d and window_counts[character] == d[character]:\\n            formed += 1\\n        while left <= right and formed == len(d):\\n            character = s1[left]\\n            if right - left + 1 < ans[0]:\\n                ans = (right - left + 1, s1[left:right+1])\\n            window_counts[character] -= 1\\n            if window_counts[character] < d[character]:\\n                formed -= 1\\n            left += 1\\n    return ans[1]\\n\", \"tests\": [\"assert min_window_substring('ADOBECODEBANC', 'ABC') == 'BANC'\", \"assert min_window_substring('AABBCCDD', 'BBCC') == 'BBCC'\", \"assert min_window_substring('HelloWorld', 'Hello') == 'Hello'\", \"assert min_window_substring('HelloWorld', 'No') == \\\"\\\"\", \"assert min_window_substring('', 'ABC') == \\\"\\\"\"]}"