"Here is a medium-level Python coding challenge for you:\n```json\n{\n    \"title\": \"Valid Parentheses Checker\",\n    \"description\": \"Given a string containing parentheses, determine if the order of parentheses is valid. A valid pair of parentheses has an opening and closing parenthesis, with no extra closing or opening parentheses in between.\\n\\n#### Function Signature\\n```python\\ndef are_valid_parentheses(s: str) -> bool:\\n```\\n\\n#### Input\\n- `s` (str): A string containing parentheses.\\n\\n#### Output\\n- Returns `True` if the order of parentheses is valid, `False` otherwise.\\n\\n#### Example\\n```python\\n# Valid because there are matching opening and closing parentheses\\ns = \\\"()\\\"\\nprint(are_valid_parentheses(s))  # Expected output: True\\n\\n# Invalid because there is an extra closing parenthesis\\ns = \\\")\\\"*\\nprint(are_valid_parentheses(s))  # Expected output: False\\n```\",\n    \"code\": \"def are_valid_parentheses(s: str) -> bool:\\n    stack = []\\n    for char in s:\\n        if char == '(': # Opening parenthesis, push onto the stack\\n            stack.append('(')\\n        elif char == ')': # Closing parenthesis, check if there's a matching opening parenthesis\\n            if not stack or stack.pop() != '(': # Invalid if the stack is empty or the top of the stack isn't an opening parenthesis\\n                return False\\n    # If we reach the end and the stack isn't empty, it's invalid\\n    return not stack\",\n    \"tests\": [\n        \"assert are_valid_parentheses(\\\"()\\\") == True\",\n        \"assert are_valid_parentheses(\\\"((()))\\\") == True\",\n        \"assert are_valid_parentheses(\\\"(()\\\") == True\",\n        \"assert are_valid_parentheses(\\\"())\\\") == False\",\n        \"assert are_valid_parentheses(\\\"{[)}\\\") == False\"\n    ]\n}\n```"