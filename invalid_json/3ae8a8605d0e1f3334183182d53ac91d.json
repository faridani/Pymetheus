"Here is your new Python coding question:\n\n{\"title\": \"Hard: Finding the Shortest Path to a Target Cell\", \"description\": \"Imagine you are playing a game where you need to find the shortest path from the top-left cell of a grid to a target cell. The cells in the grid are represented by strings, and the target cell is marked with the character '#'. The movement rules are as follows:\\n- You can move either horizontally (left or right) or vertically (up or down).\\n- Each cell has a cost associated with it, which is represented by an integer. The total cost of a path is the sum of the costs of all cells in that path.\\n- The game starts at the top-left cell, and you need to find the shortest path from there to the target cell.\\n\\n#### Function Signature\\n```python\\ndef shortest_path(grid: list[list[str]], target: tuple[int, int]) -> int:\\n```\\n\\n#### Input\\n- `grid` (list[list[str]]): A 2D grid of strings, where each string represents a cell in the grid. The cells are either empty or contain the character '#', which marks the target cell.\\n- `target` (tuple[int, int]): The coordinates of the target cell in the grid.\\n\\n#### Output\\n- Returns the cost of the shortest path from the top-left cell to the target cell.\\n\", \"code\": \"from heapq import heappop, heappush\\nimport math\\n\\ndef shortest_path(grid: list[list[str]], target: tuple[int, int]) -> int:\\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\\n    queue = [(0, 0, 0)]  # (cost, row, col)\\n    visited = set()\\n\\n    while queue:\\n        cost, row, col = heappop(queue)\\n        if (row, col) == target:\\n            return cost\\n        if (row, col) in visited:\\n            continue\\n        visited.add((row, col))\\n\\n        for dr, dc in directions:\\n            r, c = row + dr, col + dc\\n            if 0 <= r < len(grid) and 0 <= c < len(grid[0]) and grid[r][c] != '#':\\n                heappush(queue, (cost + 1, r, c))\\n    return -1  # no path found\", \"tests\": [\"assert shortest_path([[' ', ' ', ' '], [' ', ' ', '#']], (2, 2)) == 3\", \"assert shortest_path([[' ', ' ', ' '], [' ', ' ', ' '], ['#', ' ', ' ']], (2, 1)) == 2\", \"assert shortest_path([[' ', ' ', ' '], [' ', ' ', ' '], ['#', ' ', ' ']], (0, 0)) == -1\"]}"