"Here is your requested JSON string:\n\n{\n\"title\": \"Hardest 3D Grid Puzzle\", \n\"description\": \"Given a 3D grid of size n x m x p, where each cell contains either a 0 or a 1. We want to find the maximum number of connected cells that we can turn into 1's without changing the overall sum of 1's in the grid.\\n\\n#### Function Signature\\n```python\\ndef max_cells_to_turn(grid: list[list[list[int]]]) -> int:\\n```\\n\\n#### Input\\n- `grid` (list[list[list[int]]]): A 3D grid where each cell contains either a 0 or a 1.\\n\\n#### Output\\n- Returns the maximum number of connected cells that can be turned into 1's without changing the overall sum of 1's in the grid.\\n\", \n\"code\": \"import heapq\\ndef max_cells_to_turn(grid: list[list[list[int]]]) -> int:\\n    n, m, p = len(grid), len(grid[0]), len(grid[0][0])\\n    max_sum = sum(sum(row) for row in grid)\\n    max_turned = 0\\n    queue = [(max_sum, 0)]\\n    seen = {(i, j, k) for i in range(n) for j in range(m) for k in range(p)}\\n    while queue:\\n        total_cells_to_turn, current_sum = heapq.heappop(queue)\\n        if (total_cells_to_turn == max_sum and current_sum > 0):\\n            continue\\n        for dx, dy, dz in [(1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, -1, 0), (0, 0, 1), (0, 0, -1)]:\\n            x, y, z = (i+dx) % n, (j+dy) % m, (k+dz) % p\\n            if grid[x][y][z] == 1 and (x, y, z) not in seen:\\n                new_cells_to_turn = current_sum + 1\\n                heapq.heappush(queue, (max_sum-new_cells_to_turn, new_cells_to_turn))\\n                seen.add((x, y, z))\\n        max_turned = max(max_turned, current_sum)\\n    return max_turned\", \n\"tests\": [\"assert max_cells_to_turn([[[0], [1], [0]], [[1], [1], [0]], [[0], [1], [0]]]) == 3\", \"assert max_cells_to_turn([[[0], [0], [0]], [[1], [1], [0]], [[1], [1], [0]]]) == 2\", \"assert max_cells_to_turn([[[0], [0], [1]], [[1], [1], [1]], [[1], [0], [0]]]) == 3\"]}\n"