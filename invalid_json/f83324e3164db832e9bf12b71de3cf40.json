" {\n    \"title\": \"Anagram Finder (Hard)\",\n    \"description\": \"Write a function `find_anagrams(words: List[str]) -> Dict[str, List[str]]` that takes a list of words as input and returns a dictionary where the keys are words and the values are lists of anagrams for each key.\\n\\n#### Function Signature\\n```python\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\n```\\n\\n#### Input\\n- `words` (List[str]): A list of strings containing only lowercase letters without any spaces or punctuation.\\n\\n#### Output\\n- Returns a dictionary where keys are words and values are lists of anagrams for each key. For example, if the input is `['listen', 'silent', 'enlist', 'litens']`, the output should be `{'listen': ['enlist', 'litens'], 'silent': [], 'litens': ['enlist'], 'enlist': ['listen']}`.\",\n    \"code\": \"from collections import Counter\\n\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\n    # Create a counter for each word\\n    word_counts = {word: Counter(word) for word in words}\\n    \\n    # Find pairs of anagrams and add to the result dictionary\\n    result = {\\n        k: [v for v in words if all(wc[k] == wc[v] for wc, w in zip(word_counts[k].items(), word_counts[v].items()))]\\n        for k in words\\n    }\\n    \\n    return result\",\n    \"tests\": [\n        'assert find_anagrams([\"listen\", \"silent\", \"enlist\", \"litens\"]) == {\"listen\": [\"enlist\", \"litens\"], \"silent\": [], \"litens\": [\"enlist\"], \"enlist\": [\"listen\"]}',\n        'assert find_anagrams([\"cat\", \"act\", \"tac\", \"gat\", \"tag\"]) == {\"cat\": [\"tac\", \"gat\"], \"act\": [], \"tac\": [\"cat\"], \"gat\": [\"cat\"], \"tag\": []}',\n        'assert find_anagrams([\"python\", \"typhon\", \"htypo\", \"pytho\", \"phyton\"]) == {\"python\": [\"typhon\", \"htypo\", \"pytho\", \"phyton\"], \"typhon\": [], \"htypo\": [], \"pytho\": [], \"phyton\": []}'\n    ]\n}"