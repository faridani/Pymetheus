" {\n    \"title\": \"'Anagram Checker (Hard Level)',\n    \"description\": 'Write a function `is_anagram` that checks if two given strings are anagrams of each other. Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\\n\\n#### Function Signature\\n```python\\ndef is_anagram(s1: str, s2: str) -> bool:\\n```\\n\\n#### Input\\n- `s1`, `s2` (str): Two strings that may contain letters and spaces only.\\n\\n#### Output\\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.\\n\\n#### Constraints\\n- Both input strings have the same length.\\n',\n    \"code\": \"def is_anagram(s1: str, s2: str) -> bool:\\n   # Normalize the strings by removing spaces and converting to lowercase\\n   normalized_s1 = ''.join([char for char in s1.lower() if char in string.ascii_letters]).replace(' ', '')\\n   normalized_s2 = ''.join([char for char in s2.lower() if char in string.ascii_letters]).replace(' ', '')\\n\\n  # If the two normalized strings are equal, they are anagrams of each other.\\n  return len(normalized_s1) == len(normalized_s2) and sorted(normalized_s1) == sorted(normalized_s2)\\n\",\n    \"tests\": ['assert is_anagram(\"listen\", \"silent\") == True', 'assert is_anagram(\"elephant\", \"alphabet\") == True', 'assert is_anagram(\"hello\", \"world\") == False', 'assert is_anagram(\"apple\", \"appelle\") == True']\n}"