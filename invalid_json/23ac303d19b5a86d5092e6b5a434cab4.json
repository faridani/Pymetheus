"Here is the JSON string for your requested problem:\n\n{\n    \"title\": \"Hard: Minimum Window Substring\",\n    \"description\": \"Given two strings, `s1` and `s2`, return the length of the shortest window in `s1` that contains all characters from `s2`. If no such window exists, return 0. For example, if `s1 = \"babylon\" and s2 = \"bayo\"`, the function should return 4 because the substring `\"bayo\"` is the shortest window that contains all characters from `s2`.\n\n#### Function Signature\n\n```\ndef min_window_substring(s1: str, s2: str) -> int:\n```\n\n#### Input\n\n- `s1` (str): The main string to search for substrings.\n- `s2` (str): The string containing the characters that must be found in the window.\n\n#### Output\n\n- Returns the length of the shortest window in `s1` that contains all characters from `s2`, or 0 if no such window exists.\n\",\n    \"code\": \"\"\"\nfrom collections import Counter\n\ndef min_window_substring(s1: str, s2: str) -> int:\n    if not s2 or len(s1) < len(s2):\n        return 0\n    \n    target_count = Counter(s2)\n    \n    for i in range(len(s1)):\n        window_count = Counter()\n        for j in range(i, len(s1)):\n            window_count[s1[j]] += 1\n            if window_count >= target_count:\n                return j - i + 1\n    return 0\n\"\"\",\n    \"tests\": [\n        \"assert min_window_substring('babylon', 'bayo') == 4\",\n        \"assert min_window_substring('hello', 'lo') == 2\",\n        \"assert min_window_substring('', 'abc') == 0\",\n        \"assert min_window_substring('abc', '') == 0\"\n    ]\n}"