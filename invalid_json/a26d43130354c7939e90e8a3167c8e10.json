"```json\n{\n  'title': 'Minimum Window Substring',\n  'description': 'Given two strings `s` and `t`, find the minimum window in `s` that contains all characters of `t`. If there is no such window, return an empty string.\\n\\n#### Function Signature\\n```python\\ndef min_window(s: str, t: str) -> str:\\n```\\n\\n#### Input\\n- `s` (str): The string to search in.\\n- `t` (str): The string that must be contained within the minimum window.\\n\\n#### Output\\n- Returns the minimum window in `s` that contains all characters of `t`. If there is no such window, return an empty string.\\n',\n  'code': \"def min_window(s: str, t: str) -> str:\\n    if not t or len(t) > len(s):\\n        return ''\\n\\n    required_chars = set(t)\\n    formed_chars = set()\\n    left = 0\\n    min_len = float('inf')\\n    min_window = ''\\n\\n    for right in range(len(s)):\\n        if s[right] in required_chars:\\n            formed_chars.add(s[right])\\n        while len(formed_chars) == len(required_chars):\\n            if len(min_window) == 0 or right - left + 1 < min_len:\\n                min_len = right - left + 1\\n                min_window = s[left:right+1]\\n            if s[left] in required_chars:\\n                formed_chars.remove(s[left])\\n            left += 1\\n    return min_window\",\n  'tests': ['assert min_window(\"ADOBECODEBANC\", \"ABC\") == \"BANC\"', 'assert min_window(\"a\", \"aa\") == \"\"', 'assert min_window(\"\", \"abc\") == \"\"', 'assert min_window(\"a\", \"\") == \"\"']}\n```"