"Here's a new problem:\n\n{\n    \"title\": \"Minimum Path Sum in Matrix (Hard)\",\n    \"description\": \"A path sum of a given matrix `m` is defined as the sum of all elements on a path from top left to bottom right. The minimum path sum is the smallest possible path sum in the given matrix. Write a function `min_path_sum` that calculates the minimum path sum.\\n\\n#### Function Signature\\n```python\\ndef min_path_sum(m: list[list[int]]) -> int:\\n```\\n\\n#### Input\\n- `m` (list of lists): A 2D matrix containing integers, where each row and column has the same number of elements.\\n\\n#### Output\\n- Returns the minimum path sum in the given matrix.\\n\",\n    \"code\": \"\"\"\nimport heapq\n\ndef min_path_sum(m: list[list[int]]) -> int:\n    n = len(m)\n    heap = [(m[0][0], 0, 0)]  # priority queue: (sum, row, column)\n    visited = set((0, 0))\n    \n    while heap:\n        s, r, c = heapq.heappop(heap)\n        if r == n - 1 and c == n - 1:\n            return s\n        for dr, dc in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < n and 0 <= nc < n and (nr, nc) not in visited:\n                visited.add((nr, nc))\n                heapq.heappush(heap, (s + m[nr][nc], nr, nc))\n    return -1\n\"\"\",\n    \"tests\": [\n        \"assert min_path_sum([[5,3,9]] == 8\",\n        \"assert min_path_sum([[2,1,3],[12,-4,5],[1,-17,8]]) == 14\",\n        \"assert min_path_sum([[1,2,3],[1,1,1],[1,7,5]]) == 11\"\n    ]\n}"