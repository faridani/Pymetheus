"Here is a medium-level Python coding question:\n\n{\"title\": \"Number of Islands\", \"description\": \"Given an `m x n` grid consisting of `0`s and `1`s, where `0` represents water and `1` represents land, write a function to count the number of islands.\n\n#### Function Signature\n```\ndef num_islands(grid: List[List[int]]) -> int:\n```\n\n#### Input\n- `grid` (List[List[int]]): A 2D grid consisting of `0`s and `1`s, where `0` represents water and `1` represents land.\n\n#### Output\n- Returns the number of islands in the given grid.\n\nExample: If you have a grid like this:\n```\n[\n    [1, 1, 0, 0],\n    [0, 1, 1, 0],\n    [0, 0, 1, 0],\n    [1, 0, 0, 1]\n]\n```\n\nThe output should be `3`, because there are three islands in the grid.\n\n\", \"code\": \"\nfrom typing import List\n\ndef num_islands(grid: List[List[int]]) -> int:\n    if not grid:\n        return 0\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                dfs(grid, i, j)\n                count += 1\n    return count\n\ndef dfs(grid: List[List[int]], i: int, j: int) -> None:\n    if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or grid[i][j] != 1:\n        return\n    grid[i][j] = '#'\n    for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n        dfs(grid, x, y)\n\", \"tests\": [\"assert num_islands([['1','1','0','0'],['0','1','1','0'], ['0','0','1','0'], ['1','0','0','1']]) == 3\", \"assert num_islands([]) == 0\", \"assert num_islands([['1']]) == 1\"]}"