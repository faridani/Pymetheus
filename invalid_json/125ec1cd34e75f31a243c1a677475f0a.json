"{'title': 'Longest Common Subsequence (LCS)', 'description': 'Write a function `lcs` that finds the longest common subsequence of two strings. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements.\\n\\n#### Function Signature\\n```python\\ndef lcs(s1: str, s2: str) -> str:\\n```\\n\\n#### Input\\n- `s1` (str): The first string.\\n- `s2` (str): The second string.\\n\\n#### Output\\n- Returns the longest common subsequence of `s1` and `s2`.\\n', 'code': \"def lcs(s1: str, s2: str) -> str:\\n    m, n = len(s1), len(s2)\\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\\n\\n    for i in range(1, m + 1):\\n        for j in range(1, n + 1):\\n            if s1[i - 1] == s2[j - 1]:\\n                dp[i][j] = dp[i - 1][j - 1] + 1\\n            else:\\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\\n\\n    lcs = ''\\n    i, j = m, n\\n    while i > 0 and j > 0:\\n        if s1[i - 1] == s2[j - 1]:\\n            lcs = s1[i - 1] + lcs\\n            i -= 1\\n            j -= 1\\n        elif dp[i - 1][j] > dp[i][j - 1]:\\n            i -= 1\\n        else:\\n            j -= 1\\n\\n    return lcs\\n\", 'tests': ['assert lcs(\"AGGTAB\", \"GXTXAYB\") == \"GTAB\"', 'assert lcs(\"ABCBDAB\", \"BDCABA\") == \"BCBA\"', 'assert lcs(\"ABC\", \"CBA\") == \"CB\"'\"]}"