"```json\n{\n    'title': 'Longest Common Subsequence',\n    'description': 'Given two strings `s1` and `s2`, find the longest common subsequence (LCS) of these strings.\\n\\n#### Function Signature\\n```python\\ndef longest_common_subsequence(s1: str, s2: str) -> str:\\n```\\n\\n#### Input\\n- `s1` (str): The first string.\\n- `s2` (str): The second string.\\n\\n#### Output\\n- Returns the longest common subsequence of `s1` and `s2`.',\n    'code': \"def longest_common_subsequence(s1: str, s2: str) -> str:\n        # Create a 2D array to store the lengths of common subsequences\n        dp = [[0] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n\n        # Fill the 2D array in bottom-up manner\n        for i in range(1, len(s1) + 1):\n            for j in range(1, len(s2) + 1):\n                # If the current characters match, consider them as part of LCS\n                if s1[i - 1] == s2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    # Otherwise, ignore the current character and take the maximum from adjacent cells\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n        # Reconstruct LCS by tracing back through the 2D array\n        lcs = ''\n        i, j = len(s1), len(s2)\n        while i > 0 and j > 0:\n            if s1[i - 1] == s2[j - 1]:\n                lcs += s1[i - 1]\n                i -= 1\n                j -= 1\n            elif dp[i - 1][j] > dp[i][j - 1]:\n                i -= 1\n            else:\n                j -= 1\n\n        # Return the longest common subsequence in correct order\n        return lcs[::-1]\",\n    'tests': [\n        \"assert longest_common_subsequence('123', '456') == ''\",\n        \"assert longest_common_subsequence('1234', '5678') == ''\",\n        \"assert longest_common_subsequence('ABC', 'ABCBA') == 'ABC'\",\n        \"assert longest_common_subsequence('ABC', 'ABCD') == 'ABC'\"\n    ]\n}\n```"