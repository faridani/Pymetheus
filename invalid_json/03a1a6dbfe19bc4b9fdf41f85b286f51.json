"Here is your requested problem and solution:\n\n{\n\"title\": \"Medium: Valid Square Checker\",\n\"description\": \"A square is valid if it can be formed by the following rules:\\n- The side length of the square should not exceed 50.\\n- Each side of the square should have the same length.\\n- A side length cannot contain repeated numbers.\\n\\nWrite a function `is_valid_square` that checks if the given list of squares is valid. A square is represented by its side lengths, where each side length is an integer.\\n\\n#### Function Signature\\n```python\\ndef is_valid_square(sides: List[int]) -> bool:\\n```\\n\\n#### Input\\n- `sides` (List[int]): A list of integers representing the side lengths of a square.\\n\\n#### Output\\n- Returns `True` if the given squares are valid, `False` otherwise.\",\n\"code\": \"\"\"\nfrom typing import List\n\ndef is_valid_square(sides: List[int]) -> bool:\n    # Check if the length of sides is less than or equal to 50\n    if len(sides) > 50:\n        return False\n    \n    # Check if each side has the same length\n    for i in range(len(sides)):\n        if not all(side == sides[0] for side in sides):\n            return False\n\n    # Check if a side length cannot contain repeated numbers\n    for side in set(sides):\n        if len(str(side)) != len(str(side).replace(\"0\", \"\")):\n            return False\n\n    return True\n\"\"\",\n\"tests\": [\n\"assert is_valid_square([1, 2, 3]) == True\",\n\"assert is_valid_square([4, 5, 6]) == True\",\n\"assert is_valid_square([7, 8, 9, 10]) == True\",\n\"assert is_valid_square([50, 51, 52, 53]) == False\"\n]\n}"