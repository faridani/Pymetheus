"Here is the generated Python coding question:\n\n{\"title\": \"Sudoku Validator (Hard)\", \n\"description\": \"A Sudoku puzzle consists of a 9x9 grid, divided into nine 3x3 sub-grids or 'regions.' Some numbers are already filled in, while others are blank. Write a function `is_valid_sudoku` that checks if a given Sudoku puzzle is valid.\\n\\n#### Function Signature\\n```python\\ndef is_valid_sudoku(board: list[list[int]]) -> bool:\\n```\\n\\n#### Input\\n- `board` (list[list[int]]): A 9x9 grid, where each cell contains an integer from 0 to 9. The value of a cell can be either the number itself or 0 if it's blank.\\n\\n#### Output\\n- Returns `True` if the input Sudoku puzzle is valid, `False` otherwise.\\n\", \n\"code\": \"\"\"\nimport copy\n\ndef is_valid_sudoku(board: list[list[int]]) -> bool:\n    # Check rows\n    for row in board:\n        row_values = set()\n        for value in row:\n            if value != 0 and value in row_values:\n                return False\n            row_values.add(value)\n\n    # Check columns\n    for col in zip(*board):\n        col_values = set()\n        for value in col:\n            if value != 0 and value in col_values:\n                return False\n            col_values.add(value)\n\n    # Check regions\n    region_values = [set() for _ in range(9)]\n    for i in range(3):\n        for j in range(3):\n            region_values[i*3+j].update(board[i*3+0][j:j+3])\n            region_values[i*3+j].update(board[1*i+1][j:j+3])\n            region_values[i*3+j].update(board[2*i+2][j:j+3])\n\n    for values in region_values:\n        if len(values) != 9:\n            return False\n        values = set()\n        for value in values:\n            if value != 0 and value in values:\n                return False\n            values.add(value)\n\n    return True\n\"\"\", \n\"tests\": [\"assert is_valid_sudoku([[5,3,4,6,7,8,9,1,2], [6,7,8,9,1,2,3,4,5], [1,2,3,4,5,6,7,8,9], [5,2,8,3,1,6,4,7,9], [9,1,6,4,7,8,3,2,5], [8,3,2,5,9,7,6,1,4], [4,1,9,7,6,3,2,8,5], [7,8,5,2,1,4,3,6,9], [2,6,4,9,5,3,1,7,8]]) == True\", \"assert is_valid_sudoku([[0,0,0],[0,0,0],[0,0,0]]) == False\", \"assert is_valid_sudoku([[5,3,4,6,7,8,9,1,2], [6,7,8,9,1,2,3,4,5], [1,2,3,4,5,6,7,8,0], [5,2,8,3,1,6,4,7,9], [9,1,6,4,7,8,3,2,5], [8,3,2,5,9,7,6,1,4], [4,1,9,7,6,3,2,8,5], [7,8,5,2,1,4,3,6,9], [2,6,4,9,5,3,1,7,8]]) == False\"]}"