"Here is a medium-level Python coding question for you:\n\n{\n\"title\": \"Closest Pair in an Array of Points\",\n\"description\": \"Given an array of 2D points, write a function `closest_pair` that finds the closest pair of points. A point is represented as a tuple of two integers (x, y). The distance between two points (x1, y1) and (x2, y2) is calculated using the Euclidean distance formula: sqrt((x2 - x1)^2 + (y2 - y1)^2).\\n\\n#### Function Signature\\n```python\\ndef closest_pair(points: list[tuple[int, int]]) -> tuple[tuple[int, int], tuple[int, int]]:\\n```\\n\\n#### Input\\n- `points` (list[tuple[int, int]]): A list of 2D points.\\n\\n#### Output\\n- Returns a tuple containing the two closest points in the input array. If there are multiple pairs with the same minimum distance, return any one of them.\\n\", \n\"code\": \"\"\"\nimport math\nfrom typing import List, Tuple\n\ndef closest_pair(points: List[Tuple[int, int]]) -> Tuple[Tuple[int, int], Tuple[int, int]]:\n    if len(points) < 2:\n        return ()\n\n    min_distance = float('inf')\n    closest_points = None\n\n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            distance = math.sqrt((points[j][0] - points[i][0]) ** 2 + (points[j][1] - points[i][1]) ** 2)\n            if distance < min_distance:\n                min_distance = distance\n                closest_points = (points[i], points[j])\n\n    return closest_points,\n\"\"\", \n\"tests\": [\n\"assert closest_pair([(0, 0), (3, 4), (-1, -1)]) == ((-1, -1), (0, 0))\",\n\"assert closest_pair([(2, 2), (3, 5), (1, 4), (4, 1)]) == ((2, 2), (3, 5))\",\n\"assert closest_pair([(-10, -20), (-30, -40), (10, 20), (30, 40)]) == ((-10, -20), (10, 20))\",\n\"assert closest_pair([(0, 0), (1, 1), (2, 2), (3, 3)]) == ((0, 0), (1, 1))\"\n]\n}"