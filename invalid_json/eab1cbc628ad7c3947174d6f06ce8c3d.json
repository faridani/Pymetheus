"\nHere is a hard python coding question for you:\n\nTitle: Reverse Linked List\n\nDescription: Write a function `reverse_list` that takes a singly linked list as input and returns the reversed linked list. The function should not allocate any new memory, only use the existing nodes in the list. The function should also handle an empty list.\n\nFunction Signature:\n```python\ndef reverse_list(head: ListNode) -> ListNode:\n```\nInput: A singly linked list represented as a `ListNode` object.\n\nOutput: A `ListNode` object representing the reversed linked list.\n\nHere is the code for the function:\n```python\nclass ListNode(object):\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverse_list(head):\n    current = head\n    previous = None\n    while current is not None:\n        next = current.next\n        current.next = previous\n        previous = current\n        current = next\n    return previous\n```\nAnd here are the tests for the function:\n\n* `assert reverse_list(ListNode(1, ListNode(2, ListNode(3)))) == ListNode(3, ListNode(2, ListNode(1)))`\n* `assert reverse_list(ListNode(1, ListNode(2))) == ListNode(2, ListNode(1))`\n* `assert reverse_list(ListNode()) == ListNode()`\n* `assert reverse_list(ListNode(1, ListNode(2), ListNode(3))) == ListNode(3, ListNode(2, ListNode(1)))`\n\nI hope you find this task challenging and enjoyable!"