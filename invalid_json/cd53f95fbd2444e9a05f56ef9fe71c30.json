"Here's the new question you requested:\n\n{'title': 'Closest Pair of Equal Numbers', 'description': 'Given an unsorted array of integers, find the closest pair of equal numbers. If there are multiple pairs with the same smallest difference, return any of them.\n\nThe function should take a list of integers as input and return a tuple containing two equal integers if such a pair exists, otherwise return (-1, -1).\n\n#### Function Signature\\n```python\\ndef closest_pair_equal_numbers(nums: List[int]) -> Tuple[int, int]:\\n```\n\n#### Input\n- `nums` (List[int]): A list of integers that may contain duplicates.\n\n#### Output\n- Returns a tuple `(a, b)` where `a` and `b` are equal integers if such a pair exists, otherwise returns (-1, -1).\n\n', 'code': \"from typing import List\\nfrom typing import Tuple\\ndef closest_pair_equal_numbers(nums: List[int]) -> Tuple[int, int]:\\n    # Create a dictionary to store the frequency of each number\\n    num_freq = {}\\n    for num in nums:\\n        if num not in num_freq:\\n            num_freq[num] = 1\\n        else:\\n            num_freq[num] += 1\\n\\n    # Initialize minimum difference and pair\\n    min_diff = float('inf')\\n    pair = (-1, -1)\\n\\n    # Iterate over the dictionary to find the closest pair of equal numbers\\n    for num in sorted(num_freq.keys()):\\n        freq = num_freq[num]\\n        # Check if there's a previous number with frequency greater than or equal to `freq'\\n        prev_num = next((p for p in num_freq.keys() if p < num), None)\\n        if prev_num is not None and num_freq[prev_num] >= freq:\\n            # Calculate the difference between current pair\\n            diff = abs(num - prev_num)\\n            # Update minimum difference and pair if necessary\\n            if diff < min_diff:\\n                min_diff = diff\\n                pair = (prev_num, num)\\n    return pair\\n\", 'tests': ['assert closest_pair_equal_numbers([1, 2, 3, 4, 5]) == (-1, -1)', 'assert closest_pair_equal_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (-1, -1)', 'assert closest_pair_equal_numbers([1, 2, 2, 3, 3, 3]) == (2, 3)', 'assert closest_pair_equal_numbers([10, 20, 20, 30, 30, 40, 40]) == (20, 30)']}"