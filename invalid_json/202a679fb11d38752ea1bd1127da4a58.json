"Here is your Python coding question:\n\n{\n\"title\": \"Hard: Minimum Window Substring\",\n\"description\": \"Given two strings, `s1` and `s2`, write a function that returns the minimum window substring of `s1` that contains all characters of `s2`. If there are multiple such substrings with the same minimum length, return any one of them.\\n\\n#### Function Signature\\n```python\\ndef min_window_substring(s1: str, s2: str) -> str:\\n```\\n\\n#### Input\\n- `s1` (str): The main string to search for the window substring.\\n- `s2` (str): The string that contains the characters to be found in the window substring.\\n\\n#### Output\\n- Returns a string that is the minimum window substring of `s1` that contains all characters of `s2`. If no such substring exists, return an empty string.\\n\",\n\"code\": \"\"\"\nimport collections\n\ndef min_window_substring(s1: str, s2: str) -> str:\n    if not s2 or len(s2) > len(s1):\n        return \"\"\n\n    s2_count = collections.Counter(s2)\n    required_chars = len(s2_count)\n\n    left = 0\n    for right in range(len(s1)):\n        if s1[right] in s2_count and s1_count[s1[right]] <= s2_count[s1[right]]:\n            required_chars -= 1\n\n        while left <= right and required_chars == 0:\n            if right - left + 1 > len(min_window_substring):\n                min_window_substring = s1[left:right + 1]\n\n            if s1[left] in s2_count and s1_count[s1[left]] >= s2_count[s1[left]]:\n                required_chars += 1\n            left += 1\n\n    return min_window_substring or \"\"\n\"\"\",\n\"tests\": [\n    \"assert min_window_substring('ADOBECODEBANC', 'ABC') == 'BANC'\",\n    \"assert min_window_substring('hello', 'lo') == 'lo'\",\n    \"assert min_window_substring('abcdebfghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyz'\",\n    \"assert min_window_substring('', 'xyz') == ''\",\n    \"assert min_window_substring('x', 'xy') == ''\"\n]\n}"