"Here's an easy python coding question for you. \n\n#### Title: Palindromic Substrings Count\n\n#### Description\nYou are given a string s and you need to find the count of all palindromic substrings in it. A substring is considered palindrome if its reverse is same as its original form i.e., \"abba\" is a palindrome, while \"aba\" is not. Write a function that takes a string as input and returns the count of all palindromic substrings in the given string s.\r\n\r\nFunction Signature: `def count_palindromic_substrings(s: str) -> int:`\r\n\r\n#### Input\r\n- A string `s` containing only lowercase English letters and digits from 0 to 9, with a length of at least one character.\r\n\r\n#### Output\r\n- An integer representing the count of all palindromic substrings in the given string s.\r\n\r\n#### Constraints\r\n- The input string will always contain only lowercase English letters and digits from 0 to 9.\r\n\r\nHints:\r\n1. Use nested loops to check all possible combinations of substrings.\r\n2. To check if a substring is palindrome, iterate through both ends of the substring, starting at different positions, comparing characters until they are equal or not.\r\n3. You can use a set to store unique palindromic substrings and return its length as the count.\r\n\r\n#### Examples\r\n```python\r\nassert count_palindromic_substrings(\"abba\") == 4 # \"a\", \"b\", \"bb\", \"aa\", \"aba\"\r\nassert count_palindromic_substrings(\"cdd\") == 2 # \"c\", \"d\", \"cd\", \"dd\"\r\nassert count_palindromic_substrings(\"a1b1c1defg1h1i1j1k1\") == 8\r\n```\r\n\r\n#### Code:Here's the code for the function signature to find all palindromic substrings in a given string s.\r\n\r\n```python\r\nimport string\r\n\r\ndef count_palindromic_substrings(s: str) -> int:\r\n    # Create an empty set to store unique palindromic substrings\r\n    palindromes = set()\r\n    \r\n    for i in range(len(s)):\r\n        for j in range(i+1, len(s)+1):\r\n            substring = s[i:j]\r\n            if substring == substring[::-1]: # Check if the substring is a palindrome\r\n                palindromes.add(substring)\r\n    \r\n    return len(palindromes)  # Return the length of the set as count of all unique palindromic substrings\r\n```\r\n\r\n#### Tests:Here are some test cases for the function.\r\n\r\n```python\r\nassert count_palindromic_substrings(\"abba\") == 4 # \"a\", \"b\", \"bb\", \"aa\", \"aba\"\r\nassert count_palindromic_substrings(\"cdd\") == 2 # \"c\", \"d\", \"cd\", \"dd\"\r\nassert count_palindromic_substrings(\"a1b1c1defg1h1i1j1k1\") == 8\r\nassert count_palindromic_substrings(\"racecar\") == 6 # \"r\", \"a\", \"c\", \"e\", \"ce\", \"ar\", \"ca\", \"ace\"\r\n``` "