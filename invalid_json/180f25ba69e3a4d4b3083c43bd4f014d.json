"Here's a new Python coding question for you:\n\n{\"title\": \"Maximum Sum of Subsequence\", \"description\": \"Given an integer array `nums` and two integers `m` and `n`, find the maximum sum of a subsequence that has exactly `m` ones and `n` zeros. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements.\\n\\n#### Function Signature\\n```python\\ndef max_sum_subsequence(nums: list[int], m: int, n: int) -> int:\\n```\\n\\n#### Input\\n- `nums` (list[int]): A list of integers representing the array.\\n- `m` (int): The number of ones in the subsequence.\\n- `n` (int): The number of zeros in the subsequence.\\n\\n#### Output\\n- Returns the maximum sum of a subsequence that has exactly `m` ones and `n` zeros.\\n\", \"code\": \"\"\"\ndef max_sum_subsequence(nums: list[int], m: int, n: int) -> int:\n    # Initialize variables to store the maximum sum\n    total_sum = 0\n    one_count = 0\n    zero_count = 0\n    \n    # Iterate over the array to count the number of ones and zeros\n    for num in nums:\n        if num == 1:\n            one_count += 1\n        else:\n            zero_count += 1\n        total_sum += num\n    \n    # Calculate the maximum sum by considering all possible subsequences\n    max_sum = 0\n    for i in range(min(m, one_count) + 1):\n        remaining_ones = one_count - i\n        remaining_zeros = n\n        if remaining_ones < m:\n            remaining_zeros += m - remaining_ones\n        sum_of_subsequence = (i * total_sum // (one_count + 1)) + (remaining_ones * (total_sum // (one_count + 1))) + (remaining_zeros * (total_sum // (zero_count + 1)))\n        max_sum = max(max_sum, sum_of_subsequence)\n    \n    return max_sum\n\"\"\", \"tests\": [\"assert max_sum_subsequence([1, 2, 3, 4], 2, 2) == 7\", \"assert max_sum_subsequence([-1, -2, 0, 1, 2], 2, 1) == 1\", \"assert max_sum_subsequence([1, 1, 1, 0, 0], 3, 2) == 6\"]}"