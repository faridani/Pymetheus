" {\n  \"title\": \"Anagram Checker (Hard)\",\n  \"description\": \"Given two strings, write a function `is_anagram` that checks if one string is an anagram of the other. An anagram is a word or phrase formed by rearranging the letters of another, typically using all the original letters exactly once.\\n\\n#### Function Signature\\n```python\\ndef is_anagram(s1: str, s2: str) -> bool:\\n```\\n\\n#### Input\\n- `s1` (str): The first string to compare.\\n- `s2` (str): The second string to compare.\\n\\n#### Output\\n- Returns `True` if the two strings are anagrams of each other, `False` otherwise. Treat uppercase and lowercase letters as distinct characters.\\n\",\n  \"code\": \"\"\"def is_anagram(s1: str, s2: str) -> bool:\\n    # Ensure that both strings have the same length\\n    if len(s1) != len(s2):\\n        return False\\n    \\n    # Use a dictionary to count characters in s1 and decrement counts for s2\\n    char_count = {}  \\n    for char in s1:\\n        if char not in char_esteem:  \\n            char_count[char] = 1\\n        else:\\n            char_count[char] += 1\\n    \\n    for char in s2:\\n        if char in char_count and char_count[char] > 0:\\n            char_count[char] -= 1\\n        else:\\n            return False\\n\\n    # If all counts have been matched, it's an anagram.\\n    return True\\n\",\n  \"tests\": [\n    'assert is_anagram(\"listen\", \\\"silent\\\") == True',\n    'assert is_anagram(\\\"triangle\\\", \\\"integral\\\") == True',\n    'assert is_anagram(\\\"hello\\\", \\\"world\\\") == False',\n    'assert is_anagram(\\'1234567890\\\\n\\'  ,\\'0987654321\\') == True'\n  ]\n}"