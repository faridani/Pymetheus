"```json\n{\n  \"title\": \"Hard: Prime Factorization\",\n  \"description\": \"Given an integer \\( n \\), write a function to return a list of its prime factors. A prime factor is a prime number that divides the given integer evenly.\\n\\n#### Function Signature\\n```python\\ndef prime_factors(n: int) -> list:\\n```\\n\\n#### Input\\n- `n` (int): An integer greater than 1.\\n\\n#### Output\\n- Returns a list of prime factors of the input integer in ascending order.\\n\",\n  \"code\": \"import math\\n\\ndef prime_factors(n: int) -> list:\\n    factors = []\\n    # Check for number of 2s in n\\n    while n % 2 == 0:\\n        factors.append(2)\\n        n = n // 2\\n    # n must be odd at this point, so a skip of 2 (i.e., i = i + 2) can be used\\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\\n        while n % i == 0:\\n            factors.append(i)\\n            n = n // i\\n    # This condition is to check if n is a prime number greater than 2\\n    if n > 2:\\n        factors.append(n)\\n    return factors\",\n  \"tests\": [\"assert prime_factors(8) == [2, 2, 2]\", \"assert prime_factors(315) == [3, 3, 5, 7]\", \"assert prime_factors(101) == [101]\"]\n}\n```"