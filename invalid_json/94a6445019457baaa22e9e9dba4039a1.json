"Here's your insanely difficult Python coding question:\n\n```json\n{\n    \"title\": \"Hard: Efficiently Generate All Prime Numbers Up to a Given Number\",\n    \"description\": \"Write a function `generate_primes` that takes an integer `n` as input and returns all prime numbers up to `n`. The function should be efficient, i.e., it should not use any brute-force methods like checking each number from 2 to `n-1`.\n\n#### Function Signature\n```python\ndef generate_primes(n: int) -> list:\n```\n\n#### Input\n- `n` (int): An integer that represents the upper limit for generating prime numbers.\n\n#### Output\n- Returns a list of all prime numbers up to `n`.\n\nNote: The function should be able to handle large values of `n`, so efficiency is crucial.\n\", \"code\": \"\"\"\nimport math\n\ndef generate_primes(n: int) -> list:\n    primes = []\n    sieve = [True] * (n + 1)\n    for x in range(2, int(math.sqrt(n)) + 1):\n        if sieve[x]:\n            for y in range(x * x, n + 1, x):\n                sieve[y] = False\n    for x in range(2, n + 1):\n        if sieve[x]:\n            primes.append(x)\n    return primes\n\"\"\", \"tests\": [\"assert len(generate_primes(30)) == 10\", \"assert generate_primes(50) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\", \"assert generate_primes(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\"]\n}"