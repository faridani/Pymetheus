" Here's an insanely difficult Python coding question based on the concept of Dynamic Programming:\n\n```json\n{\n  \"title\": \"Medium - Largest Square Submatrix\",\n  \"description\": \"Given a binary matrix mat[][], find the maximum size sub-square matrix with all elements equal to 1 and return its area.\\n\\n#### Function Signature\\n```python\\ndef max_size_submatrix(mat: List[List[int]]) -> int:\\n```\\n\\n#### Input\\n- `mat` (List[List[int]]): A binary matrix containing 0s and 1s. Each row of the matrix is sorted in non-increasing order.\\n\\n#### Output\\n- Returns the area of the largest square submatrix with all elements equal to 1.\\n\",\n  \"code\": \"\"\"from typing import List, Dict\\ndef max_size_submatrix(mat: List[List[int]]) -> int:\\n    def find_largest_square(i: int, j: int, memo: Dict[Tuple[int, int], int]) -> int:\\n        if (i, j) in memo:\\n            return memo[(i, j)]\\n        if i >= len(mat) or j >= len(mat[0]):\\n            return 0\\n        else:\\n            if mat[i][anno]: # If the current cell is 1\\n                size = 1 + min(find_largest_square(i+1, j, memo), find_largest_square(i, j+1, memo), find_largest_square(i+1, j+1, memo))\\n                memo[(i, j)] = size\\n                return size\\n            else:\\n                memo[(i, j)] = 0\\n                return 0\\n    max_area = 0\\n    for i in range(len(mat)):\\n        for j in range(len(mat[0])):\\n            if mat[i][j] == 1:\\n                size = find_largest_square(i, j, {})\\n                max_area = max(max_area, size**2)\\n    return max_area\\n\",\n  \"tests\": [\"assert max_size_submatrix([[0,1], [1,0]]) == 1\", \"assert max_size_submatrix([[1,0],[1,0]]) == 1\", \"assert max_size_submatrix([[1,1,1],[1,0,1],[0,0,0]]) == 9\"]\n}"