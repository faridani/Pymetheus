"Here is the problem I came up with:\n\n```\n{\n    \"title\": \"Hard: Finding All Paths in a Maze\",\n    \"description\": \"Write a function `find_paths` that takes as input a 2D list representing a maze and returns all possible paths from the top-left corner to the bottom-right corner. A path is defined as a sequence of adjacent cells (horizontally, vertically, or diagonally) that do not contain obstacles (represented by 'X'). The function should return each path as a string in the format 'UP-DOWN-LEFT-RIGHT' where 'U', 'D', 'L', and 'R' represent moving up, down, left, and right respectively.\\n\\n#### Function Signature\\n```python\\ndef find_paths(maze: list[list[str]]) -> list[str]:\\n```\\n\\n#### Input\\n- `maze` (list[list[str]]): A 2D list representing a maze where 'X' represents an obstacle. The maze is guaranteed to be rectangular with the same number of rows and columns.\\n\\n#### Output\\n- Returns a list of strings, each representing a possible path from the top-left corner to the bottom-right corner.\",\n    \"code\": \"\"\"\nimport re\n\ndef find_paths(maze: list[list[str]]) -> list[str]:\n    def dfs(row: int, col: int, path: str) -> None:\n        if row == len(maze) - 1 and col == len(maze[0]) - 1:\n            paths.append(path)\n            return\n        if row < 0 or row >= len(maze) or col < 0 or col >= len(maze[0]):\n            return\n        if maze[row][col] == 'X':\n            return\n        maze[row][col] = 'X'\n        dfs(row - 1, col, f\"{path}U\")\n        dfs(row + 1, col, f\"{path}D\")\n        dfs(row, col - 1, f\"{path}L\")\n        dfs(row, col + 1, f\"{path}R\")\n        maze[row][col] = '.'\n\n    paths = []\n    dfs(0, 0, '')\n    return [re.sub('U+', '-', re.sub('D+', '-', re.sub('LR', '', path))) for path in paths]\n\n\"\"\",\n    \"tests\": [\n        \"assert len(find_paths([['.', '.', '.'], ['.', 'X', '.'], ['.','.','.']]) == 4\",\n        \"assert find_paths([['.', '.'], ['.', 'X']]) == ['L-D-R-L-D-R', 'R-U-L-R-U-L', 'D-R-U-D-R-U', 'U-R-D-U-R-D']\"\n    ]\n}\n```"