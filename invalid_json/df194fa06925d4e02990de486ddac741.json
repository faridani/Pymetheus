"Here's your new Python coding question:\n\n{\"title\": \"Sudoku Validator (Hard)\", \"description\": \"Write a function `is_valid_sudoku` that takes as input a list of lists representing a Sudoku grid. The function should return `True` if the Sudoku grid is valid, and `False` otherwise.\\n\\n#### Function Signature\\n```python\\ndef is_valid_sudoku(grid: List[List[int]]) -> bool:\\n```\\n\\n#### Input\\n- `grid` (List[List[int]]): A 9x9 list of lists representing a Sudoku grid. Each element in the grid can be either an integer from 1 to 9, or 0.\\n\\n#### Constraints\\n- The Sudoku grid is valid if it contains no duplicate rows, columns, or 3x3 sub-grids (also known as blocks).\\n\", \"code\": \"from typing import List\\n\\ndef is_valid_sudoku(grid: List[List[int]]) -> bool:\\n    # Check each row for duplicates and zeros\\n    for row in grid:\\n        if len(set(row)) != len(row) or 0 in row:\\n            return False\\n    # Check each column for duplicates and zeros\\n    for col in zip(*grid):\\n        if len(set(col)) != len(col) or 0 in col:\\n            return False\\n    # Check each block for duplicates and zeros\\n    for i in range(0, 9, 3):\\n        for j in range(0, 9, 3):\\n            block = [grid[x][y] for x in range(i, i+3) for y in range(j, j+3)]\\n            if len(set(block)) != len(block) or 0 in block:\\n                return False\\n    # If we haven't returned by now, the Sudoku grid is valid\\n    return True\", \"tests\": [\"assert is_valid_sudoku([[5,3,4,6,7,8,9,1,2],\\n                             [6,7,8,9,1,2,3,4,5],\\n                             [1,2,3,4,5,6,7,8,9],\\n                             [8,9,1,2,3,4,5,6,7],\\n                             [4,5,6,7,8,9,1,2,3],\\n                             [7,8,9,1,2,3,4,5,6],\\n                             [2,3,4,5,6,7,8,9,1],\\n                             [9,1,2,3,4,5,6,7,8],\\n                             [3,4,5,6,7,8,9,1,2]]) == True\", \"assert is_valid_sudoku([[1,2,3],[4,5,6],[7,8,0]]) == False\"]}"