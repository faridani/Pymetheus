{
    "title": "Hard: Largest Submatrix Sum",
    "description": "Given a 2D matrix of integers, find the largest possible sum of a contiguous submatrix. \n\n#### Function Signature\n```python\ndef max_submatrix_sum(matrix: list[list[int]]) -> int:\n```\n\n#### Input\n- `matrix` (list[list[int]]): A 2D matrix of integers.\n\n#### Output\n- Returns the largest possible sum of a contiguous submatrix.",
    "code": "def max_submatrix_sum(matrix: list[list[int]]) -> int:\n    rows = len(matrix)\n    cols = len(matrix[0]) if rows > 0 else 0\n\n    max_so_far = float('-inf')\n\n    for left in range(cols):\n        current_sums = [0] * rows\n        for right in range(left, cols):\n            for row in range(rows):\n                current_sums[row] += matrix[row][right]\n            max_so_far = max(max_so_far, max_subarray_sum(current_sums))\n\n    return max_so_far\n\n\ndef max_subarray_sum(nums: list[int]) -> int:\n    max_so_far = nums[0]\n    current_max = nums[0]\n    for i in range(1, len(nums)):\n        current_max = max(nums[i], current_max + nums[i])\n        max_so_far = max(max_so_far, current_max)\n    return max_so_far",
    "tests": [
        "assert max_submatrix_sum([[1, 2, -1, -4, -20], [-8, -3, 4, 2, 1], [3, 8, 10, 1, 3], [-4, -1, 1, 7, -6]]) == 29",
        "assert max_submatrix_sum([[1, 2], [3, 4]]) == 10",
        "assert max_submatrix_sum([[-1, -2], [-3, -4]]) == -1"
    ],
    "difficulty": "hard",
    "model": "gemma2:27b-instruct-q5_K_S",
    "style": "Interview Query"
}