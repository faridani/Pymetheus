{
    "title": "Hard - Fibonacci Sequence with Reverse Lookup",
    "description": "Write a function `fibonacci` that takes an integer argument `n` and returns the nth number in the Fibonacci sequence. Additionally, implement a reverse lookup function `find_position` that given a Fibonacci number, finds its position in the sequence.\n\n#### Function Signatures\n```python\ndef fibonacci(n: int) -> int:\ndef find_position(number: int) -> int:\n```\n\n#### Input\n- `n` (int): A non-negative integer less than 100.\n- `number` (int): A number that appears in the Fibonacci sequence.\n\n#### Output\n- Returns the nth Fibonacci number.\n- Returns the position of the given Fibonacci number within the sequence.",
    "code": "def fibonacci(n: int) -> int:\n    if n < 0 or n > 99:\n        raise ValueError('Input should be a non-negative integer less than 100')\n    fib = [0, 1]\n    for i in range(2, n+1):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib[n]\n\ndef find_position(number: int) -> int:\n    if number < 0:\n        raise ValueError('Input should be a positive integer')\n    fib = [0, 1]\n    position = 0\n    for i, num in enumerate(fib, start=1):\n        if num == number:\n            position = i\n            break\n    else:\n        raise ValueError('Input is not a Fibonacci number')\n    return position",
    "tests": [
        "assert fibonacci(0) == 0",
        "assert fibonacci(1) == 1",
        "assert fibonacci(2) == 1",
        "assert fibonacci(3) == 2",
        "assert fibonacci(5) == 5",
        "assert find_position(0) == 0",
        "assert find_position(1) == 1",
        "assert find_position(1) == 2",
        "assert find_position(3) == 3",
        "assert find_position(5) == 6"
    ]
}