{
    "title": "Recursive Prime Factorization",
    "description": "Write a function `prime_factors` that takes an integer as input and returns a list of the prime factors of the number.\n\n#### Function Signature\n```python\ndef prime_factors(n: int) -> List[int]:\n```\n\n#### Input\n- `n` (int): A positive integer.\n\n#### Output\n- Returns a list of the prime factors of the input number in ascending order.\n\n#### Constraints and Hints\nThe function should use recursion to find the prime factors. If the number is divisible by 2, it is not a prime and it's factor is 2. If the remainder after dividing the number by any number from 3 to the square root of the number is not zero, that number is not a prime factor.\n\n#### Example\nprime_factors(12) should return [2, 2, 3]\n",
    "code": "def prime_factors(n: int) -> List[int]:\n    if n <= 1:\n        return []\n    elif n == 2:\n        return [2]\n    else:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                factors = prime_factors(i)\n                factors.append(n // i)\n                return factors\n        # If no factor is found up to the square root, the number is a prime\n        return [n]\n",
    "tests": [
        "assert prime_factors(1) == []",
        "assert prime_factors(2) == [2]",
        "assert prime_factors(4) == [2, 2]",
        "assert prime_factors(6) == [2, 3]",
        "assert prime_factors(8) == [2, 2, 2]",
        "assert prime_factors(17) == [17]",
        "assert prime_factors(12) == [2, 2, 3]"
    ],
    "difficulty": "insanely difficult",
    "model": "mistral:latest",
    "style": "Project Euler"
}