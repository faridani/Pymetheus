{
    "title": "Anagram Detection (Hard)",
    "description": "Write a function `anagram_checker` that checks if two given strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of another, usually with all the original letters in the same alphabet and only one unique letter per word.\n\n#### Function Signature\n```python\ndef anagram_checker(str1: str, str2: str) -> bool:\n```\n\n#### Input\n- `str1` (str): A string containing lowercase alphabets only.\n- `str2` (str): A string containing lowercase alphabets only.\n\n#### Output\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.\n",
    "code": "def anagram_checker(str1: str, str2: str) -> bool:\n    # Remove spaces and convert to sorted lists\n    list1 = sorted(list(filter(lambda x: x.isalpha(), str1)))\n    list2 = sorted(list(filter(lambda x: x.isalpha(), str2)))\n    \n    # Check if the two lists are equal (ignoring their order)\n    return set(list1) == set(list2)",
    "tests": [
        "assert anagram_checker('listen', 'silent') == True",
        "assert anagram_checker('act', 'cat') == True",
        "assert anagram_checker('abcde', 'fghij') == False",
        "assert anagram_checker('hello', 'world') == False"
    ],
    "difficulty": "super hard",
    "model": "mistral:latest"
}