{
    "title": "Longest Common Subsequence",
    "description": "A long common subsequence is a sequence of characters that appears in both strings.\n\nThe LCS problem is to find the longest such sequence.\n\nYou are given two strings, `s1` and `s2`, and you need to write a function `lcs` that returns the longest common subsequence.\n\n#### Function Signature\n```python\ndef lcs(s1: str, s2: str) -> str:\n```\n\n#### Input\n- `s1` (str): The first string.\n- `s2` (str): The second string.\n\n#### Output\n- Returns the longest common subsequence of `s1` and `s2`.",
    "code": "",
    "\nimport numpy as np\n\ndef lcs(s1: str, s2: str) -> str:\n    # Create a 2D array to store the lengths of LCS\n    m = len(s1)\n    n = len(s2)\n    dp = np.zeros((m + 1, n + 1), dtype=int)\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    # Reconstruct the LCS from the DP array\n    i, j = m, n\n    result = ''\n    while i > 0 and j > 0:\n        if s1[i - 1] == s2[j - 1]:\n            result += s1[i - 1]\n            i -= 1\n            j -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return result[::-1]": "",
    "tests": [
        "assert lcs('AGGTAB', 'GXTXAYB') == 'GTAB'",
        "assert lcs('RJNJWFW', 'JJNFJRJR') == ''",
        "assert lcs('', '') == ''",
        "assert lcs('ABC', 'CBA') == 'ABC'"
    ],
    "difficulty": "super hard",
    "model": "llama3.1:8b",
    "style": "Competitive Programming"
}