{
    "title": "'Number Palindromes: Check and Count'",
    "description": "Given a string, check if it is a palindrome and count the number of unique palindromic substrings within it. A palindrome is a sequence of characters that reads the same forward and backward (ignoring spaces and punctuation). Palindromes can be of any length. However, they must not contain duplicate letters.\n\n#### Function Signature\n```python\ndef count_unique_palindromes(s: str) -> list[str]:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns a list of unique palindromic substrings within the input string in lexicographical order. If there are no unique palindromes, returns an empty list.",
    "code": "import re\ndef count_unique_palindromes(s: str) -> list[str]:\n    # Remove non-alphanumeric characters\n    s = re.sub(r'[\\W\\d]', '', s)\n    # Check for palindromes of lengths up to half the length of the string\n    palindromes = []\n    for i in range(len(s) + 1):\n        for j in range(i, len(s), -1):\n            if i == j or (i + 1 < j and s[i] != s[j]):\n                continue\n            substring = s[i:j]\n            # Check if the substring is a palindrome and contains no duplicate letters\n            if len(substring) > 1 and not any(substring.count(char) > 1 for char in subset(substring)):\n                palindromes.append(substring)\n    return sorted(palindromes)",
    "tests": [
        "assert count_unique_palindromes(\"madam\") == [\"madam\"]",
        "assert count_unique_palindromes(\"racecar\") == [\"racecar\", \"carrace\"]",
        "assert count_unique_palindromes(\"hello\") == []",
        "assert count_unique_palindromes(\"No 'x' in Nixon\") == [\"Noon\", \"'x'ix 'x'\"]"
    ],
    "difficulty": "medium",
    "model": "mistral:latest",
    "style": "Facebook Hacker Cup"
}