{
    "title": "Easiest Shortest Path",
    "description": "In graph theory, the shortest path problem is the problem of finding a path between two nodes in a weighted graph such that the sum of the weights (or costs) on the path is minimized. For this problem, we are given a list of edges and a source node. We need to find the shortest path from the source node to all other nodes.\n\n#### Function Signature\n```python\ndef shortest_path(edges: List[List[int]], source: int) -> List[int]:\n```\n\n#### Input\n- `edges` (List[List[int]]): A list of edges where each edge is represented as a list of two integers [node1, node2] and the weight of that edge.\n- `source` (int): The source node from which we want to find the shortest path.\n\n#### Output\n- Returns a list of length equal to the number of nodes in the graph where each element at index i represents the shortest distance from the source node to node i.",
    "code": "import heapq\nfrom typing import List\n\ndef shortest_path(edges: List[List[int]], source: int) -> List[int]:\n    # Create a dictionary to store the adjacency list of the graph\n    graph = {}\n    for edge in edges:\n        if edge[0] not in graph:\n            graph[edge[0]] = []\n        if edge[1] not in graph:\n            graph[edge[1]] = []\n        graph[edge[0]].append(edge)\n        graph[edge[1]].append([edge[1], edge[0], edge[2]])\n    # Create a dictionary to store the shortest distances from the source node\n    distances = {node: float('inf') for node in graph}\n    distances[source] = 0\n    # Use Dijkstra's algorithm to find the shortest path\n    pq = [(0, source)]\n    while pq:\n        current_distance, current_node = heapq.heappop(pq)\n        if current_distance > distances[current_node]:\n            continue\n        for neighbor, weight in graph.get(current_node, []):\n            distance = current_distance + weight\n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(pq, (distance, neighbor))\n    # Return the shortest distances from the source node to all other nodes\n    return [distances[node] for node in graph]\n",
    "tests": [
        "assert shortest_path([[0, 1, 3], [1, 2, 2], [1, 3, 4]], 0) == [0, 2, 5]",
        "assert shortest_path([[0, 1, 1], [0, 2, 3], [1, 2, 2], [1, 2, 1]], 0) == [0, 1, 2]",
        "assert shortest_path([[0, 1, 5], [0, 2, 10], [1, 2, 7]], 0) == [0, 6]"
    ],
    "difficulty": "medium",
    "model": "llama3:latest"
}