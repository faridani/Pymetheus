{
    "title": "Medium - String Compression",
    "description": "Implement a function `compress_string` that takes a string as input and returns its compressed representation. The compressed string should replace consecutive repeating characters with the character followed by the count of repetitions. If the compressed string is not shorter than the original string, return the original string.\n\n#### Function Signature\n```python\ndef compress_string(s: str) -> str:\n```\n\n#### Input\n- `s` (str): The input string.\n\n#### Output\n- Returns the compressed representation of the string if it's shorter, otherwise returns the original string.",
    "code": "def compress_string(s: str) -> str:\n    if not s:\n        return s\n    compressed = ''\n    count = 1\n    prev_char = s[0]\n    for i in range(1, len(s)):\n        if s[i] == prev_char:\n            count += 1\n        else:\n            compressed += prev_char + (str(count) if count > 1 else '')\n            prev_char = s[i]\n            count = 1\n    compressed += prev_char + (str(count) if count > 1 else '')\n    return compressed if len(compressed) < len(s) else s\n",
    "tests": [
        "assert compress_string('aabcccccaaa') == 'a2b1c5a3'",
        "assert compress_string('abcdefg') == 'abcdefg'",
        "assert compress_string('') == ''",
        "assert compress_string('AAAABBBCCDAA') == 'A4B3C2DA2'"
    ],
    "difficulty": "medium",
    "model": "gemma2:27b",
    "style": "SPOJ"
}