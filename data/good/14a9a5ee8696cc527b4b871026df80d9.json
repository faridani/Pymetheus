{
    "title": "Hard: Knight's Tour Solver",
    "description": "A knight's tour is a sequence of moves by a knight on a chessboard where the knight visits every square exactly once. Write a function `knights_tour(n)` that solves the knight's tour problem for a given board size `n`. The function should return a list of tuples representing the sequence of moves, each tuple containing the row and column coordinates of the knight's position.\n\n#### Function Signature\n```python\ndef knights_tour(n: int) -> list[tuple[int, int]]:\n```\n\n#### Input\n- `n` (int): The size of the chessboard (nxn).\n\n#### Output\n- Returns a list of tuples representing the knight's tour. Each tuple should contain the row and column coordinates of the knight's position on the board. If a solution doesn't exist, return an empty list.",
    "code": "def knights_tour(n: int) -> list[tuple[int, int]]:\n    board = [[False for _ in range(n)] for _ in range(n)]\n    moves = [(2, 1), (1, 2), (-1, 2), (-2, 1), (-2, -1), (-1, -2), (1, -2), (2, -1)]\n\n    def is_valid(row: int, col: int) -> bool:\n        return 0 <= row < n and 0 <= col < n and not board[row][col]\n\n    def solve(row: int, col: int, step: int) -> list[tuple[int, int]]:\n        if step == n * n:\n            return [(row, col)]\n\n        board[row][col] = True\n        tour = []\n        for dr, dc in moves:\n            new_row, new_col = row + dr, col + dc\n            if is_valid(new_row, new_col):\n                tour.extend(solve(new_row, new_col, step + 1))\n                if tour:  # Found a solution\n                    return [(row, col)] + tour\n        board[row][col] = False\n        return []\n\n    return solve(0, 0, 1)",
    "tests": [
        "assert knights_tour(8) == [(0, 0), (2, 1), (4, 3), ...]",
        "assert len(knights_tour(5)) == 25"
    ],
    "difficulty": "super hard",
    "model": "gemma2:27b",
    "style": "Codewars"
}