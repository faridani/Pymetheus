{
    "title": "Maximum Sum of Arithmetic Progression",
    "description": "Given a list of integers `nums` and an integer `k`, find the maximum sum of arithmetic progressions (AP) that can be formed from `nums` with length `k`. An AP is defined as a sequence of numbers where each term after the first is obtained by adding a fixed constant, called the common difference. For example, `[1, 2, 4, 7, 11]` is an AP because each term after the first is obtained by adding 1.\n\n#### Function Signature\n```python\ndef max_ap_sum(nums: list[int], k: int) -> int:\n```\n\n#### Input\n- `nums` (list[int]): A list of integers.\n- `k` (int): The length of the AP.\n\n#### Output\n- Returns the maximum sum of arithmetic progressions that can be formed from `nums` with length `k`.",
    "code": "\nimport itertools\n\ndef max_ap_sum(nums: list[int], k: int) -> int:\n    if len(nums) < k:\n        return 0\n    \n    # Generate all possible APs\n    aps = []\n    for r in range(k, len(nums) + 1):\n        for diff in set(nums[i] - nums[i-1] for i in range(1, r)):\n            ap = tuple(sorted((nums[i] - (r-1)*diff for i in range(r))))\n            aps.append(ap)\n    \n    # Calculate the sum of each AP\n    sums = [sum(ap) for ap in aps]\n    \n    return max(sums)",
    "tests": [
        "assert max_ap_sum([1, 2, 3, 4, 5], 3) == 9",
        "assert max_ap_sum([-1, -2, -3, -4, -5], 3) == -6",
        "assert max_ap_sum([1, 2, 4, 7, 11], 3) == 15",
        "assert max_ap_sum([0, 0, 0, 0, 0], 2) == 0"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "ACM-ICPC"
}