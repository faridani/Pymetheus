{
    "title": "'Palindromic Subsequence Checker (Easy)'",
    "description": "Given a string, find if any non-empty subsequence of the string reads the same forwards and backwards.\n\n#### Function Signature\n```python\ndef is_palindrome_subsequence(s: str) -> bool:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns `True` if any non-empty subsequence of the input string is a palindrome, `False` otherwise.",
    "code": "import itertools\ndef is_palindrome_subsequence(s: str) -> bool:\n    # Create all possible subsequences using itertools.combinations\n    subs = list(itertools.combinations(s, i)) + [(s,)]\n    # Check if any subsequence reads the same forwards and backwards\n    for sub in subs:\n        sub = ''.join(sub)\n        if sub == sub[::-1]:\n            return True\n    return False",
    "tests": [
        "assert is_palindrome_subsequence(\"abba\") == True",
        "assert is_palindrome_subsequence(\"abc\") == False",
        "assert is_palindrome_subsequence(\"abcbadcba\") == True"
    ],
    "difficulty": "easy",
    "model": "mistral:latest",
    "style": "CodeChef"
}