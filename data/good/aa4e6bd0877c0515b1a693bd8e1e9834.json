{
    "title": "'Anagram Detector (Hard)'",
    "description": "An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a function `is_anagram` that checks if two given strings are anagrams.\n\n#### Function Signature\n```python\ndef is_anagram(s1: str, s2: str) -> bool:\n```\n\n#### Input\n- `s1`, `s2` (str): Two strings that may contain letters and spaces.\n\n#### Output\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.",
    "code": "import collections\n\ndef is_anagram(s1: str, s2: str) -> bool:\n    # Remove spaces and convert to lowercase\n    s1 = ''.join(c for c in s1.lower() if c not in \" \")\n    s2 = ''.join(c for c in s2.lower() if c not in \" \")\n    # If the two strings have different lengths, they are not anagrams\n    if len(s1) != len(s2):\n        return False\n    # Create frequency maps for the characters in both strings\n    freq_map1 = collections.Counter(s1)\n    freq_map2 = collections.Counter(s2)\n    # Check if all frequencies match\n    return freq_map1 == freq_map2",
    "tests": [
        "assert is_anagram(\"listen\", \"silent\") == True",
        "assert is_anagram(\"racecar\", \"carrace\") == True",
        "assert is_anagram(\"hello\", \"olleh\") == True",
        "assert is_anagram(\"hello\", \"world\") == False"
    ],
    "difficulty": "insanely difficult",
    "model": "mistral:latest",
    "style": "ACM-ICPC"
}