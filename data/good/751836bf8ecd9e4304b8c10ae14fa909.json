{
    "title": "Anagram Checker (Hard)",
    "description": "Given two strings, write a function `anagram_checker` that checks if the given strings are anagrams of each other.\n\n#### Function Signature\n```python\ndef anagram_checker(str1: str, str2: str) -> bool:\n```\n\n#### Input\n- `str1`, `str2` (str): Two strings that may contain letters (both uppercase and lowercase), numbers, spaces, and punctuation.\n\n#### Output\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.\n\nNote: An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\nHint: You can convert the strings to a dictionary where keys are characters and values are their counts.",
    "code": "import collections\n\ndef anagram_checker(str1: str, str2: str) -> bool:\n    # Convert both strings to lowercase and remove non-alphabetic characters\n    str1 = ''.join(char for char in str1.lower() if char.isalpha()).replace(' ', '')\n    str2 = ''.join(char for char in str2.lower().replace(' ', '') if char.isalpha())\n    \n    # Create dictionaries with character counts for each string\n    dict1 = collections.Counter(str1)\n    dict2 = collections.Counter(str2)\n    \n    # Check if the two dictionaries are equal (ignoring order of keys)\n    return dict1 == dict2",
    "tests": [
        "assert anagram_checker('listen', 'silent') == True",
        "assert anagram_checker('abcd', 'dcba') == True",
        "assert anagram_checker('hello world', 'world hello') == True",
        "assert anagram_checker('example', 'maxime') == False"
    ],
    "difficulty": "insanely difficult",
    "model": "mistral:latest",
    "style": "HackerEarth"
}