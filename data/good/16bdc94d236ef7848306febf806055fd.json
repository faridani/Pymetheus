{
    "title": "Anagram Checker (Medium)",
    "description": "An anagram is a word or phrase that is formed by rearranging the letters of another word or phrase, using all the original letters exactly once. Write a function `is_anagram` that checks if two given strings are anagrams of each other.\n\n#### Function Signature\n```python\ndef is_anagram(s1: str, s2: str) -> bool:\n```\n\n#### Input\n- `s1`, `s2` (str): Two strings that may contain letters and no punctuation or numbers.\n\n#### Output\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.\n",
    "code": "def is_anagram(s1: str, s2: str) -> bool:\n    # Ensure both strings have the same length\n    if len(s1) != len(s2):\n        return False\n    \n    # Convert to a dictionary and sort its keys\n    s1_dict = dict(sorted(collections.Counter(s1), key=str))\n    s2_dict = dict(sorted(collections.Counter(s2), key=str))\n    \n    # Check if both dictionaries have the same keys and values\n    return s1_dict == s2_dict",
    "tests": [
        "assert is_anagram('listen', 'silent') == True",
        "assert is_anagram('hello', 'world') == False",
        "assert is_anagram('eclipses', 'scapeless') == True"
    ],
    "difficulty": "hard",
    "model": "mistral:latest"
}