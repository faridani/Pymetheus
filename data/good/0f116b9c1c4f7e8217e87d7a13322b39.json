{
    "title": "'Anagram Detector (Hard)'",
    "description": "An anagram is a word or phrase that consists of the same letters as another word or phrase, but arranged in a different order. Write a function `are_anagrams` that takes two strings and returns True if they are anagrams of each other, False otherwise.\n\n#### Function Signature\n```python\ndef are_anagrams(s1: str, s2: str) -> bool:\n```\n\n#### Input\n- `s1` (str): A string containing lowercase letters and spaces only.\n- `s2` (str): Another string containing lowercase letters and spaces only.\n\n#### Output\n- Returns True if the two input strings are anagrams of each other, False otherwise.",
    "code": "import collections\n\ndef are_anagrams(s1: str, s2: str) -> bool:\n   # Count characters in both strings and compare counts\n   char_counts = collections.Counter(s1)\n   for char in s2: \n       if char not in char_counts or char_counts[char] < char_counts[char]:\n           return False\n   # If no characters were found to be missing, the strings are anagrams\n   return True",
    "tests": [
        "assert are_anagrams(\"listen\", \"silent\") == True",
        "assert are_anagrams(\"python\", \"tpoyrnet\") == True",
        "assert are_anagrams(\"hello\", \"world\") == False"
    ],
    "difficulty": "insanely difficult",
    "model": "mistral:latest",
    "style": "TopCoder"
}