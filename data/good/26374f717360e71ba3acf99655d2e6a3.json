{
    "title": "'Palindromic Subsequence Count (Easy)'",
    "description": "Given a string, find the number of non-empty palindromic subsequences it has.\n\n#### Function Signature\n```python\ndef count_palindromes(s: str) -> int:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns an integer representing the number of non-empty palindromic subsequences in the given string.",
    "code": "def count_palindromes(s: str) -> int:\n    dp = [[False] * (len(s)+1) for _ in range(len(s))]\n    for i in range(len(s)):\n        dp[i][i] = True\n        for j in range(i+1, len(s)):\n            if s[i] == s[j] and (i+1 <= j-1 or dp[i+1][j-1]):\n                dp[i][j] = True\n    return sum([1 for i in range(len(s)) if dp[-1][i]])",
    "tests": [
        "assert count_palindromes('aba') == 6",
        "assert count_palindromes('abac') == 7",
        "assert count_palindromes('a') == 1",
        "assert count_palindromes('abcdefg') == 10"
    ],
    "difficulty": "easy",
    "model": "mistral:latest",
    "style": "SPOJ"
}