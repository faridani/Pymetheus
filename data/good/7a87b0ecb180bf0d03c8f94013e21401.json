{
    "title": "'Recursive Fibonacci Sequence Finder (Hard)'",
    "description": "Given a number `n`, write a recursive function `fibonacci` that calculates and returns the `n`th Fibonacci number.\n\n#### Function Signature\n```python\ndef fibonacci(n: int) -> int:\n```\n\n#### Input\n- `n` (int): The index of the Fibonacci number you want to find.\n\n#### Output\n- Returns the `n`th Fibonacci number as an integer.\n\nNote: The first Fibonacci numbers are 0, 1, 1, 2, 3, 5, 8, 13, 21 and so forth. To calculate a Fibonacci number, you can use the following formula:\n```python\nfib(n) = fib(n-1) + fib(n-2)\n```where `fib(0)=0` and `fib(1)=1`.",
    "code": "def fibonacci(n: int) -> int:\n    # Base cases\n    if n <= 1: return n\n    else:\n        # Recursive case\n        return fibonacci(n-1) + fibonacci(n-2)",
    "tests": [
        "assert fibonacci(0) == 0",
        "assert fibonacci(1) == 1",
        "assert fibonacci(2) == 1",
        "assert fibonacci(3) == 2",
        "assert fibonacci(4) == 3",
        "assert fibonacci(5) == 5",
        "assert fibonacci(6) == 8",
        "assert fibonacci(7) == 13",
        "assert fibonacci(8) == 21"
    ],
    "difficulty": "super hard",
    "model": "mistral:latest",
    "style": "Internationals Olympiad"
}