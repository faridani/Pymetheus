{
    "title": "Check if a given string is a valid IPv4 address (Hard)",
    "description": "An IPv4 address consists of four octets, each representing an 8-bit number. The octets are separated by dots.\n\n#### Function Signature\n```python\ndef validIP(ip: str) -> bool:\n```\n\n#### Input\n- `ip` (str): A string that represents an IPv4 address, where each octet is separated by a dot.\n\n#### Output\n- Returns `True` if the input string is a valid IPv4 address, `False` otherwise.\n\n#### Constraints\n- Each octet must be between 0 and 255 (inclusive).\n- Octets are separated by exactly one dot.\n- The string does not contain any leading zeros unless the octet is in the range 0-9.\n- The string may contain a single dot at the beginning or end, but this will not affect validity.\n- There may be spaces around the dots, but these are also ignored.",
    "code": "def validIP(ip: str) -> bool:\n    # Remove leading and trailing spaces\n    ip = ip.strip()\n    # Split on dots\n    octets = ip.split(\".\")\n    if len(octets) != 4: # Not exactly 4 octets\n        return False\n    # Check each octet\n    for octet in octets:\n        if not octet or int(octet) < 0 or int(octet) > 255 or (int(octet) == 0 and len(octet) > 1):\n            return False\n    # If all checks passed, it's a valid IP address\n    return True",
    "tests": [
        "assert validIP(\"192.168.1.1\") == True",
        "assert validIP(\"172.16.254.1\") == True",
        "assert validIP(\"255.255.255.0\") == False",
        "assert validIP(\"0.0.0.0.1\") == False",
        "assert validIP(\"172.316.254.1\") == False",
        "assert validIP(\"192.168.001.1\") == False",
        "assert validIP(\"192.168.1.\") == False",
        "assert validIP(\".172.168.1.1\") == False",
        "assert validIP(\"192.168.1.1.\") == False",
        "assert validIP(\"192 168 1 . 1\") == True"
    ],
    "difficulty": "hard",
    "model": "mistral:latest",
    "style": "LeetCode"
}