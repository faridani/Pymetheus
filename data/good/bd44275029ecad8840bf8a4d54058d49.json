{
    "title": "'Anagram Checker (Hard)'",
    "description": "An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a function `are_anagrams` that checks if two given strings are anagrams.\n\n#### Function Signature\n```python\ndef are_anagrams(str1: str, str2: str) -> bool:\n```\n\n#### Input\n- `str1`, `str2` (str): Two strings that may contain letters and spaces.\n\n#### Output\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise. The strings can contain duplicated characters but both strings should have the same number of unique characters.",
    "code": "import collections\n\ndef are_anagrams(str1: str, str2: str) -> bool:\n    # Remove spaces and convert to lowercase\n    str1 = ''.join(char for char in str1.lower() if char not in ' ').replace(' ', '')\n    str2 = ''.join(char for char in str2.lower() if char not in ' ').replace(' ', '')\n    \n    # Check if both strings have the same number of unique characters and create a dictionary to count the frequency of each character in str1\n    if len(str1) != len(str2):\n        return False\n    char_count = collections.Counter(str1)\n    \n    # If all characters in str1 have a matching character in str2 with the same count and vice versa, then they are anagrams.\n    for char, count in char_count.items():\n        if char not in str2 or char_count[char] != str2.count(char):\n            return False\n    \n    return True",
    "tests": [
        "assert are_anagrams(\"listen\", \"silent\") == True",
        "assert are_anagrams(\"Hello world\", \"world Hello\") == True",
        "assert are_anagrams(\"Racecar\", \"Carrace\") == True",
        "assert are_anagrams(\"test\", \"tset\") == False",
        "assert are_anagrams(\"This is a test\", \"A silly test\") == False"
    ],
    "difficulty": "insanely difficult",
    "model": "mistral:latest",
    "style": "Competitive Programming"
}