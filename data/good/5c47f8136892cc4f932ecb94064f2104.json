{
    "title": "Hardest Path Finder",
    "description": "In a grid, you are standing at the top left corner. You can move either down or right to the adjacent cell. Write a function `hardest_path` that returns the length of the longest path from the top left corner to any other cell in the grid.\n\n#### Function Signature\n```python\ndef hardest_path(n: int) -> int:\n```\n\n#### Input\n- `n` (int): The number of rows and columns in the grid, which is a square.\n\n#### Output\n- Returns the length of the longest path from the top left corner to any other cell in the grid.",
    "code": "def hardest_path(n: int) -> int:\n    # Initialize a 2D array with `n` rows and columns, all filled with -1.\n    dp = [[-1 for _ in range(n)] for _ in range(n)]\n\n    # If the grid has only one cell, return 0.\n    if n == 1:\n        return 0\n\n    # Fill up the first row and column.\n    for i in range(n):\n        dp[0][i] = i\n        dp[i][0] = i\n\n    # For each cell in the grid, calculate the longest path from the top left corner to that cell.\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])\n\n    # Return the longest path length, which is the value of the bottom right cell.\n    return dp[-1][-1]",
    "tests": [
        "assert hardest_path(3) == 4",
        "assert hardest_path(2) == 2",
        "assert hardest_path(5) == 7"
    ],
    "difficulty": "hard",
    "model": "llama3:latest",
    "style": "Exercism"
}