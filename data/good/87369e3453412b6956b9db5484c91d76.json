{
    "title": "Medium Python Coding Question: Check for Balanced Brackets",
    "description": "Given a string `s` containing characters (letters, digits, '(', ')', '{', '}', '[', ']') verify if the brackets are balanced. A string is considered balanced if it has as many opening brackets of any type (\"(\", \"{\", and \"[\") as closing brackets of that same type (\":)\", \":}\", and \"]\"), in correct order.\n\n#### Function Signature\n```python\ndef is_balanced(s: str) -> bool:\n```\n\n#### Input\n- `s` (str): A string containing brackets characters ('(', ')', '{', '}', '[', and ']').\n\n#### Output\n- Returns `True` if the brackets in the input string are balanced, `False` otherwise.",
    "code": "",
    "def is_balanced(s: str) -> bool:\n    stack = []\n    bracket_map = {'(': ')', '{': '}', '[': ']'}\n\n    for char in s:\n        if char in bracket_map:\n            stack.append(char)\n        elif len(stack) == 0 or bracket_\n          map[stack.pop()] != char:\n                return False\n\n    return len(stack) == \n        0": "",
    "tests": [
        "assert is_balanced(\"(\") == True",
        "assert is_balanced(\"{[]}\") == True",
        "assert is_balanced(\"([{}])\") == True",
        "assert is_balanced(\"[{()}]\") == True",
        "assert is_balanced(\"[({})]\\n]\") == False",
        "assert is_balanced(\"[(])\\n{\") == False",
        "assert is_balanced(\"\") == True"
    ],
    "difficulty": "medium",
    "model": "phi3:14b",
    "style": "SPOJ"
}