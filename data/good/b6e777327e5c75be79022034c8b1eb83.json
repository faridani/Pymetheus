{
    "title": "'Anagram Detector (Hard)'",
    "description": "An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a function `find_anagrams` that finds all the anagrams for a given list of words.\n\n#### Function Signature\n```python\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\n```\n\n#### Input\n- `words` (List[str]): A list of strings containing words that may have anagrams.\n\n#### Output\n- Returns a dictionary where the keys are the anagrams and the values are the original words that form the anagram.",
    "code": "def find_anagrams(words: List[str]) -> Dict[str, List[str]]:\n    # Create a dictionary to store anagrams\n    anagrams = {} \n    \n    for word in words:\n        # Sort the characters of the word\n        sorted_word = ''.join(sorted(word))\n        \n        if sorted_word in anagrams:\n            # If the sorted word is already in the dictionary, add the original word to the list\n            anagrams[sorted_word].append(word)\n        else:\n            # If the sorted word is not in the dictionary, create a new list and add the original word\n            anagrams[sorted_word] = [word]\n    \n    return anagrams",
    "tests": [
        "assert find_anagrams([\"listen\", \"silent\", \"enlist\"]) == {\"enlistsilent\" : [\"listen\", \"enlist\"], \"listen\" : [\"listen\"]}",
        "assert find_anagrams([\"python\", \"typhon\", \"hotpy\"]) == {\"hotpy\" : [\"python\"], \"typhon\" : [\"typhon\"]}",
        "assert find_anagrams([\"apple\", \"apples\", \"applauze\"]) == {\"applesapplauze\": [\"apple\", \"applauze\"], \"apple\" : [\"apple\"]}",
        "assert find_anagrams([]) == {}"
    ],
    "difficulty": "super hard",
    "model": "mistral:latest",
    "style": "ICPC"
}