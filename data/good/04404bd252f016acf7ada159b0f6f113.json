{
    "title": "'Anagram Finder (Hard)'",
    "description": "Write a function `find_anagrams` that finds all the anagrams of a given string within a list of strings. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n#### Function Signature\n```python\ndef find_anagrams(target: str, words: List[str]) -> List[str]:\n```\n\n#### Input\n- `target` (str): A string to find anagrams of.\n- `words` (List[str]): A list of strings that might contain the anagrams of the target.\n\n#### Output\n- Returns a list of strings that are anagrams of the target, sorted in alphabetical order. If no anagram is found, return an empty list.",
    "code": "def find_anagrams(target: str, words: List[str]) -> List[str]:\n    # Create a dictionary to store character counts\n    target_count = {char: target.count(char) for char in set(target)}\n    anagrams = []\n    for word in words:\n        # Check if the length of the word is equal to the length of the target\n        if len(word) != len(target):\n            continue\n        # Create a dictionary to store character counts of the current word\n        word_count = {char: word.count(char) for char in set(word)}\n        # Check if the dictionaries are equal (i.e., the words have the same characters)\n        if target_count == word_count:\n            anagrams.append(word)\n    return sorted(anagrams)",
    "tests": [
        "assert find_anagrams(\"listen\", [\"enlists\", \"silent\", \"senate\", \"martens\"]) == [\"enlist\", \"silent\"]",
        "assert find_anagrams(\"hello\", [\"world\", \"hello\", \"olleh\"]) == [\"hello\"]",
        "assert find_anagrams(\"racer\", [\"carer\", \"arc\", \"cares\", \"crew\"]) == [\"carer\", \"crew\", \"arc\"]",
        "assert find_anagrams(\"abcd\", [\"dcba\", \"abcd\", \"efgh\"]) == []"
    ],
    "difficulty": "hard",
    "model": "mistral:latest",
    "style": "Google Code Jam"
}