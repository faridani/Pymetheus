{
    "title": "'Anagram Finder (Hard)'",
    "description": "Write a function `find_anagrams` that finds all the anagrams of a given string. An anagram is a word or phrase formed by rearranging the letters of another word or phrase, typically using all the original letters exactly once.\n\n#### Function Signature\n```python\ndef find_anagrams(word: str) -> List[str]:\n```\n\n#### Input\n- `word` (str): A string containing only lowercase letters.\n\n#### Output\n- Returns a list of all the anagrams of the given word, sorted in lexicographic order. It is possible that there are no anagrams for a given input.",
    "code": "def find_anagrams(word: str) -> List[str]:\n    # Create a dictionary to store counts of each letter\n    count = {} \n    for char in word:\n        if char not in count:\n            count[char] = 1\n        else:\n            count[char] += 1\n    \n    anagrams = []\n    # Iterate through all possible letter combinations, and check if they form a valid anagram\n    for letters in itertools.permutations(string.ascii_lowercase):\n        current_word = ''.join(letters)\n        if len(current_word) != len(word):\n            continue\n        current_count = {} \n        # Count the letters of the current word\n        for char in current_word:\n            if char not in current_count:\n                current_count[char] = 1\n            else:\n                current_count[char] += 1\n        # Check if the counts match\n        if current_count == count:\n            anagrams.append(current_word)\n    return sorted(anagrams)",
    "tests": [
        "assert find_anagrams(\"listen\") == [\"silent\", \"enlist\"]",
        "assert find_anagrams(\"programming\") == [\"gromipmron\", \"grammarism\", \"grammaropm\", \"ignommarp\", \"minimaprog\", \"nagroimp\", \"progmanim\", \"rnamargpm\"]",
        "assert find_anagrams(\"python\") == []"
    ],
    "difficulty": "insanely difficult",
    "model": "mistral:latest",
    "style": "Google Code Jam"
}