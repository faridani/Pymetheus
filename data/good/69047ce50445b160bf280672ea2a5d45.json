{
    "title": "Hard: Fast Fourier Transform (FFT) Multiplication",
    "description": "The fast Fourier transform (FFT) is an algorithm that computes the discrete Fourier transform (DFT) and its inverse. Write a function `fft_multiply` that multiplies two polynomials using FFT. The polynomials will be represented as lists of coefficients, where the index of each coefficient corresponds to the power of x in the polynomial.\n\n#### Function Signature\n```python\ndef fft_multiply(p: List[int], q: List[int]) -> List[int]:\n```\n\n#### Input\n- `p` (List[int]): A list of coefficients representing a polynomial.\n- `q` (List[int]): A list of coefficients representing another polynomial.\n\n#### Output\n- Returns a list of coefficients representing the product of the input polynomials.\n",
    "code": "from typing import List\n\ndef fft_multiply(p: List[int], q: List[int]) -> List[int]:\n    n = 2**((len(p) + len(q)) - 1).bit_length()\n    p += [0] * (n - len(p))\n    q += [0] * (n - len(q))\n\n    def fft(a: List[complex], inverse: bool = False) -> List[complex]:\n        if len(a) == 1:\n            return a\n        a_even, a_odd = a[::2], a[1::2]\n        half_size = len(a) // 2\n        w_factor = -2j * complex('pi') / len(a) if inverse else 2j * complex('pi') / len(a)\n        w = [complex(1, 0)] + [cmath.exp(i * w_factor) for i in range(1, half_size)]\n        y_even = fft(a_even)\n        y_odd = fft(a_odd)\n        y = [0] * len(a)\n        for i in range(half_size):\n            y[i] = y_even[i] + w[i] * y_odd[i]\n            y[i + half_size] = y_even[i] - w[i] * y_odd[i]\n        return y if not inverse else [coef / len(a) for coef in y]\n\n    p_fft = fft([complex(coef, 0) for coef in p])\n    q_fft = fft([complex(coef, 0) for coef in q])\n    result_fft = [p_fft[i] * q_fft[i] for i in range(len(p_fft))]\n    return [round(abs(coef.real)) for coef in fft(result_fft, inverse=True)]\n",
    "tests": [
        "assert fft_multiply([1, 2], [3, 4]) == [3, 10, 8]",
        "assert fft_multiply([1, -1], [-1, 1]) == [1, -2, 1]",
        "assert fft_multiply([1, 0, 2], [3, 4]) == [3, 4, 10, 8]"
    ],
    "difficulty": "insanely difficult",
    "model": "codestral:latest"
}