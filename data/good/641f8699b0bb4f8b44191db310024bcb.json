{
    "title": "Sudoku Validator",
    "description": "A Sudoku board is a 9x9 grid made up of 3x3 subgrids, filled with digits from 1 to 9. The goal is to fill the grid such that each row, column and subgrid contains all digits from 1 to 9 without repetition. Write a function `validate_sudoku` that checks if a given Sudoku board is valid or not.\n\n#### Function Signature\n```python\ndef validate_sudoku(board: list) -> bool:\n```\n\n#### Input\n- `board` (list): A list of lists representing the Sudoku grid where each inner list represents a row and each element in an inner list represents a digit. Digits can be 0 or any number from 1 to 9.\n\n#### Output\n- Returns `True` if the Sudoku board is valid, `False` otherwise.",
    "code": "",
    "import numpy as np\n\ndef validate_sudoku(board: list) -> bool:\n    # Convert the 2D list into a matrix for easier manipulation\n    mat = np.array(board)\n\n    # Function to check rows and columns\n    def check_row_col(mat):\n        return np.all(np.abs(np.unique(mat, axis=0)) == np.arange(1, len(mat)+1))\n\n    # Function to check subgrids (3x3 squares)\n    def check_subgrid(mat):\n        for i in range(0, len(mat), 3):\n            for j in range(0, len(mat[0]), 3):\n                if not np.all(np.abs(np.unique(mat[i:i+3, j:j+3].ravel())) == np.arange(1, len(mat)+1)):\n                    return False\n        return True\n\n    # Check rows, columns and subgrids\n    return check_row_col(mat) and check_subgrid(mat)": "",
    "tests": [
        "assert validate_sudoku([[5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9]]) == True",
        "assert validate_sudoku([[5, 3, 4, 6, 7, 8, 9, 1, 0], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0]]) == False",
        "assert validate_sudoku([[8, 3, 4, 6, 7, 2, 9, 1, 5], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0]]) == False"
    ],
    "difficulty": "hard",
    "model": "qwen2:7b",
    "style": "Project Euler"
}