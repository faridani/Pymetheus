{
    "title": "'Palindromic Substrings Counter (Hard)'",
    "description": "Given a string `s`, find and count the maximum number of palindromic substrings that can be obtained from it. A palindromic substring is a sequence of characters that reads the same forwards as backwards.\n\n#### Function Signature\n```python\ndef count_palindromes(s: str) -> int:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns the maximum number of palindromic substrings in the input string.",
    "code": "def count_palindromes(s: str) -> int:\n    # Initialize counters for all possible substring lengths\n    n = len(s)\n    counts = [0] * (2 * n + 1)\n\n    # Count the number of odd-length palindromic substrings and even-length ones with a center character\n    for i in range(1, n + 1):\n        for j in range(i, n):\n            center = (i + j) // 2\n            left, right = i, j\n            while left > center - 1 and right < center + 1 and s[left - 1] == s[right + 1]:\n                left -= 1\n                right += 1\n            counts[2 * center - i + 1] = (j - left + 1) if j - left + 1 < n else (j - left + 1) // 2 + 1\n\n    # Calculate the number of even-length palindromic substrings without a center character\n    for i in range(2, n + 1):\n        if s[i - 1] == s[i]:\n            counts[0] += 1\n    \n    # Sum the counted values and return the result\n    return sum(counts)",
    "tests": [
        "assert count_palindromes(\"babad\") == 5",
        "assert count_palindromes(\"cbbd\") == 2",
        "assert count_palindromes(\"a\") == 1",
        "assert count_palindromes(\"abcd\") == 0"
    ],
    "difficulty": "insanely difficult",
    "model": "mistral:latest",
    "style": "Competitive Programming"
}