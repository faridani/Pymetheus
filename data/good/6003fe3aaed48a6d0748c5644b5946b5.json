{
    "title": "Prime Number Pair Finder (Hard)",
    "description": "Given a list of integers",
    "arguments": "the list of integers and the target number.\n\n#### Function Signature\n```python\ndef find_prime_pairs(numbers: List[int]",
    "target": "int) -> List[List[int]]:\n```\n\n#### Input\n- `numbers` (List[int]): A sorted list of integers without duplicates.\n- `target` (int): An integer greater than 1.\n\n#### Output\n- Returns a list of lists",
    "number.\n\nHint": "You can use the `isprime()` function provided below to check if a number is prime.`",
    "code": "def isprime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\ndef find_prime_pairs(numbers: List[int], target: int) -> List[List[int]]:\n    pairs = []\n    for num in numbers:\n        complement = target - num\n        if complement > num and isprime(complement) and isprime(num):\n            pairs.append([num, complement])\n    return pairs",
    "tests": [
        "assert find_prime_pairs([2, 3, 5], 5) == [[2, 3], [3, 2]]",
        "assert find_prime_pairs([2, 3, 4, 7, 9], 7) == [[2, 5], [3, 4]]",
        "assert find_prime_pairs([2, 3, 5, 6], 5) == []",
        "assert find_prime_pairs([2, 3, 5, 7, 11], 9) == [[2, 7], [3, 6], [5, 4]]"
    ],
    "difficulty": "hard",
    "model": "mistral:latest",
    "style": "Facebook Hacker Cup"
}