{
    "title": "'Anagram Detector (Hard)'",
    "description": "An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a function `anagram_check` that checks if two given strings are anagrams.\n\n#### Function Signature\n```python\ndef anagram_check(str1: str, str2: str) -> bool:\n```\n\n#### Input\n- `str1` (str): A string containing only lowercase alphabets.\n- `str2` (str): Another string containing only lowercase alphabets.\n\n#### Output\n- Returns `True` if the two strings are anagrams, `False` otherwise.\n\n**Hint:** Use a dictionary to store the frequency of each character in the first string and compare it with the frequency of each character in the second string.",
    "code": "def anagram_check(str1: str, str2: str) -> bool:\n    # Create a dictionary to store the frequency of characters in the first string\n    freq1 = {} \n    for char in str1: \n        if char not in freq1: \n            freq1[char] = 1 \n        else: \n            freq1[char] += 1 \n    # Create a dictionary to store the frequency of characters in the second string\n    freq2 = {} \n    for char in str2: \n        if char not in freq2: \n            freq2[char] = 1 \n        else: \n            freq2[char] += 1 \n    # Check if the dictionaries are equal\n    return freq1 == freq2",
    "tests": [
        "assert anagram_check('listen', 'silent') == True",
        "assert anagram_check('hello', 'world') == False",
        "assert anagram_check('madam', 'dam') == True",
        "assert anagram_check('abcdefghijklmnopqrstuvwxyz', 'zyxwvutsrqponmlkjihgfedcba') == True"
    ],
    "difficulty": "super hard",
    "model": "mistral:latest",
    "style": "Codeforces"
}