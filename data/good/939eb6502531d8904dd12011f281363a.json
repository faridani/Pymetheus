{
    "title": "\"Efficient Palindrome Checker (Medium)\"",
    "description": "A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). However, our previous solution was not efficient for long strings.\n\n#### Function Signature\n```python\ndef is_palindrome(s: str) -> bool:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns `True` if the input string is a palindrome, `False` otherwise.",
    "code": "import collections\n\ndef is_palindrome(s: str) -> bool:\n    # Remove non-alphanumeric characters and convert to lowercase\n    s = ''.join(char for char in s.lower() if char in string.ascii_letters + string.digits)\n    # Count the frequency of each character\n    count = collections.Counter(s)\n    # Check if the number of occurrences of each character is odd",
    "count": "n        if count[char] % 2 != 0:\n            return False\n    \n    # If no character count was odd",
    "right": "n        if s[left] != s[right]:\n            return False\n        left += 1\n        right -= 1\n    \n    # If we reach this point",
    "tests": [
        "assert is_palindrome(\"A man, a plan, a canal, Panama\") == True",
        "assert is_palindrome(\"racecar\") == True",
        "assert is_palindrome(\"hello\") == False",
        "assert is_palindrome(\"No 'x' in Nixon\") == True",
        "assert is_palindrome(\"aba-cd-aba\") == True",
        "assert is_palindrome(\"a\") == True",
        "assert is_palindrome(\"madam\") == True"
    ],
    "difficulty": "medium",
    "model": "mistral:latest",
    "style": "ICPC"
}