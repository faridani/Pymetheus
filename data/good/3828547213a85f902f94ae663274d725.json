{
    "title": "'Anagram Detector (Hard)'",
    "description": "An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a function `are_anagrams` that determines if two given strings are anagrams of each other.\n\n#### Function Signature\n```python\ndef are_anagrams(str1: str, str2: str) -> bool:\n```\n\n#### Input\n- `str1` (str): A non-empty string containing only lowercase letters and spaces.\n- `str2` (str): Another non-empty string containing only lowercase letters and spaces.\n\n#### Output\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.",
    "code": "import collections\n\ndef are_anagrams(str1: str, str2: str) -> bool:\n    # Remove spaces from the strings and convert to a dictionary of character frequencies\n    freq1 = collections.Counter(str1.lower().replace(' ', ''))\n    freq2 = collections.Counter(str2.lower().replace(' ', ''))\n    \n    # Check if both dictionaries have the same items and count for each item\n    return freq1 == freq2",
    "tests": [
        "assert are_anagrams('listen', 'silent') == True",
        "assert are_anagrams('hello', 'world') == False",
        "assert are_anagrams('cats', 'act') == True",
        "assert are_anagrams('Python', 'NottyphP') == True"
    ],
    "difficulty": "super hard",
    "model": "mistral:latest",
    "style": "ACM-ICPC"
}