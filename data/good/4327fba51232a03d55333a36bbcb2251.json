{
    "title": "Hard: Implement a Binary Search Tree",
    "description": "Create a Binary Search Tree (BST) data structure that supports insertion, deletion and search operations.\n\n#### Function Signature:\n```python\nclass Node:\n  def __init__(self, key):\n    pass\n\nclass BinarySearchTree:\n  def __init__(self):\n    pass\n  def insert(self, key: int) -> None:\n    pass\n  def search(self, key: int) -> bool:\n    pass\n  def delete(self, key: int) -> None:\n    pass\n```\n#### Input\n- `key` (int): An integer to be inserted or searched in the BST.\n\n#### Output\n- For insert and delete functions, there is no return value. For search function, it should return `True` if key exists in the tree, `False` otherwise.",
    "code": "class Node:\n  def __init__(self, key):\n    self.left = None\n    self.right = None\n    self.val = key\n\nclass BinarySearchTree:\n  def __init__(self):\n    self.root = None\n  \n  def insert(self, key: int) -> None:\n    if not self.root:\n      self.root = Node(key)\n    else:\n      self._insert_recursive(self.root, key)\n  \n  def _insert_recursive(self, node, key):\n    if key < node.val:\n      if node.left is None:\n        node.left = Node(key)\n      else:\n        self._insert_recursive(node.left, key)\n    elif key > node.val:\n      if node.right is None:\n        node.right = Node(key)\n      else:\n        self._insert_recursive(node.right, key)\n  \n  def search(self, key: int) -> bool:\n    return self._search_recursive(self.root, key)\n  \n  def _search_recursive(self, node, key):\n    if node is None or node.val == key:\n      return node is not None\n    elif key < node.val:\n      return self._search_recursive(node.left, key)\n    else:\n      return self._search_recursive(node.right, key)\n  \n  def delete(self, key: int) -> None:\n    self.root = self._delete_recursive(self.root, key)",
    "tests": [
        "bst = BinarySearchTree()\nbst.insert(50)\nassert bst.search(50) == True\nassert bst.search(60) == False\nbst.insert(30)\nbst.insert(70)\nassert bst.search(30) == True\nassert bst.search(70) == True\nbst.delete(20)\nassert bst.search(20) == False"
    ],
    "difficulty": "hard",
    "model": "codestral:latest"
}