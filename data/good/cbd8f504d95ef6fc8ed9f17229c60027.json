{
    "title": "'Anagram Detector (Hard)'",
    "description": "An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a function `is_anagram` that checks if two given strings are anagrams.\n\n#### Function Signature\n```python\ndef is_anagram(s1: str, s2: str) -> bool:\n```\n\n#### Input\n- `s1`, `s2` (str): Two strings that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise. (For example, \"listen\" and \"silent\" are anagrams but \"listen\" and \"silence\" are not).",
    "code": "import collections\n\ndef is_anagram(s1: str, s2: str) -> bool:\n    # Remove non-alphabetic characters from both strings\n    s1 = ''.join(char for char in s1 if char.isalpha())\n    s2 = ''.join(char for char in s2 if char.isalpha())\n    \n    # Count the frequency of each letter in each string\n    freq1 = collections.Counter(s1)\n    freq2 = collections.Counter(s2)\n\n    # Check if both strings have the same number of characters and all characters appear with the same frequency in both strings\n    return len(s1) == len(s2) and freq1 == freq2",
    "tests": [
        "assert is_anagram(\"listen\", \"silent\") == True",
        "assert is_anagram(\"rate\", \"car\") == True",
        "assert is_anagram(\"listen\", \"silence\") == False",
        "assert is_anagram(\"Misunderstood\", \"strusted\" ) == True"
    ],
    "difficulty": "super hard",
    "model": "mistral:latest",
    "style": "ACM-ICPC"
}