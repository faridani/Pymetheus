{
    "title": "Anagram Detector (Hard)",
    "description": "Write a function `are_anagrams(s1: str, s2: str) -> bool` that checks if two given strings are anagrams of each other.\n\n#### Function Signature\n```python\ndef are_anagrams(s1: str, s2: str) -> bool:\n```\n\n#### Input\n- `s1`, `s2` (str): Two strings that may contain only lowercase letters and spaces.\n\n#### Output\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise. Strings with different lengths are not anagrams.\n",
    "code": "def are_anagrams(s1: str, s2: str) -> bool:\n    # Remove spaces from both strings\n    s1 = ''.join(filter(str.isalpha, s1)).lower()\n    s2 = ''.join(filter(str.isalpha, s2)).lower()\n    \n    # If the two strings have different lengths, they are not anagrams\n    if len(s1) != len(s2):\n        return False\n    \n    # Count the frequency of each character in both strings\n    char_freq = Counter(s1)\n    for char in s2:\n        if char not in char_freq or char_freq[char] == 0:\n            return False\n        char_freq[char] -= 1\n    \n    # If no characters were found that don't match the frequency, the strings are anagrams\n    return True",
    "tests": [
        "assert are_anagrams('listen', 'silent') == True",
        "assert are_anagrams('hello', 'world') == False",
        "assert are_anagrams('act tact', 'tac cat') == True"
    ],
    "difficulty": "hard",
    "model": "mistral:latest"
}