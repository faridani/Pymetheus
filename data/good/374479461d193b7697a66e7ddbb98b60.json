{
    "title": "Hard: Interleaving Strings",
    "description": "Given three strings `s1`, `s2`, and `s3`. Determine whether `s3` is formed by interleaving the characters of `s1` and `s2` in a way that maintains their relative order.\n\n#### Function Signature\n```python\ndef is_interleave(s1: str, s2: str, s3: str) -> bool:\n```\n\n#### Input\n- `s1` (str): The first string.\n- `s2` (str): The second string.\n- `s3` (str): The potential interleaved string.\n\n#### Output\n- Returns `True` if `s3` is an interleaving of `s1` and `s2`, `False` otherwise.",
    "code": "def is_interleave(s1: str, s2: str, s3: str) -> bool:\n    if len(s1) + len(s2) != len(s3):\n        return False\n\n    dp = [[False for _ in range(len(s2) + 1)] for _ in range(len(s1) + 1)]\n    dp[0][0] = True\n\n    for i in range(1, len(s1) + 1):\n        dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n\n    for j in range(1, len(s2) + 1):\n        dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n\n    for i in range(1, len(s1) + 1):\n        for j in range(1, len(s2) + 1):\n            dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or \\\n                       (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])\n\n    return dp[len(s1)][len(s2)]",
    "tests": [
        "assert is_interleave('aabcc', 'dbbca', 'aadbbcbcac') == True",
        "assert is_interleave('aabcc', 'dbbca', 'aadbbbaccc') == False",
        "assert is_interleave('', '', '') == True",
        "assert is_interleave('a', '', 'a') == True"
    ],
    "difficulty": "insanely difficult",
    "model": "gemma2:27b-instruct-q5_K_S",
    "style": "LeetCode"
}