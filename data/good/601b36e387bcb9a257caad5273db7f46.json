{
    "title": "'Recursive Fibonacci Sequence Generator (Easy)'",
    "description": "A function `fibonacci` generates the Fibonacci sequence of numbers. The first two numbers in the sequence are 0 and 1.\n\n#### Function Signature\n```python\ndef fibonacci(n: int) -> list:\n```\n\n#### Input\n- `n` (int): An integer representing the number of Fibonacci numbers to generate, starting from 0. For example, if n is 5, the function should return [0, 1, 1, 2, 3, 5]. If n is negative or not an integer, the function should raise a ValueError.\n\n#### Output\n- Returns a list of integers representing the Fibonacci sequence up to and including the `n`th number. If the input is invalid, the function should raise a ValueError.",
    "code": "def fibonacci(n: int) -> list:\n    if not isinstance(n, int):\n        raise ValueError('Input must be an integer')\n    elif n < 0:\n        raise ValueError('Input must be non-negative')\n    else:\n        def _fibonacci_helper(a: int, b: int, n: int) -> list:\n            if n == 1:\n                return [a]\n            elif n == 2:\n                return [a, b]\n            else:\n                c = a + b\n                return _fibonacci_helper(b, c, n - 1) + [c]\n        return _fibonacci_helper(0, 1, n)",
    "tests": [
        "assert fibonacci(5) == [0, 1, 1, 2, 3, 5]",
        "assert fibonacci(10) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]",
        "assert fibonacci(-1) == \"ValueError: Input must be non-negative\"",
        "assert fibonacci(3.5) == \"ValueError: Input must be an integer\""
    ],
    "difficulty": "easy",
    "model": "mistral:latest",
    "style": "Internationals Olympiad"
}