{
    "title": "Hard: Binary Tree Level Order Traversal",
    "description": "Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).\n\n#### Function Signature\n```python\ndef levelOrder(root: TreeNode) -> list[list[int]]:\n```\n\n#### Input\n- `root` (`TreeNode`): The root node of the binary tree.\n\n#### Output\n- Returns a list of lists, where each inner list represents a level in the binary tree and contains the values of the nodes at that level from left to right.\n#### Constraints:\n- The number of nodes in the tree is in the range [0, 2000].\n- -1000 <= Node.val <= 1000",
    "code": "from collections import deque\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef levelOrder(root: TreeNode) -> list[list[int]]:\n    if not root:\n        return []\n    result = []\n    queue = deque([root])\n    while queue:\n        level_size = len(queue)\n        current_level = []\n        for _ in range(level_size):\n            node = queue.popleft()\n            current_level.append(node.val)\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n        result.append(current_level)\n    return result",
    "tests": [
        "# Example Usage (You will need to create TreeNode instances for testing)"
    ],
    "difficulty": "insanely difficult",
    "model": "gemma2:27b-instruct-q5_K_S",
    "style": "Codecademy"
}