{
    "title": "'Anagram Detector (Hard)'",
    "description": "An anagram is a word or phrase that consists of the same letters as another, but arranged differently. Write a function `find_anagrams` that takes a list of strings and returns a dictionary where the keys are unique strings from the input list and the values are lists of all the strings in the input list that form an anagram with the corresponding key.\n\n#### Function Signature\n```python\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\n```\n\n#### Input\n- `words` (List[str]): A list of strings that may contain letters in any case.\n\n#### Output\n- Returns a dictionary where the keys are unique strings from the input list and the values are lists of all the strings in the input list that form an anagram with the corresponding key.",
    "code": "from collections import Counter, defaultdict\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\n    # Create a dictionary of counts for each character in each word\n    count_dict = defaultdict(int)\n    for word in words:\n        # Count the occurrences of each character in the word\n        for char in word.lower():\n            count_dict[char] += 1\n    \n    # Create a dictionary to store the results\n    result = {}\n    \n    # Iterate through the counts and find anagrams\n    for key, value in count_dict.items():\n        # If this is a count of a common letter\n        if value > 1:\n            # This count cannot be part of an anagram key\n            continue\n        \n        # Create the anagram key if it doesn't exist yet\n        anagram_key = ''.join(sorted(key))\n        if anagram_key not in result:\n            result[anagram_key] = []\n        \n        # Add the current word to the list of values for this anagram key\n        result[anagram_key].append(word)\n    \n    return result",
    "tests": [
        "assert find_anagrams([\"listen\", \"silent\", \"enlist\"]) == {\"silent\": [\"listen\", \"enlist\"], \"enlist\": [\"listen\", \"silent\"]}",
        "assert find_anagrams([\"python\", \"typhon\", \"hotpot\", \"thoppy\"]) == {\"thonpy\": [\"python\", \"typhon\"], \"hotpot\": [\"hotpot\"], \"thoppy\": [\"thoppy\"]}",
        "assert find_anagrams([\"apple\", \"apples\", \"app\", \"appl\"]) == {\"pple\": [\"apple\", \"apples\"], \"app\": [\"app\"]}"
    ],
    "difficulty": "super hard",
    "model": "mistral:latest",
    "style": "ICPC"
}