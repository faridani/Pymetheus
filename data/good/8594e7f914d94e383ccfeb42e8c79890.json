{
    "title": "Median of Two Sorted Arrays",
    "description": "Given two sorted arrays nums1 and nums2",
    "median_of_two_sorted_arrays(nums1": "List[int]",
    "nums2": "List[int]) -> float:\n```\n\n#### Input\n- Two sorted integer arrays `nums1` and `nums2`.\n\n#### Output\n- Returns the median value of the combined array formed by merging `nums1` and `nums2`. If the merged array length is even",
    "code": "",
    "\nfrom typing import List\n\ndef median_of_two_sorted_arrays(nums1: List[int], nums2: List[int]) -> float:\n    combined_array = []\n    while len(nums1) > 0 or len(nums2) > 0:\n        if not nums1:\n            break\n        if not nums2:\n            break\n        \n        if nums1[0] <= nums2[0]:\n            combined_array.append(nums1.pop(0))\n        else:\n            combined_array.append(nums2.pop(0))\n    \n    if len(combined_array) % 2 == 1:\n        return combined_array[len(combined_array)//2]\n    else:\n        mid_index = (len(combined_array) - 1) // 2\n        return (combined_array[mid_index] + combined_array[mid_index + 1]) / 2.0\n\n# Test Cases\ntest_cases = [\n    ([], [1, 2, 3, 4, 5]),\n    ([1, 2, 3], []),\n    ([1, 3], [-1, -3, 2, 5]),\n    ([1, 3], [2]),\n    ([-1, 0, 0, 1], [-1])\n]\n\nfor nums1, nums2 in test_cases:\n    print(f": "edian_of_two_sorted_arrays({nums1}, {nums2}) == {median_of_two_sorted_arrays(nums1, nums2)}",
    "tests": [
        "assert median_of_two_sorted_arrays([], [1, 2, 3, 4, 5]) == 3.0",
        "assert median_of_two_sorted_arrays([1, 2, 3], []) == 2.0",
        "assert median_of_two_sorted_arrays([1, 3], [-1, -3, 2, 5]) == 1.0",
        "assert median_of_two_sorted_arrays([1, 3], [2]) == 2.0",
        "assert median_of_two_sorted_arrays([-1, 0, 0, 1], [-1]) == -0.5"
    ],
    "difficulty": "medium",
    "model": "qwen2:7b",
    "style": "LeetCode"
}