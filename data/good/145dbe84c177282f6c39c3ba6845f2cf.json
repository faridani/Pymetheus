{
    "title": "Hard: Maximal Suffix Array",
    "description": "Given a string of lowercase letters, find the maximum length of suffix array such that each pair of adjacent suffixes has at most 1 character different. For example, if the input is \"abcde\", the output should be 3 because [\"abcde\", \"bcdea\", \"cdeb\"] are all valid suffix arrays with length 3. If it's not possible to find a valid suffix array with any positive length, return -1.\n\n#### Function Signature\n```python\ndef maximal_suffix_array(s: str) -> int:\n```\n\n#### Input\n- `s` (str): A string of lowercase letters.\n\n#### Output\n- The maximum length of the valid suffix array. If it's not possible to find a valid suffix array with any positive length, return -1.",
    "code": "\ndef maximal_suffix_array(s: str) -> int:\n    n = len(s)\n    dp = [0] * (n + 1)\n\n    for i in range(n):\n        for j in range(i + 1):\n            if s[i] == s[j]:\n                dp[i + 1] = max(dp[i + 1], dp[j] + 1)\n            else:\n                dp[i + 1] = max(dp[i + 1], dp[j])\n\n    return max(0, dp[-1])",
    "tests": [
        "assert maximal_suffix_array('abcde') == 3",
        "assert maximal_suffix_array('abcdef') == -1",
        "assert maximal_suffix_array('aaa') == 4",
        "assert maximal_suffix_array('abca') == 2"
    ],
    "difficulty": "hard",
    "model": "llama3:latest",
    "style": "AtCoder"
}