{
    "title": "'Levenshtein Distance Calculator (Hard)'",
    "description": "Given two strings, the Levenshtein distance measures the minimum number of single-character edits (insertions, deletions or substitutions) required to change one word into the other.\n\n#### Function Signature\n```python\ndef levenshtein_distance(s1: str, s2: str) -> int:\n```\n\n#### Input\n- `s1`, `s2` (str): Two strings that may contain letters, numbers, and spaces.\n\n#### Output\n- Returns the minimum number of single-character edits required to change `s1` into `s2`.",
    "code": "def levenshtein_distance(s1: str, s2: str) -> int:\n    # Create a matrix for storing the intermediate results\n    len_s1 = len(s1) + 1\n    len_s2 = len(s2) + 1\n    dp = [[0] * len_s2 for _ in range(len_s1)]\n    \n    # Fill the matrix with intermediate results\n    for i in range(len_s1):\n        for j in range(len_s2):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            else:\n                cost = 1 if s1[i-1] != s2[j-1] else 0\n                dp[i][j] = min(dp[i-1][j] + 1, dp[i][j-1] + 1, dp[i-1][j-1] + cost) + cost\n    \n    # The final answer is the bottom right cell of the matrix\n    return dp[-1][-1]",
    "tests": [
        "assert levenshtein_distance('kitten', 'sitting') == 3",
        "assert levenshtein_distance('hello', 'world') == 4",
        "assert levenshtein_distance('intentionally stalled', 'unintentional stalling') == 6"
    ],
    "difficulty": "super hard",
    "model": "mistral:latest",
    "style": "AtCoder"
}