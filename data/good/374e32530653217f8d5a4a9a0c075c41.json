{
    "title": "'Palindromic Substrings Count Finder (Hard)'",
    "description": "\"Given a string, find the number of palindromic substrings it contains. A palindromic string reads the same forwards and backwards (ignoring spaces, punctuation, and capitalization).\n\n#### Function Signature\n```python\ndef count_palindromes(s: str) -> int:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns the number of palindromic substrings in the input string.",
    "code": "import collections\n\ndef count_palindromes(s: str) -> int:\n    # Remove non-alphanumeric characters\n    s = ''.join(char for char in s if char in string.ascii_letters + string.digits)\n    # Create a dictionary to store the number of each substring\n    counts = collections.Counter(s[::-1] + s)\n    # The count of palindromes is the sum of squares of odd counts\n    return sum(count * count for count in counts.values() if count % 2 == 1)",
    "tests": [
        "assert count_palindromes('racecar') == 3",
        "assert count_palindromes('babad') == 1",
        "assert count_palindromes('cbbd') == 2",
        "assert count_palindromes('acbcbacdcbbcaba') == 10"
    ],
    "difficulty": "hard",
    "model": "mistral:latest",
    "style": "Competitive Programming"
}