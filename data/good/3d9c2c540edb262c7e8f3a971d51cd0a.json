{
    "title": "Longest Increasing Subsequence (Hard)",
    "description": "Given an array of integers, find the length of the longest increasing subsequence.\n\n#### Function Signature\n```python\ndef longest_increasing_subsequence(nums: List[int]) -> int:\n```\n\n#### Input\n- `nums` (List[int]): A list of integers. It's guaranteed that the input sequence contains at least 1 number.\n\n#### Output\n- Returns the length of the longest increasing subsequence.\n\n#### Constraints\n- 1 <= len(nums) <= 2000\n- -10^6 <= nums[i] <= 10^6\n\n#### Hints\n- You can use dynamic programming to solve this problem. Initialize an array `dp` where `dp[i]` represents the length of the longest increasing subsequence ending at index `i`.",
    "code": "from typing import List\n\ndef longest_increasing_subsequence(nums: List[int]) -> int:\n    if not nums:\n        return 0\n    dp = [1] * len(nums)\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
    "tests": [
        "assert longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4",
        "assert longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4",
        "assert longest_increasing_subsequence([7, 7, 7, 7, 7, 7, 7]) == 1"
    ],
    "difficulty": "super hard",
    "model": "mistral-nemo:latest",
    "style": "Competitive Programming"
}