{
    "title": "'Palindromic Substrings Count Finder (Hard)'",
    "description": "A palindromic substring is a contiguous sequence of characters in a string that reads the same forward and backward. Write a function `count_palindromes` that finds the number of palindromic substrings within a given string.\n\n#### Function Signature\n```python\ndef count_palindromes(s: str) -> int:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns the number of palindromic substrings within the input string.",
    "code": "def count_palindromes(s: str) -> int:\n    # Base case for empty strings or single characters\n    if len(s) <= 1: return 1\n    n = len(s)\n    palindrome_count = 0\n    # Iterate through all possible substrings with an odd length\n    for i in range(n):\n        # Calculate the middle index of the current substring (centered at 'i')\n        mid = (i + n) // 2\n        # Initialize the start and end indices of the current substring\n        low, high = i, i\n        # While the start and end indices are within the bounds of the string and the substring is a palindrome:\n        while low >= 0 and high < n and s[low] == s[high]:\n            low -= 1\n            high += 1\n        # If the current substring is a palindrome, increment the count\n        if low + 1 == high:\n            palindrome_count += 1\n    # Iterate through all possible substrings with an even length (two-indexed)\n    for i in range(0, n - 1):\n        j = i + 2\n        # Calculate the middle index of the current substring\n        mid = (i + n) // 2\n        # If the first and last characters are equal:\n        if s[i] == s[j]:\n            # Increment the start and end indices and check for palindromicity\n            low, high = i + 1, j - 1\n            while low >= 0 and high < n and s[low] == s[high]:\n                low -= 1\n                high += 1\n            # If the current substring is a palindrome, increment the count\n            if low + 1 == high:\n                palindrome_count += 1\n    return palindrome_count",
    "tests": [
        "assert count_palindromes(\"a\") == 1",
        "assert count_palindromes(\"aa\") == 1",
        "assert count_palindromes(\"abba\") == 3",
        "assert count_palindromes(\"racecar\") == 7"
    ],
    "difficulty": "hard",
    "model": "mistral:latest",
    "style": "HackerEarth"
}