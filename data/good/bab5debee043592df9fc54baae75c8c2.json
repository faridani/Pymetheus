{
    "title": "'Polindromes with Reversed Vowels (Medium)'",
    "description": "A polindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). However, in this problem, we are considering polindromes where all vowels are reversed. For example: \"No 'x' in Nixon\" is a polindrome because the only vowels are 'i', 'o', 'e', and they are reversed.\n\n#### Function Signature\n```python\ndef is_polindrome(s: str) -> bool:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns `True` if the input string is a polindrome with reversed vowels, `False` otherwise.",
    "code": "import re\n\ndef is_polindrome(s: str) -> bool:\n    # Remove non-alphanumeric characters and convert to lowercase\n    s = re.sub('[^a-zA-Z0-9]', '', s).lower()\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    # Reverse the order of vowels in the string\n    vowel_reverse = s.replace('a', '').replace('e', '').replace('i', '').replace('o', '').replace('u', '') + s.replace('A', '').replace('E', '').replace('I', '').replace('O', '').replace('U', '')[::-1]\n    # Check if the string and its vowels reversed is equal\n    return s == vowel_reverse",
    "tests": [
        "assert is_polindrome(\"No 'x' in Nixon\") == True",
        "assert is_polindrome(\"A man, a plan, a canal, Panama\") == False",
        "assert is_polindrome(\"RADAR\") == True",
        "assert is_polindrome(\"Able was I ere I saw Elba\") == True"
    ],
    "difficulty": "medium",
    "model": "mistral:latest",
    "style": "SPOJ"
}