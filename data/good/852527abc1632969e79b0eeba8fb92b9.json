{
    "title": "'Anagram Detector (Hard)'",
    "description": "An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n#### Function Signature\n```python\ndef find_anagrams(words: List[str]) -> List[List[str]]:\n```\n\n#### Input\n- `words` (List[str]): A list of strings containing words to check for anagrams.\n\n#### Output\n- Returns a list of lists, where each inner list contains the original word and all its anagrams found in the input list. Anagrams are sorted alphabetically.\n\nThe words in the output should be lowercase, without spaces or punctuation characters.",
    "code": "def find_anagrams(words: List[str]) -> List[List[str]]:\n    # Create a dictionary to store the frequencies of each character for each word\n    word_dict = {word: {} for word in words}\n    for word in words:\n        # Calculate the frequency of each character in the word and update the dictionary\n        freq = {} \n        for char in word:\n            if char not in freq:\n                freq[char] = 1\n            else:\n                freq[char] += 1\n        word_dict[word] = freq\n    \n    # Create an empty list to store the results\n    result = []\n    \n    # Iterate through each dictionary item and find possible anagrams\n    for word1, freq1 in word_dict.items():\n        for word2, freq2 in word_dict.items():\n            if word1 != word2 and set(freq1) == set(freq2):\n                # Sort both words alphabetically and add them to the result list\n                result.append([sorted(word1), sorted(word2)])\n    return result",
    "tests": [
        "assert find_anagrams(['listen', 'silent', 'enlist', 'education']) == [['listen', 'enlist'], ['silent', 'education']]",
        "assert find_anagrams(['apple', 'apples', 'app', 'appeal']) == [['apple', 'app', 'apples'], ['appeal']]"
    ],
    "difficulty": "super hard",
    "model": "mistral:latest",
    "style": "Google Code Jam"
}