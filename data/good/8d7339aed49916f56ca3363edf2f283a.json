{
    "title": "Maximum Subarray Sum",
    "description": "Given a 2D array of integers, find the maximum sum of any subarray that passes through a single cell. A subarray is a contiguous portion of the original array.\n\n#### Function Signature\n```python\ndef max_subarray_sum(arr: list[list[int]]) -> int:\n```\n\n#### Input\n- `arr` (list[list[int]]): A 2D array of integers where each row represents a sequence of numbers.\n\n#### Output\n- Returns the maximum sum of any subarray that passes through a single cell in the input array.",
    "code": "\nimport heapq\n\ndef max_subarray_sum(arr: list[list[int]]) -> int:\n    m, n = len(arr), len(arr[0])\n    prefix_sum = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            prefix_sum[i][j] = arr[i - 1][j - 1] + prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1]\n    \n    max_sum = float('-inf')\n    for i in range(m):\n        for j in range(n):\n            for k in range(i + 1, m + 1):\n                for col in range(j + 1, n + 1):\n                    current_sum = prefix_sum[k][col] - prefix_sum[i][col] - prefix_sum[k][j] + prefix_sum[i][j]\n                    max_sum = max(max_sum, current_sum)\n    \n    return max_sum",
    "tests": [
        "assert max_subarray_sum([[10, 7], [0, 12]]) == 23",
        "assert max_subarray_sum([[-1, -2], [-3, -4]]) == 5",
        "assert max_subarray_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 18"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "Facebook Hacker Cup"
}