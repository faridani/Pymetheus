{
    "title": "'Anagram Detector (Hard)'",
    "description": "An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a function `find_anagrams` that takes in a list of words and returns a list of tuples containing the original word and its corresponding anagram(s).\n\n#### Function Signature\n```python\ndef find_anagrams(words: List[str]) -> List[Tuple[str, str]]:\n```\n\n#### Input\n- `words` (List[str]): A list of strings containing words.\n\n#### Output\n- Returns a list of tuples. Each tuple contains the original word and its corresponding anagram(s). The order of the tuples is not significant.",
    "code": "def find_anagrams(words: List[str]) -> List[Tuple[str, str]]:\n    # Sorted words as keys in a dictionary\n    anagrams = {}  \n    for word in words:\n        # Sort the characters of the word\n        sorted_word = ''.join(sorted(word))\n        if sorted_word not in anagrams.keys():\n            anagrams[sorted_word] = [word]\n        else:\n            anagrams[sorted_word].append(word)\n    # Convert the dictionary values to lists\n    result = []\n    for key, value in anagrams.items():\n        result.append((key, ','.join(value)))\n    return result",
    "tests": [
        "assert find_anagrams([\"listen\", \"silent\", \"enlist\", \"linen\", \"education\"]) == [(\"education\", \"edocutecniadnuLE\"), (\"enlist\", \"ilineseN\"), (\"listen\", \"silent\"), (\"linen\", \"nenil\")]",
        "assert find_anagrams([\"deified\", \"file\", \"ideal\"]) == [(\"ideal\", \"ialdiE\"), (\"deified\", \"deifidedFiedle\")]"
    ],
    "difficulty": "insanely difficult",
    "model": "mistral:latest",
    "style": "ICPC"
}