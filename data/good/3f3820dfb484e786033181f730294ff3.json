{
    "title": "Polindromic Integer Finder",
    "description": "Write a function `find_polindromes` that finds all polindromic integers between two given numbers (inclusive).\n\n#### Function Signature\n```python\ndef find_polindromes(m: int, n: int) -> List[int]:\n```\n\n#### Input\n- `m` (int): A non-negative integer representing the lower bound.\n- `n` (int): A non-negative integer representing the upper bound.\n\n#### Output\n- Returns a list of polindromic integers between the given bounds.\n\nPolindromic integers are positive integers that read the same forward and backward. For example, 1, 2, 3, 5, 7, and 8 are not polindromic while 11, 181, 373, 385, and 881 are.",
    "code": "def find_polindromes(m: int, n: int) -> List[int]:\n    # Create a set to store the polindromic numbers\n    polindromes = set()\n\n    # Iterate over the numbers between the given bounds\n    for num in range(m, n + 1):\n        # Check if the number is equal to its reverse and is greater than 0\n        if str(num) == str(num)[::-1] and num > 0:\n            polindromes.add(num)\n    \n    # Return the set as a list\n    return list(polindromes)",
    "tests": [
        "assert find_polindromes(1, 5) == []",
        "assert find_polindromes(6, 8) == [6]",
        "assert find_polindromes(97, 997) == [1, 3, 5, 7, 9]\n        ",
        "assert find_polindromes(100, 1000) == [1, 3, 5, 7, 9, 22, 33, 44, 55, 66, 777, 888, 999]"
    ],
    "difficulty": "super hard",
    "model": "mistral:latest",
    "style": "CodeWars"
}