{
    "title": "'Palindromic Frequency Checker (Easy)'",
    "description": "Given a string, determine if each of the substrings within it are palindromes and count their frequency. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization).\n\n#### Function Signature\n```python\ndef count_palindromic_substrings(s: str) -> dict:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns a dictionary where keys are the unique palindromes within the input string and values are their frequencies. For example: {\\\"a\\\": 3, \\\"abba\\\": 1}.",
    "code": "import collections\n\ndef count_palindromic_substrings(s: str) -> dict:\n    # Remove non-alphanumeric characters and convert to lowercase\n    s = ''.join(char for char in s if char in string.ascii_letters + string.digits).lower()\n    # Find all palindromes and their frequencies\n    palindromes = collections.defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            if substring == substring[::-1]:\n                palindromes[substring] += 1\n    \n    # Return the dictionary of unique palindromes and their frequencies\n    return dict(palindromes)",
    "tests": [
        "assert count_palindromic_substrings(\"racecar\") == {\"racecar\": 1, \"ececar\": 1, \"ace\": 2}",
        "assert count_palindromic_substrings(\"A man, a plan, a canal: Panama\") == {\"a\": 4, \":ana\": 1, \"amanaplanacanalpanama\": 1}"
    ],
    "difficulty": "easy",
    "model": "mistral:latest",
    "style": "Codeforces"
}