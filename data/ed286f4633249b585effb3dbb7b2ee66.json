{
    "title": "Maximum Sum of Non-Adjacent Elements",
    "description": "Given a sequence of integers, find the maximum sum that can be achieved by selecting non-adjacent elements. For example, if the input sequence is [1, 2, 3, 4], the maximum sum would be 9 (by selecting 1, 3), but if the input sequence is [5, 6, 7, 8], the maximum sum would be 15 (by selecting 5, 7). Write a function `max_sum` that takes as input a list of integers and returns the maximum sum that can be achieved by selecting non-adjacent elements.\n\n#### Function Signature\n```python\ndef max_sum(lst: list[int]) -> int:\n```\n\n#### Input\n- `lst` (list[int]): A sequence of integers.\n\n#### Output\n- Returns the maximum sum that can be achieved by selecting non-adjacent elements from the input sequence.",
    "code": "def max_sum(lst: list[int]) -> int:\n    if len(lst) <= 2:\n        return max(0, max(lst))\n    dp = [0] * (len(lst) + 1)\n    dp[1] = max(0, lst[0])\n    for i in range(2, len(lst) + 1):\n        dp[i] = max(dp[i-1], dp[i-2] + lst[i-1])\n    return dp[-1]",
    "tests": [
        "assert max_sum([1, 2, 3, 4]) == 9",
        "assert max_sum([5, 6, 7, 8]) == 15",
        "assert max_sum([10, 20, 30, 40, 50]) == 60",
        "assert max_sum([-1, -2, -3]) == 0"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "Facebook Hacker Cup"
}