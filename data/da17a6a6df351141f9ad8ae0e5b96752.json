{
    "title": "Largest Subarray Sum",
    "description": "You are given an array of integers. Write a function `max_subarray_sum` that finds the maximum sum of any subarray (a contiguous part of the array).\n\n#### Function Signature\n```python\ndef max_subarray_sum(nums: List[int]) -> int:\n```\n\n#### Input\n- `nums` (List[int]): A list of integers, possibly negative.\n\n#### Output\n- Returns the maximum sum of any subarray in `nums`. If the input list is empty, returns 0.\n",
    "code": "from typing import List\n\ndef max_subarray_sum(nums: List[int]) -> int:\n    if not nums:\n        return 0\n    current_max = global_max = nums[0]\n    for i in range(1, len(nums)):\n        current_max = max(current_max + nums[i], nums[i])\n        global_max = max(global_max, current_max)\n    return global_max\n",
    "tests": [
        "assert max_subarray_sum([-2, -5, 6, -2, -3, 1, 5, -6]) == 7",
        "assert max_subarray_sum([1, -3, 5, 8, -2, 6]) == 10",
        "assert max_subarray_sum([-1, -2, -3, -4, -5]) == -1",
        "assert max_subarray_sum([]) == 0"
    ],
    "difficulty": "medium",
    "model": "phind-codellama:34b",
    "style": "Competitive Programming"
}