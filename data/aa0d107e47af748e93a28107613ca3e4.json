{
    "title": "Hard: Maximum Subarray Sum",
    "description": "Given an array of integers, find the contiguous subarray (containing at least one number) which has the largest sum. Write a function `max_subarray_sum` that takes in an array and returns the maximum possible sum.\n\n#### Function Signature\n```python\ndef max_subarray_sum(arr: List[int]) -> int:\n```\n\n#### Input\n- `arr` (List[int]): A list of integers, which may include negative numbers.\n\n#### Output\n- Returns the maximum possible sum of a contiguous subarray in the input array.\n",
    "code": "from typing import List\ndef max_subarray_sum(arr: List[int]) -> int:\n    if not arr: return 0\n    current_sum = max_sum = arr[0]\n    for num in arr[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum",
    "tests": [
        "assert max_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6",
        "assert max_subarray_sum([-2, -3, 4, -1, -2, 1, 5, -3]) == 7",
        "assert max_subarray_sum([-2, -3, -4, -1, -2, -1, -5, -4]) == -1"
    ],
    "difficulty": "super hard",
    "model": "codestral:latest",
    "style": "SPOJ"
}