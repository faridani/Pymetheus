{
    "title": "Anagram Finder (Hard)",
    "description": "Write a function `find_anagrams` that takes a list of words and returns all pairs of words that are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n#### Function Signature\n```python\ndef find_anagrams(words: List[str]) -> List[List[str]]:\n```\n\n#### Input\n- `words` (List[str]): A list of strings that contain only lowercase letters.\n\n#### Output\n- Returns a list of lists, where each inner list contains a pair of words that are anagrams of each other. The order in which the pairs appear doesn't matter.\n",
    "code": "from collections import Counter\n\ndef find_anagrams(words: List[str]) -> List[List[str]]:\n    # Create a dictionary with the frequency of each letter in each word\n    word_counts = {Counter(word) for word in words}\n    \n    # Find pairs of words that have the same frequency of letters\n    anagrams = [(word1, word2) for word1, word2 in zip(words, words[1:]) if word_counts[word1] == word_counts[word2]]\n    return anagrams",
    "tests": [
        "assert find_anagrams(['listen', 'silent', 'enlist']) == [['listen', 'silent'], ['enlist']]",
        "assert find_anagrams(['abba', 'baab', 'mom', 'mom'])) == [['abba', 'baab']]"
    ]
}