{
    "title": "Anagram Detector (Hard)",
    "description": "Given two strings, determine if they are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of another, typically using all the original letters exactly once.\n\n#### Function Signature\n```python\ndef are_anagrams(s1: str, s2: str) -> bool:\n```\n\n#### Input\n- `s1` (str): A string containing only alphabetic characters (case-insensitive).\n- `s2` (str): Another string containing only alphabetic characters (case-insensitive).\n\n#### Output\n- Returns `True` if the two strings are anagrams of each other, and `False` otherwise.\n",
    "code": "def are_anagrams(s1: str, s2: str) -> bool:\n    # Remove spaces and convert to lowercase\n    s1 = ''.join([c for c in s1 if c.isalpha()]).lower()\n    s2 = ''.join([c for c in s2 if c.isalpha()]).lower()\n    # Sort the strings and compare them directly\n    return sorted(s1) == sorted(s2)",
    "tests": [
        "assert are_anagrams('listen', 'silent') == True",
        "assert are_anagrams('python', 'typohnyt') == True",
        "assert are_anagrams('hello', 'world') == False",
        "assert are_anagrams('Dormant', 'modern') == True"
    ],
    "difficulty": "super hard",
    "model": "mistral:latest",
    "style": "SPOJ"
}