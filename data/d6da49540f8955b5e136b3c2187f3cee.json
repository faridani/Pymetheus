{
    "title": "Prime Factorization (Hard)",
    "description": "A prime factor of a number is a positive integer that divides the number evenly, leaving no remainder. Write a function `prime_factors` that takes an integer and returns a list containing its prime factors.\n\n#### Function Signature\n```python\ndef prime_factors(n: int) -> List[int]:\n```\n\n#### Input\n- `n` (int): A positive integer greater than 1.\n\n#### Output\n- Returns a list of the prime factors of the input integer in ascending order, duplicates are removed.\n",
    "code": "def prime_factors(n: int) -> List[int]:\n    # Edge case for single prime numbers\n    if n == 2 or n == 3:\n        return [n]\n    factors = []\n    i = 2\n    while i * i <= n:\n        # If the number is divisible by the current number, add it to the list of factors and continue with the next factor from the quotient.\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    # If there are remaining factors that are not prime numbers, return the list of prime factors found so far and append them individually as separate factors.\n    if n > 1:\n        for factor in prime_factors(n):\n            factors.append(factor)\n    return factors",
    "tests": [
        "assert prime_factors(2) == [2]",
        "assert prime_factors(3) == [3]",
        "assert prime_factors(4) == [2, 2]",
        "assert prime_factors(5) == [5]",
        "assert prime_factors(6) == [2, 3]",
        "assert prime_factors(7) == [7]",
        "assert prime_factors(8) == [2, 2, 2, 2, 2]",
        "assert prime_factors(9) == [3, 3]",
        "assert prime_factors(10) == [2, 5]"
    ],
    "difficulty": "hard",
    "model": "mistral:latest",
    "style": "Exercism"
}