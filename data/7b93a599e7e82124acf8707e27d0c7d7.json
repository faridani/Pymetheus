{
    "title": "Python Medium: Fibonacci Function with Memoization",
    "description": "Write a function `fibonacci` that calculates the nth number in the Fibonacci sequence. The function should have memoization to avoid repeating calculations.\n\n#### Function Signature\n```python\ndef fibonacci(n: int, memo={0: 0, 1: 1}) -> int:\n```\n\n#### Input\n- `n` (int): The position of the Fibonacci number to calculate.\n\n#### Output\n- Returns the nth Fibonacci number as an integer.\n\n#### Constraints and Hints\n- Use memoization to store previously calculated Fibonacci numbers to avoid repeated calculations.\n",
    "code": "def fibonacci(n: int, memo={0: 0, 1: 1}):\n    if n in memo:\n        return memo[n]\n    result = fibonacci(n - 1) + fibonacci(n - 2)\n    memo[n] = result\n    return result",
    "tests": [
        "assert fibonacci(0) == 0",
        "assert fibonacci(1) == 1",
        "assert fibonacci(2) == 1",
        "assert fibonacci(3) == 2",
        "assert fibonacci(4) == 3",
        "assert fibonacci(5) == 5",
        "assert fibonacci(6) == 8",
        "assert fibonacci(7) == 13",
        "assert fibonacci(8) == 21",
        "assert fibonacci(9) == 34",
        "assert fibonacci(10) == 55"
    ],
    "difficulty": "medium",
    "model": "mistral:latest"
}