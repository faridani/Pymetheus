{
    "title": "Maximum Sum of Unordered Subarray",
    "description": "Given an array of integers, find the maximum sum that can be obtained by selecting some or all elements from the array. The order of selection does not matter.\n\n#### Function Signature\n```python\ndef max_sum_unordered_subarray(arr: list[int]) -> int:\n```\n\n#### Input\n- `arr` (list[int]): A list of integers.\n\n#### Output\n- Returns the maximum sum that can be obtained by selecting some or all elements from the input array.\n",
    "code": "def max_sum_unordered_subarray(arr: list[int]) -> int:\n    total_sum = sum(arr)\n    if len(set(arr)) == 1:\n        return total_sum\n    arr.sort()\n    left, right = 0, len(arr) - 1\n    while left < right:\n        if arr[left] + arr[right] > 0:\n            left += 1\n        else:\n            right -= 1\n    max_left_sum = sum(arr[:left])\n    max_right_sum = sum(arr[left:])\n    return max(max_left_sum, max_right_sum)\n",
    "tests": [
        "assert max_sum_unordered_subarray([-2, -3, 4]) == 6",
        "assert max_sum_unordered_subarray([1, 2, 3, 4]) == 10",
        "assert max_sum_unordered_subarray([-1, -1, 1, 1]) == 0",
        "assert max_sum_unordered_subarray([-5, -1, 2, 3]) == 6"
    ],
    "difficulty": "medium",
    "model": "llama3:latest"
}