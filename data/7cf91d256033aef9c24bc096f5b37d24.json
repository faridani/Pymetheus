{
    "title": "Hard: Labyrinth Navigator",
    "description": "You are given a 2D list representing a labyrinth. The labyrinth contains the following characters:\n\n- '#' : Wall\n- '.' : Empty space\n- 'S' : Starting point\n- 'E' : Ending point\n\n Your task is to write a function `find_path(labyrinth)` that finds a path from the starting point 'S' to the ending point 'E'. The function should return a list of tuples, where each tuple represents the coordinates (row, column) of a cell in the path. If no path exists, return an empty list.\n\n#### Function Signature\n```python\ndef find_path(labyrinth: list[list[str]]) -> list[tuple[int, int]]:\n```\n\n#### Input\n- `labyrinth` (list[list[str]]): A 2D list representing the labyrinth.\n\n#### Output\n- Returns a list of tuples representing the coordinates of the path from 'S' to 'E', or an empty list if no path exists.",
    "code": "from collections import deque\n\ndef find_path(labyrinth: list[list[str]]) -> list[tuple[int, int]]:\n    rows = len(labyrinth)\n    cols = len(labyrinth[0])\n    start = None\n    end = None\n\n    # Find the start and end points\n    for row in range(rows):\n        for col in range(cols):\n            if labyrinth[row][col] == 'S':\n                start = (row, col)\n            elif labyrinth[row][col] == 'E':\n                end = (row, col)\n    if not start or not end:\n        return []  # No start or end point found\n\n    # Define possible movements: up, down, left, right\n    movements = [(0, 1), (0, -1), (1, 0), (-1, 0)] \n\n    queue = deque([(start, [])])  # Queue of (position, path)\n\n    while queue:\n        (row, col), path = queue.popleft()\n        if (row, col) == end:\n            return path + [(row, col)]\n\n        for dr, dc in movements:\n            new_row = row + dr\n            new_col = col + dc\n            if 0 <= new_row < rows and 0 <= new_col < cols and labyrinth[new_row][new_col] != '#':\n                queue.append(((new_row, new_col), path + [(row, col)]))\n\n    return []  # No path found",
    "tests": [
        "labyrinth = [['#', '.', '.', '#'],\n              ['.', '#', 'S', '.'],\n              ['.', '.', '#', 'E']]\nassert find_path(labyrinth) == [(1, 2), (2, 2), (2, 3)]",
        "labyrinth = [['#', '#', '#'],\n             ['#', 'S', '#'],\n             ['#', 'E', '#']]\nassert find_path(labyrinth) == []"
    ],
    "difficulty": "super hard",
    "model": "gemma2:27b",
    "style": "Codewars"
}