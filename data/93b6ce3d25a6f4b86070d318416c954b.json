{
    "title": "Prime Factorization",
    "description": "Write a function `prime_factors` that takes an integer as input and returns a list of its prime factors. The input number can be any positive integer.\n\n#### Function Signature\n```python\ndef prime_factors(n: int) -> List[int]:\n```\n\n#### Input\n- `n` (int): A positive integer.\n\n#### Output\n- Returns a list of integers representing the prime factors of the input number. If the number is not a perfect power of a prime number, the function should return all distinct prime factors in ascending order.\n",
    "code": "def prime_factors(n: int) -> List[int]:\n    # Check if the number is a prime itself\n    if n <= 1:\n        return []\n    elif n == 2:\n        return [2]\n    # Sieve of Eratosthenes method to find primes up to the square root of the input number\n    primes = [i for i in range(2, int(n**0.5) + 1)]\n    factors = []\n    while True:\n        # Check if any prime from the list can divide n\n        p = primes[0]\n        if p > n:\n            break\n        if n % p == 0:\n            factors.append(p)\n            n //= p\n        else:\n            primes.remove(p)\n    # Add the remaining factor (if any)\n    if n != 1:\n        factors.append(n)\n    return factors",
    "tests": [
        "assert prime_factors(3) == [3]",
        "assert prime_factors(7) == [7]",
        "assert prime_factors(9) == [3, 3]",
        "assert prime_factors(12) == [2, 2, 3]",
        "assert prime_factors(17) == [17]",
        "assert prime_factors(20) == [2, 2, 5]",
        "assert prime_factors(28) == [2, 2, 7]"
    ],
    "difficulty": "hard",
    "model": "mistral:latest"
}