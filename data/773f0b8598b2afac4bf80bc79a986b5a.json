{
    "title": "Maximum Sum Subarray (Medium)",
    "description": "Given an integer array `nums`, find the contiguous subarray (containing at least one number) with the largest sum and return its sum.\n\n#### Function Signature\n```python\ndef maxSubArray(nums: List[int]) -> int:\n```\n\n#### Input\n- `nums` (List[int]): A list of integers.\n\n#### Output\n- Returns the maximum sum of a contiguous subarray in the input list.\n",
    "code": "def maxSubArray(nums: List[int]) -> int:\n    # Initialize the current sum and the maximum sum\n    current_sum = max_sum = nums[0]\n    \n    # Iterate through the list\n    for num in nums[1:]:\n        # Update the current sum\n        current_sum = max(num, current_sum + num)\n        \n        # Update the maximum sum if the current sum is greater\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum",
    "tests": [
        "assert maxSubArray([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6",
        "assert maxSubArray([-1, 3, 2, 1]) == 6",
        "assert maxSubArray([0, 1, 2, 3, 4]) == 6",
        "assert maxSubArray([-1, 2]) == 2"
    ],
    "difficulty": "medium",
    "model": "aya:35b",
    "style": "Competitive Programming"
}