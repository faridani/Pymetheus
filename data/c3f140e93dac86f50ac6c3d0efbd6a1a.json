{
    "title": "XOR All Subarrays (Medium)",
    "description": "You are given an array `arr` of integers. Your task is to find the XOR sum of all subarrays of `arr`. The XOR sum of a subarray is defined as the bitwise XOR of all elements in that subarray.\n\n#### Function Signature\n```python\ndef xor_all_subarrays(arr: list[int]) -> int:\n```\n\n#### Constraints\n- 1 <= len(arr) <= 2 * 10^5\n- 0 <= arr[i] < 2^32\n\n#### Example Input\n[5, 6, 7, 8, 9, 10, 11, 12, 13, 14] \n\n#### Example Output\n255\n",
    "code": "def xor_all_subarrays(arr: list[int]) -> int:\n    n = len(arr)\n    prefix_xor = [0] * (n + 1)\n    for i in range(n):\n        prefix_xor[i + 1] = prefix_xor[i] ^ arr[i]\n\n    xor_sum = 0\n    for i in range(n):\n        # XOR all subarrays ending at index i with the prefix XOR up to index n-1\n        xor_sum ^= prefix_xor[n] ^ prefix_xor[i + 1]\n    return xor_sum",
    "tests": [
        "assert xor_all_subarrays([5, 6, 7, 8, 9]) == 24",
        "assert xor_all_subarrays([1, 2, 3, 4, 5]) == 0",
        "assert xor_all_subarrays([0, 1, 2, 3, 4]) == 7"
    ],
    "difficulty": "insanely difficult",
    "model": "command-r7b:latest",
    "style": "Facebook Hacker Cup"
}