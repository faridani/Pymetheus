{
    "title": "Hard: Counting Subarrays with Equal 0s and 1s",
    "description": "Given a binary array `arr`, write a function to return the total count of subarrays that contain an equal number of 0s and 1s. \n\n#### Function Signature\n```python\ndef count_equal_01_subarrays(arr: List[int]) -> int:\n```\n\n#### Input\n- `arr` (List[int]): A list of binary integers containing only the values 0 or 1.\n\n#### Output\n- Returns an integer representing the total number of subarrays with equal numbers of 0s and 1s.",
    "code": "from typing import List\n\ndef count_equal_01_subarrays(arr: List[int]) -> int:\n    n = len(arr)\n    prefix_sum, result = [0] * (n + 1), 0\n    seen = {0: -1}\n    for i in range(n):\n        prefix_sum[i+1] = prefix_sum[i] + arr[i]\n        if prefix_sum[i+1] not in seen:\n            seen[prefix_sum[i+1]] = i\n        result += (i - seen[prefix_sum[i+1]])\n    return result",
    "tests": [
        "assert count_equal_01_subarrays([0, 1]) == 2",
        "assert count_equal_01_subarrays([0, 0, 1]) == 3",
        "assert count_equal_01_subarrays([1, 1, 1, 0, 0, 0]) == 5",
        "assert count_equal_01_subarrays([0, 1, 1, 0, 1, 1]) == 6"
    ],
    "difficulty": "insanely difficult",
    "model": "qwen2:7b",
    "style": "Daily Coding Problem"
}