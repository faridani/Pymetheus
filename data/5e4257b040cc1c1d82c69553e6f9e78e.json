{
    "title": "Hard: Unique Paths II with Obstacles",
    "description": "A robot is located at the top-left corner of an m x n grid. The robot can move either down or right at any point in time. The robot's target is to reach the bottom-right corner of the grid. However, some cells are blocked and cannot be passed through. Given a 2D grid where each cell can contain either a 0 (passable) or a 1 (obstacle), determine how many unique paths there are from the top-left to the bottom-right corner, avoiding obstacles.\n\n#### Function Signature\n```python\ndef unique_paths_with_obstacles(obstacleGrid: List[List[int]]) -> int:\n```\n\n#### Input\n- `obstacleGrid` (List[List[int]]): A 2D list representing the grid where each cell is either 0 or 1.\n\n#### Output\n- Returns the number of unique paths modulo 1e9+7. If there are no paths, return 0.\n\n#### Constraints\n- m and n can be up to 100 in size.\n- The robot cannot move outside the grid boundaries or through obstacles.",
    "code": "MOD = 10**9 + 7\n\ndef unique_paths_with_obstacles(obstacleGrid: List[List[int]]) -> int:\n    if not obstacleGrid or not obstacleGrid[0]:\n        return 0\n    m, n = len(obstacleGrid), len(obstacleGrid[0])\n    dp = [[0] * n for _ in range(m)]\n    \n    # Check if the starting cell is blocked\n    if obstacleGrid[0][0] == 1:\n        return 0\n    dp[0][0] = 1\n    \n    # Fill the first row\n    for j in range(1, n):\n        if obstacleGrid[0][j] != 1:\n            dp[0][j] = dp[0][j-1]\n        else:\n            dp[0][j] = 0\n    \n    # Fill the first column\n    for i in range(1, m):\n        if obstacleGrid[i][0] != 1:\n            dp[i][0] = dp[i-1][0]\n        else:\n            dp[i][0] = 0\n    \n    # Fill the rest of the grid\n    for i in range(1, m):\n        for j in range(1, n):\n            if obstacleGrid[i][j] == 1:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = (dp[i-1][j] + dp[i][j-1]) % MOD\n    \n    return dp[m-1][n-1] if obstacleGrid[m-1][n-1] == 0 else 0",
    "tests": [
        "assert unique_paths_with_obstacles([[0,0,0],[0,1,0],[0,0,0]]) == 2",
        "assert unique_paths_with_obstacles([[0,0,0],[0,0,0],[0,0,0]]) == 6",
        "assert unique_paths_with_obstacles([[1,0,0],[0,0,0],[0,0,0]]) == 0",
        "assert unique_paths_with_obstacles([[0,1],[0,0]]) == 2"
    ],
    "difficulty": "hard",
    "model": "deepseek-r1:32b",
    "style": "LeetCode"
}