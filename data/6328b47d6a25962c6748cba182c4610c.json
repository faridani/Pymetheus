{
    "title": "Medium - Longest Common Subsequence",
    "description": "A subsequence of one string is a sequence that can be derived from the string by deleting some or no elements without changing the order of the remaining elements. The longest common subsequence (LCS) of two strings is the longest subsequence that is common to both strings. Write a function `longest_common_subsequence` that finds the LCS of two strings.\n\n#### Function Signature\n```python\ndef longest_common_subsequence(str1: str, str2: str) -> str:\n```\n\n#### Input\n- `str1` (str): A string of uppercase and lowercase letters.\n- `str2` (str): A string of uppercase and lowercase letters.\n\n#### Output\n- Returns the longest common subsequence of `str1` and `str2`. If there are multiple solutions, returns any one of them.\n",
    "code": "def longest_common_subsequence(str1: str, str2: str) -> str:\n    # Initialize a two-dimensional array with dimensions (len(str1)+1) x (len(str2)+1)\n    dp = [[0] * (len(str2) + 1) for _ in range(len(str1) + 1)]\n\n    # Fill in the first row and first column with 1's\n    for i in range(1, len(str1) + 1):\n        dp[i][0] = 1\n    for j in range(1, len(str2) + 1):\n        dp[0][j] = 1\n\n    # Loop through the rest of the array and fill in the values\n    for i in range(1, len(str1) + 1):\n        for j in range(1, len(str2) + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    # Backtrack to find the longest common subsequence\n    result = []\n    i, j = len(str1), len(str2)\n    while i > 0 and j > 0:\n        if str1[i - 1] == str2[j - 1]:\n            result.append(str1[i - 1])\n            i, j = i - 1, j - 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n    return ''.join(reversed(result))\n",
    "tests": [
        "assert longest_common_subsequence('ABCD', 'BCD') == 'BCD'",
        "assert longest_common_subsequence('ABCD', 'ABCDE') == 'ABCDE'",
        "assert longest_common_subsequence('ABCDE', 'ABCDEFG') == 'ABCDEFG'",
        "assert longest_common_subsequence('ABCDEFG', 'ABCDE') == 'ABCDE'",
        "assert longest_common_subsequence('ABCDEFG', 'ABCDEFG') == 'ABCDEFG'"
    ]
}