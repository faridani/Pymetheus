{
    "title": "Prime Factorization (Hard)",
    "description": "Write a function `prime_factors` that takes an integer as input and returns a list of prime numbers that are factors of the given number.\n\n#### Function Signature\n```python\ndef prime_factors(n: int) -> List[int]:\n```\n\n#### Input\n- `n` (int): A positive integer.\n\n#### Output\n- Returns a list of prime numbers that are factors of the input number. The list should be sorted in ascending order.\n\nExample: For input 36, return [2, 2, 3, 3].",
    "code": "def prime_factors(n: int) -> List[int]:\n    # Edge case: 1 is not a prime number\n    if n == 1:\n        return []\n    # Initialize an empty list to store the factors\n    factors = []\n    i = 2\n    while i*i <= n:\n        # If the number is divisible by the current number, add it to the list and continue from the next number\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    # If there are remaining numbers that divide the original number, add them to the list\n    for number in range(i, int(n**0.5)+1):\n        if n % number == 0:\n            factors.append(number)\n    # Add the remaining prime factor (since we only checked up to the square root of the number)\n    if n > 1:\n        factors.append(n)\n    return factors",
    "tests": [
        "assert prime_factors(1) == []",
        "assert prime_factors(2) == [2]",
        "assert prime_factors(4) == [2, 2]",
        "assert prime_factors(7) == [7]",
        "assert prime_factors(8) == [2, 2, 2]",
        "assert prime_factors(9) == [3, 3]",
        "assert prime_factors(10) == [2, 5]",
        "assert prime_factors(12) == [2, 2, 3]",
        "assert prime_factors(18) == [2, 3, 3, 3]"
    ],
    "difficulty": "hard",
    "model": "mistral:latest"
}