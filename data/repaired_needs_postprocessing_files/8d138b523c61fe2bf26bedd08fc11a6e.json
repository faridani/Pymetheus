{
    "title": "Hard: Circular Prime Checker",
    "description": "A circular prime number is a prime number that remains prime when its digits are rotated. For example, 197 is a circular prime because 197, 971, and 719 are all prime numbers.\nWrite a function `is_circular_prime` that takes an integer `n` as input and returns `True` if it's a circular prime number, otherwise returns `False`. \n\n#### Function Signature\n```python\ndef is_circular_prime(n: int) -> bool:\n```\n\n#### Input\n- `n` (int): A positive integer.\n\n#### Output\n- Returns `True` if the input integer is a circular prime, `False` otherwise.\n",
    "code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef is_circular_prime(n: int) -> bool:\n    if not is_prime(n):\n        return False\n    n_str = str(n)\n    for i in range(len(n_str)):\n        rotated_num = int(n_str[i:] + n_str[:i])\n        if not is_prime(rotated_num):\n            return False\n    return True",
    "tests": [
        "'assert is_circular_prime(197) == True'",
        "'assert is_circular_prime(113) == True'",
        "'assert is_circular_prime(123) == False'",
        "'assert is_circular_prime(357) == False'"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}