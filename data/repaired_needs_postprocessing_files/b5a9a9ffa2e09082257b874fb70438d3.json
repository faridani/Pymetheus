{
    "title": "Hard: Merge K Sorted Lists",
    "description": "You are given an array of k sorted linked lists. Each list is already sorted in ascending order.\n\n#### Function Signature\n```python\ndef merge_k_sorted_lists(lists):\n``` \n\n#### Input\n- `lists` (list of ListNode): An array of heads of sorted singly linked lists. Each ListNode has a value and a pointer to the next node.\n\n#### Output\n- Returns the head of a new sorted linked list containing all elements from the input lists.\n\n#### Constraints\n- The number of lists (k) is in the range [1, 10^4].\n- The length of each list is non-negative.",
    "code": "from queue import PriorityQueue\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef merge_k_sorted_lists(lists):\n    head = ListNode()\n    current = head\n\n    pq = PriorityQueue()\n    for i, list in enumerate(lists):\n        if list:\n            pq.put((list.val, i, list)) \n\n    while not pq.empty():\n        val, i, node = pq.get()\n\n        current.next = node\n        current = current.next\n\n        if node.next:\n            pq.put((node.next.val, i, node.next))\n\n    return head.next",
    "tests": [
        "l1 = ListNode(1); l1.next = ListNode(4); l1.next.next = ListNode(5)\nl2 = ListNode(1); l2.next = ListNode(3); l2.next.next = ListNode(4)\nl3 = ListNode(2); l3.next = ListNode(6)\nresult = merge_k_sorted_lists([l1, l2, l3])\nwhile result:\n    print(result.val, end=' ')\nresult = None",
        "assert merge_k_sorted_lists([]) is None"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}