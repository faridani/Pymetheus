{
    "title": "Hard: Matrix Rotation",
    "description": "You are given a 2D matrix of integers and an integer k. Rotate the matrix clockwise by k times. For example, if the matrix is [[1, 2], [3, 4]] and k = 1, the output will be [[3, 1], [4, 2]]. If k = 2, the output will be [[4, 3], [2, 1]], and so on. Note that you can rotate a matrix by any number of times.\n#### Function Signature\n```python\ndef rotate_matrix(matrix: list[list[int]], k: int) -> list[list[int]]:\n```\n\n#### Input\n- `matrix` (list[list[int]]): A 2D matrix of integers.\n- `k` (int): The number of times to rotate the matrix clockwise.\n\n#### Output\n- Returns a new rotated matrix.\n\n",
    "code": "def rotate_matrix(matrix: list[list[int]], k: int) -> list[list[int]]:\n    n = len(matrix)\n    if n == 0:\n        return []\n    result = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            new_i = (n - 1) - j\n            new_j = i\n            for _ in range(k):\n                if new_i == 0:\n                    new_i = n - 1\n                else:\n                    new_i -= 1\n                if new_j == n - 1:\n                    new_j = 0\n                else:\n                    new_j += 1\n            result[new_i][new_j] = matrix[i][j]\n    return result",
    "tests": [
        "assert rotate_matrix([[1, 2], [3, 4]], 1) == [[3, 1], [4, 2]]",
        "assert rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [[9, 7, 8], [6, 5, 4], [3, 2, 1]]"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}