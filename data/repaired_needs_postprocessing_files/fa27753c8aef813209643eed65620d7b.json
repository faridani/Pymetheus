{
    "title": "Anagram Detector (Hard)",
    "description": "An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a function `find_anagrams` that takes a list of strings and returns all pairs of strings in the list that are anagrams of each other.\n\n#### Function Signature\n```python\ndef find_anagrams(strings: List[str]) -> Set[Tuple[str, str]]:\n```\n\n#### Input\n- `strings` (List[str]): A list of strings containing only lowercase alphabets.\n\n#### Output\n- Returns a set of tuples, where each tuple contains two strings that are anagrams of each other.",
    "code": "def find_anagrams(strings: List[str]) -> Set[Tuple[str, str]]:\n    # Create a dictionary to store the frequency of each character in the alphabet\n    char_freq = {}\n    for letter in string.ascii_lowercase:\n        char_freq[letter] = 0\n    \n    anagrams = set()\n    # Iterate through the list of strings\n    for s1 in strings:\n        char_counts = {} # Store the frequency of each character in the first string\n        for char in s1:\n            if char not in char_counts:\n                char_counts[char] = 0\n            char_counts[char] += 1\n        \n        # Check if the frequency of characters matches with any other string in the list\n        for s2 in strings:\n            if s1 == s2 or s1 in anagrams or s2 in anagrams:\n                continue\n            char_counts2 = {char: count for char, count in enumerate(s2)} # Store the frequency of each character in the second string\n            for char, count in char_counts.items():\n                if char not in char_counts2 or char_counts[char] != char_counts2[char]:\n                    break\n            else:\n                anagrams.add((s1, s2))\n    return anagrams\n",
    "tests": [
        "assert find_anagrams([\"civic\", \"clownfish\", \"gusts\", \"tourism\"]).__eq__({(\"civic\", \"cvlic\"), (\"clownfish\", \"fishwolnclock\")})",
        "assert find_anagrams([\"listen\", \"silent\", \"enlist\", \"linen\"]).__eq__({(\"listen\", \"silent\"), (\"enlist\", \"linen\")})"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}