{
    "title": "Roman Numeral Conversion (Hard)",
    "description": "Write a function `convert_to_roman` that converts an integer from 1 to 3999 into its equivalent Roman numeral representation.\n\n#### Function Signature\n```python\ndef convert_to_roman(num: int) -> str:\n```\n\n#### Input\n- `num` (int): An integer between 1 and 3999 (inclusive).\n\n#### Output\n- Returns the equivalent Roman numeral representation of the input integer.\n",
    "code": "def convert_to_roman(num: int) -> str:\n    roman_numerals = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    roman = ''\n    # Iterate over the integer in reverse order\n    for i in range(len(str(num)) - 1, -1, -1):\n        # Current number divided by the corresponding Roman numeral value\n        current_division = num % (10 ** (i + 1)) // (10 ** i)\n        # Previous number divided by the corresponding Roman numeral value\n        previous_division = num % (10 ** (i + 2)) // (10 ** (i + 1)) if i > 0 else 0\n        # If current division is greater than the previous one, add the corresponding Roman numeral. Otherwise, subtract it.\n        if current_division > previous_division:\n            roman += roman_numerals[str(num)[i]] * current_division\n        elif current_division < previous_division:\n            roman += roman_numerals[str(num)[i]] * (previous_division - current_division)\n        # If the divisions are equal, just add the corresponding Roman numeral.\n        else:\n            roman += roman_numerals[str(num)[i]] * current_division\n    return roman",
    "tests": [
        "assert convert_to_roman(1) == 'I'",
        "assert convert_to_roman(3) == 'III'",
        "assert convert_to_roman(4) == 'IV'",
        "assert convert_to_roman(9) == 'IX'",
        "assert convert_to_roman(58) == 'LVIII'",
        "assert convert_to_roman(1994) == 'MCMXCIV'"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}