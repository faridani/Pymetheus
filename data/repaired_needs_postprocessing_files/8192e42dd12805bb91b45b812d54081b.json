{
    "title": "Anagram Detection (Hard)",
    "description": "Given two strings, check if they are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of another word or phrase, typically using all the original letters exactly once.\n\n#### Function Signature\n```python\ndef are_anagrams(str1: str, str2: str) -> bool:\n```\n\n#### Input\n- `str1` (str): A non-empty string containing only lowercase alphabet characters.\n- `str2` (str): A non-empty string containing only lowercase alphabet characters.\n\n#### Output\n- Returns `True` if the input strings are anagrams, `False` otherwise.\n\n#### Hints\nUse a Counter object from the collections module to count the frequency of each character in both strings. Then compare the two counts.",
    "code": "import collections\ndef are_anagrams(str1: str, str2: str) -> bool:\n    # Count characters in both strings\n    counter1 = collections.Counter(str1)\n    counter2 = collections.Counter(str2)\n    \n    # Compare the counts\n    return counter1 == counter2",
    "tests": [
        "assert are_anagrams('listen', 'silent') == True",
        "assert are_anagrams('python', 'typhon') == False",
        "assert are_anagrams('act', 'cat') == True",
        "assert are_anagrams('hello', 'world') == False"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}