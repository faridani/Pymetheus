{
    "title": "'Is it a Symmetric String' (hard)",
    "description": "In this problem, we define a symmetric string as one that remains unchanged when its characters are read from the left and right ends and moving towards the center. This is similar to a palindrome, but unlike palindromes, our symmetric strings can have repeated occurrences of single characters and need not be spelled the same forwards and backwards.\n#### Function Signature\n```python\ndef is_symmetric(s: str) -> bool:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n#### Output\n- Returns `True` if the input string is a symmetric string, `False` otherwise.",
    "code": "import collections\ndef is_symmetric(s: str) -> bool:\n    # Remove non-alphanumeric characters\n    s = ''.join(char for char in s if char in string.ascii_letters + string.digits)\n    # Count the frequency of each character\n    freq = collections.Counter(s)\n    # Check if all frequencies are even or if there is only one character\n    return len(freq) == 1 or all([freq[char] % 2 == 0 for char in freq])",
    "tests": [
        "assert is_symmetric(\"AA\") == True",
        "assert is_symmetric(\"ABBA\") == True",
        "assert is_symmetric(\"ABCDE\") == False",
        "assert is_symmetric(\"123456789\") == False"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}