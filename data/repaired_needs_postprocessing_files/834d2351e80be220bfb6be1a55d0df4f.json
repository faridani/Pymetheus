{
    "title": "Hard: Knights and Paths",
    "description": "There are N knights arranged in a circle. Each knight has a sword of a certain length. You need to find the minimum total sword length required to form a path from knight 1 to knight N, where each step can only be taken with a sword that is at least as long as the distance between the current knight and the next knight.\n\n#### Function Signature\n```python\ndef min_sword_length(knight_distances: list[int]) -> int:\n``` \n\n#### Input\n- `knight_distances` (list[int]): A list of integers representing the distances between consecutive knights in the circle. The length of the list is N.\n\n#### Output\n- Returns the minimum total sword length required to form a path from knight 1 to knight N.",
    "code": "def min_sword_length(knight_distances: list[int]) -> int:\n    n = len(knight_distances)\n    total_length = 0\n    current_sword_length = 0\n\n    for i in range(n):\n        distance_to_next = knight_distances[i]\n        if current_sword_length < distance_to_next:\n            total_length += distance_to_next - current_sword_length\n            current_sword_length = distance_to_next\n        current_sword_length -= distance_to_next  # Adjust sword length for the next step\n\n    return total_length",
    "tests": [
        "assert min_sword_length([2, 1, 3, 2]) == 3",
        "assert min_sword_length([1, 2, 1, 2]) == 0",
        "assert min_sword_length([5, 1, 4, 2, 3]) == 6"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}