{
    "title": "Hard: Treehouse Inventory",
    "description": "A treehouse has multiple rooms, each with its own unique inventory of toys. Each room is represented by a node in a binary search tree, and the inventory is stored as a list of strings (toy names). Write a function `treehouse_inventory` that takes a root node and returns a dictionary representing the total count of each toy type across all rooms.\n#### Function Signature\n```python\ndef treehouse_inventory(root: 'Node') -> dict:\n```\n#### Input\n- `root` ('Node'): The root node of the binary search tree, where each node has a value (string) and two children (left and right).\n#### Output\n- Returns a dictionary where keys are toy names and values are their total counts across all rooms.\n",
    "code": "class Node:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\ndef treehouse_inventory(root: 'Node') -> dict:\n    inventory = {}\n    def collect_toys(node):\n        if node is None:\n            return\n        if node.value in inventory:\n            inventory[node.value] += 1\n        else:\n            inventory[node.value] = 1\n        collect_toys(node.left)\n        collect_toys(node.right)\n    collect_toys(root)\n    return inventory",
    "tests": [
        "assert treehouse_inventory(Node('room1', Node('toyA'), None)) == {'toyA': 1}",
        "assert treehouse_inventory(Node('room2', None, Node('toyB'))) == {'toyB': 1}",
        "assert treehouse_inventory(Node('room3', Node('toyC'), Node('toyD'))) == {'toyC': 1, 'toyD': 1}",
        "assert treehouse_inventory(Node('root', Node('room1', Node('toyA')), Node('room2', None, Node('toyB')))) == {'toyA': 1, 'toyB': 1}"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}