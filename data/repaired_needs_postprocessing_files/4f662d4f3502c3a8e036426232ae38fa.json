{
    "title": "'Anagram Checker - Hard'",
    "description": "Given two strings, determine if they are anagrams of each other.\n\n#### Function Signature\n```\ndef is_anagram(str1: str, str2: str) -> bool:\n``` \n\n#### Input\n- `str1` (str): A string containing only letters and no spaces or punctuation.\n- `str2` (str): Another string containing only letters and no spaces or punctuation.\n\n#### Output\n- Returns `True` if the two strings are anagrams of each other, `False` otherwise.\nAnagrams are words or phrases that contain the same letters in the same frequency. For example, 'listen' and 'silent' are anagrams.\n",
    "code": "def is_anagram(str1: str, str2: str) -> bool:\n    # Remove spaces and convert to lowercase\n    str1 = ''.join([char for char in str1 if char.isalpha()]).lower()\n    str2 = ''.join([char for char in str2 if char.isalpha()]).lower()\n    # If the strings are different lengths, they cannot be anagrams\n    if len(str1) != len(str2):\n        return False\n    # Create a dictionary to count characters\n    char_dict = {}\n    for char in str1:\n        if char not in char_dict:\n            char_dict[char] = 0\n        char_dict[char] += 1\n    # Compare the counts of each character between the two strings\n    for char in str2:\n        if char not in char_dict or char_dict[char] < 1:\n            return False\n        char_dict[char] -= 1",
    "tests": [
        "assert is_anagram('listen', 'silent') == True",
        "assert is_anagram('hello', 'world') == False",
        "assert is_anagram('Racecar', 'CaraceR') == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}