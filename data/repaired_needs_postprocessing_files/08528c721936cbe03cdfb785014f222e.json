{
    "title": "Harmonious Melodies",
    "description": "Write a function `harmonious_melody` that takes as input two lists of integers, representing the frequencies and durations of two melodies. The function should return a boolean indicating whether the two melodies can be harmoniously played together.\n\n#### Function Signature\n```python\ndef harmonious_melody(frequencies1: list[int], durations1: list[int], frequencies2: list[int], durations2: list[int]) -> bool:\n```\n\n#### Input\n- `frequencies1` (list[int]): A list of integers representing the frequencies of the first melody.\n- `durations1` (list[int]): A list of integers representing the durations of the first melody.\n- `frequencies2` (list[int]): A list of integers representing the frequencies of the second melody.\n- `durations2` (list[int]): A list of integers representing the durations of the second melody.\n\n#### Output\n- Returns `True` if the two melodies can be harmoniously played together, `False` otherwise.\n",
    "code": "def harmonious_melody(frequencies1: list[int], durations1: list[int], frequencies2: list[int], durations2: list[int]) -> bool:\n    # Calculate the harmonic mean of each pair of frequencies and durations\n    harmonic_means = [[(f1 * d1) / ((f1 + f2) * (d1 + d2)) for f1, f2 in zip(frequencies1, frequencies2)] for d1, d2 in zip(durations1, durations2)]\n    # Check if all harmonic means are less than or equal to 1\n    return all(mean <= 1 for row in harmonic_means for mean in row)\n",
    "tests": [
        "assert harmonious_melody([200, 300], [4, 6], [250, 400], [3, 5]) == True",
        "assert harmonious_melody([100, 200], [2, 4], [150, 350], [1, 7]) == False"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}