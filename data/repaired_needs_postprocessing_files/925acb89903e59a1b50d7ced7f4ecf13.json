{
    "title": "Hard: Longest Increasing Subsequence",
    "description": "Given a list of integers, find the length of the longest increasing subsequence. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n#### Function Signature\n```python\ndef longest_increasing_subsequence(seq: list[int]) -> int:\n``` \n\n#### Input\n- `seq` (list[int]): A list of integers.\n\n#### Output\n- Returns the length of the longest increasing subsequence in the input sequence.",
    "code": "def longest_increasing_subsequence(seq: list[int]) -> int:\n    n = len(seq)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if seq[i] > seq[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
    "tests": [
        "assert longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4",
        "assert longest_increasing_subsequence([0, 8, 4, 13, 7, 6, 12]) == 6",
        "assert longest_increasing_subsequence([1, 2, 3, 4, 5]) == 5"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}