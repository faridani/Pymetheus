{
    "title": "Polindromes with Repeated Characters (Medium)",
    "description": "A polindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). However, in this problem, we allow repetition of characters in the polindrome. Write a function `is_polindrome` that checks if a given string is a polindrome. Write a function `is_polindrome(s: str) -> bool:\n    # Remove non-alphanumeric characters and spaces\n    s = ''.join(char for char in s if char in string.ascii_letters + string.digits).lower()\n    # Count each character\n    count = collections.Counter(s)\n    # Check if all characters have an even count\n    return all([count[c] % 2 == 0 for c in s])",
    "code": "import collections\ndef is_polindrome(s: str) -> bool:\n    # Remove non-alphanumeric characters and spaces\n    s = ''.join(char for char in s if char in string.ascii_letters + string.digits).lower()\n    # Count each character\n    count = collections.Counter(s)\n    # Check if all characters have an even count\n    return all([count[c] % 2 == 0 for c in s])",
    "tests": [
        "assert is_polindrome(\"A man, a plan, a canal, Panama\") == True",
        "assert is_polindrome(\"racecar\") == True",
        "assert is_polindrome(\"hello\") == False",
        "assert is_polindrome(\"No 'x' in Nixon\") == True",
        "assert is_polindrome(\"AA\") == True",
        "assert is_polindrome(\"ABA\") == True",
        "assert is_polindrome(\"abcdeffedcba\") == False"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}