{
    "title": "Hard: Maximum Sum of Subarray with Constraints",
    "description": "You are given a list of integers where each integer represents the cost of installing a particular type of lamp at a specific location. You have to find the maximum sum of subarray that does not exceed a certain budget. If no such subarray exists, return 0.\n\n#### Function Signature\n```python\ndef max_sum_subarray(costs: list[int], budget: int) -> int:\n```\n\n#### Input\n- `costs` (list[int]): A list of integers representing the cost of installing a particular type of lamp at each location.\n- `budget` (int): The maximum allowed budget for installing lamps.\n\n#### Output\n- Returns the maximum sum of subarray that does not exceed the given budget. If no such subarray exists, return 0.\n",
    "code": "def max_sum_subarray(costs: list[int], budget: int) -> int:\n    if len(costs) == 0 or budget < min(costs):\n        return 0\n    max_sum = 0\n    current_sum = 0\n    for cost in costs:\n        current_sum += cost\n        if current_sum > budget:\n            current_sum = 0\n        else:\n            max_sum = max(max_sum, current_sum)\n    return max_sum",
    "tests": [
        "assert max_sum_subarray([1, 2, 3, 4, 5], 10) == 9",
        "assert max_sum_subarray([1, 2, 3, 4, 5], 6) == 6",
        "assert max_sum_subarray([], 10) == 0",
        "assert max_sum_subarray([1], 1) == 1"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}