{
    "title": "Anagram Solver (Hard)",
    "description": "An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\nWrite a function `anagram_solver(words: List[str]) -> Dict[str, List[str]]` that takes a list of words and returns a dictionary where each key is an anagram and its corresponding values are the words that make up the anagram.\n#### Function Signature\n```python\ndef anagram_solver(words: List[str]) -> Dict[str, List[str]]:\n``` \n\n#### Input\n- `words` (List[str]): A list of strings containing words.\n#### Output\n- Returns a dictionary where each key is an anagram and its corresponding values are the words that make up the anagram.\n",
    "code": "from collections import Counter\ndef anagram_solver(words: List[str]) -> Dict[str, List[str]]:\n    # Create a counter for each word to count occurrences of characters\n    word_counters = {word: Counter(char for char in word) for word in words}\n    \n    # Combine the counters into a single dictionary where the key is the anagram and the value is a list of its corresponding words.\n    anagrams = {', '.join([k[0] for k in sorted(word_counters.items(), key=lambda x: sum(x[1].values()))]): [word for word, counter in sorted(word_counters.items(), key=lambda x: sum(x[1].values())) if Counter(counter) == k[1]] for k in itertools.groupby(sorted(word_counters.items(), key=lambda x: sum(x[1].values())), lambda x, y: sum(x[1].values()) == sum(y[1].values()))}\n    return anagrams",
    "tests": [
        "assert anagram_solver(['listen', 'silent', 'enlist']) == {\"enlist\": [\"listen\", \"silent\"], \"silent\": []}",
        "assert anagram_solver(['rate', 'are', 'art']) == {\"rate\": [\"rate\", \"are\"], \"are\": [\"art\"]}",
        "assert anagram_solver(['hello', 'world']) == {\"hello\": [\"hello\"], \"world\": []}"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}