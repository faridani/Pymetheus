{
    "title": "Medium Python Coding Question: String Compression",
    "description": "String compression involves shortening a string by using the counts of repeated characters. If a character appears more than once consecutively, it should be followed by the count of occurrences (e.g., 'aabbbc' compresses to 'a2b3c'). However, if the compressed string is not shorter than the original string or equal in length but takes up more space due to numeric representation, return the original string instead.\n#### Function Signature\n```\ndef string_compression(s: str) -> str:\n``` \n#### Input\n- `s` (str): A non-empty string consisting of only lowercase letters 'a'-'z'. The length of the string will be at most 50,000 characters.\n#### Output\n- Returns a compressed version of the input string if it results in shorter or equal length; otherwise returns the original string.",
    "code": "def string_nrearrange(s: str) -> str:\n    last_char = s[0]\n    char_count = 1\n    compressed_string = ''\n\n    for char in s[1:]:\n        if char == last_char:\n            char_count += 1\n        else:\n            compressed_string += f'{last_char}{char_count}'\n            last_char = char\n            char_count = 1\n    compressed_string += f'{last_char}{char_count}'\n\n    return compressed_string if len(compressed_string) < len(s) else s",
    "tests": [
        "assert string_compression('aaabcccccaaaz') == 'a3b1c5a2z1'",
        "assert string_compression('abbaca') == 'a1b2c1a1'",
        "assert string_compression('xyzzyxzz') == 'xy2z4y1x2z2'",
        "assert string_compression('abcde') == 'abcde'"
    ],
    "model": "phi3:14b-repaired by Llama 3"
}