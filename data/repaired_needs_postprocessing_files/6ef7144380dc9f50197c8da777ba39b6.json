{
    "title": "Hard - Trapping Rain Water",
    "description": "Given an array of non-negative integers representing the heights of bars in a histogram, calculate the amount of water that can be trapped between these bars after raining. This function takes a list of bar heights as input and returns the total amount of water that can be trapped. The function works by first initializing two arrays, one for the maximum height to the left of each bar and one for the maximum height to the right of each bar. Then it calculates the amount of water that can be trapped at each bar by taking the minimum of the maximum heights to the left and right, minus the height of the current bar. The total amount of water is then calculated as the sum of the amounts of water that can be trapped at each bar.",
    "code": "def trap_rain_water(heights: list[int]) -> int:\n    if not heights:\n        return 0\n    n = len(heights)\n    left_max = [0] * n\n    right_max = [0] * n\n    water = 0\n\n    left_max[0] = heights[0]\n    for i in range(1, n):\n        left_max[i] = max(left_max[i - 1], heights[i])\n\n    right_max[n - 1] = heights[n - 1]\n    for i in range(n - 2, -1, -1):\n        right_max[i] = max(right_max[i + 1], heights[i])\n\n    for i in range(n):\n        water += min(left_max[i], right_max[i]) - heights[i]\n\n    return water",
    "tests": [
        "assert trap_rain_water([0,1,0,2,1,0,1,3,2,1,2,1]) == 6",
        "assert trap_rain_water([4,2,0,3,2,5]) == 9",
        "assert trap_rain_water([1,0,1]) == 1"
    ],
    "model": "gemma2:27b-instruct-q5_K_S-repaired by Llama 3"
}