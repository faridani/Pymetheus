{
    "title": "Is it a Maze Solver? (Medium)",
    "description": "Given a 2D grid of characters representing a maze, write a function `is_valid_maze_path` that determines if there is a valid path from the top-left corner to the bottom-right corner of the maze.\n\n#### Function Signature\n```python\ndef is_valid_maze_path(grid: List[List[str]]) -> bool:\n``` \n\n#### Input\n- `grid` (List[List[str]]): A 2D list of strings representing the maze. Each cell in the grid can be either a period (`.`) which represents an open space, or a solid character (like `#` or `+`) that represents a wall.\n\n#### Output\n- Returns `True` if there is a valid path from the top-left corner to the bottom-right corner of the maze, `False` otherwise.",
    "code": "def is_valid_maze_path(grid):\n  # Base case: if the grid is empty or only contains walls, there's no valid path\n  if not grid or all([all(cell == '#' for cell in row) for row in grid]):\n    return False\n \n  # If we reach the bottom-right corner, there's a valid path\n  if len(grid) - 1 == x and len(grid[0]) - 1 == y:\n    return True\n\n  # Check all neighbors. If any of them are open, explore them recursively.\n  for dx, dy in ((-1, 0), (1, 0), (0, -1), (0, 1)):\n    nx, ny = x + dx, y + dy\n    if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]):\n      if grid[nx][ny] == '.':\n        # Move to the neighbor and recursively explore\n        is_valid = is_valid_maze_path(grid, x=nx, y=ny)\n        if is_valid:\n          return True\n \n  # If we have checked all neighbors and none of them are open, there's no valid path\n  return False",
    "tests": [
        "assert is_valid_maze_path([[ '.', '#'], ['#', '#']]) == False",
        "assert is_valid_maze_path([[ '.', '.'], ['#', '#'], ['.', '#']]) == True",
        "assert is_valid_maze_path([[ '#', '.'], ['.', '#'], ['#', '#']]) == False"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}