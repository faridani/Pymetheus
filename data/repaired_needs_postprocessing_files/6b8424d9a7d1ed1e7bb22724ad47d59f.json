{
    "title": "Anagram Detector (Hard)",
    "description": "Write a function `find_anagrams(words: List[str]) -> Dict[str, List[str]]` that takes a list of words and returns a dictionary where each key is an anagram of a word in the input list, and the value for that key is a list of all the words in the input list that share that anagram.\n\n#### Function Signature\n```python\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\n```\n\n#### Input\n- `words` (List[str]): A list of strings containing only lowercase letters.\n\n#### Output\n- Returns a dictionary where each key is an anagram of a word in the input list and the value for that key is a list of all the words in the input list that share that anagram.",
    "code": "from collections import Counter, defaultdict\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\n    # Create a counter for each word and it's frequency\n    counts = Counter(''.join(words))\n    # Initialize an empty dictionary to store the results\n    result = defaultdict(list)\n    \n    # Iterate through each count in the counter\n    for anagram, freq in counts.items():\n        # If the frequency is greater than 1 (the anagram can be multiple words)\n        if freq > 1:\n            # Get the sorted letters of the anagram and use them as a key\n            sorted_letters = sorted(list(anagram))\n            result[sorted_letters].extend([word for word in words if counts[word] == freq and sorted(list(word)) == sorted_letters])\n    \n    # Convert the dictionary to a list of tuples for easier testing\n    return {k: v for k, v in result.items()}",
    "tests": [
        "assert find_anagrams(['listen', 'silent', 'enlist', 'softly', 'outfit'], ) == [ ('listen', ['listen', 'enlist']), ('silent', ['listen', 'silent']), ('enlist', ['listen', 'enlist']), ('softly', []), ('outfit', [])]"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}