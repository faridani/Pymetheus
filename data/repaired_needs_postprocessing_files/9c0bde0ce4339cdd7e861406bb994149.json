{
    "title": "Polindrome with Special Characters (Hard)",
    "description": "A polindrome is a sequence of characters that reads the same forward and backward. This challenge introduces the special case where polindromes may contain non-alphanumeric characters.\n\n#### Function Signature\n```python\ndef is_polindrome(s: str) -> bool:\n``` \n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, punctuation and special characters like !, * or -. .\n\n#### Output\n- Returns `True` if the input string is a polindrome, `False` otherwise.\n",
    "code": "import re\n\ndef is_polindrome(s: str) -> bool:\n    # Remove non-alphanumeric characters and spaces from s\n    s = re.sub('[^a-zA-Z0-9]', '', s)\n    # Ensure the string has an even number of alphabetic or numeric characters if it contains any\n    if len(s) % 2 != 0 and bool(re.search('[a-zA-Z]', s)): return False\n    # Check if the string reads the same forwards and backwards\n    return s == s[::-1]\n",
    "tests": [
        "assert is_polindrome('Madam') == True",
        "assert is_polindrome('!a man, a plan, a canal: Panama!') == True",
        "assert is_polindrome('hello world') == False",
        "assert is_polindrome('A men a car, can a camel?') == True",
        "assert is_polindrome('2001: A Space Odyssey') == False"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}