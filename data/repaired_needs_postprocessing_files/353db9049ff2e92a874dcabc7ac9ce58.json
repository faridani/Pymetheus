{
    "title": "Anagram Checker (Hard)",
    "description": "An anagram is a word or phrase that is formed by rearranging the letters of another word or phrase. Write a function `is_anagram` that checks if two given strings are anagrams of each other.\n\n#### Function Signature\n```python\ndef is_anagram(s1: str, s2: str) -> bool:\n```\n\n#### Input\n- `s1` (str): A string containing lowercase letters. This could be the first word or phrase.\n- `s2` (str): A string containing lowercase letters. This could be the second word or phrase.\n\n#### Output\n- Returns `True` if the two input strings are anagrams, `False` otherwise.\n\n#### Constraints and Hints\n- Strings may contain duplicates of letters.\n- The two input strings will always have the same length.\n",
    "code": "def is_anagram(s1: str, s2: str) -> bool:\n    # Ensure both strings are of equal length\n    if len(s1) != len(s2):\n        return False\n    # Count the frequency of each letter in each string\n    freq1 = {letter: s1.count(letter) for letter in sorted(set(s1))}\n    freq2 = {letter: s2.count(letter) for letter in sorted(set(s2))}\n    # Compare the two frequency dictionaries\n    return freq1 == freq2",
    "tests": [
        "assert is_anagram('listen', 'silent') == True",
        "assert is_anagram('hello', 'olleh') == True",
        "assert is_anagram('world', 'dragon') == False"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}