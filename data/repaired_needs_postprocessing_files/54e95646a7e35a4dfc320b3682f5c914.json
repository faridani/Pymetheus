{
    "title": "Maximum Sum of Subarray with K Duplicates",
    "description": "Given an array of integers and an integer k, find the maximum sum of any subarray that contains at most k duplicates. For example, if the input array is [1, 2, 3, 4, 5] and k = 2, then the output should be 9 (the sum of the subarray [4, 5]). If there are multiple subarrays with the same maximum sum, return any one of them.\n\n#### Function Signature\n```python\ndef max_sum_with_k_duplicates(arr: list[int], k: int) -> int:\n```\n\n#### Input\n- `arr` (list[int]): A list of integers.\n- `k` (int): An integer representing the maximum number of duplicates allowed in the subarray.\n\n#### Output\n- Returns an integer, the maximum sum of any subarray with at most k duplicates.",
    "code": "def max_sum_with_k_duplicates(arr: list[int], k: int) -> int:\n    n = len(arr)\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    last_occurrence = [-1] * (n + 1)\n    for i in range(1, n + 1):\n        if arr[i - 1] not in [arr[j - 1] for j in range(i)]:\n            dp[i][0] = max(dp[i - 1][0], arr[i - 1])\n            last_occurrence[i] = i - 1\n        else:\n            dp[i][0] = dp[i - 1][0]\n            last_occurrence[i] = last_occurrence[i - 1]\n\n    for j in range(1, k + 1):\n        for i in range(j, n + 1):\n            if arr[i - 1] not in [arr[last_occurrence[m] - 1] for m in range(i - j + 1)]:\n                dp[i][j] = max(dp[i - 1][j], arr[i - 1] + dp[i - j][min(j, k)])\n            else:\n                dp[i][j] = dp[i - 1][j]\n    \n    return dp[n][k]",
    "tests": [
        "assert max_sum_with_k_duplicates([1, 2, 3, 4, 5], 2) == 9",
        "assert max_sum_with_k_duplicates([-1, 0, 1, 2, -1, 0], 1) == 2",
        "assert max_sum_with_k_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9], 0) == 1"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}