{
    "title": "Hard: Circular Permutation",
    "description": "You are given a list of integers representing the weights of items. You need to find all possible circular permutations of these items, such that the sum of weights in any consecutive group of 'k' items is minimized.\n\n#### Function Signature```python\ndef min_circular_permutation(weights: list[int], k: int) -> list[int]:```\n\n#### Input\n- `weights` (list[int]): A list of integers representing the weights of items.\n- `k` (int): The size of each consecutive group.\n\n#### Output\n- Returns a list of integers representing the order of items in the circular permutation that minimizes the maximum sum of any consecutive group of 'k' items. If there are multiple permutations with the same minimum maximum sum, return any one of them.",
    "code": "def min_circular_permutation(weights: list[int], k: int) -> list[int]:\n    n = len(weights)\n    min_sum = float('inf')\n    best_perm = []\n\n    for i in range(n):\n        current_perm = weights[i:] + weights[:i]\n        max_sum = max(sum(current_perm[j:j+k]) for j in range(n))\n        if max_sum < min_sum:\n            min_sum = max_sum\n            best_perm = current_perm.copy()\n    return best_perm",
    "tests": [
        "assert min_circular_permutation([1, 2, 3, 4, 5], 3) == [3, 4, 5, 1, 2]",
        "assert min_circular_permutation([5, 1, 4, 2, 3], 2) == [1, 4, 2, 3, 5]"
    ],
    "model": "gemma2:27b-instruct-q5_K_S-repaired by Llama 3"
}