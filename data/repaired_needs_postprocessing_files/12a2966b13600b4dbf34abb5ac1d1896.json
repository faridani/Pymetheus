{
    "title": "Hard: Word Ladder",
    "description": "A word ladder is a sequence of words where each word differs from the previous word by only one letter. Given two words, `beginWord` and `endWord`, and a dictionary of valid words `wordList`, find the shortest transformation sequence from `beginWord` to `endWord`, such that:\n- All intermediate words must be valid words in `wordList`. \n- Only one letter can be changed at a time.\nReturn the length of the shortest transformation sequence, or -1 if no such sequence exists.\n\n#### Function Signature\n```python\ndef ladderLength(beginWord: str, endWord: str, wordList: list[str]) -> int:\n```\n\n#### Input\n- `beginWord` (str): The starting word. \n- `endWord` (str): The target word.\n- `wordList` (list[str]): A list of valid words.\n\n#### Output\n - Returns the length of the shortest transformation sequence, or -1 if no such sequence exists.",
    "code": "from collections import deque\ndef ladderLength(beginWord: str, endWord: str, wordList: list[str]) -> int:\n    if endWord not in wordList:\n        return 0\n    wordSet = set(wordList)\n    queue = deque([(beginWord, 1)])  # (word, distance)\n    visited = {beginWord}\n\n    while queue:\n        word, distance = queue.popleft()\n        if word == endWord:\n            return distance\n\n        for i in range(len(word)):\n            for ch in 'abcdefghijklmnopqrstuvwxyz':\n                new_word = word[:i] + ch + word[i+1:]\n                if new_word in wordSet and new_word not in visited:\n                    queue.append((new_word, distance + 1))\n                    visited.add(new_word)\n    return 0",
    "tests": [
        "assert ladderLength('hit', 'cog', ['hot','dot','dog','lot','log','cog']) == 5",
        "assert ladderLength('hit', 'cog', ['hot','dot','dog','lot','log']) == 0"
    ],
    "model": "gemma2:27b-instruct-q5_K_S-repaired by Llama 3"
}