{
    "title": "Easy: Valid Sudoku",
    "description": "Write a function `is_valid_sudoku` that checks if a given 9x9 grid represents a valid Sudoku puzzle.\n\n#### Function Signature\n```python\ndef is_valid_sudoku(grid: list[list[int]]) -> bool:\n```\n\n#### Input\n- `grid` (list[list[int]]): A 2D list representing the Sudoku grid, where each element is an integer between 0 and 9. The grid may not be a perfect square.\n\n#### Output\n- Returns `True` if the input grid represents a valid Sudoku puzzle, `False` otherwise.",
    "code": "import copy\ndef is_valid_sudoku(grid: list[list[int]]) -> bool:\n    # Check each row\n    for row in grid:\n        seen = set()\n        for num in row:\n            if num not in seen:\n                seen.add(num)\n            else:\n                return False\n    \n    # Check each column\n    for col in zip(*grid):\n        seen = set()\n        for num in col:\n            if num not in seen:\n                seen.add(num)\n            else:\n                return False\n    \n    # Check each 3x3 sub-grid\n    for i in range(0, 9, 3):\n        for j in range(0, 9, 3):\n            seen = set()\n            for k in range(3):\n                for num in grid[i+k][j:j+3]:\n                    if num not in seen:\n                        seen.add(num)\n                    else:\n                        return False\n    \n    return True",
    "tests": [
        "assert is_valid_sudoku([[], [], []]) == False",
        "assert is_valid_sudoku([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == True",
        "assert is_valid_sudoku([[1, 2, 3], [2, 3, 1], [3, 1, 2]]) == False",
        "assert is_valid_sudoku([[1, 2, 3], [4, 5, 6], [9, 8, 7]]) == True"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}