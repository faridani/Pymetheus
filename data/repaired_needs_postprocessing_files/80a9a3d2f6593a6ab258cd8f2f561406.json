{
    "title": "Max Sum Increasing Subsequence",
    "description": "Write a function `max_sum_increasing_subsequence` that takes as input an integer array `nums`. The function should return the maximum sum of a subsequence where the elements are in strictly increasing order.\n\n#### Function Signature\n```python\ndef max_sum_increasing_subsequence(nums: list[int]) -> int:\n``` \n\n#### Input\n- `nums` (list[int]): A non-empty array of integers.\n\n#### Output\n- Returns the maximum sum of a subsequence where the elements are in strictly increasing order.\n",
    "code": "def max_sum_increasing_subsequence(nums: list[int]) -> int:\n    n = len(nums)\n    dp = [0] * (n + 1)\n    prev_max_sum = [0] * (n + 1)\n\n    for i in range(1, n):\n        if nums[i] > nums[i - 1]:\n            dp[i] = dp[i - 1] + nums[i]\n            prev_max_sum[i] = i\n        else:\n            dp[i] = dp[i - 1]\n            prev_max_sum[i] = prev_max_sum[i - 1]\n\n    max_sum = dp[-1]\n    k = n\n\n    while k > 0 and prev_max_sum[k] == prev_max_sum[k - 1]:\n        k -= 1\n\n    return sum(nums[prev_max_sum.index(k):k + 1])",
    "tests": [
        "assert max_sum_increasing_subsequence([10, 2, 3, 7, 5]) == 15",
        "assert max_sum_increasing_subsequence([-2, -3, 4, -1, -2, 1, 5]) == 6"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}