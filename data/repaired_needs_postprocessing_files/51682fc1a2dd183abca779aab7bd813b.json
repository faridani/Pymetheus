{
    "title": "'Anagram Finder' (hard)",
    "description": "Write a function `find_anagrams(words: List[str]) -> Dict[str, List[str]]` that takes a list of words and returns a dictionary where each key is a word and the values are lists of other words that are anagrams of the given key. An anagram is a word or phrase that consists of the same letters as another word but in a different arrangement.\n\n#### Function Signature\n```python\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\n```\n\n#### Input\n- `words` (List[str]): A list of strings containing words.\n\n#### Output\n- Returns a dictionary where each key is a word and the values are lists of other words that are anagrams of the given key. For example, if the input is ['listen', 'silent', 'enlist', 'educated'], the output should be {'listen': ['silent', 'enlist'], 'silent': ['listen'], 'enlist': ['listen'], 'educated': []}.",
    "code": "from collections import Counter\n\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\n    anagram_dict = { word: [other_word for other_word in words if sorted(Counter(word).keys()) == sorted(Counter(other_word).keys()) and word != other_word] for word in words }\n    return {k: v for k, v in anagram_dict.items() if len(v) > 0}",
    "tests": [
        "assert find_anagrams(['listen', 'silent', 'enlist', 'educated']) == {'listen': ['silent', 'enlist'], 'silent': ['listen'], 'enlist': ['listen'], 'educated': []}",
        "assert find_anagrams(['cars', 'for', 'tact', 'racf']) == {'cars': ['racf'], 'for': [], 'tact': ['cars']}"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}