{
    "title": "Factorial Sum Calculator (Hard)",
    "description": "A factorial sum calculator should compute the sum of the factorials of a given list of non-negative integers. The function `factorial_sum` computes this sum and returns it.\n\n#### Function Signature\n```python\ndef factorial_sum(nums: List[int]) -> int:\n``` \n\n#### Input\n- `nums` (List[int]): A list of non-negative integers where each integer is less than or equal to 10.\n\n#### Output\n- Returns an integer representing the sum of factorials of all numbers in the input list. The factorial of a number `n` is defined as `n! = n * (n-1) * ... * 2 * 1`. Note that `0!` is defined to be 1.\n\n#### Constraints and Hints:\n- Each integer in the input list can range from 0 to 10, inclusive.\n- The factorial of any number within this range will not exceed the value of 3628800 (which is `10!`). Therefore, you do not need to worry about overflow issues with standard Python integers.",
    "code": "from typing import List\n\ndef factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(2, n + 1):\n            result *= i\n        return result\n\ndef factorial_sum(nums: List[int]) -> int:\n    sum_factorials = 0\n    for num in nums:\n        sum_factorials += factorial(num)\n    return sum_factorials",
    "tests": [
        "assert factorial_sum([3, 4]) == 30",
        "assert factorial_sum([2, 5]) == 122",
        "assert factorial_sum([0, 1]) == 2",
        "assert factorial_sum([7, 8, 9]) == 36400"
    ],
    "model": "phi3:14b-repaired by Llama 3"
}