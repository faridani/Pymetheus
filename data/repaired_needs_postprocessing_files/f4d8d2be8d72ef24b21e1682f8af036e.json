{
    "title": "Easy: Number of Islands",
    "description": "Given a 2D binary matrix containing `0`s and `1`s, return the number of islands. An island is any group of connected cells with value `1`. \n\n#### Function Signature\n```python\ndef num_islands(grid: list[list[int]]) -> int:\n``` \n\n#### Input\n- `grid` (list[list[int]]): A 2D binary matrix where `0`s represent empty cells and `1`s represent islands.\n\n#### Output\n- Returns the number of islands in the input grid.",
    "code": "def num_islands(grid: list[list[int]]) -> int:\n    if not grid or not grid[0]:\n        return 0\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                self._dfs(grid, i, j)\n                count += 1\n    return count\n\ndef _dfs(grid: list[list[int]], i: int, j: int) -> None:\n    if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[i]):\n        return\n    if grid[i][j] != 1:\n        return\n    grid[i][j] = 0\n    self._dfs(grid, i - 1, j)\n    self._dfs(grid, i + 1, j)\n    self._dfs(grid, i, j - 1)\n    self._dfs(grid, i, j + 1)",
    "tests": [
        "assert num_islands([[0,0,1,0,0],[1,0,1,1,0],[0,1,0,0,1],[0,0,0,1,1]]) == 1",
        "assert num_islands([[1,1,0,0,0],[1,1,0,0,0],[0,0,1,0,0],[0,0,0,1,1]]) == 3"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}