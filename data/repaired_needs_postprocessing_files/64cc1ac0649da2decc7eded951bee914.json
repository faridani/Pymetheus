{
    "title": "Hard: Graph Colorability",
    "description": "Given a graph represented as an adjacency list, determine if it's possible to color the graph with k colors such that no two adjacent vertices have the same color.\n\n#### Function Signature\n```python\ndef can_color_graph(graph: list[list], k: int) -> bool:\n```\n\n#### Input\n- `graph` (list[list]): A list of lists where each inner list represents an adjacency list for a graph node. For example, if the graph has 5 nodes and the first node is connected to the second and third nodes, then the `graph` would be `[[1, 2], [0, 3, 4], [0, 3, 4], [1, 2, 4], [1, 2]]`. Node indices are 0-based.\n- `k` (int): The maximum number of colors allowed for the graph colorability problem.\n\n#### Output\n- Returns `True` if it's possible to color the graph with k colors such that no two adjacent vertices have the same color, `False` otherwise.",
    "code": "from collections import deque\nimport itertools\n\ndef can_color_graph(graph: list[list], k: int) -> bool:\n    # Initialize a set for each color to keep track of nodes with that color\n    colors = [[] for _ in range(k)]\n    for node in range(len(graph)):\n        # Use BFS to find an available color for the current node\n        queue = deque([(node, 0)])\n        while queue:\n            node_index, color_index = queue.popleft()\n            if colors[color_index] and node not in colors[color_index]:\n                continue\n            if any(neighbor == node_index for neighbor in graph[node]):\n                # If the current node is already colored with this color or has an adjacent node with this color, try another color\n                while colors[color_index]:\n                    colors[color_index] = []\n                    color_index = (color_index + 1) % k\n                if not any(neighbor == node_index for neighbor in graph[node]):\n                    break\n            # Add the current node to its corresponding color set and mark it as colored\n            colors[color_index].append(node)\n        if not all(colors): return True\n    # If no valid coloring exists, return False\n    return False\n",
    "tests": [
        "assert can_color_graph([[1], [0]], 2) == True",
        "assert can_color_graph([[0, 1], [1], [0]], 3) == True",
        "assert can_color_graph([[0, 1], [1, 2], [2, 0]], 3) == False",
        "assert can_color_graph([[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 0]], 3) == True"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}