{
    "title": "Permutation Checker (Hard)",
    "description": "Given two lists of integers, determine if they are permutations of each other. A permutation is an arrangement of items in a particular order without regard to their relative positions.\n\n#### Function Signature\n```python\ndef are_permutations(list1: list[int], list2: list[int]) -> bool:\n``` \n\n#### Input\n- `list1` (list[int]): A sorted list of integers.\n- `list2` (list[int]): Another sorted list of integers.\n\n#### Output\n- Returns `True` if the two input lists are permutations of each other, `False` otherwise.\n",
    "code": "def are_permutations(list1: list[int], list2: list[int]) -> bool:\n    # Sort both lists\n    list1.sort()\n    list2.sort()\n    \n    # If the two sorted lists have different lengths, they cannot be permutations of each other.\n    if len(list1) != len(list2):\n        return False\n    \n    # Iterate through both lists and check if corresponding elements are equal\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    \n    # If no unequal pairs were found, the two lists must be permutations of each other.\n    return True",
    "tests": [
        "assert are_permutations([1, 2, 3], [1, 3, 2]) == True",
        "assert are_permutations([4, 6, 7], [4, 7, 6]) == False",
        "assert are_permutations([1, 2, 3, 4], [4, 3, 2, 1]) == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}