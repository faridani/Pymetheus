{
    "title": "Easy: Tower of Hanoi",
    "description": "The classic Tower of Hanoi problem. Write a function `hanoi` that takes three integers as input: the number of disks, the peg to move from (1 or 2), and the peg to move to (1 or 2). The function should return whether it's possible to move all the disks from the source peg to the destination peg.\n\n#### Function Signature\n```python\ndef hanoi(n: int, from_peg: int, to_peg: int) -> bool:\n``` \n\n#### Input\n- `n` (int): The number of disks. - `from_peg` (int): The peg to move from (1 or 2).- `to_peg` (int): The peg to move to (1 or 2).\n\n#### Output\n- Returns `True` if it's possible to move all the disks, `False` otherwise.\n",
    "code": "def hanoi(n: int, from_peg: int, to_peg: int) -> bool:\n    # Check if the number of disks is valid\n    if n < 1:\n        return False\n\n    # Check if the pegs are valid\n    if not (from_peg in [1, 2] and to_peg in [1, 2]):\n        return False\n\n    # Base case: If there's only one disk, it's always possible to move it.\n    if n == 1:\n        return True\n\n    # Recursive case: If we have more than one disk,\n    # we need to move the top `n-1` disks from the source peg to another peg,\n    # then move the nth disk from the source peg to the destination peg,\n    # and finally move the `n-1` disks that were moved earlier from the intermediate peg to the destination peg.\n    return (hanoi(n - 1, from_peg, 3 - to_peg) and\n           hanoi(1, from_peg, to_peg) and\n           hanoi(n - 1, 3 - from_peg, to_peg)) or False,\n",
    "tests": [
        "assert not hanoi(0, 1, 2)",
        "assert not hanoi(-1, 1, 2)",
        "assert hanoi(1, 1, 2)",
        "assert not hanoi(3, 1, 2)"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}