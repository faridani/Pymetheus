{
    "title": "Hard: Find All Anagrams",
    "description": "Given a string `s` and a word `p`, find all occurrences of anagrams of `p` in `s`. Return the starting indices of these anagrams.\n\n#### Function Signature\n```python\ndef find_all_anagrams(s: str, p: str) -> list[int]:\n```\n\n#### Input\n- `s` (str): The main string to search within.\n- `p` (str): The word whose anagrams we want to find in `s`.\n\n#### Output\n- A list of integers representing the starting indices of all anagram occurrences of `p` in `s`.\n\n#### Constraints\n- 1 <= len(s) <= 3 * 10^4\n- 1 <= len(p) <= 3 * 10^4\n- `s` and `p` consist only of lowercase English letters.",
    "code": "def find_all_anagrams(s: str, p: str) -> list[int]:\n    ns, np = len(s), len(p)\n    if ns < np:\n        return []\n\n    p_count = Counter(p)\n    s_count = Counter()\n\n    output = []\n    for i in range(ns):\n        s_count[s[i]] += 1\n        if i >= np:\n            if s_count[s[i - np]] == 1:\n                del s_count[s[i - np]]\n            else:\n                s_count[s[i - np]] -= 1\n        if p_count == s_count:\n            output.append(i - np + 1)\n\n    return output",
    "tests": [
        "assert find_all_anagrams(\"cbaebabacd\", \"abc\") == [0,6]",
        "assert find_all_anagrams(\"abab\", \"ab\") == [0,1,2]"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}