{
    "title": "Anagram Detector (Hard)",
    "description": "Write a function `find_anagrams` that takes a list of strings as input and returns another list containing the pairs of anagrams. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n#### Function Signature\n```python\ndef find_anagrams(words: List[str]) -> List[List[str]]:\n``` \n#### Input\n- `words` (List[str]): A list of strings that may contain letters, numbers, spaces and punctuation.\n#### Output\n- Returns a list of lists, where each inner list contains pairs of anagrams.\n",
    "code": "import collections\ndef find_anagrams(words: List[str]) -> List[List[str]]:\n    # Sort and count the characters in each word\n    sorted_and_counted = {sorted(word): collections.Counter(word) for word in words}\n    \n    # Find anagram pairs\n    anagrams = []\n    for key, value in sorted_and_counted.items():\n        for other_key, other_value in sorted_and_counted.items():\n            if key != other_key and value == other_value:\n                anagrams.append([key, other_key])\n    \n    # Remove duplicates (if any) and return the result\n    return list(set(anagrams))",
    "tests": [
        "assert find_anagrams(['listen', 'silent', 'enlist']) == [['listen', 'silent']]",
        "assert find_anagrams(['belong', 'longobe', 'goblin']) == [['belong', 'longobe'], ['goblin']]",
        "assert find_anagrams(['hello', 'world']) == []"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}