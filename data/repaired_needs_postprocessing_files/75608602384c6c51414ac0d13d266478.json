{
    "title": "Hard: Balanced Parentheses",
    "description": "#### Balanced Parentheses\nGiven a string containing only parentheses '(' and ')', determine if the input string is balanced. A string of parentheses is balanced if:\n* Every opening parenthesis '(' has a corresponding closing parenthesis ')'.\nThe parentheses are properly nested, meaning that for each opening parenthesis, there is a matching closing parenthesis later in the string.\n#### Function Signature\n```pythonndef is_balanced(s: str) -> bool:\n```\n#### Input\n- `s` (str): A string containing only parentheses '(' and ')'.\n#### Output\n- Returns `True` if the input string is balanced, `False` otherwise.\n",
    "code": "def is_balanced(s: str) -> bool:\n    stack = []\n    parentheses_map = {')': '('}\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop() != parentheses_map[char]:\n                return False\n    return len(stack) == 0",
    "tests": [
        "assert is_balanced('()') == True",
        "assert is_balanced('(())') == True",
        "assert is_balanced('(()())') == True",
        "assert is_balanced('((()))') == True",
        "assert is_balanced('(') == False",
        "assert is_balanced(')') == False",
        "assert is_balanced('(()') == False",
        "assert is_balanced(')(') == False"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}