{
    "title": "Hard - Island Hopping",
    "description": "You are planning a vacation to an archipelago consisting of *N* islands. Each island is connected to some other islands by bridges. Your goal is to visit all the islands, starting from island 1. You can only travel across bridges in one direction.\n\n#### Function Signature\n```python\ndef island_hopping(bridges):\n``` \n\n#### Input\n- `bridges`: A list of tuples representing the connections between islands. Each tuple contains two integers: the starting island and the destination island. For example, `(1, 2)` means there is a bridge from island 1 to island 2.\n\n#### Output\n- Returns a list containing the order in which you should visit the islands to traverse all of them. If it's impossible to visit all islands, return an empty list `[]`.",
    "code": "def island_hopping(bridges):\n    graph = {i: [] for i in range(1, len(bridges) + 2)}\n    for bridge in bridges:\n        graph[bridge[0]].append(bridge[1])\n    visited = set()\n    path = []\n    def dfs(node):\n        if node == len(bridges) + 1:\n            return True\n        if node in visited:\n            return False\n        visited.add(node)\n        for neighbor in graph[node]:\n            if dfs(neighbor):\n                path.append(node)\n                return True\n        return False\n    if dfs(1):\n        return path[::-1]\n    else:\n        return []",
    "tests": [
        "assert island_hopping([(1, 2), (2, 3), (3, 4)]) == [1, 2, 3, 4]",
        "assert island_hopping([(1, 2), (2, 1), (2, 3), (3, 4)]) == [1, 2, 3, 4]",
        "assert island_hopping([(1, 2), (2, 3)]) == [1, 2, 3]",
        "assert island_hopping([(1, 2), (3, 4)]) == []"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}