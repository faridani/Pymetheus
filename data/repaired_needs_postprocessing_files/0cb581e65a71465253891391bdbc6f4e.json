{
    "title": "Super Hard Number Base Conversion",
    "description": "Write a function `convert_base` that converts a number from one base to another. The function should take three arguments:\n- `number` (int): The number to convert.\n- `from_base` (int): The base of the input number (between 2 and 36).\n- `to_base` (int): The desired base for the output number (between 2 and 36).\nThe function should return a string representing the number in the target base.\n\nConstraints:\n- The input number will be within the range of convertible numbers for the given bases.\n\nHints:\n- Use the `divmod` function to break down the number into its individual digits in the source base.\n- Use a stack to reverse the order of the digits before converting them to the target base.",
    "code": "def convert_base(number: int, from_base: int, to_base: int) -> str:\n    if from_base < 2 or from_base > 36 or to_base < 2 or to_base > 36:\n        raise ValueError('Base must be between 2 and 36')\n\n    digits = []\n    while number > 0:\n        number, digit = divmod(number, from_base)\n        digits.append(digit)\n\n    return ''.join(str(d) for d in reversed(digits)) if to_base >= from_base else convert_base(sum(d * (from_base ** i) for i, d in enumerate(reversed(digits))), to_base, from_base)\n",
    "tests": [
        "assert convert_base(255, 10, 16) == 'ff'",
        "assert convert_base(349, 7, 13) == '1b'"
    ],
    "model": "mistral-nemo:latest-repaired by Llama 3"
}