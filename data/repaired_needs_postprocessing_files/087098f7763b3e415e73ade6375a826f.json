{
    "title": "Hard: Longest Increasing Subsequence with Limited Jumps",
    "description": "Given an array of integers `nums` and an integer `k`, find the length of the longest increasing subsequence where each element is at most `k` indices away from the previous element. \n#### Function Signature\n```python\ndef longest_increasing_subsequence_with_jumps(nums: list[int], k: int) -> int:\n```\n#### Input\n- `nums` (list[int]): A list of integers.\n- `k` (int): The maximum number of indices an element can be away from the previous element in the subsequence.\n#### Output\n- Returns the length of the longest increasing subsequence with the given jump constraint.",
    "code": "def longest_increasing_subsequence_with_jumps(nums: list[int], k: int) -> int:\n    n = len(nums)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(max(0, i - k), i):\n            if nums[i] > nums[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)",
    "tests": [
        "'assert longest_increasing_subsequence_with_jumps([1, 3, 2, 4, 5], 2) == 4'",
        "'assert longest_increasing_subsequence_with_jumps([2, 6, 3, 1, 4, 5], 3) == 4'",
        "'assert longest_increasing_subsequence_with_jumps([1, 2, 1, 3, 2, 4], 1) == 4'"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}