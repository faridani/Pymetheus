{
    "title": "Hard: Knights Traversal",
    "description": "You are given an N x N chessboard and a starting position for a knight. The knight can move in its typical L-shape (two squares in one direction, then one square perpendicular to that). Write a function `knight_traversal` that determines the minimum number of moves required for the knight to visit every square on the board exactly once.\n\n#### Function Signature\n```python\ndef knight_traversal(n: int, start_row: int, start_col: int) -> int:\n``` \n\n#### Input\n- `n` (int): The size of the chessboard (N x N).\n- `start_row` (int): The starting row for the knight (0-indexed).\n- `start_col` (int): The starting column for the knight (0-indexed).\n\n#### Output\n- Returns the minimum number of moves required to visit all squares exactly once. If it's impossible, return -1.\n",
    "code": "from collections import deque\ndef knight_traversal(n: int, start_row: int, start_col: int) -> int:\n    moves = [(2, 1), (1, 2), (-1, 2), (-2, 1), (-2, -1), (-1, -2), (1, -2), (2, -1)]\n    queue = deque([(start_row, start_col, 0)])  # Store row, col, and moves taken\n    visited = set([(start_row, start_col)])\n    while queue:\n        row, col, steps = queue.popleft()\n        if len(visited) == n * n: \n            return steps\n        for dr, dc in moves:\n            new_row = row + dr\n            new_col = col + dc\n            if 0 <= new_row < n and 0 <= new_col < n and (new_row, new_col) not in visited:\n                visited.add((new_row, new_col))\n                queue.append((new_row, new_col, steps + 1))\n    return -1  # Not possible to visit all squares\n",
    "tests": [
        "assert knight_traversal(5, 0, 0) == 26",
        "assert knight_traversal(3, 0, 0) == 8",
        "assert knight_traversal(4, 1, 1) == -1"
    ],
    "model": "gemma2:27b-instruct-q5_K_S-repaired by Llama 3"
}