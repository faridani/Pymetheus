{
    "title": "Valid Parentheses Stacks",
    "description": "A valid parentheses string is one that can be transformed into a sequence of valid parentheses by removing some opening and closing parentheses, without relying on any other invalid parentheses. In one valid way to transform each valid parentheses string in this form: it transforms into the same sequence of valid parentheses (an empty string or a sequence with one type of parenthesis).\nWrite a function `valid_parentheses` that takes a string containing just the three types of parentheses and evaluates its validity.\n#### Function Signature\n```python\ndef valid_parentheses(s: str) -> bool:\n```\n#### Input\n- `s` (str): A string consisting of only '((', '[' and ']'), '{' and '}'.\n#### Output\n- Returns `True` if the parentheses are valid, `False` otherwise.",
    "code": "def valid_parentheses(s: str) -> bool:\n    stack = ['(']\n    for char in s:\n        if char in ('(', '[', '{'):\n            stack.append(char)\n        elif char in (')', ']', '}'):\n            bracket = stack.pop()\n            if (char == ')' and bracket != '(') or (char == ']' and bracket != '[') or (char == '}' and bracket != '{'):\n                return False\n    return not stack",
    "tests": [
        "assert valid_parentheses('()') == True",
        "assert valid_parentheses('()[]{}') == True",
        "assert valid_parentheses('(]') == False",
        "assert valid_parentheses('([)]') == False",
        "assert valid_parentheses('{)') == False"
    ],
    "model": "llama3.1:8b-repaired by Llama 3"
}