{
    "title": "Hard: Digit Power Sum",
    "description": "#### Function Signature\n```python\ndef digit_power_sum(n: int) -> int:\n```A number is said to be a Digit Power Sum if the sum of its digits raised to individual powers (starting from 0) equals the original number. For example, 153 is a Digit Power Sum because 1^0 + 5^1 + 3^2 = 153.\nWrite a function `digit_power_sum` that takes an integer `n` as input and returns the sum of all Digit Power Sums less than or equal to `n`.#### Input\n- `n` (int): An integer representing the upper limit.#### Output\n- Returns the sum of all Digit Power Sums less than or equal to `n`.### Code\ndef digit_power_sum(n: int) -> int:\n    total_sum = 0\n    for num in range(1, n + 1):\n        digits = [int(d) for d in str(num)]\n        digit_power_sum = sum(digit ** i for i, digit in enumerate(digits))\n        if digit_power_sum == num:\n            total_sum += num\n    return total_sum",
    "code": "def digit_power_sum(n: int) -> int:\n    total_sum = 0\n    for num in range(1, n + 1):\n        digits = [int(d) for d in str(num)]\n        digit_power_sum = sum(digit ** i for i, digit in enumerate(digits))\n        if digit_power_sum == num:\n            total_sum += num\n    return total_sum",
    "tests": [
        "assert digit_power_sum(10) == 153",
        "assert digit_power_sum(100) == 153 + 370 + 371 + 407 == 1201",
        "assert digit_power_sum(1000) == 153 + 370 + 371 + 407 + 1634 == 2935"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}