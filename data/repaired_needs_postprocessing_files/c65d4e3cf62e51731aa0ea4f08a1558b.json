{
    "title": "Cyclopean Pattern Generator",
    "description": "In ancient Minoan civilization, the palace of Knossos was famous for its intricate frescoes. One of these patterns, known as a 'cyclopean pattern', consists of overlapping spirals that form a larger spiral shape. The cyclopean pattern is created by repeating a small unit of 5 elements (dots, lines, or curves) in a specific sequence. The pattern can be rotated and reflected to create different variations.\n#### Function Signature\n```python\ndef generate_cyclopean_pattern(size: int, num_repeats: int, rotation: int, reflection: bool) -> list:\n```\n#### Input\n- `size`: The size of the generated pattern (int). Larger values will result in more detailed patterns.\n- `num_repeats`: The number of times to repeat the small unit (int).\n- `rotation`: The number of times to rotate the pattern (int), where 0 represents no rotation and 1 represents a 90-degree rotation.\n- `reflection`: Whether to reflect the pattern horizontally (bool).\n#### Output\n- A list of lists, where each inner list represents a row in the generated cyclopean pattern. The elements in each inner list are either 'X' for black dots or ' ' for white space.\n",
    "code": "import math\ndef generate_cyclopean_pattern(size: int, num_repeats: int, rotation: int, reflection: bool) -> list:\n    def get_unit() -> str:\n        # Define the small unit of 5 elements\n        return 'X X X X X' if random.choice([True, False]) else '   '\n    pattern = [[' '] * size for _ in range(size)]\n    for _ in range(num_repeats):\n        for i in range(size // 2):\n            for j in range(size // 2):\n                # Apply rotation and reflection if necessary\n                if rotation % 4 == 1:\n                    pattern[i][j] = get_unit()[4 - (rotation % 4)]\n                    pattern[i][-j-1] = ' '\n                elif rotation % 4 == 3:\n                    pattern[-i-1][j] = ' '\n                    pattern[i][j] = get_unit()[-(rotation % 4)]\n                else:\n                    pattern[i][j] = get_unit()\n    return pattern",
    "tests": [
        "assert len(generate_cyclopean_pattern(5, 3, 0, False)) == 5 and all(len(row) == 5 for row in generate_cyclopean_pattern(5, 3, 0, False))",
        "assert len(generate_cyclopean_pattern(10, 4, 2, True)) == 10 and all(len(row) == 10 for row in generate_cyclopean_pattern(10, 4, 2, True))"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}