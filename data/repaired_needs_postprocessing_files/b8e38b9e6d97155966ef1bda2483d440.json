{
    "title": "Sorting Matrix by Sum",
    "description": "Write a function `sort_matrix` that takes a 2D list of integers, where each inner list represents a row in the matrix. The function should return a new matrix with the same dimensions as the input matrix, but with the rows sorted in descending order based on their sum.\n\n#### Function Signature\n```python\ndef sort_matrix(matrix: list[list[int]]) -> list[list[int]]:\n``` \n\n#### Input\n- `matrix` (list[list[int]]): A 2D list of integers, where each inner list represents a row in the matrix.\n\n#### Output\n- Returns a new matrix with the same dimensions as the input matrix, but with the rows sorted in descending order based on their sum.",
    "code": "import heapq\ndef sort_matrix(matrix: list[list[int]]) -> list[list[int]]:\n    # Calculate the sum of each row and store it along with the row itself\n    row_sums = [(sum(row), row) for row in matrix]\n    # Use a heap to sort the rows based on their sums in descending order\n    sorted_rows = [list(heapq.merge(*[heapq.nsmallest(len(matrix), row_sums, key=lambda x: -x[0])], key=lambda x: x[1]))[1:] for _ in range(len(matrix))]\n    return sorted_rows",
    "tests": [
        "assert sort_matrix([[3, 4, 5], [2, 6, 7], [1, 8, 9]]) == [[9, 8, 1], [7, 6, 2], [5, 4, 3]]",
        "assert sort_matrix([[1, 2], [3, 4], [5, 6]]) == [[6, 5], [4, 3], [2, 1]]"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}