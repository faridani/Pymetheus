{
    "title": "Anagram Detector (Hard)",
    "description": "An anagram is a word or phrase that consists of the same letters as another word or phrase, but arranged differently. Write a function `are_anagrams` that checks if two given strings are anagrams. This function can be used to solve the problem on LeetCode.\n\n#### Function Signature\n```python\ndef are_anagrams(str1: str, str2: str) -> bool:\n```\n\n#### Input\n- `str1`, `str2` (str): Two strings that may contain letters and spaces.\n\n#### Output\n- Returns `True` if the two input strings are anagrams, `False` otherwise.\n",
    "code": "import collections\ndef are_anagrams(str1: str, str2: str) -> bool:\n    # Remove spaces from both strings and convert to lowercase\n    str1 = ''.join(c for c in str1.lower() if c.isalpha()).replace(' ', '')\n    str2 = ''.join(c for c in str2.lower() if c.isalpha()).replace(' ', '')\n    \n    # If the lengths of the strings are not equal, they cannot be anagrams\n    if len(str1) != len(str2):\n        return False\n    \n    # Create two dictionaries to count the frequency of each character in both strings\n    char_dict1 = collections.Counter([char for char in str1])\n    char_dict2 = collections.Counter([char for char in str2])\n    \n    # Check if all characters in the first string have the same count as their counterpart in the second string\n    return all(count == other_count for char, (count, other_count) in zip(str1, zip(char_dict1.values(), char_dict2.values())))\n",
    "tests": [
        "assert are_anagrams(\"listen\", \"silent\") == True",
        "assert are_anagrams(\"hello\", \"world\") == False",
        "assert are_anagrams(\"madam\", \"dam\") == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}