{
    "title": "Easy: Number of Islands",
    "description": "Given a 2D array of size M x N, consisting of zeros and ones. You are standing on an island that is represented by the 2D array. You can only move to adjacent cells (up, down, left, right). The goal is to find the number of islands in the given 2D array.\n\n#### Function Signature\n```\ndef count_islands(grid: list[list[int]]) -> int:\n``` \n\n#### Input\n- `grid` (list[list[int]]): A 2D array of size M x N, where each cell contains either 0 or 1. The zeros represent the land and the ones represent the water.\n\n#### Output\n- Returns the number of islands in the given 2D array.",
    "code": "from typing import List\n\ndef count_islands(grid: List[List[int]]) -> int:\n    if not grid:\n        return 0\n    def dfs(i, j):\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == 0:\n            return\n        grid[i][j] = 0\n        dfs(i - 1, j)\n        dfs(i + 1, j)\n        dfs(i, j - 1)\n        dfs(i, j + 1)\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                dfs(i, j)\n                count += 1\n    return count",
    "tests": [
        "assert count_islands([[]]) == 0",
        "assert count_islands([[0, 0], [0, 0]]) == 0",
        "assert count_islands([[0, 1], [1, 0]]) == 2",
        "assert count_islands([[0, 1, 1], [1, 0, 1], [1, 1, 0]]) == 3"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}