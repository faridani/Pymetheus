{
    "title": "Hard: Alien Language Decoder",
    "description": "Aliens have landed on Earth, and they've brought a message! The problem is, their language uses a complex system of prime numbers to represent words. You are tasked with writing a Python function `decode_alien_message` to decipher it.\n\n#### Function Signature\n```python\ndef decode_alien_message(encoded_message: str) -> str:\n``` \n\n#### Input\n- `encoded_message` (str): A string containing space-separated prime numbers. Each prime number represents a letter in the alien alphabet.\n\n#### Output\n- Returns the decoded message as a string. The alien language's alphabet is: 2 = 'A', 3 = 'B', 5 = 'C', 7 = 'D', 11 = 'E', 13 = 'F', 17 = 'G', 19 = 'H', 23 = 'I', 29 = 'J' , 31 = 'K', 37 = 'L', 41 = 'M', 43 = 'N', 47 = 'O', 53 = 'P', 59 = 'Q', 61 = 'R', 67 = 'S', 71 = 'T', 73 = 'U', 79 = 'V', 83 = 'W', 89 = 'X', 97 = 'Y', 101 = 'Z'\n\n#### Example\nIf `encoded_message` is `2 5 11 17`, the function should return `ACGE`\n\n#### Constraints \nThe input string will always contain valid prime numbers. There may be multiple spaces between prime numbers.",
    "code": "def decode_alien_message(encoded_message: str) -> str:\n    prime_to_letter = {2: 'A', 3: 'B', 5: 'C', 7: 'D', 11: 'E', 13: 'F', 17: 'G', 19: 'H', 23: 'I', 29: 'J',\n                      31: 'K', 37: 'L', 41: 'M', 43: 'N', 47: 'O', 53: 'P', 59: 'Q', 61: 'R', 67: 'S',\n                      71: 'T', 73: 'U', 79: 'V', 83: 'W', 89: 'X', 97: 'Y', 101: 'Z'}\n    decoded_message = ''\n    primes = encoded_message.split()\n    for prime in primes:\n        decoded_message += prime_to_letter[int(prime)] \n    return decoded_message",
    "tests": [
        "assert decode_alien_message('2 5 11 17') == 'ACGE'",
        "assert decode_alien_message('2 3 5 7 11 13 17 19') == 'ABCDEFGH'",
        "assert decode_alien_message('101 97 89 67 59 53') == 'ZYXWRS'",
        "assert decode_alien_message('2   5     11       17') == 'ACGE'"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}