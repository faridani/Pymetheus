{
    "title": "Hard: Flatten Nested Dictionary",
    "description": "Write a function `flatten_dictionary` that takes a nested dictionary as input and returns a flattened dictionary. The keys in the flattened dictionary should be formed by joining the keys of the nested dictionaries with periods (`.`). For example, the key `'a'` in the outer dictionary and the key `'b'` in the inner dictionary would become the key `'a.b'` in the flattened dictionary.\n#### Function Signature\n```python\ndef flatten_dictionary(nested_dict: dict) -> dict:\n```\n\n#### Input\n- `nested_dict` (dict): A dictionary that may contain nested dictionaries.\n#### Output\n- Returns a flattened dictionary.\n",
    "code": "def flatten_dictionary(nested_dict: dict) -> dict:\n    flattened_dict = {}\n\n    def _flatten(key_prefix, d):\n        for key, value in d.items():\n            new_key = '.'.join([key_prefix, key]) if key_prefix else key\n            if isinstance(value, dict):\n                _flatten(new_key, value)\n            else:\n                flattened_dict[new_key] = value\n    \n    _flatten('', nested_dict)\n    return flattened_dict",
    "tests": [
        "assert flatten_dictionary({'a': {'b': 1, 'c': 2}, 'd': 3}) == {'a.b': 1, 'a.c': 2, 'd': 3}",
        "assert flatten_dictionary({'a': 1, 'b': {'c': 2, 'd': {'e': 3}}}) == {'a': 1, 'b.c': 2, 'b.d.e': 3}",
        "assert flatten_dictionary({}) == {}"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}