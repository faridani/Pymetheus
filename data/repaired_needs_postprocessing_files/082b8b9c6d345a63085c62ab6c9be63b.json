{
    "title": "Prime Factorization",
    "description": "A function to find the prime factors of a given number. Write a function `prime_factors` that finds all the prime numbers that multiply together make the input number.\n\n#### Function Signature\n```python\ndef prime_factors(n: int) -> list:\n```\n\n#### Input\n- `n` (int): A non-negative integer.\n\n#### Output\n- Returns a sorted list of prime numbers that multiply together to give the input number. If the input is 1, returns an empty list.",
    "code": "def prime_factors(n: int) -> list:\n    # Base case: if n is 1 or less, return an empty list\n    if n <= 1:\n        return []\n    # Initialize the factors list and the smallest possible prime factor (2)\n    factors = []\n    i = 2\n    while i * i <= n:\n        # If i is a divisor of n, add it to the factors list and divide n by i\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        # Move on to the next possible prime factor (i + 1)\n        i += 1\n    # If there is a remaining fraction, it must be a prime number greater than the highest tested number (i)\n    # Add this prime to the factors list and return the list\n    if n > 1:\n        factors.append(n)\n    return sorted(factors)",
    "tests": [
        "assert prime_factors(1) == []",
        "assert prime_factors(2) == [2]",
        "assert prime_factors(4) == [2, 2]",
        "assert prime_factors(6) == [2, 3]",
        "assert prime_factors(8) == [2, 2, 2, 2]",
        "assert prime_factors(9) == [3, 3]"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}