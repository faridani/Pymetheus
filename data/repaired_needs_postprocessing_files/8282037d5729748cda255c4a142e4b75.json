{
    "title": "Maximal Rectangle",
    "description": "Given a 2D binary matrix `matrix` containing only 0s and 1s, return the area of the largest rectangle that can be formed using these ones. The ones in the matrix represent the borders of the rectangles.\n\n#### Function Signature\n```python\ndef max_area(matrix: List[List[int]]) -> int:\n``` \n\n#### Input\n- `matrix` (List[List[int]]): A 2D binary matrix containing only 0s and 1s, where ones represent the borders of rectangles.\n\n#### Output\n- Returns the area of the largest rectangle that can be formed using these ones.",
    "code": "from typing import List\n\ndef max_area(matrix: List[List[int]]) -> int:\n    if not matrix or not matrix[0]:\n        return 0\n    m, n = len(matrix), len(matrix[0])\n    heights = [0] * (n + 1)\n    max_area = 0\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                heights[j] += 1\n            else:\n                heights[j] = 0\n        stack = []\n        top_index = -1\n        for j in range(n + 1):\n            while len(stack) > 0 and (top_index == -1 or heights[stack[-1]] >= heights[j]):\n                height = heights[stack.pop()]\n                width = j if top_index == -1 else j - stack[-1] - 1\n                max_area = max(max_area, height * width)\n            top_index = j\n        for i in range(len(stack)):\n            height = heights[stack[i]]\n            width = n - stack[i] - 1 if top_index == len(heights) else top_index - stack[i] - 1\n            max_area = max(max_area, height * width)\n    return max_area",
    "tests": [
        "assert max_area([[0,0,0],[1,1,1],[0,0,0]]) == 4",
        "assert max_area([[1,1,1],[1,0,1],[1,1,1]]) == 6",
        "assert max_area([[1,0,0],[1,1,0],[1,1,1]]) == 5"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}