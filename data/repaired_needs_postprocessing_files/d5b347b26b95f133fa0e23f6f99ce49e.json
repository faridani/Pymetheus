{
    "title": "Anagram Detection (Hard)",
    "description": "Determine if two given strings are anagrams of each other, meaning that the letters of one string can be rearranged to form the other string.#### Function Signature``pythonndef are_anagrams(str1: str, str2: str) -> bool:\n#### Input\n- `str1` (str): A non-empty string containing only lowercase English alphabets.\n- `str2` (str): Another non-empty string containing only lowercase English alphabets.\n#### Output\n- Returns `True` if the input strings are anagrams, `False` otherwise.",
    "code": "def count_chars(s: str) -> dict:\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return char_count\ndef are_anagrams(str1: str, str2: str) -> bool:\n    # Count the characters in each string\n    char_count_str1 = count_chars(str1)\n    char_count_str2 = count_chars(str2)\n    \n    # Check if both strings have the same number of characters and the character counts are equal in both strings.\n    return len(char_count_str1) == len(char_count_str2) and char_count_str1 == char_count_str2",
    "tests": [
        "assert are_anagrams('listen', 'silent') == True",
        "assert are_anagrams('hello', 'world') == False",
        "assert are_anagrams('act', 'cat') == True",
        "assert are_anagrams('love', 'evil') == False"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}