{
    "title": "Anagram Detection (Hard)",
    "description": "Write a function `find_anagrams` that finds all anagrams of a given string within a list of strings. Write a function `find_anagrams` that finds all anagrams of a given string within a list of strings.\n\n#### Function Signature\n```python\ndef find_anagrams(word: str, words: List[str]) -> List[str]:\n``` \n\n#### Input\n- `word` (str): A string to search for anagrams within the provided list.\n- `words` (List[str]): A list of strings that may contain multiple anagrams of the given `word`. The list contains only lowercase letters and spaces.\n\n#### Output\n- Returns a list of strings that are anagrams of the given `word` within the provided list. If no anagram is found, return an empty list.\n",
    "code": "from collections import Counter\ndef find_anagrams(word: str, words: List[str]) -> List[str]:\n    # Create a frequency map of characters in the given word\n    freq_map = Counter(word)\n    \n    # Initialize an empty list to store anagrams\n    anagrams = []\n    \n    # Iterate over each word in the list and check if it has the same frequency map as the given word\n    for w in words:\n        if freq_map == Counter(w):\n            anagrams.append(w)\n    \n    return anagrams",
    "tests": [
        "assert find_anagrams('listen', ['enlistment', 'silent', 'enlists']) == ['silent']",
        "assert find_anagrams('actinium', ['actinide', 'nanacitium']) == ['nanacitium']",
        "assert find_anagrams('hello', ['hello', 'olleh', 'world']) == ['olleh']"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}