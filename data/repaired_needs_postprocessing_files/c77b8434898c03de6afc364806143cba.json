{
    "title": "Anagram Finder (Hard)",
    "description": "Given two strings, write a function `are_anagrams` that checks if they are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of another, usually with all the original letters in the same alphabet and only one unique representation of each letter.\n\n#### Function Signature\n```python\ndef are_anagrams(str1: str, str2: str) -> bool:\n```\n\n#### Input\n- `str1`, `str2` (str): Two strings that may contain letters, numbers, spaces, and punctuation. The length of the strings will always be equal.\n\n#### Output\n- Returns `True` if the input strings are anagrams, `False` otherwise.\n",
    "code": "def are_anagrams(str1: str, str2: str) -> bool:\n    # Ensure the lengths of the strings are equal\n    if len(str1) != len(str2):\n        return False\n    \n    # Remove non-alphabetic characters and convert to lowercase\n    str1 = ''.join([char for char in str1 if char.isalpha()]).lower()\n    str2 = ''.join([char for char in str2 if char.isalpha()]).lower()\n    \n    # Sort the strings and compare them\n    return sorted(str1) == sorted(str2)",
    "tests": [
        "assert are_anagrams('listen', 'silent') == True",
        "assert are_anagrams('hello', 'world') == False",
        "assert are_anagrams('A man, a plan, a canal, Panama', 'Amana-canal-plan-amanaplanacanalPanama') == True",
        "assert are_anagrams('racecar', 'carcarer') == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}