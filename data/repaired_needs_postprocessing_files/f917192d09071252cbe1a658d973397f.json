{
    "title": "Palindromic Subsequence Count (Hard)",
    "description": "Given a string, find the number of non-empty palindromic subsequences it contains. A palindromic subsequence is defined as a subsequence that reads the same forwards and backwards.\n\n#### Function Signature\n```python\ndef count_palindromes(s: str) -> int:\n``` \n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns an integer representing the number of non-empty palindromic subsequences found in the input string.",
    "code": "def count_palindromes(s: str) -> int:\n    dp = [[0] * len(s) for _ in range(len(s))]\n    for i in range(len(s)):\n        dp[i][i] = 1\n    for l in range(2, len(s)+1):\n        for i in range(len(s) - l + 1):\n            j = i + l - 1\n            if s[i] == s[j] and dp[i+1][j-1]:\n                dp[i][j] = dp[i+1][j-1] + 1\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1]\n    return sum(dp[-1]) + len([i for i, j in enumerate(dp) if all(val == dp[0][0] for val in j[1:])])",
    "tests": [
        "assert count_palindromes(\"aabbbc\") == 7",
        "assert count_palindromes(\"abcdefghijklmnopqrstuvwxyz\") == 32",
        "assert count_palindromes(\"aaabbbcccdddeeffggg\") == 128"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}