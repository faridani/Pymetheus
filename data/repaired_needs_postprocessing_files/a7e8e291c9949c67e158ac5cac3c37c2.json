{
    "title": "Number of Islands",
    "description": "Given an M by N matrix where each element can be either 0 (water) or 1 (land), write a function to count the number of islands. An island is defined as a group of contiguous cells with a value of 1. You may assume that the input is valid.\n\n#### Function Signature\n```ndef num_islands(grid: list[list[int]]) -> int:\n```\n\n#### Input\n- `grid` (list[list[int]]): A 2D grid where each element can be either 0 or 1, representing water and land respectively.\n\n#### Output\n- Returns the number of islands in the given grid.\n",
    "code": "def num_islands(grid: list[list[int]]) -> int:\n    if not grid:\n        return 0\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                self.dfs(grid, i, j)\n                count += 1\n    return count\n\n    def dfs(self, grid: list[list[int]], i: int, j: int):\n        if i<0 or j<0 or i>=len(grid) or j>=len(grid[0]) or grid[i][j] != 1:\n            return \n        grid[i][j] = -1\n        self.dfs(grid, i+1, j)\n        self.dfs(grid, i-1, j)\n        self.dfs(grid, i, j+1)\n        self.dfs(grid, i, j-1)\n",
    "tests": [
        "assert num_islands([[0,0,1,0,0],[1,0,1,1,0],[0,1,0,0,0],[0,0,0,1,1]]) == 3",
        "assert num_islands([]) == 0",
        "assert num_islands([[]]) == 0",
        "assert num_islands([[1,1,1,1,1],[1,0,0,0,1],[1,1,0,0,1],[1,1,1,1,1]]) == 1"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}