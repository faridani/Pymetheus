{
    "title": "Finding the Longest Increasing Subsequence",
    "description": "Write a function `longest_increasing_subsequence` that takes as input a list of integers and returns the length of the longest increasing subsequence. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements.\n\n#### Function Signature\n```python\ndef longest_increasing_subsequence(sequence: list[int]) -> int:\n```",
    "code": "def longest_increasing_subsequence(sequence: list[int]) -> int:\n    if not sequence:\n        return 0\n    dp = [1] * len(sequence)\n    for i in range(1, len(sequence)):\n        for j in range(i):\n            if sequence[i] > sequence[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
    "tests": [
        "assert longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 6",
        "assert longest_increasing_subsequence([]) == 0",
        "assert longest_increasing_subsequence([1]) == 1",
        "assert longest_increasing_subsequence([1, 3, 6, 8, 9]) == 5"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}