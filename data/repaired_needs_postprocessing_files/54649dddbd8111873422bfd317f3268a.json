{
    "title": "Hard: Matrix Path Sum",
    "description": "You are given an m x n integer matrix `matrix` and a target integer `target`. You need to determine if there exists a path from the top-left corner (0, 0) to the bottom-right corner (m - 1, n - 1) of the matrix such that the sum of all the elements along the path equals `target`. You can only move either down or right at any point in time.#### Function Signature```pythonndef matrix_path_sum(matrix: list[list[int]], target: int) -> bool:```#### Input- `matrix` (list[list[int]]): A 2D integer matrix representing the grid.- `target` (int): The target sum to be achieved.#### Output- Returns `True` if there exists a path from the top-left corner to the bottom-right corner with the given sum, `False` otherwise.#### Tests[assert matrix_path_sum([[1,2,3],[4,5,6],[7,8,9]], 12) == True, assert matrix_path_sum([[1,2,3],[4,5,6],[7,8,9]], 15) == False, assert matrix_path_sum([[1,2],[3,4]], 7) == True, assert matrix_path_sum([[1,2],[3,4]], 5) == False]",
    "code": "def matrix_path_sum(matrix: list[list[int]], target: int) -> bool:\n    m = len(matrix)\n    n = len(matrix[0])\n    dp = [[False for _ in range(n)] for _ in range(m)]\n    dp[0][0] = matrix[0][0] == target\n    for i in range(m):\n        for j in range(n):\n            if i > 0 and dp[i - 1][j]:\n                dp[i][j] = dp[i][j] or (matrix[i][j] + matrix[i-1][j]) == target \n            if j > 0 and dp[i][j - 1]:\n                dp[i][j] = dp[i][j] or (matrix[i][j] + matrix[i][j-1]) == target\n    return dp[m - 1][n - 1]",
    "tests": [
        "assert matrix_path_sum([[1,2,3],[4,5,6],[7,8,9]], 12) == True",
        "assert matrix_path_sum([[1,2,3],[4,5,6],[7,8,9]], 15) == False",
        "assert matrix_path_sum([[1,2],[3,4]], 7) == True",
        "assert matrix_path_sum([[1,2],[3,4]], 5) == False"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}