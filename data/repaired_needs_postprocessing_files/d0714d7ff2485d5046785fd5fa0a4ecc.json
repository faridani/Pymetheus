{
    "title": "Fibonacci Checker (Medium)",
    "description": "Given a sequence of numbers, determine if the sequence represents a portion of the Fibonacci series. The Fibonacci series is a sequence where each number after the first two is the sum of the two preceding ones, starting from 0 and 1.\n\n#### Function Signature\n```python\ndef is_fibonacci(sequence: List[int]) -> bool:\n```\n\n#### Input\n- `sequence` (List[int]): A list of integers that may or may not represent a portion of the Fibonnaccis series.\n\n#### Output\n- Returns `True` if the input sequence is part of the Fibonnaccis series, otherwise returns `False`.",
    "code": "from typing import List\ndef is_fibonacci(sequence: List[int]) -> bool:\n    def generate_fibonacci(limit):\n        a, b = 0, 1\n        fibonacci_series = [a]\n        while len(fibonacci_series) < limit + 2:\n            a, b = b, a + b\n            fibonacci_series.append(b)\n        return fibonacci_series[:-1]  # Exclude the last number as it may exceed sequence length.\n    \n    if len(sequence) < 3:\n        return False\n    \n    for i in range(2, len(sequence)):\n        current = sequence[i]\n        prev_two = [sequence[j] for j in range(i-1)]\n        while True:\n            next_fibonacci = sum(prev_two)\n            if next_fibonacci == current or next_fibonacci not in sequence:\n                break\n            prev_two.pop(0)\n            prev_two.append(next_fibonacci)\n    \n    if current != sum(prev_two):  # Check if the number is a valid Fibonacci number.\n        return False\n    \n    return True\n",
    "tests": [
        "assert is_fibonacci([0, 1, 1, 2, 3]) == True",
        "assert is_wallet(sequence=[5, 8, 13, 21]) == True",
        "assert is_fibonacci([1, 2, 4, 7]) == False",
        "assert is_fibonacci([0, 1, 1, 2, 4]) == False"
    ],
    "model": "phi3:14b-repaired by Llama 3"
}