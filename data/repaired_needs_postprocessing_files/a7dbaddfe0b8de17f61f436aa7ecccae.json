{
    "title": "Hard: Maximize Sum of Divisors",
    "description": "A positive integer n has a unique factorization into primes p1, p2, ..., pk. The sum of the divisors of n is given by the formula (p1^k1 + 1) * (p2^k2 + 1) * ... * (pk^kk + 1), where k1, k2, ..., kk are the respective exponents of p1, p2, ..., pk. Write a function `maximize_sum` that returns the positive integer n with the maximum sum of divisors for given numbers of prime factors and their exponents.\n#### Function Signature\n```python\ndef maximize_sum(k: int, *args) -> int:\n```n#### Input\n- `k`: The number of prime factors in the unique factorization of n.\n- `*args`: A list of integers representing the exponents of the prime factors (p1^k1, p2^k2, ..., pk^kk).\n#### Output\n- Returns the positive integer n with the maximum sum of divisors for given numbers of prime factors and their exponents.\n",
    "code": "import math\ndef maximize_sum(k: int, *args) -> int:\n    def calculate_divisor_sum(p: int, k: int) -> int:\n        return (p ** k + 1) if k > 0 else 2\n    max_sum = 0\n    best_n = 1\n    for p in range(2, 10):\n        product = 1\n        exponent_sum = 0\n        for i in range(k):\n            if args[i] < 0:\n                break\n            product *= calculate_divisor_sum(p, args[i])\n            exponent_sum += args[i]\n        if product > max_sum and exponent_sum >= k:\n            max_sum = product\n            best_n = p ** (exponent_sum // k)\n    return best_n",
    "tests": [
        "assert maximize_sum(2, 1, 0) == 4",
        "assert maximize_sum(3, 2, 1, 0) == 12",
        "assert maximize_sum(1, 1) == 1"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}