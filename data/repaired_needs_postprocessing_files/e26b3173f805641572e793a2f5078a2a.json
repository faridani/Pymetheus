{
    "title": "'Palindromic Substrings Count' - Hard",
    "description": "Write a function `count_palindromes` that finds the number of non-overlapping palindromic substrings (substrings that read the same forwards and backwards) in a given string. A substring can be of any length.\n\n#### Function Signature\n```python\ndef count_palindromes(s: str) -> int:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns the number of non-overlapping palindromic substrings in the input string.\n",
    "code": "def count_palindromes(s: str) -> int:\n    # Initialize count variable\n    count = 0\n    # Create a helper function for checking if a given substring is a palindrome\n    def is_palindrome(start, end):\n        while start < end:\n            if s[start] != s[end]:\n                return False\n            start += 1\n            end -= 1\n        return True\n    # Iterate through all possible substrings in the input string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if is_palindrome(i, j):\n                count += 1\n    # Return the count of palindromic substrings\n    return count",
    "tests": [
        "assert count_palindromes('racecar') == 5",
        "assert count_palindromes('babad') == 3",
        "assert count_palindromes('acbcba') == 4",
        "assert count_palindromes('amanaplanacanalpanama') == 11"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}