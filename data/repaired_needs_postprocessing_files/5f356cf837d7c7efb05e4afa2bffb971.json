{
    "title": "Anagram Detection (Hard)",
    "description": "Write a function `find_anagrams` that finds all anagrams of a given string. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n#### Function Signature\n```python\ndef find_anagrams(target: str) -> set[str]:\n```\n\n#### Input\n- `target` (str): A string of lowercase alphabets.\n\n#### Output\n- Returns a set containing all the anagrams of the input string as strings.",
    "code": "def find_anagrams(target: str) -> set[str]:\n    # Create a frequency table for the given string\n    freq = {}\n    for char in target:\n        if char not in freq:\n            freq[char] = 0\n        freq[char] += 1\n    # Initialize an empty set to store the anagrams\n    anagrams = set()\n    \n    # Iterate through all possible frequency tables that can form an anagram of `target`\n    for size in range(len(target), 0, -1):\n        remaining_freq = {}\n        total_count = 0\n        \n        # For each frequency table, count the number of characters of each kind and check if they match the current anagram's frequency table\n        for i in range(size, len(target), size):\n            char = target[i]\n            if char not in remaining_freq:\n                remaining_freq[char] = 0\n            remaining_freq[char] += 1\n            total_count += 1\n            \n        # If the current frequency table matches the required frequency table, generate anagram and add it to the set of anagrams if it's not already present\n        if remaining_freq == freq and total_count == len(target):\n            anagram = ''.join(sorted(list(remaining_freq.keys())))\n            if anagram not in anagrams:\n                anagrams.add(anagram)\n    return anagrams",
    "tests": [
        "assert find_anagrams('listen') == {'enlist', 'silent'}",
        "assert find_anagrams('python') == {'typhon', 'pthyon', 'thopy', 'htopy'}"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}