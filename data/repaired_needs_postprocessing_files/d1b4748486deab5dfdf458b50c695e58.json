{
    "title": "Anagram Detector (Hard)",
    "description": "Write a function `are_anagrams(s1: str, s2: str) -> bool:` that checks if two given strings are anagrams of each other.\n\n#### Function Signature\n```python\ndef are_anagrams(s1: str, s2: str) -> bool:\n```\n\n#### Input\n- `s1`, `s2` (str): Two strings that may contain letters (no numbers or punctuation). The length of the strings will always be equal.\n\n#### Output\n- Returns `True` if the two input strings are anagrams, `False` otherwise.\n",
    "code": "def are_anagrams(s1: str, s2: str) -> bool:\n    # Check that the lengths of the strings are equal\n    if len(s1) != len(s2):\n        return False\n    \n    # Count the frequency of each letter in both strings and compare\n    letter_counts = {}\n    for char in s1:\n        if char not in letter_counts:\n            letter_counts[char] = 1\n        else:\n            letter_counts[char] += 1\n    for char in s2:\n        if char not in letter_counts:\n            return False\n        letter_counts[char] -= 1\n    \n    # If all letters are accounted for and no counts are greater than zero, the strings are anagrams\n    return all(value == 0 for value in letter_counts.values())",
    "tests": [
        "assert are_anagrams(\"listen\", \"silent\") == True",
        "assert are_anagrams(\"racecar\", \"carrace\") == True",
        "assert are_anagrams(\"hello\", \"world\") == False"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}