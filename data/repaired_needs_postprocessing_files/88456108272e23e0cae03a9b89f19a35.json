{
    "title": "Maximum Sum of Subarray",
    "description": "A subarray is a contiguous part of an array. The maximum sum of a subarray is the largest sum that can be achieved by adding up all elements within some subarray.\n\n#### Function Signature\n```python\ndef max_sum_subarray(arr: list[int), k: int) -> int:\n```\n\n#### Input\n- `arr` (list[int]): A list of integers representing an array. The length of the array is at least 1 and at most 1000.\n- `k` (int): An integer that represents a window size for the subarray. The value of `k` will be in the range [2, 500].\n\n#### Output\n- Returns the maximum sum of all possible subarrays of length `k`. If there are multiple subarrays with the same maximum sum, returns any one of them.\n",
    "code": "from typing import List\nimport heapq\n\ndef max_sum_subarray(arr: List[int], k: int) -> int:\n    # Initialize the window as a min-heap\n    window = [arr[i] for i in range(k)]\n    heapq.heapify(window)\n    max_sum = sum(heapq.nsmallest(k, window))\n    current_sum = sum(window)\n    for i in range(k, len(arr)):\n        # Remove the leftmost element and add the next element\n        current_sum -= arr[i - k]\n        heapq.heappush(window, arr[i])\n        # Update the maximum sum if necessary\n        max_sum = max(max_sum, current_sum)\n    return max_sum",
    "tests": [
        "assert max_sum_subarray([-2,-3,4,-1,-2,1,5,-3], 2) == 7",
        "assert max_sum_subarray([1, -2, 3, 10, -4, 7, 2, -5], 3) == 15",
        "assert max_sum_subarray([-1, 2, 9, 0, 5, 4, 6], 3) == 13"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}