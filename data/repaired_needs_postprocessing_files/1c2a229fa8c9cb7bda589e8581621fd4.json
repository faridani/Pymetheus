{
    "title": "Longest Increasing Subsequence (Hard)",
    "description": "Given a list of integers, find the length of the longest increasing subsequence. A subsequence is defined as a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. For example, given [10, 9, 2, 5, 3, 7, 101, 18], the longest increasing subsequence is [2, 3, 7, 101], which has length 4.",
    "code": "def longest_increasing_subsequence(nums: list[int]) -> int:\n    if not nums:\n        return 0\n    dp = [1] * len(nums)\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
    "tests": [
        "assert longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4",
        "assert longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4",
        "assert longest_increasing_subsequence([7, 7, 7, 7, 7, 7, 7]) == 1"
    ],
    "model": "codegeex4:9b-repaired by Llama 3"
}