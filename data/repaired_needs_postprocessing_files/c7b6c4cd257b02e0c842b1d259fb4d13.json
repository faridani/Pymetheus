{
    "title": "Hard: Circular Prime Finder",
    "description": "A circular prime is a prime number that remains prime when its digits are rotated cyclically. For example, 197 is a circular prime because 197, 971, and 719 are all prime numbers.\n#### Function Signature\n```python\ndef find_circular_primes(n: int) -> list:\n```\n#### Input\n- `n` (int): The upper limit for finding circular primes.\n#### Output\n- Returns a sorted list of all circular prime numbers less than or equal to `n`. ",
    "code": "def find_circular_primes(n: int) -> list:\n    def is_prime(num):\n        if num <= 1: return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0: return False\n        return True\n    circular_primes = []\n    for i in range(2, n+1):\n        prime_str = str(i)\n        is_circular = True\n        for _ in range(len(prime_str)):\n            rotated_prime = int(prime_str[1:] + prime_str[:1])\n            if not is_prime(rotated_prime):\n                is_circular = False\n                break\n            prime_str = str(rotated_prime)\n        if is_circular:\n            circular_primes.append(i)\n    return sorted(circular_primes)",
    "tests": [
        "assert find_circular_primes(100) == [2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79]",
        "assert find_circular_primes(1000) == [2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, 97, 113, 131, 197, 199, 337, 1021]"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}