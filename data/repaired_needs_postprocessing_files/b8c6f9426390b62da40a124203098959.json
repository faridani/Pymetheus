{
    "title": "Minimum Window Substring",
    "description": "Given two strings `s1` and `s2`, find the minimum window substring of `s1` that contains all characters of `s2`. If there are multiple such substrings, return the first one found.\n\n#### Function Signature\n```python\ndef min_window_substring(s1: str, s2: str) -> str:\n```\n\n#### Input\n- `s1` (str): The main string from which we need to find the minimum window substring.\n- `s2` (str): The target string that should be contained in the minimum window substring of `s1`.\n\n#### Output\n- Returns the minimum window substring of `s1` that contains all characters of `s2`. If no such substring exists, returns an empty string.",
    "code": "import collections\ndef min_window_substring(s1: str, s2: str) -> str:\n    if not s2:\n        return \n    while right < len(s1):\n        char = s1[right]\n        window_counts[char] = window_counts.get(char, 0) + 1\n\n        if set(window_counts.keys()) == set(s2):\n            formed_chars = required_chars\n        else:\n            formed_chars = sum(count >= freq for count, freq in zip(window_counts.values(), [s2.count(c) for c in s2]))\n\n        while left <= right and formed_chars == required_chars:\n            char = s1[left]\n            if right - left + 1 < min_len:\n                min_len = right - left + 1\n                min_window = s1[left:right + 1]\n\n            window_counts[char] -= 1\n            if window_counts[char] == 0:\n                formed_chars -= 1\n\n            left += 1\n\n        right += 1\n\n    return min_window",
    "tests": [
        "assert min_window_substring('ADOBECODEBANC', 'ABC') == 'BANC'",
        "assert min_window_substring('hello', 'o') == 'lo'",
        "assert min_window_substring('', 'x') == ''"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}