{
    "title": "Maximum Sum Subarray",
    "description": "Given an array of integers, find the contiguous subarray within the array that has the maximum sum. The input array may contain negative numbers, positive numbers, and/or zeroes. The subarray may not contain negative numbers.",
    "code": "def max_sum_subarray(arr: list[int]) -> int:\n    n = len(arr)\n    if n <= 1:\n        return arr[0] if arr else 0\n    mid = n // 2\n    left = max_sum_subarray(arr[:mid])\n    right = max_sum_subarray(arr[mid:])\n    return max(left, right) + arr[mid]",
    "tests": [
        "assert max_sum_subarray([1, 2, 3, 4, 5]) == 15",
        "assert max_sum_subarray([-1, 0, 1, 2, 3]) == 6",
        "assert max_sum_subarray([4, 5, 6, 7, 8]) == 28",
        "assert max_sum_subarray([9, 1, 2, 3, 4]) == 16"
    ],
    "model": "codeup:latest-repaired by Llama 3"
}