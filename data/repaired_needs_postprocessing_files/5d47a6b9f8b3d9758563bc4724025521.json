{
    "title": "Maximum Area of Island",
    "description": "#### Problem\nYou are given a binary grid, where each cell contains either a 0 or a 1. Each 1 in the grid represents an island, and each 0 represents water. An island is connected if it has at least one contiguous cell to another island.\nWrite a function `max_area_of_island` that returns the maximum area of a connected island in the given binary grid.\n\n#### Function Signature\n```python\ndef max_area_of_island(grid: list[list[int]]) -> int:\n``` \n\n#### Input\n- `grid` (list[list[int]]): A 2D list representing the binary grid, where each cell contains either a 0 or a 1.\n\n#### Output\n- Returns the maximum area of a connected island in the given binary grid.\n",
    "code": "from typing import List\ndef max_area_of_island(grid: List[List[int]]) -> int:\n    if not grid:\n        return 0\n    \n    max_area = 0\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    \n    def dfs(i: int, j: int) -> int:\n        area = 1\n        grid[i][j] = 0\n        \n        for direction in directions:\n            new_i, new_j = i + direction[0], j + direction[1]\n            \n            if (0 <= new_i < len(grid) and 0 <= new_j < len(grid[0]) and grid[new_i][new_j]):\n                area += dfs(new_i, new_j)\n        \n        return area\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j]:\n                max_area = max(max_area, dfs(i, j))\n    \n    return max_area",
    "tests": [
        "assert max_area_of_island([[0,1],[1,1]]) == 4",
        "assert max_area_of_island([[0,0,0],[1,1,0],[0,0,0]]) == 2",
        "assert max_area_of_island([]) == 0"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}