{
    "title": "Anagram Finder (Easy)",
    "description": "An anagram is a word or phrase that is formed by rearranging the letters of another word or phrase, typically using all the original letters exactly once. Write a function `find_anagrams` that finds all anagrams of a given string. Write a function `find_anagrams` that finds all anagrams of a given string. - A string containing only lowercase alphabets. Returns a list of strings that are anagrams of the input string, sorted in ascending order.",
    "code": "def find_anagrams(s: str) -> List[str]:\n    # Create a dictionary to store character counts for each letter\n    char_count = {}\n    for char in s:\n        if char not in char_count:\n            char_count[char] = 0\n        char_count[char] += 1\n    \n    # List to store anagrams\n    anagrams = []\n    \n    # Iterate through all possible permutations of the given length\n    for perm in itertools.permutations(s):\n        # Check if this permutation has the same character counts as the input string\n        if dict(zip(perm, [char_count[char] for char in perm])) == char_count:\n            anagram = ''.join(perm)\n            # Only add unique anagrams to the list\n            if anagram not in anagrams:\n                anagrams.append(anagram)\n    \n    return sorted(anagrams)",
    "tests": [
        "assert find_anagrams('listen') == ['silent', 'enlist']",
        "assert find_anagrams('across') == ['scarworm']",
        "assert find_anagrams('hello') == []"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}