{
    "title": "Anagram Detector (Hard)",
    "description": "An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a function `is_anagram` that checks if two given strings are anagrams of each other.\n\n#### Function Signature\n```python\ndef is_anagram(s1: str, s2: str) -> bool:\n```\n\n#### Input\n- `s1` (str): A string containing only letters (no spaces or punctuation).\n- `s2` (str): Another string containing only letters (no spaces or punctuation).\n\n#### Output\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.\n",
    "code": "def is_anagram(s1: str, s2: str) -> bool:\n    # Ensure both strings have the same length\n    if len(s1) != len(s2):\n        return False\n    \n    # Create a dictionary to count the frequency of each letter in s1\n    count_dict = {letter: 0 for letter in string.ascii_lowercase}\n    for char in s1:\n        count_dict[char] += 1\n    \n    # Decrease the count of each letter in s2 that matches a letter in s1 and check if any counts become negative.\n    for char in s2:\n        if char in count_dict:\n            count_dict[char] -= 1\n            if count_dict[char] < 0:\n                return False\n    \n    # If no negative counts were found, the strings are anagrams.\n    return True",
    "tests": [
        "assert is_anagram('listen', 'silent') == True",
        "assert is_anagram('hello', 'world') == False",
        "assert is_anagram('eat', 'tea') == True",
        "assert is_anagram('abcd', 'dcba') == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}