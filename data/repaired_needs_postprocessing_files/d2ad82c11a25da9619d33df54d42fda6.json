{
    "title": "Anagram Detector (Hard)",
    "description": "Write a function `anagram_checker` that checks if two given strings are anagrams of each other.\n\n#### Function Signature\n```python\ndef anagram_checker(str1: str, str2: str) -> bool:\n```\n\n#### Input\n- `str1` (str): A string that may contain letters (only lowercase), numbers and spaces.\n- `str2` (str): Another string that may contain letters (only lowercase), numbers and spaces.\n\n#### Output\n- Returns `True` if the two strings are anagrams of each other, `False` otherwise.",
    "code": "def anagram_checker(str1: str, str2: str) -> bool:\n    # Remove spaces from both strings\n    str1 = str1.replace(' ', '').lower()\n    str2 = str2.replace(' ', '').lower()\n    \n    # If the lengths of the strings are not equal, they cannot be anagrams\n    if len(str1) != len(str2):\n        return False\n    \n    # Create dictionaries to count the frequencies of each character in both strings\n    char_dict1 = {}\n    for char in str1:\n        if char not in char_dict1:\n            char_dict1[char] = 0\n        char_dict1[char] += 1\n    \n    char_dict2 = {}\n    for char in str2:\n        if char not in char_dict2:\n            char_dict2[char] = 0\n        char_dict2[char] += 1\n    \n    # Check if the dictionaries are equal (i.e., the frequencies of each character are the same)\n    for key, value in char_dict1.items():\n        if key not in char_dict2 or char_dict2[key] != value:\n            return False\n    \n    # If no mismatches were found, the strings are anagrams of each other\n    return True",
    "tests": [
        "assert anagram_checker('listen', 'silent') == True",
        "assert anagram_checker('actinium', 'nicotine') == True",
        "assert anagram_checker('hello', 'world') == False"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}