{
    "title": "Anagram Finder (Hard)",
    "description": "Given two strings, write a function to check if they are anagrams of each other.\n\n#### Function Signature\n```python\ndef are_anagrams(s1: str, s2: str) -> bool:\n```\n\n#### Input\n- `s1`, `s2` (str): Two strings containing only lowercase letters and spaces.\n\n#### Output\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.\n",
    "code": "def sort_char_count(chars: dict) -> str:\n    # Sort by key (character) in descending order of value (count)\n    return ''.join(sorted(chars, key=lambda x: chars[x], reverse=True))\n\ndef are_anagrams(s1: str, s2: str) -> bool:\n    # Remove spaces and convert to lowercase\n    s1 = ''.join(filter(str.isalnum, s1)).lower()\n    s2 = ''.join(filter(str.isalnum, s2)).lower()\n    # Count characters for each string\n    char_counts1 = {}\n    char_counts2 = {}\n    for char in s1:\n        if char not in char_counts1:\n            char_counts1[char] = 0\n        char_counts1[char] += 1\n    for char in s2:\n        if char not in char_counts2:\n            char_counts2[char] = 0\n        char_counts2[char] += 1\n    # Check if the character counts are equal\n    return sort_char_count(char_counts1) == sort_char_count(char_counts2)",
    "tests": [
        "assert are_anagrams(\"listen\", \"silent\") == True",
        "assert are_anagrams(\"hello\", \"olleh\") == True",
        "assert are_anagrams(\"world\", \"droldw\") == False"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}