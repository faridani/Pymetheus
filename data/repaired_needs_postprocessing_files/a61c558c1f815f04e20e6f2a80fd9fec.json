{
    "title": "Medium - Maximum Product Subarray",
    "description": "Given an integer array `nums`, find the contiguous subarray within `nums` (containing at least one number) which has the largest product and return its product.\n\n#### Function Signature\n```python\ndef maxProduct(nums: list[int]) -> int:\n```\n\n#### Input\n- `nums` (list[int]): A list of integers.\n\n#### Output\n- Returns the maximum product of a contiguous subarray within `nums`. ",
    "code": "def maxProduct(nums: list[int]) -> int:\n    if not nums:\n        return 0\n    max_so_far = nums[0]\n    min_so_far = nums[0]\n    result = nums[0]\n    for i in range(1, len(nums)):\n        curr = nums[i]\n        temp_max = max(curr, curr * max_so_far, curr * min_so_far)\n        min_so_far = min(curr, curr * max_so_far, curr * min_so_far)\n        max_so_far = temp_max\n        result = max(result, max_so_far)\n    return result",
    "tests": [
        "'assert maxProduct([2,3,-2,4]) == 6'",
        "'assert maxProduct([-2,0,-1]) == 0'",
        "'assert maxProduct([2, -5, 3, 4, -2]) == 24'"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}