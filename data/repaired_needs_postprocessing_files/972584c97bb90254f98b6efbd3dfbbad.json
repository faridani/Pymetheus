{
    "title": "Elegant Permutation Checker",
    "description": "Permutations are a fundamental concept in combinatorics. Write a function `is_elegant` that checks if a given permutation of integers from 1 to n (n >= 2) is elegant, meaning it has the same number of cycles as there are distinct elements in the permutation.\n\n#### Function Signature\n```python\ndef is_elegant(p: list)\n``` \n\n#### Input\n- `p` (list): A permutation of integers from 1 to n, where n >= 2.\n\n#### Output\n- Returns `True` if the input permutation is elegant, `False` otherwise.",
    "code": "import math\ndef is_elegant(p: list) -> bool:\n    # Calculate the number of cycles and distinct elements in the permutation\n    n = len(p)\n    cycles = 0\n    seen = set()\n    for i in p:\n        if i not in seen:\n            while True:\n                seen.add(i)\n                i = p[i-1]\n            cycles += 1\n    return math.gcd(cycles, n) == 1,\n",
    "tests": [
        "assert is_elegant([2, 3, 1]) == True",
        "assert is_elegant([4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == False",
        "assert is_elegant([5, 2, 4, 3, 1]) == True"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}