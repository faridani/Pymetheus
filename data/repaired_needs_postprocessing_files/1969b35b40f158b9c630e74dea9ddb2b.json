{
    "title": "Palindromic Substrings Counter",
    "description": "Write a function `count_palindromes` that takes a string as input and returns the number of non-overlapping palindromic substrings it contains. A palindrome is a sequence of characters that reads the same forward and backward.\n\n#### Function Signature\n```python\ndef count_palindromes(s: str) -> int:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns the number of unique non-overlapping palindromic substrings in the input string.",
    "code": "import re\ndef count_palindromes(s: str) -> int:\n    # Remove non-alphanumeric characters\n    s = ''.join(char for char in s if char in string.ascii_letters + string.digits)\n    # Find all palindromic substrings using regex\n    patterns = re.findall('(([a-zA-Z0-9])\\1)+', s, re.IGNORECASE | re.DOTALL)\n    # Count the unique palindromic substrings\n    return len(set(patterns))",
    "tests": [
        "assert count_palindromes('racecar') == 3",
        "assert count_palindromes('acacecaba') == 4",
        "assert count_palindromes('a') == 1",
        "assert count_palindromes('A man, a plan, a canal, Panama') == 5"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}