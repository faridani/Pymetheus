{
    "title": "Hard: Circular Prime Generator",
    "description": "A circular prime is a prime number that remains prime when its digits are rotated. For example, 197 is a circular prime because 197, 971, and 719 are all prime numbers.\nWrite a function `circular_primes(n)` that takes an integer `n` as input and returns a list of all circular primes less than or equal to `n`. \n\n#### Function Signature\n```python\ndef circular_primes(n: int) -> list:\n```\n\n#### Input\n- `n` (int): An integer representing the upper limit.\n\n#### Output\n- Returns a list of all circular primes less than or equal to `n`.",
    "code": "def is_prime(num):\n    if num <= 1: return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef circular_primes(n: int) -> list:\n    circular_primes = []\n    for num in range(2, n + 1):\n        if is_prime(num):\n            num_str = str(num)\n            is_circular = True\n            for i in range(len(num_str)):\n                rotated_num = int(num_str[i:] + num_str[:i])\n                if not is_prime(rotated_num):\n                    is_circular = False\n                    break\n            if is_circular:\n                circular_primes.append(num)\n    return circular_primes",
    "tests": [
        "assert sorted(circular_primes(100)) == [2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79]",
        "assert sorted(circular_primes(1000)) == [2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, 97, 113, 131, 197, 199, 337, 1009]"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}