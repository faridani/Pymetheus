{
    "title": "Sudoku Solver (Hard)",
    "description": "Write a function `sudoku_solver` that takes as input a partially filled Sudoku grid and returns the completed grid. The input grid is represented as a 9x9 list of strings, where each string represents a row in the grid. The possible values for each cell are 1-9.\n\n#### Function Signature\n```python\ndef sudoku_solver(grid: List[str]) -> List[str]:\n``` \n\n#### Input\n- `grid` (List[str]): A partially filled Sudoku grid, represented as a 9x9 list of strings.\n\n#### Output\n- Returns the completed Sudoku grid.",
    "code": "import re\nfrom typing import List\n\ndef sudoku_solver(grid: List[str]) -> List[str]:\n    def is_valid(grid: List[str], row: int, col: int, num: str) -> bool:\n        # Check if the number already exists in the row or column\n        for i in range(9):\n            if grid[row][i] == num:\n                return False\n            if grid[i][col] == num:\n                return False\n        \n        # Check if the number already exists in the 3x3 sub-grid\n        start_row = row - row % 3\n        start_col = col - col % 3\n        for i in range(3):\n            for j in range(3):\n                if grid[start_row + i][start_col + j] == num:\n                    return False\n        \n        return True\n    \n    def solve(grid: List[str]) -> bool:\n        for row in range(9):\n            for col in range(9):\n                if grid[row][col] == '.':\n                    for num in '123456789':\n                        if is_valid(grid, row, col, num):\n                            grid[row] = grid[row][:col] + num + grid[row][col+1:]\n                            if solve(grid):\n                                return True\n                            else:\n                                grid[row] = grid[row][:col] + '.' + grid[row][col+1:]\n                    return False\n        \n        return True\n    \n    if not solve(grid):\n        raise ValueError('No solution exists')\n    \n    return [''.join(row) for row in grid]\n",
    "tests": [
        "assert sudoku_solver(['.........', '.2....8.', '.4..3...', '..6.5.7', '...x...9', '.........', '.........', '.........', '.........']) == ['1..2..8.', '.3..4...', '.5..6..7', '..8..5..9', '.........', '.........', '.........', '.........']",
        "assert sudoku_solver(['.........', '...1....', '..2.34..', '5..5..5', '.........', '.........', '.........', '.........']) == ['1..2..3.', '.4..5..6', '7..8..9.', '5..5..5', '.........', '.........', '.........', '.........']"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}