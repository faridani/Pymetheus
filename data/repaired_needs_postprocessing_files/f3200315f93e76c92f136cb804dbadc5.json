{
    "title": "'Anagram Detection (Hard)'",
    "description": "Given two strings, write a function `anagram_checker` that determines whether the two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n#### Function Signature\n```python\ndef anagram_checker(string1: str, string2: str) -> bool:\n``` \n\n#### Input\n- `string1`, `string2` (str): Two strings that may contain letters (no numbers or punctuation). The length of the input strings can vary.\n\n#### Output\n- Returns `True` if the two input strings are anagrams, `False` otherwise.\n\n#### Constraints\n- Case is ignored when comparing the input strings. For example, `'Anagram'`, `'anagrAM'`, and `'ANAGRAM'` are considered the same string.",
    "code": "import collections\n\ndef anagram_checker(string1: str, string2: str) -> bool:\n    # Ensure both strings have the same length before proceeding with comparison\n    if len(string1) != len(string2):\n        return False\n    \n    # Remove case sensitivity and space characters from the input strings\n    string1 = ''.join(char.lower() for char in string1 if char.isalpha()).replace(' ', '')\n    string2 = ''.join(char.lower() for char in string2 if char.isalpha()).replace(' ', '')\n    \n    # Count the occurrence of each letter in both strings and compare them\n    counter1 = collections.Counter(string1)\n    counter2 = collections.Counter(string2)\n    return counter1 == counter2",
    "tests": [
        "assert anagram_checker('listen', 'silent') == True",
        "assert anagram_checker('love', 'evil') == False",
        "assert anagram_checker('act', 'cat') == True",
        "assert anagram_checker('python', 'thytonp') == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}