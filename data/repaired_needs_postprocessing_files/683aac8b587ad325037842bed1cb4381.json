{
    "title": "Hard: Trapping Rain Water",
    "description": "You are given a list of n integers representing the heights of n bars standing upright. For each bar i, there are two other bars j and k such that j<i<k. The goal is to maximize the amount of rainwater trapped between these three bars.\nWrite a function `trapping_rain_water` that takes a list of integers as input and returns the maximum amount of rainwater that can be trapped.\n\n#### Function Signature\n```python\ndef trapping_rain_water(heights: List[int]) -> int:\n```\n\n#### Input\n- `heights` (List[int]): A list of n integers representing the heights of n bars standing upright.\n\n#### Output\n- Returns an integer representing the maximum amount of rainwater that can be trapped between the given bars.",
    "code": "from typing import List\ndef trapping_rain_water(heights: List[int]) -> int:\n    n = len(heights)\n    max_left = [0] * n\n    max_right = [0] * n\n    water = 0\n    \n    # Initialize the maximum heights on the left and right\n    for i in range(n):\n        if i == 0:\n            max_left[i] = heights[i]\n        else:\n            max_left[i] = max(max_left[i-1], heights[i])\n        \n        if i == n - 1:\n            max_right[i] = heights[i]\n        else:\n            max_right[i] = max(max_right[i+1], heights[i])\n    \n    # Calculate the trapped water\n    for i in range(n):\n        h = min(max_left[i], max_right[i]) - heights[i]\n        if h > 0:\n            water += h\n    \n    return water",
    "tests": [
        "assert trapping_rain_water([4,2,0,3,2,5]) == 9",
        "assert trapping_rain_water([1,8,6,2,5,3,4,7,9]) == 49",
        "assert trapping_rain_water([]) == 0"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}