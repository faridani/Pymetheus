{
    "title": "'Mad Libs Word Scramble Solver (Medium)'",
    "description": "'Mad Libs' is a popular word game where players fill in the blanks of a story with words from a given list. Given an unscrambled word and a list of scrambled words, write a function `find_word` that finds the word from the list that unscrambles to match the given word.\n\n#### Function Signature\n```python\ndef find_word(word: str, words: List[str]) -> Optional[str]:\n```\n\n#### Input\n- `word` (str): The unscrambled word that you are trying to find in the list of scrambled words.\n- `words` (List[str]): A list of scrambled words from which you must find the given word.\n\n#### Output\n- Returns the first occurrence of the word from the list if it can be found, or returns `None` otherwise.\n\n**Hint:** Use the built-in `sorted()` function to sort both the given word and a scrambled word before comparing them.",
    "code": "def find_word(word: str, words: List[str]) -> Optional[str]:\n    # Sort the given word and each scrambled word alphabetically\n    sorted_word = sorted(list(word))\n    for scrambled in words:\n        # Sort the scrambled word alphabetically\n        sorted_scrambled = sorted(list(scrambled))\n        # If the sorted words are the same, return the original scrambled word\n        if sorted_word == sorted_scrambled:\n            return scrambled\n    # If no match is found, return None\n    return None",
    "tests": [
        "assert find_word('unscramble', ['mangle', 'scramble', 'rumba', 'unscramble']) == 'unscramble'",
        "assert find_word('anagram', ['nag a ram', 'rap snack', 'stare', 'anagram']) == 'nag a ram'",
        "assert find_word('example', ['exAMPle', 'zebra', 'apple', 'ant']) is None"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}