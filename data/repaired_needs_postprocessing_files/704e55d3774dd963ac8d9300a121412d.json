{
    "title": "Maximum Sum of Unordered Subarrays",
    "description": "Given an array `nums` of size `n`, find the maximum sum of all possible unordered subarrays. A subarray is a contiguous part of the array. For example, in the array `[1, 2, -1, 3, 4, -1]`, there are six subarrays: `[1], [2], [-1], [3], [4], [-1]`. Unordered means that we don't care about the order of these subarrays. We just want to find the maximum sum.\n\n#### Function Signature\n```python\ndef max_sum_subarrays(nums: list[int]) -> int:\n```\n\n#### Input\n- `nums` (list[int]): A list of integers.\n\n#### Output\n- Returns an integer that is the maximum sum of all possible unordered subarrays.\n\nNote: You can assume that the input array will always have at least one element. Also, you don't need to worry about negative indices when slicing the array.\n",
    "code": "def max_sum_subarrays(nums: list[int]) -> int:\n    n = len(nums)\n    if n == 0:\n        return 0\n    \n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(n):\n        current_sum = sum(nums[i:])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum",
    "tests": [
        "assert max_sum_subarrays([1, 2, -1, 3, 4, -1]) == 10",
        "assert max_sum_subarrays([-5, 0, 3, 5]) == 8",
        "assert max_sum_subarrays([]) == 0",
        "assert max_sum_subarrays([1]) == 1"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}