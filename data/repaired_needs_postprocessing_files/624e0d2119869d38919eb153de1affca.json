{
    "title": "Detecting Anagrams",
    "description": "An anagram is a word or phrase formed by rearranging the letters of another word or phrase, using all the original letters exactly once. Write a function `are_anagrams` that checks if two given strings are anagrams of each other. This function should return True if both input strings are anagrams, False otherwise.\\n#### Function Signature```python\nndef are_anagrams(s1: str, s2: str) -> bool:\n```\n## Input\n- `s1`, `s2` (str): Two strings consisting of lowercase English letters and spaces. The lengths of the two strings may differ.\n## Output\n- Returns `True` if both input strings are anagrams, `False` otherwise.",
    "code": "from collections import Counter\ndef are_anagrams(s1: str, s2: str) -> bool:\n    # Remove spaces and convert to lowercase for comparison\n    s1 = ''.join(s1.split()).lower()\n    s2 = ''.join(s2.split()).lower()\n    # Count characters in both strings\n    counter_s1 = Counter(s1)\n    counter_s2 = Counter(s2)\n    # Compare the character counts of both strings\n    return counter_s1 == counter_s2",
    "tests": [
        "assert are_anagrams('listen', 'silent') == True",
        "assert are_anagrams('binary', 'brainy') == True",
        "assert are_anagrams('apple', 'papel') == True",
        "assert are_anagrams('rat', 'car') == False",
        "assert are_anagrams('hello world', 'dlrow olleh') == True"
    ],
    "model": "qwen2:7b-repaired by Llama 3"
}