{
    "title": "Longest Common Subsequence (Hard)",
    "description": "Given two strings `s1` and `s2`, find the longest common subsequence. A subsequence of a string is a new string that is formed from the original string by deleting some (or no) characters without changing their order.\n\n#### Function Signature\n```python\ndef longest_common_subsequence(s1: str, s2: str) -> str:\n```\n\n#### Input\n- `s1`, `s2` (str): Two strings of length at least 1.\n\n#### Output\n- Returns the longest common subsequence between the given two strings as a string.",
    "code": "def longest_common_subsequence(s1: str, s2: str) -> str:\n    # Create matrices for both strings with size equal to their lengths + 1\n    dp = [[0] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n\n    # Iterate through both strings and fill the matrix using dynamic programming approach\n    for i, c1 in enumerate(s1):\n        for j, c2 in enumerate(s2):\n            if c1 == c2:\n                dp[i+1][j+1] = dp[i][j] + 1\n            else:\n                dp[i+1][j+1] = max(dp[i+1][j], dp[i][j+1])\n    \n    # Backtrack to find the longest common subsequence\n    lcs = []\n    i, j = len(s1), len(s2)\n    while i != 0 and j != 0:\n        if dp[i][j] == dp[i-1][j]:\n            i -= 1\n        elif dp[i][j] == dp[i][j-1]:\n            j -= 1\n        else:\n            lcs.insert(0, s1[i-1] if dp[i-1][j] < dp[i][j-1] else s2[j-1])\n            i -= 1\n            j -= 1\n    return ''.join(lcs)",
    "tests": [
        "assert longest_common_subsequence('ABCD', 'DCBA') == 'DCBA'",
        "assert longest_common_subsequence('AGGTAB', 'GXTXAYB') == 'GXTXAYB'",
        "assert longest_common_subsequence('mississippi', 'oisiiihipm') == 'mississippi'"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}