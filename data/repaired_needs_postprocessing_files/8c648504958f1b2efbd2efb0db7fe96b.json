{
    "title": "Hard: Prime Factorization",
    "description": "Prime factorization of a number is the decomposition of that number into prime numbers, where each number is repeated as many times as it appears in the factorization. For example, 12 = 2^2 * 3, so its prime factorization is [2, 2, 3]. Write a function `prime_factorize` that takes an integer `n` and returns its prime factorization.\n\n#### Function Signature\n```python\ndef prime_factorize(n: int) -> list:\n```\n\n#### Input\n- `n` (int): A positive integer.\n\n#### Output\n- Returns the prime factorization of the input number as a list of integers.\n",
    "code": "import math\ndef prime_factorize(n: int) -> list:\n    def is_prime(p: int) -> bool:\n        if p <= 1:\n            return False\n        for i in range(2, int(math.sqrt(p)) + 1):\n            if p % i == 0:\n                return False\n        return True\n    factorization = []\n    for p in range(2, n + 1):\n        if is_prime(p) and n % p == 0:\n            while n % p == 0:\n                n //= p\n            factorization.append(p)\n    return factorization",
    "tests": [
        "assert prime_factorize(12) == [2, 2, 3]",
        "assert prime_factorize(20) == [2, 2, 5]",
        "assert prime_factorize(15) == [3, 5]",
        "assert prime_factorize(25) == [5, 5]"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}