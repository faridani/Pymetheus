{
    "title": "'Spiral Matrix Traversal' (hard)",
    "description": "Write a function `spiral_traverse` that takes a 2D matrix as input and returns a list containing the elements of the matrix traversed in spiral order.\n\n#### Function Signature\n```python\ndef spiral_traverse(matrix: List[List[int]] or List[str]) -> List[int] or List[str]:\n``` \n\n#### Input\n- `matrix` (2D list): A rectangular matrix containing integers or strings.\n\n#### Output\n- Returns a list containing the elements of the matrix traversed in spiral order.",
    "code": "def spiral_traverse(matrix: List[List[int]] or List[str]):\n    # Check if the input matrix is empty\n    if not matrix:\n        return []\n    \n    # Initialize variables for start and end positions in each dimension\n    start_row, end_row = 0, len(matrix) - 1\n    start_col, end_col = 0, len(matrix[0]) - 1\n    traversed = []\n    \n    # While there are still elements to traverse\n    while start_row <= end_row and start_col <= end_col:\n        # Traverse the current row from left to right\n        for col in range(start_col, end_col + 1):\n            traversed.append(matrix[start_row][col])\n        \n        # Move down to the next row if possible\n        start_row += 1\n        \n        # If there are still elements to traverse in the current column and we haven't reached the end of the matrix, traverse the diagonal elements\n        for row in range(start_row, end_row + 1):\n            traversed.append(matrix[row][end_col])\n            end_col -= 1\n        \n        # Move right to the next column if possible\n        start_col += 1\n    \n    # If there are still elements to traverse in the lower-right triangle, repeat the process starting from the new end positions\n    if start_row < end_row:\n        start_row += 1\n        end_col -= 1\n        while start_col <= end_col:\n            traversed.append(matrix[end_row][start_col])\n            start_col += 1\n    \n    # If there are still elements to traverse in the lower-left triangle, repeat the process starting from the new end positions\n    if start_row < end_row:\n        start_row += 1\n        start_col += 1\n        while start_col <= end_col:\n            traversed.append(matrix[end_row - i][start_col - i])\n            i += 1\n    \n    return traversed",
    "tests": [
        "assert spiral_traverse([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 6, 9, 8, 7, 4, 5]",
        "assert spiral_traverse([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]) == ['a', 'e', 'f', 'd', 'i', 'g', 'h', 'b', 'c']",
        "assert spiral_traverse([[1, 2], [3, 4]]) == [1, 2, 4, 3]",
        "assert spiral_traverse([]) == []",
        "assert spiral_traverse([['a'], ['b']]) == ['a', 'b']"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}