{
    "title": "Roman Numeral Converter (Medium)",
    "description": "Write a function `to_roman` that converts an integer between 1 and 3999 to its equivalent Roman numeral.\n\n#### Function Signature\n```python\ndef to_roman(number: int) -> str:\n```\n\n#### Input\n- `number` (int): An integer within the range of 1 to 3999.\n\n#### Output\n- Returns the Roman numeral equivalent of the input number as a string.",
    "code": "def to_roman(number: int) -> str:\n    roman_numerals = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    result = ''\n    thousands = number // 1000\n    number %= 1000\n    hundreds = number // 100\n    number %= 100\n    tens = number // 10\n    ones = number % 10\n    if thousands > 0:\n        result += 'M' * thousands\n    if hundreds in (9, 4):\n        half = hundreds // 5\n        result += 'CM' * (hundreds % 5) + 'D' * half\n    elif hundreds > 0:\n        result += 'D' * hundreds\n    if tens in (9, 4):\n        result += 'XC' * (tens % 10) + 'L' * (tens // 10)\n    elif tens > 0:\n        result += 'L' * tens\n    if ones in (9, 4):\n        result += 'IX' * (ones % 5) + 'V' * (ones // 5)\n    elif ones > 0:\n        result += 'V' * ones",
    "tests": [
        "assert to_roman(1) == 'I'",
        "assert to_roman(3) == 'III'",
        "assert to_roman(4) == 'IV'",
        "assert to_roman(5) == 'V'",
        "assert to_roman(9) == 'IX'",
        "assert to_roman(10) == 'X'",
        "assert to_roman(20) == 'XX'",
        "assert to_roman(40) == 'XL'",
        "assert to_roman(50) == 'L'",
        "assert to_roman(67) == 'LXVII'",
        "assert to_roman(89) == 'LXXXIX'",
        "assert to_roman(1994) == 'MCMXCIV'"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}