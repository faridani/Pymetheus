{
    "title": "Medium - Reverse Linked List",
    "description": "Given the head of a singly linked list, reverse it and return the reversed list's head.\n\n#### Function Signature\n```python\ndef reverse_linked_list(head: ListNode) -> ListNode:\n``` \n\n#### Input\n- `head` (ListNode): The head of a singly linked list.\n\n#### Output\n- Returns the head of the reversed linked list.\n\n#### Constraints\n- The number of nodes in the list is the range [0, 5000]\n- -5000 <= Node.val <= 5000\n\n#### Hints\n- Think about how you would reverse a list in place using iterative methods.",
    "code": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverse_linked_list(head: ListNode) -> ListNode:\n    prev = None\n    curr = head\n    while curr:\n        next_node = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_node\n    return prev",
    "tests": [
        "head = ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(5)))))\nassert reverse_linked_list(head).val == 5"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}