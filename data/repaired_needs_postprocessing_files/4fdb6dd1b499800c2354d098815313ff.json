{
    "title": "Anagram Detector (Hard)",
    "description": "An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n#### Function Signature\n```python\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\n```\n\n#### Input\n- `words` (List[str]): A list of strings containing words that you want to check for anagrams.\n\n#### Output\n- Returns a dictionary where each key is a word and the value is a list of all the words in the input that are anagrams of the given key.\n\n#### Constraints\n- All words in the input will be lowercase strings containing only letters (no numbers or punctuation).",
    "code": "def find_anagrams(words: List[str]) -> Dict[str, List[str]]:\n    # Create a dictionary to store anagrams\n    anagrams = {}\n    # Sort each word and use it as a key in the dictionary\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        if sorted_word not in anagrams:\n            anagrams[sorted_word] = []\n        anagrams[sorted_word].append(word)\n    \n    # Return the dictionary of anagrams\n    return anagrams",
    "tests": [
        "assert find_anagrams([\"listen\", \"silent\", \"enlist\", \"softly\", \"outfit\"]).__eq__({\"enlist\": [\"enlist\"], \"silent\": [\"listen\", \"silent\"], \"softly\": [\"softly\"], \"listen\": [\"listen\", \"silent\"], \"outfit\": [\"outfit\"]})",
        "assert find_anagrams([\"cat\", \"act\", \"tac\"]).__eq__({\"act\": [\"cat\", \"act\", \"tac\"], \"tac\": [\"cat\", \"act\", \"tac\"], \"cat\": [\"cat\", \"act\", \"tac\"]})"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}