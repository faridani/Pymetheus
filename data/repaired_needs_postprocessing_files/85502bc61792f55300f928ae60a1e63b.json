{
    "title": "Hard: Matrix Path Sum",
    "description": "Given an <i>m x n</i> integer matrix <i>matrix</i>, return the minimum path sum from the top-left corner to the bottom-right corner. You can only move either down or right at any point in time.",
    "code": "def minPathSum(matrix):\n    m = len(matrix)\n    n = len(matrix[0])\n\n    dp = [[float('inf')] * (n + 1) for _ in range(m + 1)]\n\n    dp[1][1] = matrix[0][0]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if i == 1 and j == 1:\n                continue  # Skip starting point\n            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + matrix[i - 1][j - 1]\n\n    return dp[m][n]",
    "tests": [
        "assert minPathSum([[1,3,1],[1,5,1],[4,2,1]]) == 7",
        "assert minPathSum([[1,2,3],[4,5,6]]) == 12"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}