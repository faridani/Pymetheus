{
    "title": "Medium - String Compression",
    "description": "Implement a function `compress_string` that takes a string as input and returns a compressed version of the string. The compression should work by replacing consecutive repeating characters with the character followed by the number of times it repeats. For example, 'aaabbc' would become 'a3b2c1'. If the compressed string is not shorter than the original string, return the original string.\n#### Function Signature\n```python\ndef compress_string(s: str) -> str:\n```\n#### Input\n- `s` (str): A string containing alphanumeric characters.\n#### Output\n- Returns the compressed version of the input string if it's shorter than the original. Otherwise, returns the original string.",
    "code": "def compress_string(s: str) -> str:\n    if len(s) == 0:\n        return s\n    compressed = ''\n    count = 1\n    prev_char = s[0]\n    for i in range(1, len(s)):\n        if s[i] == prev_char:\n            count += 1\n        else:\n            compressed += prev_char + (str(count) if count > 1 else '')\n            prev_char = s[i]\n            count = 1\n    compressed += prev_char + (str(count) if count > 1 else '')\n    return compressed if len(compressed) < len(s) else s",
    "tests": [
        "assert compress_string('aaabbc') == 'a3b2c1'",
        "assert compress_string('abc') == 'abc'",
        "assert compress_string('') == ''",
        "assert compress_string('aabcccccaaa') == 'a2b1c5a3'"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}