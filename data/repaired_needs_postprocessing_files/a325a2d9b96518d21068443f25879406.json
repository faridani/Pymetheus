{
    "title": "Easy: Coin Change",
    "description": "You are given a certain amount of money and a list of denominations for different coins. Write a function that returns the number of ways you can make change for this amount using these coins.\n\n#### Function Signature\n```python\ndef coin_change_ways(cents: int, coins: list[int]) -> int:\n```\n\n#### Input\n- `cents` (int): The total amount of money in cents that you need to make change for.\n- `coins` (list[int]): A list of denominations for different coins, where each coin is represented by its value in cents.\n\n#### Output\n- Returns the number of ways you can make change for the given amount using the provided coins.",
    "code": "def coin_change_ways(cents: int, coins: list[int]) -> int:\n    # Sort the coins from smallest to largest\n    coins.sort()\n    # Initialize a list to store the number of ways to make change for each amount up to `cents`\n    ways = [0] * (cents + 1)\n    # The only way to make change for 0 cents is to use no coins, which is 1 way\n    ways[0] = 1\n    # For each coin denomination from smallest to largest\n    for coin in coins:\n        # For each amount from the value of the current coin up to `cents`\n        for i in range(coin, cents + 1):\n            # The number of ways to make change for this amount is the sum of the number of ways to make change for the previous amounts and the number of ways to use one or more coins of the current denomination to make change for the remaining amount\n            ways[i] += ways[i - coin]\n    # Return the number of ways to make change for `cents` cents\n    return ways[cents]",
    "tests": [
        "assert coin_change_ways(10, [1, 2, 5]) == 7",
        "assert coin_change_ways(0, [1, 2, 5]) == 1",
        "assert coin_change_ways(12, [1, 4, 6]) == 3",
        "assert coin_change_ways(200, [1, 5, 10, 25]) == 15"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}