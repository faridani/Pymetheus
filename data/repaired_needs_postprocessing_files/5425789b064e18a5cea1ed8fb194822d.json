{
    "title": "Levenshtein Distance Calculator (Medium)",
    "description": "The Levenshtein distance between two words is the minimum number of single-character edits (insertions, deletions or substitutions) required to change one word into the other.\n#### Function Signature\n```python\ndef levenshtein_distance(s1: str, s2: str) -> int:\n```\n#### Input\n- `s1`, `s2` (str): Two strings of lowercase ASCII characters.\n#### Output\n- Returns the Levenshtein distance between the two input strings as an integer.",
    "code": "def levenshtein_distance(s1: str, s2: str) -> int:\n    # Initialize matrices for dynamic programming solution\n    len_s1 = len(s1)+1\n    len_s2 = len(s2)+1\n    dp = [[0] * len_s2 for _ in range(len_s1)]\n    \n    # Fill the matrices based on edit operations required\n    for i in range(1, len_s1+1):\n        for j in range(1, len_s2+1):\n            if s1[i-1] == s2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = min(dp[i][j-1]+1, dp[i-1][j]+1, dp[i-1][j-1]+1)\n    \n    # The Levenshtein distance is stored in the bottom right corner of the matrix\n    return dp[-1][-1]",
    "tests": [
        "assert levenshtein_distance('kitten', 'sitting') == 3",
        "assert levenshtein_distance('python', 'tython') == 2",
        "assert levenshtein_distance('cat', 'dog') == 3",
        "assert levenshtein_distance('anagram', 'nagaram') == 0"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}