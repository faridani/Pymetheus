{
    "title": "Hard - Fractal Sequence Generator",
    "description": "A fractal sequence is a sequence of numbers where each term is generated by applying a specific rule to the previous terms. Write a function `generate_fractal` that generates the first `n` terms of a given fractal sequence defined by the following rule:\n* **Base Case:** The first two terms are 0 and 1.\n* **Recursive Rule:** Each subsequent term is the sum of the previous term and twice the term before that. \n#### Function Signature\n```python\ndef generate_fractal(n: int) -> list[int]:\n``` \n#### Input\n- `n` (int): The number of terms to generate in the sequence.\n#### Output\n- Returns a list containing the first `n` terms of the fractal sequence.",
    "code": "def generate_fractal(n: int) -> list[int]:\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fractal_sequence = [0, 1]\n        for i in range(2, n):\n            next_term = fractal_sequence[i - 1] + 2 * fractal_sequence[i - 2]\n            fractal_sequence.append(next_term)\n        return fractal_sequence",
    "tests": [
        "assert generate_fractal(0) == []",
        "assert generate_fractal(1) == [0]",
        "assert generate_fractal(2) == [0, 1]",
        "assert generate_fractal(5) == [0, 1, 2, 5, 12]",
        "assert generate_fractal(10) == [0, 1, 2, 5, 12, 29, 70, 169, 408, 985]"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}