{
    "title": "Finding Islands",
    "description": "Given a 2D array of characters, write a function that counts the number of islands. An island is a group of connected land (represented by 'L') that is not surrounded by water (represented by 'W').\n\n#### Function Signature\n```python\ndef count_islands(grid: list[list[str]]) -> int:\n``` \n\n#### Input\n- `grid` (list[list[str]]): A 2D array of characters where each cell can be either 'L' (land) or 'W' (water).\n\n#### Output\n- Returns the number of islands in the given grid.\n",
    "code": "import copy\ndef count_islands(grid: list[list[str]]) -> int:\n    if not grid:\n        return 0\n    \n    count = 0\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    def dfs(i, j):\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] != 'L':\n            return\n        grid[i][j] = 'W'\n        for direction in directions:\n            dfs(i + direction[0], j + direction[1])\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 'L':\n                dfs(i, j)\n                count += 1\n    \n    return count",
    "tests": [
        "assert count_islands([['W', 'W', 'W'], ['W', 'L', 'W'], ['W', 'W', 'W']]) == 1",
        "assert count_islands([['W', 'W', 'W'], ['W', 'L', 'L'], ['W', 'W', 'W']]) == 2",
        "assert count_islands([]) == 0",
        "assert count_islands([['W']]) == 0"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}