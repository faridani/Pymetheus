{
    "title": "Prime Factorization of Large Numbers (Hard)",
    "description": "Given a large number, find its prime factors. The number may be a product of multiple primes.\n#### Function Signature\n```python\ndef prime_factors(n: int) -> list:\n``` \n#### Input\n- `n` (int): A positive integer, which may have multiple prime factors.\n#### Output\n- Returns a sorted list of the prime factors of the input number as integers.\nExample: For the number 32, the function should return [2, 2, 2, 5].",
    "code": "def prime_factors(n: int) -> list:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i != 0:\n            i += 1\n        else:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return sorted(factors)",
    "tests": [
        "assert prime_factors(32) == [2, 2, 2, 5]",
        "assert prime_factors(160) == [2, 2, 2, 2, 5, 5]",
        "assert prime_factors(94743738) == [3, 3, 29, 37, 179, 193, 367]"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}