{
    "title": "Hard: Cyclic Permutations",
    "description": "Given a string s, find the lexicographically smallest cyclic permutation of s. A cyclic permutation is a rotation of the original string. For example, \"abc\" has three cyclic permutations: \"abc\", \"bca\", and \"cab\".\n\n#### Function Signature\n```python\ndef smallest_cyclic_permutation(s: str) -> str:\n```\n\n#### Input\n- `s` (str): A string consisting of lowercase English letters.\n\n#### Output\n- Returns the lexicographically smallest cyclic permutation of `s`.\\",
    "code": "def smallest_cyclic_permutation(s: str) -> str:\n    smallest = s\n    for i in range(len(s)):\n        perm = s[i:] + s[:i]\n        if perm < smallest:\n            smallest = perm\n    return smallest",
    "tests": [
        "assert smallest_cyclic_permutation('abc') == 'abc'",
        "assert smallest_cyclic_permutation('cba') == 'abc'",
        "assert smallest_cyclic_permutation('cab') == 'abc'",
        "assert smallest_cyclic_permutation('abccba') == 'aabbcc'"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}