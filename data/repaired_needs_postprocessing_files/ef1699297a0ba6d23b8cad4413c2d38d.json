{
    "title": "Graph Cycle Detector (Hard)",
    "description": "Given an undirected graph represented as an adjacency list, write a function `has_cycle` that detects whether the graph has a cycle. The function should return `True` if the graph contains a cycle and `False` otherwise.\n\n#### Function Signature\n```python\ndef has_cycle(graph: dict) -> bool:\n``` \n\n#### Input\n- `graph` (dict): A dictionary where each key is a node and its corresponding value is a list of neighboring nodes.\n\n#### Output\n- Returns `True` if the input graph contains a cycle, `False` otherwise.\n",
    "code": "from collections import deque\ndef has_cycle(graph: dict) -> bool:\n    visited = set()\n    for node in graph:\n        if node not in visited:\n            stack = deque([node])\n            while stack:\n                current_node = stack.pop()\n                if current_node in visited:\n                    return True\n                visited.add(current_node)\n                for neighbor in graph[current_node]:\n                    if neighbor not in visited:\n                        stack.append(neighbor)\n    return False",
    "tests": [
        "assert has_cycle({}) == False",
        "assert has_cycle({1: [2], 2: [1]}) == True",
        "assert has_cycle({1: [2, 3], 2: [1, 4], 3: [2], 4: [3]}) == True",
        "assert has_cycle({1: [2, 3], 2: [1, 4], 3: [5], 4: [6], 5: [], 6: []}) == False"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}