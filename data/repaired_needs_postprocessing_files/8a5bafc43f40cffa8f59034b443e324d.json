{
    "title": "Hard: Alien Language Translator",
    "description": "You've intercepted a message from an alien civilization! They communicate using a language consisting of symbols represented by integers. Fortunately, you've managed to decipher some basic patterns in their grammar.\nTheir language follows these rules:\n- **Sentences** are sequences of **words**.\n- **Words** are sequences of **integers**.\n- **Noun Phrases:** Consist of two consecutive integers where the second integer is always double the first. (e.g., [2, 4], [7, 14]).\n- **Verb Phrases:** Consist of three consecutive integers where the middle integer is the sum of the first and last. (e.g., [3, 5, 2], [8, 12, 4]).\nYour task is to write a function `translate` that takes a list of integers representing an alien sentence and returns a human-readable translation. If the sentence contains any invalid sequences, return \"Invalid Alien Sentence.\".",
    "code": "def translate(sentence: list[int]) -> str:\n    translation = []\n    i = 0\n    while i < len(sentence):\n        if i + 1 < len(sentence) and sentence[i + 1] == 2 * sentence[i]:\n            translation.append(\"Noun Phrase: \" + str(sentence[i]) + \", \" + str(sentence[i + 1]))\n            i += 2\n        elif i + 2 < len(sentence) and sentence[i + 1] == sentence[i] + sentence[i + 2]:\n            translation.append(\"Verb Phrase: \" + str(sentence[i]) + \", \" + str(sentence[i + 1]) + \", \" + str(sentence[i + 2]))\n            i += 3\n        else:\n            return \"Invalid Alien Sentence\"\n    return ' '.join(translation)",
    "tests": [
        "assert translate([2, 4, 3, 5, 2]) == \"Noun Phrase: 2, 4 Verb Phrase: 3, 5, 2\"",
        "assert translate([1, 2, 3, 6, 9]) == \"Invalid Alien Sentence\"",
        "assert translate([7, 14, 5, 10, 5]) == \"Noun Phrase: 7, 14 Verb Phrase: 5, 10, 5\""
    ],
    "model": "gemma2:27b-instruct-q5_K_S-repaired by Llama 3"
}