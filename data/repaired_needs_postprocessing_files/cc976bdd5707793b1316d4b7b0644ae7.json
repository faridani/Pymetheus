{
    "title": "'Palindromic Subsequence Checker (Medium)'",
    "description": "In computer science, a palindromic subsequence of a string is a sequence that can be read the same way forwards and backwards. For example, the palindromic subsequences in the word 'banana' are 'a', 'an', 'anna'. Write a function palindrome_subsequence that finds all the palindromic subsequences of a given string.\n\n#### Function Signature\n```python\ndef palindrome_subsequence(s: str) -> list:\n```\n\n#### Input\n- `s` (str): A non-empty string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns a list of all the palindromic subsequences in the given string.",
    "code": "import itertools\ndef palindrome_subsequence(s: str) -> list:\n    # Generate all possible substrings\n    subs = [''.join(combo) for combo in itertools.combinations(s, r) for r in range(1, len(s)+1)]\n    # Filter out the palindromic subsequences\n    return [sub for sub in subs if sub == sub[::-1]]",
    "tests": [
        "assert set(palindrome_subsequence('banana')) == {'a', 'an', 'anna'}",
        "assert palindrome_subsequence('racecar') == ['r', 'c', 'cc', 'rr', 'race', 'acecar', 'car']",
        "assert palindrome_subsequence('Hello, World!') == []"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}