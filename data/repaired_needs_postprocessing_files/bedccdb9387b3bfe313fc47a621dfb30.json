{
    "title": "Number of Unique Digits - A Medium Python Problem",
    "description": "Write a function `count_unique_digits` that takes a non-negative integer as input and returns the number of unique digits present in the input number. \n\n#### Function Signature```python\ndef count_unique_digits(n: int) -> int:\n``` \n\n#### Input\n- `n` (int): A non-negative integer.\n\n#### Output\n- Returns the number of unique digits present in the input integer.",
    "code": "def count_unique_digits(n: int) -> int:\n    # Find the absolute value of the number and convert it to a string for processing\n    n = abs(n)\n    n = str(n)\n    # Initialize an empty set to store unique digits\n    unique_digits = set()\n    \n    # Iterate through each character in the input string\n    for char in n:\n        # If the current digit is present in the set, it means it's not unique. Skip it.\n        if char in unique_digits:\n            continue\n        \n        # Add the current digit to the set and increment the count of unique digits.\n        unique_digits.add(char)\n    \n    # Return the length of the set, which represents the number of unique digits.\n    return len(unique_digits)",
    "tests": [
        "assert count_unique_digits(123456789) == 9",
        "assert count_unique_digits(1123456789) == 7",
        "assert count_unique_digits(0) == 1",
        "assert count_unique_digits(1011) == 3"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}