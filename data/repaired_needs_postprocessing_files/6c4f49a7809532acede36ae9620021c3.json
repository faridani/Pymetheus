{
    "title": "String Rotations Finder",
    "description": "Given a string, find the number of times it can be rotated such that it matches another given substring. If no rotation is found, return -1.\n\n#### Function Signature\n```python\ndef count_rotations(main: str, sub: str) -> int:\n```n\n\n#### Input\n- `main` (str): The main string to be rotated.\n- `sub` (str): The substring to match the rotation against.\n\n#### Output\n- Returns the number of times 'main' can be rotated such that it contains 'sub'. If no rotation is found, return -1. A rotation means moving characters from one end of the string to the other.\n",
    "code": "def count_rotations(main: str, sub: str) -> int:\n    if len(main) != len(sub):\n        return -1\n    rotated = main + main\n    count = 0\n    while sub in rotated:\n        index = rotated.index(sub)\n        rotated = rotated[index+len(sub):] + rotated[:index]\n        count += 1\n    return count if count > 0 else -1",
    "tests": [
        "assert count_rotations('abcde', 'eabcd') == 4",
        "assert count_rotations('hello world', 'world hello') == 2",
        "assert count_rotations('xyzzy', 'yzzxy') == -1",
        "assert count_rotations('rotateornot?', 'not ?rota') == 3",
        "assert count_rotations('findmeifoundyou', 'd ifoundyou') == 2"
    ],
    "model": "phi3:14b-repaired by Llama 3"
}