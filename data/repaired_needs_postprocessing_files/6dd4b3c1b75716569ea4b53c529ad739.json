{
    "title": "Hard: Maximum Sum of Alternating Subsequences",
    "description": "Given an array of integers, find the maximum sum that can be achieved by selecting alternating subsequences (i.e., one subsequence from the first half and another from the second half). The subsequences must not overlap.\n\n#### Function Signature\n```python\ndef max_sum_alternating_subsequences(arr: list[int)) -> int:\n```\n\n#### Input\n- `arr` (list[int]): A non-empty array of integers.\n\n#### Output\n- Returns the maximum sum that can be achieved by selecting alternating subsequences.",
    "code": "def max_sum_alternating_subsequences(arr: list[int]) -> int:\n    n = len(arr)\n    left_sum = [0] * (n + 1)\n    right_sum = [0] * (n + 1)\n\n    for i in range(n):\n        if i % 2 == 0:\n            left_sum[i + 1] = max(left_sum[i], arr[i])\n        else:\n            left_sum[i + 1] = left_sum[i] + arr[i]\n\n    for i in range(n - 1, -1, -1):\n        if i % 2 == 0:\n            right_sum[i] = max(right_sum[i + 1], arr[i])\n        else:\n            right_sum[i] = right_sum[i + 1] + arr[i]\n\n    return max(left_sum[n // 2] + right_sum[n - n // 2], left_sum[n // 2] + right_sum[n // 2]),",
    "tests": [
        "assert max_sum_alternating_subsequences([1, -3, 4, 5, -2]) == 14",
        "assert max_sum_alternating_subsequences([-1, 2, 3, -10, 6, 5, 0, 7, 8, 9, -20]) == 33",
        "assert max_sum_alternating_subsequences([1, 1, 1, 1]) == 4"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}