{
    "title": "'Palindromic Subsequence Length' (hard)",
    "description": "Given a string, find the length of its longest palindromic subsequence. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n#### Function Signature\n```python\ndef longest_palindrome_subsequence(s: str) -> int:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces and punctuation.\n\n#### Output\n- Returns the length of the longest palindromic subsequence found in the input string.",
    "code": "def longest_palindrome_subsequence(s: str) -> int:\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    # Length 1 palindromes are always valid\n    for i in range(n): dp[i][i] = 1\n    # Length 2 palindromes if the two characters match\n    for i in range(n - 1):\n        if s[i] == s[i + 1]: dp[i][i + 1] = 1\n        else: dp[i][i + 1] = 0\n    # For longer palindromes, check all possible lengths starting from 3\n    for k in range(3, n + 1):\n        for i in range(n - k + 1):\n            j = i + k - 1\n            if s[i] == s[j] and dp[i + 1][j - 1]: dp[i][j] = k + 1\n            elif dp[i + 1][j]: dp[i][j] = dp[i + 1][j]\n    # The length of the longest palindromic subsequence is found at index 0, len(s) - 1\n    return dp[0][len(s) - 1]",
    "tests": [
        "assert longest_palindrome_subsequence(\"babad\") == 4",
        "assert longest_palindrome_subsequence(\"cbbd\") == 2",
        "assert longest_palindrome_subsequence(\"aabaa\") == 5"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}