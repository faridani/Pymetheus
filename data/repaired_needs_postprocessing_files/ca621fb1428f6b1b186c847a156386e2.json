{
    "title": "Hard: Minimum Swaps to Sort",
    "description": "You are given an array of integers `nums`. Write a function `min_swaps` that returns the minimum number of swaps required to sort the array in ascending order.\n\n#### Function Signature\n```python\ndef min_swaps(nums: list[int]) -> int:\n``` \n\n#### Input\n- `nums`: A list of integers.\n\n#### Output\n- Returns the minimum number of swaps needed to sort the array.\n\n#### Constraints\n- 1 <= len(nums) <= 10^5\n- -10^9 <= nums[i] <= 10^9\n\n#### Hints\n- Consider using a cycle detection algorithm.",
    "code": "def min_swaps(nums: list[int]) -> int:\n    n = len(nums)\n    pos = [0] * n\n    for i in range(n):\n        pos[nums[i]] = i\n    visited = [False] * n\n    count = 0\n    for i in range(n):\n        if not visited[i]:\n            j = i\n            cycle_len = 0\n            while not visited[j]:\n                visited[j] = True\n                j = pos[nums[j]]\n                cycle_len += 1\n            count += cycle_len - 1\n    return count",
    "tests": [
        "assert min_swaps([7, 1, 3, 2, 4, 5, 6]) == 5",
        "assert min_swaps([1, 2, 3]) == 0",
        "assert min_swaps([4, 3, 2, 1]) == 3"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}