{
    "title": "Counting Islands",
    "description": "A binary matrix represents a map where `0` means land and `1` means water. An island is a group of connected land cells. You are given two integers `m` and `n` representing the size of the binary matrix, and a 2D list `matrix` representing the binary matrix. Write a function `count_islands` that counts the number of islands in the given binary matrix.\r\n\r\n#### Function Signature\r\n```python\r\ndef count_islands(matrix: List[List[int]]) -> int:\r```\r\r\n#### Input\r\n- `m` (int): The number of rows in the binary matrix.\r\n- `n` (int): The number of columns in the binary matrix.\r\n- `matrix` (List[List[int]]): A 2D list representing the binary matrix, where `0` means land and `1` means water.\r\r\n#### Output\r\n- Returns the number of islands in the given binary matrix.\r",
    "code": "from typing import List\r\ndef count_islands(matrix: List[List[int]]) -> int:\r    if not matrix or not matrix[0]:\r        return 0\r    m, n = len(matrix), len(matrix[0])\r    visited = [[False for _ in range(n)] for _ in range(m)]\r    count = 0\r    for i in range(m):\r        for j in range(n):\r            if matrix[i][j] == 1 and not visited[i][j]:\r                dfs(matrix, visited, i, j)\r                count += 1\r    return count\r\r\ndef dfs(matrix: List[List[int]], visited: List[List[bool]], i: int, j: int):\r    if i < 0 or i >= len(matrix) or j < 0 or j >= len(matrix[0]):\r        return\r    if matrix[i][j] == 0 or visited[i][j]:\r        return\r    visited[i][j] = True\r    dfs(matrix, visited, i - 1, j)\r    dfs(matrix, visited, i + 1, j)\r    dfs(matrix, visited, i, j - 1)\r    dfs(matrix, visited, i, j + 1)",
    "tests": [
        "assert count_islands([[0,0,1,0,0],[1,0,1,1,0],[0,1,0,0,0],[0,1,0,0,0],[0,0,0,0,0]]) == 1",
        "assert count_islands([[1,1,0,0,0],[1,1,0,0,0],[0,0,1,0,0],[0,0,0,1,1]]) == 3",
        "assert count_islands([[0,0,0,0,0]]) == 0"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}