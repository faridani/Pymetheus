{
    "title": "Elegant Garden",
    "description": "A gardener is creating an elegant garden with a series of interconnected flowers. She has a set of 10 flower types, and each type can be planted either vertically or horizontally. The rules for the garden are as follows: there cannot be more than two flowers of the same type in any row or column. Also, no two adjacent flowers (horizontally or vertically) can be of the same type.\nWrite a function `garden_possible` that determines whether a given set of flower types and their orientations (vertical or horizontal) are possible to create according to these rules.\n#### Function Signature\n```python\ndef garden_possible(flower_types: list, orientations: list) -> bool:\n```\n#### Input\n- `flower_types` (list): A list of 10 integers representing the types of flowers. Each integer should be between 1 and 10, inclusive.\n- `orientations` (list): A list of 10 strings representing the orientations of the flowers. Each string should be either 'V' for vertical or 'H' for horizontal.\n#### Output\n- Returns `True` if the given garden configuration is possible according to the rules, and `False` otherwise.",
    "code": "from collections import Counter\ndef garden_possible(flower_types: list, orientations: list) -> bool:\n    # Count the occurrences of each flower type in rows and columns\n    row_counts = [Counter([orientations[i] for i in range(10)]) for _ in range(5)]\n    col_counts = [Counter([orientations[i % 10] for i in range(10)]) for _ in range(5)]\n    # Check if there are more than two flowers of the same type in any row or column\n    return all(max(counts.values()) <= 2 for counts in row_counts + col_counts)\n",
    "tests": [
        "assert garden_possible([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], ['V', 'H', 'V', 'H', 'V', 'H', 'V', 'H', 'V', 'H']) == True",
        "assert garden_possible([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], ['V'] * 10) == False",
        "assert garden_possible([1, 1, 1, 1, 1, 1, 1, 1, 1, 2], ['H'] * 10) == False",
        "assert garden_possible([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], ['V', 'H'] * 5) == True"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}