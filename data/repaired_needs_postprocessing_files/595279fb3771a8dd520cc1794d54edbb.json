{
    "title": "Hard: Tower of Hanoi",
    "description": "The Tower of Hanoi is a classic problem. It consists of three rods (A, B, and C) and n disks, which are initially stacked in decreasing order of size on rod A.\n#### Function Signature\n```python\ndef hanoi(n: int, from_rod: str, to_rod: str, auxiliary_rod: str) -> None:\n``` \n- `n` (int): The number of disks to move. \n- `from_rod` (str): The rod where the disks are initially stacked. \n- `to_rod` (str): The target rod where the disks should be moved. \n- `auxiliary_rod` (str): The third rod, used as an auxiliary rod during the movement of disks.\n\n#### Output\nNone. Your function should print out the sequence of moves to solve the Tower of Hanoi problem.\n",
    "code": "import math\ndef hanoi(n: int, from_rod: str, to_rod: str, auxiliary_rod: str) -> None:\n    if n > 0:\n        # Move n - 1 disks from A to C using B as an auxiliary rod.\n        hanoi(n - 1, from_rod, auxiliary_rod, to_rod)\n        print(f'Move disk {n} from {from_rod} to {to_rod}')\n        # Move the nth disk from A to C.\n        if from_rod == 'A' and to_rod == 'C': \n            print(f'Move disk 1 from {from_rod} to {to_rod}')\n\n    hanoi(n - 1, auxiliary_rod, to_rod, from_rod)\n",
    "tests": [
        "assert hanoi(3, 'A', 'C', 'B') == None",
        "assert hanoi(2, 'A', 'C', 'B') == None"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}