{
    "title": "Hard: Longest Palindromic Substring",
    "description": "Given a string `s`, return the longest palindromic substring in `s`.\\n#### Function Signature\\n```python\\ndef longest_palindrome(s: str) -> str:\\```\n\\n#### Input\\n- `s` (str): A string consisting of lowercase and uppercase English letters.\\n#### Output\\n- Returns the longest palindromic substring found in `s`. If there are multiple substrings with the same maximum length, return any one of them.\\n",
    "code": "def longest_palindrome(s: str) -> str:\n    n = len(s)\n    if n < 2:\n        return s\n    dp = [[False] * n for _ in range(n)]\n\n    # All single characters are palindromes\n    for i in range(n):\n        dp[i][i] = True\n\n    # Check for palindromes of length 2\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            dp[i][i + 1] = True\n\n    # Check for palindromes of length 3 or greater\n    for k in range(3, n + 1):\n        for i in range(n - k + 1):\n            j = i + k - 1\n            if s[i] == s[j] and dp[i + 1][j - 1]:\n                dp[i][j] = True\n\n    # Find the longest palindromic substring\n    start, maxlen = 0, 1\n    for i in range(n):\n        for j in range(i, n):\n            if dp[i][j] and j - i + 1 > maxlen:\n                start = i\n                maxlen = j - i + 1\n\n    return s[start:start + maxlen]",
    "tests": [
        "assert longest_palindrome(\"babad\") == \"bab\" or longest_palindrome(\"babad\") == \"aba\"",
        "assert longest_palindrome(\"cbbd\") == \"bb\"",
        "assert longest_palindrome(\"a\") == \"a\"",
        "assert longest_Palindrome(\"ac\") == \"a\" or longest_palindrome(\"ac\") == \"c\""
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}