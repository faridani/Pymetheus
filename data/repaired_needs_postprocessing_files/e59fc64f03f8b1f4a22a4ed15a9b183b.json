{
    "title": "Anagram Detection (Hard)",
    "description": "Determine if two given strings are anagrams of each other, meaning they contain the same characters in a different order.\n\n#### Function Signature\n```python\ndef are_anagrams(str1: str, str2: str) -> bool:\n```\n\n#### Input\n- `str1` (str): A string containing only lowercase alphabetic characters\n- `str2` (str): Another string containing only lowercase alphabetic characters\n\n#### Output\n- Returns `True` if the two strings are anagrams of each other, `False` otherwise.\n",
    "code": "def are_anagrams(str1: str, str2: str) -> bool:\n    # Remove spaces from both strings and convert to sorted lists\n    str1 = ''.join([char for char in str1.lower() if char.isalpha()]).sort()\n    str2 = ''.join([char for char in str2.lower() if char.isalpha()]).sort()\n    # Check if both strings are of the same length and their sorted lists are equal\n    return len(str1) == len(str2) and str1 == str2",
    "tests": [
        "assert are_anagrams(\"listen\", \"silent\") == True",
        "assert are_anagrams(\"hello\", \"olleh\") == True",
        "assert are_anagrams(\"world\", \"dragon\") == False",
        "assert are_anagrams(\"apple\", \"appel\") == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}