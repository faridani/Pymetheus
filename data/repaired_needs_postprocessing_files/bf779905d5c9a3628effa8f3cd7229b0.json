{
    "title": "Hard: Pathfinding with Obstacles",
    "description": "You are given a 2D grid representing a map. The grid contains the following values:\n- `0`: Empty cell, traversable.\n- `1`: Obstacle, not traversable.\nThe task is to find the shortest path from the top-left corner (coordinates `(0, 0)` ) to the bottom-right corner (`(m - 1, n - 1)`), where `m` and `n` are the dimensions of the grid. You can move only horizontally or vertically, one cell at a time.\n\n#### Function Signature\n```\ndef shortest_path(grid: list[list[int]]) -> int:\n``` \n\n#### Input\n- `grid` (list[list[int]]): A 2D grid representing the map.\n\n#### Output\n- Returns the length of the shortest path, or `-1` if no path exists.\n",
    "code": "from collections import deque\ndef shortest_path(grid: list[list[int]]) -> int:\n    m = len(grid)\n    n = len(grid[0])\n    queue = deque([(0, 0, 0)])  # (row, col, distance)\n    visited = set([(0, 0)])\n    while queue:\n        row, col, dist = queue.popleft()\n        if row == m - 1 and col == n - 1:\n            return dist\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            new_row = row + dr\n            new_col = col + dc\n            if 0 <= new_row < m and 0 <= new_col < n and grid[new_row][new_col] == 0 and (new_row, new_col) not in visited:\n                queue.append((new_row, new_col, dist + 1))\n                visited.add((new_row, new_col))\n    return -1\n",
    "tests": [
        "assert shortest_path([[0, 0, 0], [0, 1, 0], [0, 0, 0]]) == 2",
        "assert shortest_path([[0, 1, 0], [0, 0, 1], [0, 1, 0]]) == 4",
        "assert shortest_path([[1, 0, 1], [0, 1, 0], [1, 0, 1]]) == -1"
    ],
    "model": "gemma2:27b-instruct-q5_K_S-repaired by Llama 3"
}