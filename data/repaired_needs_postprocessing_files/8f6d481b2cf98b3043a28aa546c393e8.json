{
    "title": "Is it anagram or not? (Medium)",
    "description": "An anagram is a word or phrase that is formed by rearranging the letters of another word or phrase, usually using all the original letters exactly once. Write a function `is_anagram` that checks if two given strings are anagrams. This function should take in two string parameters `str1` and `str2`. It should return `True` if the two input strings are anagrams, `False` otherwise.\n\n#### Function Signature\n```python\ndef is_anagram(str1: str, str2: str) -> bool:\n```\n\n#### Input\n- `str1` (str): A string containing only lowercase alphabets.\n- `str2` (str): Another string containing only lowercase alphabets.\n\n#### Output\n- Returns `True` if the two input strings are anagrams, `False` otherwise.",
    "code": "def is_anagram(str1: str, str2: str) -> bool:\n    # Ensure both strings have same length\n    if len(str1) != len(str2):\n        return False\n    \n    # Count the frequency of each character in the first string\n    count = {char: 0 for char in 'abcdefghijklmnopqrstuvwxyz'}\n    for char in str1:\n        count[char] += 1\n    \n    # Decrease the frequency of characters in the second string and check if all frequencies become zero.\n    for char in str2:\n        if char in count:\n            count[char] -= 1\n        else:\n            return False\n    for key, value in count.items():\n        if value != 0:\n            return False\n    \n    # If all characters are accounted for and frequencies become zero, the two strings are anagrams.\n    return True",
    "tests": [
        "assert is_anagram('listen', 'silent') == True",
        "assert is_anagram('racecar', 'carrace') == True",
        "assert is_anagram('hello', 'world') == False",
        "assert is_anagram('Anagram', 'nag a man') == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}