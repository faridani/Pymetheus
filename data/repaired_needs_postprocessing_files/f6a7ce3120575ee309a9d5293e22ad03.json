{
    "title": "Easy: Maximum Sum of an Increasing Subsequence",
    "description": "Given a list of integers, write a function `max_increasing_subsequence` that returns the maximum sum of an increasing subsequence. For example, if the input is `[1, 2, 3, 4, 5]`, the function should return `15`, because the maximum increasing subsequence is `[1, 3, 5]`. If the input is `[10, 20, 30, 40]`, the function should return `100`, because the maximum increasing subsequence is `[10, 20, 30, 40]`. #### Function Signature```pythondef max_increasing_subsequence(lst: list[int]) -> int:`` #### Input- `lst` (list[int]): A list of integers. #### Output- Returns the maximum sum of an increasing subsequence.",
    "code": "def max_increasing_subsequence(lst: list[int]) -> int:\n    n = len(lst)\n    dp = [0] * (n + 1)\n    for i in range(1, n):\n        for j in range(i):\n            if lst[i] > lst[j]:\n                dp[i] = max(dp[i], dp[j] + lst[i])\n    return max(dp)",
    "tests": [
        "assert max_increasing_subsequence([1, 2, 3, 4, 5]) == 15",
        "assert max_increasing_subsequence([10, 20, 30, 40]) == 100",
        "assert max_increasing_subsequence([-1, -2, -3, -4, -5]) == -1",
        "assert max_increasing_subsequence([]) == 0"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}