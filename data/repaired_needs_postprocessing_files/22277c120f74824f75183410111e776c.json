{
    "title": "Anagram Detector (Hard)",
    "description": "Write a function `anagram_checker` that checks if two given strings are anagrams of each other. Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n#### Function Signature\n```python\ndef anagram_checker(str1: str, str2: str) -> bool:\n```\n\n#### Input\n- `str1`, `str2` (str): Two strings that may contain letters from the English alphabet.\n\n#### Output\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.\n",
    "code": "def anagram_checker(str1: str, str2: str) -> bool:\n    # Remove spaces and convert to lowercase\n    str1 = ''.join([char for char in str1 if char.isalpha()]).lower()\n    str2 = ''.join([char for char in str2 if char.isalpha()]).lower()\n    \n    # If the two strings have different lengths, they cannot be anagrams\n    if len(str1) != len(str2):\n        return False\n    \n    # Count the frequency of each letter in the first string\n    char_freq = Counter(str1)\n    \n    # Check if all letters in the second string have the same frequency as those in the first string\n    for char in str2:\n        if char not in char_freq or char_freq[char] == 0:\n            return False\n        char_freq[char] -= 1\n    \n    # If no mismatch was found, the two strings are anagrams of each other\n    return True",
    "tests": [
        "assert anagram_checker('listen', 'silent') == True",
        "assert anagram_checker('hello', 'world') == False",
        "assert anagram_checker('eats', 'teas') == True",
        "assert anagram_checker('intensive', 'instant') == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}