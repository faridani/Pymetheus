{
    "title": "Prime Factorization",
    "description": "Write a function `prime_factors` that returns the prime factors of a given integer as a list, without duplicates. The input will be an integer greater than 1.\n\n#### Function Signature\n```python\ndef prime_factors(n: int) -> List[int]:\n```\n\n#### Input\n- `n` (int): A positive integer greater than 1.\n\n#### Output\n- Returns a list of integers, the unique prime factors of n in ascending order.",
    "code": "from typing import List\n\ndef prime_factors(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n >= 2:\n        if n % divisor == 0:\n            factors.append(divisor)\n            while n % divisor == 0:\n                n //= divisor\n        else:\n            divisor += 1\n    return sorted(list(set(factors)))",
    "tests": [
        "assert prime_factors(8) == [2]",
        "assert prime_factors(25) == [5]",
        "assert prime_factors(60) == [2, 3, 5]",
        "assert prime_factors(7919) == [7919]"
    ],
    "model": "qwen2:7b-repaired by Llama 3"
}