{
    "title": "Anagram Detector (Hard)",
    "description": "Given two strings, write a function `are_anagrams` that determines if the two input strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of another word or phrase.\n\n#### Function Signature\n```python\ndef are_anagrams(s1: str, s2: str) -> bool:\n``` \n\n#### Input\n- `s1` (str): A non-empty string containing only lowercase letters and spaces.\n- `s2` (str): A non-empty string containing only lowercase letters and spaces.\n\n#### Output\n- Returns `True` if the two input strings can be rearranged to form each other, `False` otherwise.\n",
    "code": "def are_anagrams(s1: str, s2: str) -> bool:\n    # Remove spaces and convert to a dictionary of character counts\n    char_count_dict = {char: 0 for char in string.ascii_lowercase} \n    for char in (s1 + s2).replace(' ', '').upper():\n        char_count_dict[char] += 1\n    \n    # Check if both strings can be formed from the available characters\n    return all(count >= (len(s1) + len(s2) - count) for count in char_count_dict.values())",
    "tests": [
        "assert are_anagrams(\"listen\", \"silent\") == True",
        "assert are_anagrams(\"hello\", \"world\") == False",
        "assert are_anagrams(\"civic\", \"vice\") == True",
        "assert are_anagrams(\"welcome\", \"mellowearl\") == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}