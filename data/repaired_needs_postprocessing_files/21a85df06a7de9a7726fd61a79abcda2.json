{
    "title": "Hard: Finding the closest pair of points",
    "description": "Given a list of 3D points, find the pair with the smallest Euclidean distance. The input points are represented as lists of three integers each. The output should be a tuple containing two points and their distance. If there are multiple pairs with the same smallest distance, you can return any one of them.\n#### Function Signature\n```python\ndef closest_pair(points: List[List[int]]) -> Tuple[List[List[int]], float]:\n``` \n#### Input\n- `points` (List[List[int]]): A list of 3D points, where each point is a list of three integers representing the x, y, and z coordinates.\n#### Output\n- Returns a tuple containing two points and their Euclidean distance. If there are multiple pairs with the same smallest distance, you can return any one of them.\n",
    "code": "import math\ndef closest_pair(points: List[List[int]]) -> Tuple[List[List[int]], float]:\n    def distance(p1: List[int], p2: List[int]) -> float:\n        return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2 + (p1[2] - p2[2])**2)\n    min_distance = float('inf')\n    closest_pair_points = None\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            dist = distance(points[i], points[j])\n            if dist < min_distance:\n                min_distance = dist\n                closest_pair_points = (points[i], points[j])\n    return (*closest_pair_points, min_distance)",
    "tests": [
        "assert closest_pair([[0, 0, 0], [1, 1, 1]]) == ([[-1, -1, -1], [-2, -2, -2]], 3.464101615137755)",
        "assert closest_pair([[0, 0, 0], [1, 1, 1], [2, 2, 2]]) == ([[-1, -1, -1], [0, 0, 0]], 1.4142135623730951)",
        "assert closest_pair([[0, 0, 0], [1, 1, 1], [3, 3, 3]]) == ([[-2, -2, -2], [-1, -1, -1]], 2.8284271247461903)"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}