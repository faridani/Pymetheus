{
    "title": "'Palindromic Subsequence Count (Medium)'",
    "description": "A palindromic subsequence of a string is a sequence that reads the same backward as forward. Write a function `count_palindrome_subsequences` that takes in a string and returns the count of its unique palindromic subsequences.\n\n#### Function Signature\n```python\ndef count_palindrome_subsequences(s: str) -> int:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns the count of unique palindromic subsequences in the input string.",
    "code": "import collections\ndef count_palindrome_subsequences(s: str) -> int:\n    for len_subseq in range(len(s)):\n        counter = collections.defaultdict(int)\n        for start in range(len(s)):\n            end = start + len_subseq\n            if not is_palindrome(s[start:end]):\n                continue\n            counter[s[start:end]] += 1\n        total = sum(counter.values())\n        if total == 1: \n            break\n    return total",
    "tests": [
        "assert count_palindrome_subsequences('aab') == 3",
        "assert count_palindrome_subsequences('abcd') == 1",
        "assert count_palindrome_subsequences('aba') == 2"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}