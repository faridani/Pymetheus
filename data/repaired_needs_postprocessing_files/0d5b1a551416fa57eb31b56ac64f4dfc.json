{
    "title": "Hard: Graph Connectivity",
    "description": "You are given a graph with (N) nodes and (M) edges. The nodes are numbered from 1 to (N). Each edge has a weight associated with it, which is an integer between -1000 and 1000 inclusive. Your task is to determine the minimum number of edges that need to be added or removed such that there exists at least one path connecting any node to any other node (fully connected graph).\n\n#### Function Signature\n```python\ndef min_edges_to_add_or_remove(N: int, M: int, edges: List[List[int]]) -> int:\n```\n\n#### Input\n- `N` (int): The number of nodes in the graph.\n- `M` (int): The number of edges in the graph.\n- `edges` (List[List[int]]): A list of length (M) containing two integers for each edge, representing an undirected edge between node (u) and node (v).\n\n#### Output\n- Returns the minimum number of edges that need to be added or removed so that there exists at least one path connecting any node to any other node.",
    "code": "from typing import List\nimport collections\nimport math\ndef min_edges_to_add_or_remove(N: int, M: int, edges: List[List[int]]) -> int:\n    graph = collections.defaultdict(set)\n    for u, v in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n\n    added, removed = 0, math.inf\n    # DFS to check if there's a path from every node to every other node\n    visited = set()\n    def dfs(node: int) -> bool:\n        visited.add(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited or dfs(neighbor): return True\n        return False\n\n    # Check connectivity for each node\n    for i in range(1, N + 1):\n        if i not in visited and not dfs(i):\n            removed -= len(graph[i])\n            added += (N - len(graph[i]))\n    return min(added, removed)\n",
    "tests": [
        "assert min_edges_to_add_or_remove(5, 6, [[1,2], [2,3], [4,5], [1,3], [1,4], [2,5]]) == 0",
        "assert min_edges_to_add_or_remove(3, 2, [[1, 2], [2, 3]]) == 1",
        "assert min_edges_to_add_or_remove(6, 7, [[1, 2], [1, 3], [2, 4], [2, 5], [3, 4], [3, 5], [4, 6]]) == -1"
    ],
    "model": "qwen2:7b-repaired by Llama 3"
}