{
    "title": "Easy: Maximum Sum of Alternating Subsequences",
    "description": "Given a string consisting of characters '0' and '1', find the maximum sum of subsequences where each subsequence consists only of alternating characters. For example, if the input string is '01101010', the maximum sum of subsequences would be 4 because we can get two subsequences '01' (sum 1) and '1010' (sum 3). Write a function max_sum that takes an input string as argument and returns the maximum sum of such subsequences. Write a function `max_sum` that takes an input string as argument and returns the maximum sum of such subsequences.\n\n#### Function Signature\n```python\ndef max_sum(s: str) -> int:\n```\n\n#### Input\n- `s` (str): A string consisting of characters '0' and '1'.\n\n#### Output\n- Returns an integer representing the maximum sum of alternating subsequences.",
    "code": "def max_sum(s: str) -> int:\n    n = len(s)\n    even_sum = 0\n    odd_sum = 0\n    \n    for i in range(n):\n        if s[i] == '1':\n            even_sum += 1\n            odd_sum -= 1\n        else:\n            even_sum -= 1\n            odd_sum += 1\n            \n    return max(even_sum, odd_sum) + n // 2 * (n % 2)",
    "tests": [
        "assert max_sum('01101010') == 4",
        "assert max_sum('10101') == 3",
        "assert max_sum('0') == 0",
        "assert max_sum('1') == 1"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}