{
    "title": "Medium Python Coding Question: Find the Maximum Sum of Non-Overlapping Subarrays",
    "description": "Given an array of integers, find the maximum sum of non-overlapping subarrays. Each subarray can be any contiguous subsequence of the array.\n\n#### Function Signature\n```python\ndef max_sum_non_overlapping(arr: list[int]) -> int:\n```\n\n#### Input\n- `arr` (list[int]): A list of integers.\n\n#### Output\n- Returns the maximum sum of any non-overlapping subarray in the given array.\n",
    "code": "def max_sum_non_overlapping(arr: list[int]) -> int:\n    if not arr:\n        return 0\n    max_ending_here = max_so_far = arr[0]\n    for num in arr[1:]:\n        max_ending_here = max(num, max_ending_here + num)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
    "tests": [
        "assert max_sum_non_overlapping([1, -2, 3, 4, -1, 2, 1, -5, 4]) == 8",
        "assert max_sum_non_overlapping([-3, -2, -1]) == -1",
        "assert max_sum_non_overlapping([0]) == 0",
        "assert max_sum_non_overlapping([1, 2, 3, 4, 5]) == 15"
    ],
    "model": "command-r7b:latest-repaired by Llama 3"
}