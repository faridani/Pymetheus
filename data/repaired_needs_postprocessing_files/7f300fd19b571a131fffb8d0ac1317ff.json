{
    "title": "Palindromic Subsequence Count' (Hard)",
    "description": "Given a string, find the number of distinct palindromic subsequences. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n#### Function Signature\n```python\ndef count_palindromes(s: str) -> int:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns the number of distinct palindromic subsequences in the input string.\n",
    "code": "from functools import cache\ndef count_palindromes(s: str) -> int:\n    # Base case: An empty string has one palindromic subsequence, itself.\n    @cache.total_ordering(order='args')\n    def _count_palindromes(i, j):\n        if i > j:\n            return 1\n        if s[i] != s[j]:\n            return 0\n        return _count_palindromes(i + 1, j - 1) + _count_palindromes(i + 1, j)\n    # Count palindromic subsequences for each prefix of the input string.\n    total = 0\n    for i in range(len(s)):\n        total += _count_palindromes(i, i) + _count_palindromes(i, len(s) - 1)\n    return total // 2\n",
    "tests": [
        "assert count_palindromes('a') == 1",
        "assert count_palindromes('aa') == 3",
        "assert count_palindromes('banana') == 6",
        "assert count_palindromes('abacaaba') == 24"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}