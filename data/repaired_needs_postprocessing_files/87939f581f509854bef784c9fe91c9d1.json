{
    "title": "FizzBuzz",
    "description": "Write a function `fizz_buzz` that takes an integer `n` as input and returns a list of strings representing the FizzBuzz sequence up to that number.\r\n\r\n#### Function Signature\r\n```python\r\ndef fizz_buzz(n: int) -> List[str]:\r```\r\r\n#### Input\r\n- `n` (int): An integer between 1 and 100.\r\r\n#### Output\r\n- Returns a list of strings where:\r\\n  - If the number is divisible by both 3 and 5, the string 'FizzBuzz' should be appended.\r\\n  - If the number is divisible by 3 but not by 5, the string 'Fizz' should be appended.\r\\n  - If the number is divisible by 5 but not by 3, the string 'Buzz' should be appended.\r\\n  - If the number is not divisible by either 3 or 5, the number itself should be appended as a string.",
    "code": "from typing import List\r\ndef fizz_buzz(n: int) -> List[str]:\r    result = []\r    for i in range(1, n + 1):\r        if i % 3 == 0 and i % 5 == 0:\r            result.append('FizzBuzz')\r        elif i % 3 == 0:\r            result.append('Fizz')\r        elif i % 5 == 0:\r            result.append('Buzz')\r        else:\r            result.append(str(i))\r    return result",
    "tests": [
        "assert fizz_buzz(15) == ['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz']",
        "assert fizz_buzz(20) == ['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz']"
    ],
    "model": "mistral-nemo:latest-repaired by Llama 3"
}