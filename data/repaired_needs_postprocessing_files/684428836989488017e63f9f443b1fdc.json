{
    "title": "Hard: Maximum Product Subsequence",
    "description": "Given a list of integers, find the maximum product subsequence (non-empty) with at least one positive number and at least one negative number. The product is calculated as the multiplication of all numbers in the subsequence.\n#### Function Signature\n```python\ndef max_product_subsequence(nums: List[int]) -> int:\n    if not nums or len(set(nums)) == 1 and min(nums) <= 0:\n        return None\n    positive, negative = [], []\n    for num in nums:\n        if num > 0:\n            positive.append(num)\n        elif num < 0:\n            negative.append(-num)\n        else:\n            nums.remove(num)\n    max_positive = sorted(positive)[-2] * sorted(negative, reverse=True)[:2]\n    min_negative = sorted(negative, reverse=False)[1] * sorted(positive)[-2]\n    return max(max_positive, min_negative)\n",
    "code": "from typing import List\n\ndef max_product_subsequence(nums: List[int]) -> int:\n    if not nums or len(set(nums)) == 1 and min(nums) <= 0:\n        return None\n    positive, negative = [], []\n    for num in nums:\n        if num > 0:\n            positive.append(num)\n        elif num < 0:\n            negative.append(-num)\n        else:\n            nums.remove(num)\n    max_positive = sorted(positive)[-2] * sorted(negative, reverse=True)[:2]\n    min_negative = sorted(negative, reverse=False)[1] * sorted(positive)[-2]\n    return max(max_positive, min_negative)",
    "tests": [
        "assert max_product_subsequence([1, -3, 4, 0]) == 12",
        "assert max_product_subsequence([-1, -2, -3, 0]) == None",
        "assert max_product_subsequence([0, 2, -3, -5, -6]) == -18",
        "assert max_product_subsequence([2, -4, 1, 0, -1]) == 8"
    ],
    "model": "qwen2:7b-repaired by Llama 3"
}