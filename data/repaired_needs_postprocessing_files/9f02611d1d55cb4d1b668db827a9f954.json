{
    "title": "Hard: Word Ladder",
    "description": "Given two words, beginWord and endWord, and a wordList containing unique words of the same length. Return *the shortest transformation sequence* from beginWord to endWord such that only one letter can be changed at a time and each transformed word must exist in the given wordList. \nReturn an empty list if no such transformation sequence exists.\n\n#### Function Signature\n```python\ndef word_ladder(beginWord: str, endWord: str, wordList: list[str]) -> list[str]:\n```\n\n#### Input\n- `beginWord` (str): The starting word. \n- `endWord` (str): The target word.\n - `wordList` (list[str]): A list of valid words.\n\n#### Output\n- Returns a list of strings representing the shortest transformation sequence from beginWord to endWord. Returns an empty list if no such transformation sequence exists.\n",
    "code": "from collections import deque\ndef word_ladder(beginWord: str, endWord: str, wordList: list[str]) -> list[str]:\n    if endWord not in wordList:\n        return []\n    \n    neighbors = {}\n    for word in wordList:\n        for i in range(len(word)):\n            pattern = word[:i] + '*' + word[i+1:]\n            neighbors.setdefault(pattern, []).append(word)\n\n    queue = deque([(beginWord, [beginWord])])\n    visited = {beginWord}\n\n    while queue:\n        current_word, path = queue.popleft()\n        if current_word == endWord:\n            return path\n        for i in range(len(current_word)):\n            pattern = current_word[:i] + '*' + current_word[i+1:]\n            for neighbor in neighbors.get(pattern, []):\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    queue.append((neighbor, path + [neighbor]))\n    return []",
    "tests": [
        "assert word_ladder('hit', 'cog', ['hot', 'dot', 'dog', 'lot', 'log', 'cog']) == ['hit', 'hot', 'dot', 'dog', 'cog']",
        "assert word_ladder('hit', 'cog', ['hot', 'dot', 'dog', 'lot', 'log']) == []"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}