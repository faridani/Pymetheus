{
    "title": "'Mirror Sequence Detector' - Easy",
    "description": "Write a function `mirror_sequence` that takes a string as input and returns `True` if the given string is a mirror sequence (reads the same forwards and backwards), `False` otherwise.\n\n#### Function Signature\n```python\ndef mirror_sequence(s: str) -> bool:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns `True` if the input string is a mirror sequence, `False` otherwise.\n",
    "code": "def mirror_sequence(s: str) -> bool:\n    s = s.lower()\n    s = ''.join(char for char in s if char in string.ascii_letters + string.digits)\n    return s == s[::-1]",
    "tests": [
        "assert mirror_sequence('level') == True",
        "assert mirror_noteignored_punctuation_case('Madam') == False",
        "assert mirror_sequence('A man, a plan, a canal, Panama') == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}