{
    "title": "Hard - Lexicographically Smallest Subsequence",
    "description": "Given a string s consisting of lowercase English letters, find the lexicographically smallest subsequence of length k.\n\n#### Function Signature\n```python\ndef lexicographically_smallest_subsequence(s: str, k: int) -> str:\n```\n\n#### Input\n- `s` (str): A string consisting of lowercase English letters.\n- `k` (int): The desired length of the subsequence.\n\n#### Output\n- Returns a string representing the lexicographically smallest subsequence of length k.",
    "code": "def lexicographically_smallest_subsequence(s: str, k: int) -> str:\n    n = len(s)\n    stack = []\n    for i in range(n):\n        while stack and s[i] < stack[-1] and len(stack) + n - i > k:\n            stack.pop()\n        if len(stack) < k:\n            stack.append(s[i])\n    return ''.join(stack)",
    "tests": [
        "assert lexicographically_smallest_subsequence(\"cba\", 2) == \"ab\"",
        "assert lexicographically_smallest_subsequence(\"bcabc\", 3) == \"abc\"",
        "assert lexicographically_smallest_subsequence(\"cbacd\", 3) == \"abd\"",
        "assert lexicographically_smallest_subsequence(\"leetcode\", 4) == \"code\""
    ],
    "model": "gemma2:27b-instruct-q5_K_S-repaired by Llama 3"
}