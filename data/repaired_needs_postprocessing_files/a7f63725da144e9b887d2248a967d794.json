{
    "title": "Easy: Closest Pair of Points",
    "description": "Given a list of 2D points, find the closest pair of points. The distance between two points (x1, y1) and (x2, y2) is calculated as sqrt((x2-x1)^2 + (y2-y1)^2). \n#### Function Signature\n```python\ndef closest_pair(points: list[tuple[int, int]]) -> tuple[tuple[int, int], tuple[int, int]]:\n```\n#### Input\n- `points` (list[tuple[int, int]]): A list of 2D points.\n#### Output\n- Returns a tuple containing the closest pair of points and their distance. If there are multiple closest pairs, return any one of them.",
    "code": "import math\nfrom typing import List, Tuple\ndef closest_pair(points: List[Tuple[int, int]]) -> Tuple[Tuple[int, int], Tuple[int, int]]:\n    min_distance = float('inf')\n    closest_pair = None\n    \n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            distance = math.sqrt((points[j][0] - points[i][0]) ** 2 + (points[j][1] - points[i][1]) ** 2)\n            \n            if distance < min_distance:\n                min_distance = distance\n                closest_pair = (points[i], points[j])\n    \n    return closest_pair\n",
    "tests": [
        "assert math.isclose(closest_pair([(0, 0), (3, 4)]), ((0, 0), (3, 4))) == True",
        "assert math.isclose(closest_pair([(1, 2), (2, 2), (5, 6)]), ((1, 2), (2, 2))) == True",
        "assert closest_pair([(0, 0), (-1, -1)]) == ((-1, -1), (0, 0))"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}