{
    "title": "Maximum Island Size",
    "description": "Given a 2D grid of size m x n, where each cell contains either land (represented by the letter '1') or water (represented by the letter '0'). Write a function `max_island_size` that returns the maximum size of any island in the given grid.\n\n#### Function Signature\n```python\ndef max_island_size(grid: list[list[str]]) -> int:\n``` \n\n#### Input\n- `grid` (list[list[str]]): A 2D grid where each cell contains either land ('1') or water ('0').",
    "code": "import copy\nfrom typing import List\n\ndef max_island_size(grid: List[List[str]]) -> int:\n    if not grid:\n        return 0\n\ndef dfs(i: int, j: int) -> int:\n    if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]):\n        return 0\n    if grid[i][j] == '0':\n        return 0\n    temp = copy.deepcopy(grid)\n    temp[i][j] = '0'\n    size = 1\n    for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n        ni, nj = i + dx, j + dy\n        if 0 <= ni < len(temp) and 0 <= nj < len(temp[0]) and temp[ni][nj] == '1':\n            size += dfs(ni, nj)\n    return size\n    max_size = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == '1':\n                max_size = max(max_size, dfs(i, j))\n    return max_size",
    "tests": [
        "assert max_island_size([['1', '1'], ['1', '0']]) == 2",
        "assert max_island_size([['1', '1', '0'], ['1', '1', '1'], ['0', '0', '1']]) == 3",
        "assert max_island_size([]) == 0",
        "assert max_island_size([[0, 0, 0], [0, 0, 0]]) == 0"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}