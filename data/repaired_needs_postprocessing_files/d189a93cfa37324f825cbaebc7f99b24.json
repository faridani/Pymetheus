{
    "title": "Anagram Finder (Hard)",
    "description": "Write a function `find_anagrams` that takes a list of strings as input and returns all pairs of strings from the list that are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n#### Function Signature\n```python\ndef find_anagrams(words: List[str]) -> List[List[str]]:\n``` \n\n#### Input\n- `words` (List[str]): A list of strings containing lowercase letters and possibly whitespace.\n\n#### Output\n- Returns a list of lists, where each inner list contains pairs of anagrams from the input list.",
    "code": "def find_anagrams(words: List[str]) -> List[List[str]]:\n    # Create a dictionary to store the counts of each character in each word\n    char_count = {char: 0 for char in string.ascii_lowercase}\n    anagrams = []\n    for word1 in words:\n        # Update the character count dictionary for the current word\n        for char in word1:\n            char_count[char] += 1\n        sorted_word1 = sorted(list(word1))\n        for word2 in words:\n            if word1 == word2 or word1 not in words or word2 not in words or len(word1) != len(word2):\n                continue\n            # Update the character count dictionary for the second word to check if it's an anagram of the first one\n            for char in word2:\n                char_count[char] -= 1\n            sorted_word2 = sorted(list(word2))\n            if sorted_word1 == sorted_word2 and all(char_count[char] == 0 for char in string.ascii_lowercase):\n                anagrams.append([word1, word2])\n            # Reset the character count dictionary before checking the next pair of words\n            for char in string.ascii_lowercase:\n                char_count[char] += 1\n    return anagrams",
    "tests": [
        "assert find_anagrams(['listen', 'silent', 'tinsel', 'enlist']) == [['listen', 'silent'], ['listen', 'tinsel'], ['silent', 'tinsel'], ['enlist', 'tinsel']]"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}