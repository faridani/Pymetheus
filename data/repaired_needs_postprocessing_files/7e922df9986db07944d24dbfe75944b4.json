{
    "title": "Hard: Binary Tree Coloring Game",
    "description": "A binary tree coloring game consists of a rooted binary tree where each node has two possible colors, red and blue. The goal is to color every node such that no two nodes in the same path (from root to leaf) have the same color.\nWrite a function `color_tree` that takes as input a binary tree represented as an array where `parent[i]` represents the parent of node `i`, and returns a list of colors for each node, where 0 is red and 1 is blue. The function should return the minimum number of colors needed to color the entire tree.\n#### Function Signature\n```python\ndef color_tree(parent: list) -> list:\n```\n#### Input\n- `parent` (list): A list representing a binary tree, where `parent[i]` is the parent of node `i`, and 0 represents the root node.\n#### Output\n- Returns a list of colors for each node, where 0 is red and 1 is blue.",
    "code": "def color_tree(parent: list) -> list:\n    n = len(parent)\n    if n == 0:\n        return []\n    colored = [None] * n\n    def dfs(i):\n        if colored[i] is not None:\n            return colored[i]\n        left_color = right_color = None\n        if parent[i] >= 0 and parent[parent[i]] == i:\n            left_color = dfs(parent[i])\n        if parent[i] < n // 2 and parent[n - 1 - parent[i]] == i:\n            right_color = dfs(n - 1 - parent[i])\n        if left_color is None or right_color is None:\n            colored[i] = (left_color + 1) % 2\n        else:\n            colored[i] = left_color\n        return colored[i]\n    for i in range(n):\n        dfs(i)\n    return [c if c is not None else 0 for c in colored]",
    "tests": [
        "assert color_tree([0, 1, 2, -1, -1, 3, 4, 5]) == [0, 0, 0, 1, 1, 0, 1, 0]",
        "assert color_tree([]) == []",
        "assert color_tree([-1]) == [0]"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}