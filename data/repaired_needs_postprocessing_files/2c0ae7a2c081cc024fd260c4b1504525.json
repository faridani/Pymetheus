{
    "title": "Hard: Circular Queue Implementation",
    "description": "#### Function Signature\n```python\ndef CircularQueue(capacity: int):\n``` Implement a circular queue with the following methods:\n- `enqueue(value)`: Adds an element to the rear of the queue. If the queue is full, it should return `False` and not add the element.\n- `dequeue()`: Removes and returns the element at the front of the queue. If the queue is empty, it should return `None`.\n- `is_empty()`: Returns `True` if the queue is empty, `False` otherwise.\n- `is_full()`: Returns `True` if the queue is full, `False` otherwise.\n- `size()`: Returns the number of elements in the queue.\nclass CircularQueue:\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.queue = [None] * capacity\n        self.front = 0\n        self.rear = -1\n        self.size = 0\n\n    def enqueue(self, value) -> bool:\n        if self.is_full():\n            return False\n        self.rear = (self.rear + 1) % self.capacity\n        self.queue[self.rear] = value\n        self.size += 1\n        return True\n\n    def dequeue(self):\n        if self.is_empty():\n            return None\n        value = self.queue[self.front]\n        self.front = (self.front + 1) % self.capacity\n        self.size -= 1\n        return value\n\n    def is_empty(self):\n        return self.size == 0\n\n    def is_full(self):\n        return self.size == self.capacity\n\n    def size(self) -> int:\n        return self.size\n",
    "code": "class CircularQueue:\n    def __init__(self, capacity: int):\n        self.capacity = capacity\n        self.queue = [None] * capacity\n        self.front = 0\n        self.rear = -1\n        self.size = 0\n\n    def enqueue(self, value) -> bool:\n        if self.is_full():\n            return False\n        self.rear = (self.rear + 1) % self.capacity\n        self.queue[self.rear] = value\n        self.size += 1\n        return True\n\n    def dequeue(self):\n        if self.is_empty():\n            return None\n        value = self.queue[self.front]\n        self.front = (self.front + 1) % self.capacity\n        self.size -= 1\n        return value\n\n    def is_empty(self):\n        return self.size == 0\n\n    def is_full(self):\n        return self.size == self.capacity\n\n    def size(self) -> int:\n        return self.size\n",
    "tests": [
        "q = CircularQueue(5)\nq.enqueue(1)\nq.enqueue(2)\nq.enqueue(3)\nq.dequeue()\nassert q.size() == 2 and q.queue[q.front] == 2",
        "q = CircularQueue(3)\nq.enqueue(1)\nq.enqueue(2)\nq.enqueue(3)\nq.dequeue()\nq.enqueue(4)\nassert q.dequeue() == 2 and q.dequeue() == 3 and q.dequeue() == 4"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}