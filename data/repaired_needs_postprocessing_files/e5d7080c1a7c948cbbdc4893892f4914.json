{
    "title": "Hard: Maximum Subarray Sum",
    "description": "Given an array of integers `nums`, find the subarray with the largest sum and return its sum. You can assume that at least one element is positive. Write a function `max_subarray_sum` that finds this maximum sum.\n\n#### Function Signature\n```python\ndef max_subarray_sum(nums: List[int]) -> int:\n```\n\n#### Input\n- `nums` (List[int]): A list of integers.\n\n#### Output\n- Returns an integer representing the maximum sum of a subarray.",
    "code": "from typing import List\n\ndef max_subarray_sum(nums: List[int]) -> int:\n    max_sum = nums[0]\n    current_sum = nums[0]\n    for i in range(1, len(nums)):\n        current_sum = max(nums[i], current_sum + nums[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum",
    "tests": [
        "assert max_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6",
        "assert max_subarray_sum([1, -3, 2, 1, -1]) == 3",
        "assert max_subarray_sum([-1, -2, -3, -4, -5]) == -1"
    ],
    "model": "codestral:22b-repaired by Llama 3"
}