{
    "title": "Anagram Detector (Hard)",
    "description": "Write a function `anagram_checker` that checks if two given strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of another, usually with all the original letters in the same alphabet and the same number of times as they appeared in the original.\n\n#### Function Signature\n```python\ndef anagram_checker(s1: str, s2: str) -> bool:\n```\n\n#### Input\n- `s1` (str): A string containing only lowercase letters and spaces.\n- `s2` (str): A string containing only lowercase letters and spaces.\n\n#### Output\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.\n\n**Hint:** You may find it helpful to use the built-in Python function `sorted()` for sorting the characters in each string alphabetically.",
    "code": "import operator\ndef anagram_checker(s1: str, s2: str) -> bool:\n    # Remove spaces from both strings\n    s1 = s1.replace(' ', '')\n    s2 = s2.replace(' ', '')\n    # Sort the characters in each string alphabetically and convert to tuples for easy comparison\n    s1_sorted = sorted(list(s1))\n    s2_sorted = sorted(list(s2))\n    # Compare the sorted lists using a custom comparison function that checks if they are equal as tuples\n    return all(map(lambda x, y: x == y, s1_sorted, s2_sorted))",
    "tests": [
        "assert anagram_checker('listen', 'silent') == True",
        "assert anagram_checker('hello', 'world') == False",
        "assert anagram_checker('eat', 'tea') == True",
        "assert anagram_checker('A man, a plan, a canal: Panama', 'Amana, plan-a mana panela') == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}