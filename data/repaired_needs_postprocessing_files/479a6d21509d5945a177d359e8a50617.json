{
    "title": "Hard: Finding the Longest Increasing Subsequence in a Sequence of Trees",
    "description": "A sequence of trees is given, where each tree is represented as an integer. The task is to find the longest increasing subsequence (LIS) in this sequence.\n\n#### Function Signature\n```python\ndef longest_increasing_subsequence(trees: list[int]) -> int:\n``` \n\n#### Input\n- `trees` (list[int]): A list of integers representing a sequence of trees, where each tree's height is represented as an integer.\n\n#### Output\n- Returns the length of the longest increasing subsequence in the input list.\n",
    "code": "def longest_increasing_subsequence(trees: list[int]) -> int:\n    if not trees:\n        return 0\n    dp = [1] * len(trees)\n    for i in range(1, len(trees)):\n        for j in range(i):\n            if trees[i] > trees[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
    "tests": [
        "assert longest_increasing_subsequence([5, 4, 3, 2, 1]) == 1",
        "assert longest_increasing_subsequence([5, 4, 3, 3, 2, 1]) == 3",
        "assert longest_increasing_subsequence([1, 3, 6, 7, 9]) == 4",
        "assert longest_increasing_subsequence([]) == 0"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}