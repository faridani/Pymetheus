{
    "title": "Hard: Prime Spiral",
    "description": "You are given a positive integer, n. Write a function `prime_spiral` that calculates the percentage of prime numbers within a square spiral pattern of side length n.\n\n#### Function Signature\n```python\ndef prime_spiral(n: int) -> float:\n``` \n\n#### Input\n- `n` (int): The side length of the square spiral.\n\n#### Output\n- Returns a float representing the percentage of prime numbers within the spiral, rounded to two decimal places.  **Hint:** To determine if a number is prime, you can iterate from 2 up to the square root of the number and check if any of these values divide the number evenly.\n",
    "code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_spiral(n: int) -> float:\n    total_numbers = n * n\n    prime_count = 0\n    for x in range(1, n + 1):\n        for y in range(1, n + 1):\n            num = ((x - 1) * n) + y\n            if is_prime(num):\n                prime_count += 1\n    return round((prime_count / total_numbers) * 100, 2)\n",
    "tests": [
        "assert prime_spiral(3) == 44.44",
        "assert prime_spiral(5) == 36.0",
        "assert prime_spiral(7) == 28.57"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}