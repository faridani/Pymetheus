{
    "title": "Easy: String to Integer (atoi)",
    "description": "Implement the `myAtoi` function, which converts a string to an integer. The function should handle different types of input strings, including whitespace characters, signs, and overflow/underflow conditions. If the input cannot be converted to an integer, return 0.\n\n#### Function Signature\n```python\ndef myAtoi(s: str) -> int:\n``` \n\n#### Input\n- `s` (str): A string that may contain letters, digits, whitespace characters, signs (+ or -), and a decimal point.\n\n#### Output\n- Returns an integer representation of the input string after conversion. If the input cannot be converted to an integer, return 0.\n",
    "code": "def myAtoi(s: str) -> int:\n    # Trim leading whitespace\n    s = s.lstrip()\n    # Check if empty string or only contains signs and no digits\n    if not s or (s[0] in ['+', '-'] and len(s[1:]) == 0):\n        return 0\n    # Check for sign\n    negative = s[0] == '-'\n    # Convert to integer\n    num_str = ''.join(filter(str.isdigit, s))\n    if not num_str:\n        return 0\n    result = int(num_str)\n    # Handle overflow/underflow\n    if result >= 2**31:\n        return 2**31 - 1 if negative else 2**31\n    elif result <= -(2**31):\n        return -(2**31) if negative else 2**31 - 1\n    return -result if negative else result",
    "tests": [
        "assert myAtoi('42') == 42",
        "assert myAtoi('-42') == -42",
        "assert myAtoi('4193 with words') == 4193",
        "assert myAtoi('words and 987') == 0",
        "assert myAtoi('-91283472332') == -2147483648"
    ],
    "model": "codegeex4:9b-repaired by Llama 3"
}