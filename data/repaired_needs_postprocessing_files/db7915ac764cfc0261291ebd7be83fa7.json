{
    "title": "Anagram Checker (Hard)",
    "description": "Write a function `is_anagram` that checks if two given strings are anagrams of each other. Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n#### Function Signature\n```python\ndef is_anagram(str1: str, str2: str) -> bool:\n```\n\n#### Input\n- `str1` (str): A string containing lowercase English alphabets only.\n- `str2` (str): Another string containing lowercase English alphabets only.\n\n#### Output\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.",
    "code": "def is_anagram(str1: str, str2: str) -> bool:\n    # Ensure both strings have the same length\n    if len(str1) != len(str2):\n        return False\n    # Create dictionaries to count characters in each string\n    dict1 = {char: 0 for char in string.ascii_lowercase}\n    dict2 = {char: 0 for char in string.ascii_lowercase}\n    \n    # Increment counts for each character in the first string and decrement for the second\n    for char in str1:\n        dict1[char] += 1\n        dict2[char] -= 1\n    \n    # Check if all counts are zero after processing both strings\n    for count in dict1.values():\n        if count != 0:\n            return False\n    return True",
    "tests": [
        "assert is_anagram(\"listen\", \"silent\") == True",
        "assert is_anagram(\"anagram\", \"nagaram\") == True",
        "assert is_anagram(\"hello\", \"world\") == False"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}