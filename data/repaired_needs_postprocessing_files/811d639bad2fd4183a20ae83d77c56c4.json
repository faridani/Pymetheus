{
    "title": "Anagram Checker (Hard)",
    "description": "Write a function `is_anagram` that checks if two given strings are anagrams of each other.\n\n#### Function Signature\n```python\ndef is_anagram(str1: str, str2: str) -> bool:\n```\n\n#### Input\n- `str1` (str): A string containing only lowercase letters and spaces.\n- `str2` (str): Another string containing only lowercase letters and spaces.\n\n#### Output\n- Returns `True` if the input strings are anagrams of each other, `False` otherwise.\n\n#### Constraints\n- The input strings may contain spaces but these spaces should be ignored when comparing.\n- If the length of the two strings is not equal, they are not anagrams.\n\n#### Hints\n- An anagram is a word or phrase that consists of the same letters as another, but in a different order.",
    "code": "def is_anagram(str1: str, str2: str) -> bool:\n    # Remove spaces from both strings\n    str1 = ''.join([char for char in str1 if char != ' '])\n    str2 = ''.join([char for char in str2 if char != ' '])\n    \n    # If the length of the two strings is not equal, they are not anagrams\n    if len(str1) != len(str2):\n        return False\n    \n    # Sort the characters in both strings and compare them\n    sorted_str1 = sorted(list(str1))\n    sorted_str2 = sorted(list(str2))\n    return sorted_str1 == sorted_str2",
    "tests": [
        "assert is_anagram(\"listen\", \"silent\") == True",
        "assert is_anagram(\"hello world\", \"world hello\") == True",
        "assert is_anagram(\"time flies like an arrow\", \"arrow flies like time\") == True",
        "assert is_anagram(\"race car\", \"carc race\") == False"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}