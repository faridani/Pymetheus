{
    "title": "Hard: Count Subarrays with Maximum Sum",
    "description": "Given an array of integers `nums`, find the number of non-empty subarrays whose sum is equal to the maximum sum of any subarray within `nums`.\\n#### Function Signature\\n```python\\ndef count_max_sum_subarrays(nums: list[int]) -> int:\\\\",
    "code": "def count_max_sum_subarrays(nums: list[int]) -> int:\n    max_so_far = nums[0]\n    current_max = nums[0]\n    count = 1 if max_so_far > 0 else 0\n    for i in range(1, len(nums)):\n        current_max = max(nums[i], current_max + nums[i])\n        if current_max == max_so_far:\n            count += 1\n        elif current_max > max_so_far:\n            max_so_far = current_max\n            count = 1\n    return count",
    "tests": [
        "assert count_max_sum_subarrays([1, -2, 3, 4, -5]) == 2",
        "assert count_max_sum_subarrays([-1, 2, 3, -4, 5]) == 3",
        "assert count_max_sum_subarrays([-2, -1, -3]) == 0",
        "assert count_max_sum_subarrays([1, 2, 3, 4, 5]) == 1"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}