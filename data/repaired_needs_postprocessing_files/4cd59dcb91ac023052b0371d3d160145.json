{
    "title": "Hard: Maximum Subarray Sum with Limited Operations",
    "description": "You are given an array of integers `nums` and a positive integer `k`. You can perform at most `k` operations on the array. In each operation, you can choose one element from the array and increment it by 1. Your task is to find the maximum possible sum of any contiguous subarray within the array after performing at most `k` operations.\n#### Function Signature\n```pythonndef max_subarray_sum(nums: list[int], k: int) -> int:\n```\n#### Input\n- `nums` (list of integers): The input array.\n- `k` (integer): The maximum number of operations allowed.\n#### Output\n- Returns the maximum possible sum of any contiguous subarray after performing at most `k` operations.\n",
    "code": "def max_subarray_sum(nums: list[int], k: int) -> int:\n    n = len(nums)\n    max_so_far = float('-inf')\n    for i in range(n):\n        current_sum = 0\n        operations_used = 0\n        for j in range(i, n):\n            if operations_used < k:\n                nums[j] += 1\n                operations_used += 1\n            current_sum += nums[j]\n            max_so_far = max(max_so_far, current_sum)\n    return max_so_far",
    "tests": [
        "assert max_subarray_sum([1, 2, 3], 1) == 7",
        "assert max_subarray_sum([-1, -2, -3], 2) == -1",
        "assert max_subarray_sum([1, -2, 0, 3], 2) == 6",
        "assert max_subarray_sum([1, 2, 3, 4, 5], 3) == 18"
    ],
    "model": "gemma2:27b-instruct-q5_K_S-repaired by Llama 3"
}