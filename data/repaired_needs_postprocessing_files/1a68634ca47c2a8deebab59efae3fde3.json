{
    "title": "Anagram Finder (Hard)",
    "description": "Write a function `find_anagrams` that finds all anagrams of a given string within another string. An anagram is a word or phrase formed by rearranging the letters of another.\n\n#### Function Signature\n```python\ndef find_anagrams(haystack: str, needle: str) -> list:\n``` \n\n#### Input\n- `haystack` (str): A longer string that contains multiple words or phrases separated by spaces.\n- `needle` (str): A shorter string that is an anagram of a word or phrase in the `haystack`.\n\n#### Output\n- Returns a list of all indices where the anagram of `needle` appears in `haystack`, sorted in ascending order. If no anagram is found, returns an empty list.\n",
    "code": "def find_anagrams(haystack: str, needle: str) -> list:\n    # Convert both strings to sets for easy comparison\n    haystack_set = set(haystack.lower())\n    needle_set = set(needle.lower())\n    \n    # Check if the frequency of letters in `needle` matches with any substring in `haystack`\n    anagrams = []\n    for i, substring in enumerate(haystack_set):\n        if needle_set.issubset(substring):\n            start_index, end_index = haystack.find(substring), haystack.find(substring) + len(substring)\n            anagrams.append((start_index, end_index))\n    \n    # Sort the results by their starting indices\n    return sorted(anagrams)",
    "tests": [
        "assert find_anagrams('hello world hello anagram example', 'ello') == [2, 7]",
        "assert find_anagrams('apple earth apple', 'leap') == [1, 6]"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}