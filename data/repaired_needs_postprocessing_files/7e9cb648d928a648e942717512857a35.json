{
    "title": "Pythonic Anagram Finder (Hard)",
    "description": "An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a function `find_anagrams` that finds all the anagrams of a given string.\n#### Function Signature\n```python\ndef find_anagrams(s: str) -> list[str]:\n``` \n\n#### Input\n- `s` (str): A string containing only lowercase letters and possibly whitespace.\n#### Output\n- Returns a list of strings, each of which is an anagram of the input string. If there are no anagrams, the function should return an empty list.\n",
    "code": "def find_anagrams(s: str) -> list[str]:\n    # Remove whitespace and convert to a set\n    s = set(s.strip().lower())\n    # Create an empty dictionary to store counts of each character\n    count_dict = {char: 0 for char in string.ascii_lowercase}\n    \n    # Iterate over the characters in the set, incrementing their count in the dictionary\n    for char in s:\n        count_dict[char] += 1\n    \n    # Create an empty list to store the anagrams\n    anagrams = []\n    \n    # Iterate over all possible permutations of the lowercase alphabet\n    for perm in itertools.permutations(string.ascii_lowercase):\n        # If the sum of counts matches the number of characters in the current permutation,\n        # and if the permutation itself is a valid anagram, add it to the list of anagrams\n        if sum(count_dict[char] for char in perm) == len(perm) and perm.issubset(s):\n            new_count_dict = {char: count - 1 if char in count_dict else 0 for char, count in zip(perm, count_dict.values())}\n            anagram = ''.join(perm)\n            if all(new_count_dict[char] >= 0 for char in new_count_dict):\n                anagrams.append(anagram)\n    \n    return anagrams",
    "tests": [
        "assert find_anagrams('listen') == ['silent', 'enlist']",
        "assert find_anagrams('implementation') == ['implementations', 'implements']",
        "assert find_anagrams('python') == []"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}