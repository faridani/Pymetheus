{
    "title": "Medium: Coin Change Problem",
    "description": "You are given an integer amount representing the total amount of money and a list of unique integers denominations representing the available coin denominations. Write a function `coin_change` that returns the fewest number of coins needed to make up that amount, or -1 if it is not possible to make up that amount using the given coin denominations.\n\n#### Function Signature\n```python\ndef coin_change(amount: int, coins: List[int]) -> int:\n```\n\n#### Input\n- `amount` (int): The total amount of money to make up.\n- `coins` (List[int]): A list of unique integers representing the available coin denominations.\n\n#### Output\n- Returns an integer representing the fewest number of coins needed to make up that amount, or -1 if it is not possible to make up that amount using the given coin denominations.",
    "code": "from typing import List\ndef coin_change(amount: int, coins: List[int]) -> int:\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n\n    for coin in coins:\n        for x in range(coin, amount + 1):\n            dp[x] = min(dp[x], dp[x - coin] + 1)\n\n    return dp[amount] if dp[amount] != float('inf') else -1",
    "tests": [
        "assert coin_change(11, [1, 2, 5]) == 3",
        "assert coin_change(3, [2]) == -1",
        "assert coin_change(0, [1, 2, 5]) == 0"
    ],
    "model": "codestral:22b-repaired by Llama 3"
}