{
    "title": "Hard: Graph Coloring with Constraints",
    "description": "Graph coloring is the process of assigning colors to elements of a graph such that no two adjacent elements have the same color. You are given an undirected graph and a list of colors. Write a function `graph_coloring` that checks if it's possible to color the vertices of this graph using these colors under the constraint that no two adjacent vertices can have the same color.\n\n#### Function Signature\n```python\ndef graph_coloring(G: list[list[int]], colors: list[str]) -> bool:\n```\n\n#### Input\n- `G` (list[list[int]]): A 2D array where the length of the outer list is the number of vertices in the graph, and each inner list contains the indices of the adjacent vertices. For example, `[1], [0, 2], [1]` represents a graph with three vertices and two edges: `(0, 1)` and `(1, 2).`\n- `colors` (list[str]): A list of distinct colors that can be used for coloring the vertices.\n\n#### Output\n- Returns `True` if it's possible to color the graph using these colors under the given constraint, `False` otherwise.",
    "code": "def graph_coloring(G: list[list[int]], colors: list[str]) -> bool:\n    color = [-1] * len(G)\n\ndef is_safe(v: int, c: str) -> bool:\n        for i in range(len(G)):\n            if G[v][i] and color[i] == c:\n                return False\n        return True\n\ndef graph_coloring_util(m: int) -> bool:\n    if m == len(G):\n        return True\n    for i in range(len(colors)):\n        if is_safe(m, colors[i]):\n            color[m] = colors[i]\n            if graph_coloring_util(m + 1):\n                return True\n            color[m] = -1\n    return False\n    return graph_coloring_util(0)",
    "tests": [
        "assert graph_coloring([[1], [0, 2], [1]], ['red', 'green', 'blue']) == True",
        "assert graph_coloring([[1], [0, 2], [1]], ['red', 'red', 'red']) == False",
        "assert graph_coloring([[1, 2, 3], [0, 2, 3], [0, 1, 3], [0, 1, 2]], ['red', 'green', 'blue', 'yellow']) == True"
    ],
    "model": "codestral:22b-repaired by Llama 3"
}