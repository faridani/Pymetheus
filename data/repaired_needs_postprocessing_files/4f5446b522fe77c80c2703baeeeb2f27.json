{
    "title": "Longest Increasing Subsequence",
    "description": "Given an unsorted array of integers, find the length of the longest increasing subsequence (LIS). A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. An increasing subsequence doesn't have to be contiguous.",
    "code": "from typing import List\n\ndef longest_increasing_subsequence(nums: List[int]) -> int:\n    if not nums:\n        return 0\n    # Initialize dp array with 1s for each element\n    dp = [1] * len(nums)\n    # Iterate through the list to find the LIS ending at each index\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
    "tests": [
        "assert longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4",
        "assert longest_increasing_subsequence([-1, -6, -3, 5, 3]) == 2",
        "assert longest_increasing_subsequence([1, 2, 3, 4, 5, 6]) == 6",
        "assert longest_increasing_subsequence([8, 9, 2, 5, 3, 7, 101, 18]) == 3"
    ],
    "model": "qwen2:7b-repaired by Llama 3"
}