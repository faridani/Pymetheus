{
    "title": "Hard: Word Ladder",
    "description": "Given two words, beginWord and endWord, and a dictionary wordList, return the length of the shortest transformation sequence from beginWord to endWord, such that:\n- Only one letter can be changed at a time.\n- Each transformed word must exist in the wordList.\nReturn 0 if there is no such transformation sequence.\n#### Function Signature\n```python\ndef ladderLength(beginWord: str, endWord: str, wordList: list[str]) -> int:\n```\n#### Input\n- `beginWord` (str): The starting word.\n- `endWord` (str): The target word.\n- `wordList` (list[str]): A list of valid words for the transformation.\n#### Output\n- Returns an integer representing the length of the shortest transformation sequence, or 0 if no such sequence exists.",
    "code": "from collections import deque\ndef ladderLength(beginWord: str, endWord: str, wordList: list[str]) -> int:\n    if endWord not in wordList:\n        return 0\n    wordList = set(wordList)\n    queue = deque([(beginWord, 1)])\n    visited = {beginWord}\n\n    while queue:\n        word, length = queue.popleft()\n\n        if word == endWord:\n            return length\n\n        for i in range(len(word)):\n            for ch in 'abcdefghijklmnopqrstuvwxyz':\n                new_word = word[:i] + ch + word[i+1:]\n                if new_word in wordList and new_word not in visited:\n                    queue.append((new_word, length + 1))\n                    visited.add(new_word)\n\n    return 0",
    "tests": [
        "assert ladderLength('hit', 'cog', ['hot', 'dot', 'dog', 'lot', 'log', 'cog']) == 5",
        "assert ladderLength('hit', 'cog', ['hot', 'dot', 'dog', 'lot', 'log']) == 0"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}