{
    "title": "Minimum Window Substring",
    "description": "Write a function `min_window_substring` that finds the minimum window substring within a given string `s`, that contains all the characters of another string `t`. The search is case-sensitive and does not wrap around to the start of the string if the end of the string is reached. If no such window exists, return an empty string.\n\n#### Function Signature\n```python\ndef min_window_substring(s: str, t: str) -> str:\n``` \n\n#### Input\n- `s` (str): The string to search within.\n- `t` (str): The string that must be contained within the minimum window substring of `s`.\n\n#### Output\n- Returns a string representing the minimum window substring of `s`, that contains all characters of `t`. If no such window exists, return an empty string.\n",
    "code": "from collections import defaultdict\ndef min_window_substring(s: str, t: str) -> str:\n    # Create a dictionary to store the frequency of each character in string t\n    t_freq = defaultdict(int)\n    for char in t:\n        t_freq[char] += 1\n\n    # Initialize variables to keep track of the minimum window substring\n    min_window = \"\"\n    min_len = float('inf')\n\n    # Initialize variables to keep track of the current window substring\n    left = 0\n    formed = 0\n\n    # Create a dictionary to store the frequency of each character in the current window substring\n    window_freq = defaultdict(int)\n\n    for right, char in enumerate(s):\n        # Increment the frequency of the current character in the window substring\n        window_freq[char] += 1\n\n        # If the current character is in string t and its frequency in the window substring is less than or equal to its frequency in string t,\n        # increment the formed variable, which keeps track of how many characters of string t have been formed in the window substring.\n        if char in t_freq and window_freq[char] <= t_freq[char]:\n            formed += 1\n\n        # While the current window substring contains all characters of string t, try to minimize the window substring by moving the left pointer to the right.\n        while formed == len(t):\n            # If the length of the current window substring is less than the minimum length found so far, update the minimum window substring and its length.\n            if right - left + 1 < min_len:\n                min_window = s[left:right+1]\n                min_len = right - left + 1\n\n            # Decrement the frequency of the character at the left pointer in the window substring\n            window_freq[s[left]] -= 1\n\n            # If the frequency of the character at the left pointer is less than its frequency in string t, decrement the formed variable.\n            if s[left] in t_freq and window_freq[s[left]] < t_freq[s[left]]:\n                formed -= 1\n\n            # Move the left pointer to the right\n            left += 1\n\n    # Return the minimum window substring found, or an empty string if no such window exists.\n    return min_window",
    "tests": [
        "assert min_window_substring(\"ADOBECO\", \"ABC\") == \"BCA\"",
        "assert min_window_substring(\"a\", \"a\") == \"a\"",
        "assert min_window_substring(\"bba\", \"ab\") == \"ba\"",
        "assert min_window_substring(\"abc\", \"def\") == \"\""
    ],
    "model": "llama3.1:8b-repaired by Llama 3"
}