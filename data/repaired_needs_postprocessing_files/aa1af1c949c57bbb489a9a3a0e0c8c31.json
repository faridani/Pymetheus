{
    "title": "Counting Substrings",
    "description": "Given a string `s` and an integer `k`, write a function that counts the number of substrings in `s` with exactly `k` unique characters. A substring is a contiguous sequence of characters within the original string.\n\n#### Function Signature\n```def count_substrings(s: str, k: int) -> int:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, and special characters.\n- `k` (int): An integer that represents the number of unique characters in a substring.\n\n#### Output\n- Returns an integer representing the number of substrings with exactly `k` unique characters.\n\n#### Hints\n* You can use a dictionary to keep track of character frequencies.\n* Iterate over the string and update the dictionary accordingly.\n* Use the dictionary to check for the presence of `k` unique characters in each substring.",
    "code": "def count_substrings(s: str, k: int) -> int:\n    char_freq = {}\n    substrings = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            freq = {}\n            for char in substring:\n                if char not in freq:\n                    freq[char] = 1\n                else:\n                    freq[char] += 1\n            unique_chars = sum(1 for count in freq.values() if count == 1)\n            if unique_chars == k:\n                substrings += 1\n    return substrings",
    "tests": [
        "assert count_substrings('abcabc', 2) == 6",
        "assert count_substrings('aabbaabb', 3) == 4",
        "assert count_substrings('abccba', 2) == 7",
        "assert count_substrings('', 1) == 0"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}