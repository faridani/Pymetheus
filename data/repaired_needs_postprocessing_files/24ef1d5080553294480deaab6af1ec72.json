{
    "title": "Prime Factorization\n(Medium)",
    "description": "Write a function `prime_factors` that takes an integer as input and returns a list of prime numbers that are factors of the given number.\n\n#### Function Signature\n```python\ndef prime_factors(n: int) -> List[int]:\n```\n\n#### Input\n- `n` (int): A positive integer greater than 1.\n\n#### Output\n- Returns a list of prime numbers that are factors of the input number, sorted in descending order.\n",
    "code": "def prime_factors(n: int) -> List[int]:\n    # Initialize an empty list for prime factors\n    prime_factors = []\n    # Loop from 2 to the square root of the number\n    i = 2\n    while i * i <= n:\n        # If the number is divisible by i, add it to the list of prime factors and continue with the next factor\n        if n % i == 0:\n            prime_factors.append(i)\n            n //= i\n        else:\n            # Increment i\n            i += 1\n    \n    # If there is a remainder after the loop, it means there are more factors that are greater than the square root of the number.\n    # Add these prime factors to the list\n    if n > 1:\n        for i in range(n, 2, -2):\n            if n % i == 0:\n                prime_factors.append(i)\n    \n    return prime_factors",
    "tests": [
        "assert prime_factors(1) == []",
        "assert prime_factors(2) == [2]",
        "assert prime_factors(4) == [2, 2]",
        "assert prime_factors(7) == [7]",
        "assert prime_factors(8) == [2, 2, 2]",
        "assert prime_factors(15) == [3, 5]",
        "assert prime_factors(17) == [17]",
        "assert prime_factors(243) == [3, 3, 3, 7]",
        "assert prime_factors(600851475143) == [2, 3, 5, 7, 11, 13, 17, 19, 31, 37, 41, 61]"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}