{
    "title": "Hard - Count Inversions",
    "description": "An inversion in an array is a pair of indices (i, j) where i < j and arr[i] > arr[j]. Given an array of integers, write a function `count_inversions` that returns the total number of inversions in the array.\n\n#### Function Signature\n```python\ndef count_inversions(arr: list[int]) -> int:\n```\n\n#### Input\n- `arr` (list[int]): A list of integers.\n\n#### Output\n- Returns the total number of inversions in the array.",
    "code": "def count_inversions(arr: list[int]) -> int:\n    n = len(arr)\n    if n <= 1:\n        return 0\n    mid = n // 2\n    left_arr = arr[:mid]\n    right_arr = arr[mid:]\n    inversions = count_inversions(left_arr) + count_inversions(right_arr)\n    i = j = k = 0\n    while i < len(left_arr) and j < len(right_arr):\n        if left_arr[i] <= right_arr[j]:\n            arr[k] = left_arr[i]\n            i += 1\n        else:\n            arr[k] = right_arr[j]\n            j += 1\n            inversions += len(left_arr) - i\n        k += 1\n    while i < len(left_arr):\n        arr[k] = left_arr[i]\n        i += 1\n        k += 1\n    while j < len(right_arr):\n        arr[k] = right_arr[j]\n        j += 1\n        k += 1\n    return inversions",
    "tests": [
        "assert count_inversions([2, 4, 1, 3, 5]) == 3",
        "assert count_inversions([1, 2, 3, 4, 5]) == 0",
        "assert count_inversions([5, 4, 3, 2, 1]) == 10"
    ],
    "model": "gemma2:27b-instruct-q5_K_S-repaired by Llama 3"
}