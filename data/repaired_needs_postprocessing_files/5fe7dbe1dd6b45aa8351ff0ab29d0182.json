{
    "title": "Anagram Finder (Hard)",
    "description": "Write a function `find_anagrams` that finds all the anagrams of a given string within a list of strings.\n#### Function Signature\n```python\ndef find_anagrams(word: str, words: List[str]) -> List[str]:\n``` \n\n#### Input\n- `word` (str): The word to search for anagrams of.\n- `words` (List[str]): A list of strings that may contain multiple occurrences of anagrams, spaces, and punctuation.\n\n#### Output\n- Returns a list of strings that are anagrams of the input word. If no anagrams are found within the given words, returns an empty list.\n",
    "code": "import collections\ndef find_anagrams(word: str, words: List[str]) -> List[str]:\n    # Create a dictionary of character counts for the input word\n    word_count = collections.Counter(word)\n    # Initialize an empty list to store the found anagrams\n    anagrams = []\n    \n    # Iterate through each word in the given words\n    for w in words:\n        # Create a dictionary of character counts for the current word\n        w_count = collections.Counter(w)\n        \n        # Check if both dictionaries have the same total count (indicating they have the same characters)\n        if sum(word_count.values()) == sum(w_count.values()):\n            # If so, compare the dictionary keys to see if they can be rearranged to form the input word\n            if word_count == collections.Counter(w):\n                anagrams.append(w)\n    \n    return anagrams",
    "tests": [
        "assert find_anagrams(\"listen\", [\"silent\", \"enlist\", \"service\", \"station\"]) == [\"enlist\", \"silent\"]",
        "assert find_anagrams(\"cat\", [\"act\", \"acta\", \"tac\"]) == [\"act\", \"tac\"]",
        "assert find_anagrams(\"hello\", [\"world\", \"olleh\"]) == []"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}