{
    "title": "Hard: Longest Increasing Subsequence",
    "description": "Given an array of integers, find the length of the longest increasing subsequence. A subsequence is a sequence of numbers that are not necessarily contiguous but are all from the same array. For example, in the array [1, 3, 2, 4, 5], the longest increasing subsequence is [1, 2, 4, 5] and its length is 4.\n#### Function Signature\n```python\ndef longest_increasing_subsequence(nums: list[int]) -> int:\n``` \n#### Input\n- `nums` (list[int]): A list of integers.\n#### Output\n- Returns the length of the longest increasing subsequence.",
    "code": "def longest_increasing_subsequence(nums: list[int]) -> int:\n    n = len(nums)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] > nums[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)",
    "tests": [
        "assert longest_increasing_subsequence([1,3,2,4,5]) == 4",
        "assert longest_increasing_subsequence([1,2,3,4,5]) == 5",
        "assert longest_increasing_subsequence([5,4,3,2,1]) == 1",
        "assert longest_increasing_subsequence([10,9,2,5,3,7,101,18]) == 4"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}