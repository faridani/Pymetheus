{
    "title": "Hard: Tree Traversals",
    "description": "Given a binary tree, write a function that performs both pre-order and post-order traversals. The function should return two lists: one for the pre-order traversal and one for the post-order traversal.\n\n#### Function Signature\n```python\ndef traverse_tree(root: Node) -> (list, list):\n``` \n\n#### Input\n- `root` (Node): The root node of the binary tree. Each node has a value and two children (left and right).\n\n#### Output\n- Returns two lists:\n  - The first list contains the nodes in pre-order traversal.\n  - The second list contains the nodes in post-order traversal.\n",
    "code": "class Node:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\ndef traverse_tree(root: Node) -> (list, list):\n    pre_order_traversal = []\n    post_order_traversal = []\n\n    def pre_order(node, traversal_list):\n        if node is None:\n            return\n        traversal_list.append(node.value)\n        pre_order(node.left, traversal_list)\n        pre_order(node.right, traversal_list)\n\n    def post_order(node, traversal_list):\n        if node is None:\n            return\n        post_order(node.left, traversal_list)\n        post_order(node.right, traversal_list)\n        traversal_list.append(node.value)\n\n    pre_order(root, pre_order_traversal)\n    post_order(root, post_order_traversal)\n    return (pre_order_traversal, post_order_traversal)",
    "tests": [
        "assert traverse_tree(Node(1, Node(2), Node(3))) == ([1, 2, 3], [3, 2, 1])",
        "assert traverse_tree(Node('a', Node('b'), Node('c'))) == (['a', 'b', 'c'], ['c', 'b', 'a'])"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}