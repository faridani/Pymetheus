{
    "title": "Easiest Pizza Topping Combination",
    "description": "Write a function that takes an integer `n` representing the number of toppings and returns the combination of toppings with the highest total score. The available toppings are represented by lowercase English letters from 'a' to 'z'. Each topping has a unique score, which is stored in a dictionary `toppings`. For example, if `n` is 3 and `toppings` is {'a': 5, 'b': 4, 'c': 3}, then the function should return 'abc' as it has the highest total score of 12. If there are multiple combinations with the same maximum total score, you can return any one of them.\n\n#### Function Signature\n```python\ndef best_topping_combination(n: int) -> str:\n```\n\n#### Input\n- `n` (int): The number of toppings to select.\n- `toppings` (dict): A dictionary where the keys are the topping names and the values are their respective scores.\n\n#### Output\n- Returns a string representing the combination of toppings with the highest total score.",
    "code": "def best_topping_combination(n: int, toppings: dict) -> str:\n    best_score = 0\n    best_combination = ''\n    for i in range(1 << n):\n        score = 0\n        combination = ''\n        for j in range(n):\n            if (i & (1 << j)):\n                score += toppings[chr(ord('a') + j)]\n                combination += chr(ord('a') + j)\n        if score > best_score:\n            best_score = score\n            best_combination = combination\n    return best_combination",
    "tests": [
        "assert best_topping_combination(3, {'a': 5, 'b': 4, 'c': 3}) == 'abc'",
        "assert best_topping_combination(2, {'x': 10, 'y': 8}) == 'xy'",
        "assert best_topping_combination(1, {'z': 20}) == 'z'",
        "assert best_topping_combination(4, {'a': 5, 'b': 4, 'c': 3, 'd': 2}) == 'abcd'"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}