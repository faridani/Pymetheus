{
    "title": "Maximum Sum of a Subarray (Hard)",
    "description": "Given an array of integers, write a function that finds the maximum sum of a contiguous subarray within one swap.\n\n#### Function Signature```python\ndef max_sum_subarray(arr: list[int)) -> int:\n``` \n\n#### Input\n- `arr` (list[int]): A list of integers.\n\n#### Output\n- Returns the maximum sum of a contiguous subarray within one swap. If there are multiple such sums, return any one of them.\n",
    "code": "def max_sum_subarray(arr: list[int]) -> int:\n    n = len(arr)\n    if n < 3:\n        return max(arr)\n\n    dp1 = [0] * (n + 1)\n    dp2 = [0] * (n + 1)\n\n    for i in range(1, n):\n        dp1[i] = max(dp1[i - 1] + arr[i], arr[i])\n    for i in range(n):\n        dp2[i] = max(dp2[i + 1] + arr[i], arr[i])\n\n    res = float('-inf')\n    for i in range(1, n - 1):\n        res = max(res, dp1[i - 1] + arr[i] + dp2[i + 1])\n    return res",
    "tests": [
        "assert max_sum_subarray([-10, 0, 3, 4, -5]) == 6",
        "assert max_sum_subarray([1, 2, 3, 4, 5]) == 15",
        "assert max_sum_subarray([-10, -20, 30, 40]) == 50",
        "assert max_sum_subarray([0, 0, 0, 0]) == 0"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}