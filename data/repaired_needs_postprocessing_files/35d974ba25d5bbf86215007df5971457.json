{
    "title": "Minimum Path Sum in Matrix (Hard)",
    "description": "Given a 2D matrix filled with non-negative integers, find the minimum path sum from top to bottom. You can only move either down or right at any point in time.\n\n#### Function Signature\n```python\ndef min_path_sum(matrix: list[list[int]]) -> int:\n```\n\n#### Input\n- `matrix` (list[list[int]]): A 2D matrix filled with non-negative integers.\n\n#### Output\n- Returns the minimum path sum from top to bottom.",
    "code": "import heapq\ndef min_path_sum(matrix: list[list[int]]) -> int:\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n    pq = [(matrix[0][0], 0, 0)]  # Start at the top-left corner\n    memo = {}\n    while pq:\n        val, row, col = heapq.heappop(pq)\n        if (row, col) not in memo:\n            memo[(row, col)] = val\n            if row < num_rows - 1:  # Can go down\n                heapq.heappush(pq, (val + matrix[row+1][col], row+1, col))\n            if col < num_cols - 1:  # Can go right\n                heapq.heappush(pq, (val + matrix[row][col+1], row, col+1))\n    return memo[(num_rows-1, num_cols-1)]",
    "tests": [
        "assert min_path_sum([[1,3,1],[1,5,1],[4,2,1]]) == 7",
        "assert min_path_sum([[2]] * 10) == 2",
        "assert min_path_sum([[1,2,3,4], [5,6,7,8], [9,10,11,12]]) == 30"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}