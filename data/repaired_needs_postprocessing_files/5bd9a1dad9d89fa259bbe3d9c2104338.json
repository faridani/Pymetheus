{
    "title": "Hard: Longest Increasing Subsequence with Rotations",
    "description": "Given a list of integers `nums`, find the length of the longest increasing subsequence (LIS) you can obtain by performing zero or more rotations on the list.\n\n#### Function Signature\n```python\ndef longest_increasing_subsequence_with_rotations(nums: list[int]) -> int:\n```\n#### Input\n- `nums` (list[int]): A list of integers.\n\n#### Output\n- Returns the length of the longest increasing subsequence after any number of rotations.\n\n#### Constraints\n- 1 <= len(nums) <= 10^5\n- -10^4 <= nums[i] <= 10^4\n\n#### Hints:\nThink about how rotations affect subsequences. Consider using dynamic programming and explore all possible rotation points.",
    "code": "def longest_increasing_subsequence_with_rotations(nums: list[int]) -> int:\n    n = len(nums)\n    dp = [[1] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[(j - i) % n] > nums[i]:\n                dp[i][j] = dp[i][j - 1] + 1\n    return max([max(row) for row in dp])",
    "tests": [
        "assert longest_increasing_subsequence_with_rotations([1, 2, 3, 4]) == 4",
        "assert longest_increasing_subsequence_with_rotations([4, 3, 2, 1]) == 1",
        "assert longest_increasing_subsequence_with_rotations([5, 4, 3, 2, 1]) == 1",
        "assert longest_increasing_subsequence_with_rotations([1, 3, 2, 4]) == 3",
        "assert longest_increasing_subsequence_with_rotations([10, 9, 2, 5, 3, 7, 101, 18]) == 4"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}