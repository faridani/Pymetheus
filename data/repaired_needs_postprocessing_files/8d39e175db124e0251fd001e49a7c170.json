{
    "title": "'Palindromes with Special Characters (Easy)'",
    "description": "In this problem, you will write a function `is_palindrome` that checks if a given string is a palindrome, taking into account that it may contain spaces and punctuation. Note that only alphabetic characters and digits are considered when checking the palindrome property.\n\n#### Function Signature\n```python\ndef is_palindrome(s: str) -> bool:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, punctuation and any other special characters.\n\n#### Output\n- Returns `True` if the input string, after removing non-alphanumeric characters, is a palindrome, `False` otherwise.",
    "code": "import re\ndef is_palindrome(s: str) -> bool:\n    # Remove all non-alphanumeric characters from the string\n    s = re.sub('[^a-zA-Z0-9]', '', s)\n    # Check if the cleaned string reads the same forwards and backwards\n    return s == s[::-1]\n",
    "tests": [
        "assert is_palindrome(\"A man, a plan, a canal: Panama\") == True",
        "assert is_palindrome(\"racecar\") == True",
        "assert is_palindrome(\"hello\") == False",
        "assert is_palindrome(\"No 'x' in Nixon\") == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}