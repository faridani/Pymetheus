{
    "title": "Hard - Fractal Sequence Generator",
    "description": "#### Function Signature\n```python\ndef generate_fractal(n: int) -> str:\n``` \n#### Description\nA fractal sequence is a sequence where each term is generated based on the previous terms. For this problem, we will define a specific fractal sequence as follows:\n\n* The first term is \"A\".\n* Subsequent terms are generated by taking the previous term and replacing every instance of \"A\" with \"AB\", every instance of \"B\" with \"BA\".\n#### Input\n- `n` (int):  The desired length of the fractal sequence.\n#### Output\n- Returns a string representing the `n`th term of the fractal sequence.\n**Constraints:** \n* 1 <= n <= 20\n#### Example\n```python\ngenerate_fractal(1) == 'A'\ngenerate_fractal(2) == 'AB'\ngenerate_fractal(3) == 'BAB'\ngenerate_fractal(4) == 'ABBAAAB'\n```",
    "code": "def generate_fractal(n: int) -> str:\n    sequence = 'A'\n    for _ in range(1, n):\n        sequence = sequence.replace('A', 'AB').replace('B', 'BA')\n    return sequence",
    "tests": [
        "assert generate_fractal(1) == 'A'",
        "assert generate_fractal(2) == 'AB'",
        "assert generate_fractal(3) == 'BAB'",
        "assert generate_fractal(4) == 'ABBAAAB'",
        "assert generate_fractal(5) == 'BBAABBABABA'"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}