{
    "title": "Hard - Flatten Nested Dictionary",
    "description": "You are given a nested dictionary where keys can be strings or integers and values can also be dictionaries. Write a function `flatten_dict` that takes this nested dictionary as input and returns a flattened dictionary where all keys are strings in the format 'key1.key2...keyN' representing the path from the root to the value.\n\n#### Function Signature\n```python\ndef flatten_dict(nested_dict: dict) -> dict:\n```\n\n#### Input\n- `nested_dict` (dict): A nested dictionary with string and integer keys.\n\n#### Output\n- Returns a flattened dictionary where keys are strings in the format 'key1.key2...keyN' representing the path from the root to the value.",
    "code": "def flatten_dict(nested_dict: dict) -> dict:\n    flattened_dict = {}\n\n    def flatten_helper(d, key_prefix=None):\n        for k, v in d.items():\n            if key_prefix is None:\n                current_key = str(k)\n            else:\n                current_key = f'{key_prefix}.{k}'\n            if isinstance(v, dict):\n                flatten_helper(v, current_key)\n            else:\n                flattened_dict[current_key] = v\n    flatten_helper(nested_dict)\n    return flattened_dict",
    "tests": [
        "assert flatten_dict({'a': 1, 'b': {'c': 2, 'd': {'e': 3}}}) == {'a': 1, 'b.c': 2, 'b.d.e': 3}",
        "assert flatten_dict({'x': 5, 'y': {'z': 6}}) == {'x': 5, 'y.z': 6}"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}