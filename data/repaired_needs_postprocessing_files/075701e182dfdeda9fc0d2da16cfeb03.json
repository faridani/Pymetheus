{
    "title": "Hard: Maximum Profit",
    "description": "A company has a set of tasks to be done, each with a certain duration and a corresponding profit. Write a function `max_profit` that takes as input a list of tasks and returns the maximum possible profit that can be earned if the tasks are completed in any order.\n\n#### Function Signature\n```python\ndef max_profit(tasks: List[Dict[str, int]]) -> int:\n``` \n\n#### Input\n- `tasks` (List[Dict[str, int]]): A list of dictionaries, where each dictionary contains two keys: `duration` and `profit`. The values for these keys are integers representing the time required to complete the task and the profit earned after completing the task, respectively.\n\n#### Output\n- Returns an integer representing the maximum possible profit that can be earned if the tasks are completed in any order.\n",
    "code": "from typing import List, Dict\n\ndef max_profit(tasks: List[Dict[str, int]]) -> int:\n    # Sort tasks by duration in descending order\n    tasks.sort(key=lambda x: x['duration'], reverse=True)\n    total_profit = 0\n    remaining_time = 24  # Assuming a day has 24 hours\n    for task in tasks:\n        if task['duration'] <= remaining_time:\n            total_profit += task['profit'] - task['profit'] // (task['duration'] + 1)\n            remaining_time -= task['duration'] + 1\n        else:\n            break\n    return total_profit",
    "tests": [
        "assert max_profit([{'duration': 2, 'profit': 3}, {'duration': 4, 'profit': 5}]) == 8",
        "assert max_profit([{'duration': 10, 'profit': 15}, {'duration': 5, 'profit': 6}, {'duration': 2, 'profit': 1}]) == 16",
        "assert max_profit([{'duration': 3, 'profit': 4}, {'duration': 2, 'profit': 1}, {'duration': 4, 'profit': 7}]) == 10"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}