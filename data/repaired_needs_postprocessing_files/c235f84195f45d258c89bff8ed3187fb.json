{
    "title": "'Palindromic Anagram Finder (Medium)'",
    "description": "Write a function `find_palindromes` that finds all the palindromic anagrams of a given string. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). An anagram is a word or phrase formed by rearranging the letters of another word or phrase.\n\n#### Function Signature\n```python\ndef find_palindromes(s: str) -> list[str]:\n``` \n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns a list of strings, where each string is a palindrome that can be formed by rearranging the characters in the input string. For example, if the input is 'racecar', the output will be ['acecar', 'carrace']. If no such palindromes exist, the function should return an empty list.\n",
    "code": "import itertools\ndef find_palindromes(s: str) -> list[str]:\n    # Remove non-alphanumeric characters\n    s = ''.join(char for char in s if char in string.ascii_letters + string.digits)\n    # Find all possible permutations of the characters\n    perms = [sorted(''.join(perm)) for perm in itertools.permutations(s)]\n    # Filter out palindromes and return them\n    return [perm for perm in perms if perm == reversed(perm)]",
    "tests": [
        "assert find_palindromes('racecar') == ['acecar', 'carrace']",
        "assert find_palindromes('amanaplanacanalpanama') == ['amanaman', 'alanala', 'yanamana', 'kayak']",
        "assert find_palindromes('hello') == []"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}