{
    "title": "Anagram Checker (Hard)",
    "description": "An anagram is a word or phrase formed by rearranging the letters of another word or phrase, typically using all the original letters exactly once. Write a function `anagram_checker` that checks if two given strings are anagrams of each other.\r\n\r\n#### Function Signature\r\n```\ndef anagram_checker(str1: str, str2: str) -> bool:\r\n```\r\n\r\n#### Input\r\n- `str1` (str): A string that may contain letters in any case and without spaces or punctuation.\r\n- `str2` (str): Another string that may contain letters in any case and without spaces or punctuation.\r\n\r\n#### Output\r\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.",
    "code": "def anagram_checker(str1: str, str2: str) -> bool:\r\n    # Remove spaces and punctuation\r\n    s1 = ''.join(char for char in str1 if char.isalnum())\r\n    s2 = ''.join(char for char in str2 if char.isalnum())\r\n    # Sort the letters in both strings\r\n    sorted_s1 = sorted(list(s1))\r\n    sorted_s2 = sorted(list(s2))\r\n    # Check if the sorted lists are equal\r\n    return sorted_s1 == sorted_s2",
    "tests": [
        "assert anagram_checker(\"listen\", \"silent\") == True",
        "assert anagram_checker(\"apple\", \"peelap\") == True",
        "assert anagram_checker(\"python\", \"typhon\") == False"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}