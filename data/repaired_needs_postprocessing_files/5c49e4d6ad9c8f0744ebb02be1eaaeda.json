{
    "title": "Number of Islands II",
    "description": "Write a function `num_islands` that takes a 2D list `grid` as input, where `grid[i][j]` is either `0` (representing water) or `1` (representing land). The function should return the number of islands in the grid.\n\n#### Function Signature\n```python\ndef num_islands(grid: List[List[int]]) -> int:\n```\n\n#### Input\n- `grid` (List[List[int]]): A 2D list representing a grid, where each element is either `0` or `1`, with `0`s representing water and `1`s representing land.\n\n#### Output\n- Returns the number of islands in the grid.\n",
    "code": "import copy\ndef num_islands(grid: List[List[int]]) -> int:\n    if not grid:\n        return 0\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                dfs(grid, i, j)\n                count += 1\n    return count\ndef dfs(grid: List[List[int]], i: int, j: int) -> None:\n    if i<0 or j<0 or i>=len(grid) or j>=len(grid[0]) or grid[i][j] != 1:\n        return\n    grid[i][j] = -1\n    dfs(grid, i+1, j)\n    dfs(grid, i-1, j)\n    dfs(grid, i, j+1)\n    dfs(grid, i, j-1)",
    "tests": [
        "assert num_islands([['0','0','1','0','0'], ['0','0','1','0','0'], ['0','0','1','0','0'], ['0','0','0','0','0']]) == 1",
        "assert num_islands([['1','1','1','1','0'], ['1','1','0','1','0'], ['1','1','1','1','0'], ['0','0','0','0','0']]) == 3",
        "assert num_islands([]) == 0",
        "assert num_islands([['1'],['1']]) == 2"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}