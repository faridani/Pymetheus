{
    "title": "Anagram Detection (Hard)",
    "description": "Write a function `is_anagram` that checks if two given strings are anagrams of each other. Anagram is a word or phrase formed by rearranging the letters of another.\n\n#### Function Signature\n```python\ndef is_anagram(str1: str, str2: str) -> bool:\n``` \n\n#### Input\n- `str1` (str): A string that may contain only lowercase English alphabets.\n- `str2` (str): Another string that may contain only lowercase English alphabets.\n\n#### Output\n- Returns `True` if the input strings can be rearranged to form each other, `False` otherwise.",
    "code": "def is_anagram(str1: str, str2: str) -> bool:\n    # Check if both strings have the same length\n    if len(str1) != len(str2):\n        return False\n    \n    # Count the frequency of each character in the first string and store in a dictionary\n    counts = {char: str1.count(char) for char in set(str1)}\n    \n    # Decrease the count of characters in the second string that are also present in it\n    for char in set(str2):\n        if char in counts:\n            counts[char] -= 1\n        else:\n            return False\n    \n    # If all characters from the second string have been processed and all counts are zero, then the strings are anagrams of each other\n    return all(count == 0 for count in counts.values())",
    "tests": [
        "assert is_anagram('listen', 'silent') == True",
        "assert is_anagram('hello', 'world') == False",
        "assert is_anagram('actors', 'spectators') == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}