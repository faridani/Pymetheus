{
    "title": "'Anagram Detection (Hard)'",
    "description": "An anagram is a word or phrase that consists of the same letters as another word or phrase, but arranged differently. Write a function `is_anagram` that checks if two given strings are anagrams of each other.\n#### Function Signature\n```python\ndef is_anagram(str1: str, str2: str) -> bool:\n``` \n\n#### Input\n- `str1` (str): A string consisting of lowercase letters without any spaces or punctuation.\n- `str2` (str): Another string consisting of lowercase letters without any spaces or punctuation.\n\n#### Output\n- Returns `True` if the two strings are anagrams, `False` otherwise.",
    "code": "import collections\ndef is_anagram(str1: str, str2: str) -> bool:\n    # Ensure both strings have the same length\n    if len(str1) != len(str2):\n        return False\n    \n    # Count the frequency of each character in the first string\n    char_freq = collections.Counter(str1)\n    \n    # Check if the frequency of characters in the second string matches the first string's count\n    for char, freq in char_freq.items():\n        if str2.count(char) != freq:\n            return False\n    \n    # If we have reached this point, the strings are anagrams\n    return True",
    "tests": [
        "assert is_anagram('listen', 'silent') == True",
        "assert is_anagram('act', 'cat') == False",
        "assert is_anagram('python', 'typhon') == False",
        "assert is_anagram('madam', 'amad') == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}