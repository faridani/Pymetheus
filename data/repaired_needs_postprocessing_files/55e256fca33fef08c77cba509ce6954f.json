{
    "title": "Permutation Palindrome",
    "description": "Given a string, check if it can be broken into two palindromes so that each letter in one palindrome appears an odd number of times and the letters in the other palindrome appear an even number of times.\n#### Function Signature\n```python\ndef is_permutation_palindrome(s: str) -> bool:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n#### Output\n- Returns `True` if the input string can be broken into two palindromes as described above, `False` otherwise.",
    "code": "import collections\ndef is_permutation_palindrome(s: str) -> bool:\n    # Count the frequency of each letter in the string\n    count = collections.Counter(s)\n    odd_count = 0\n    for char, freq in count.items():\n        if freq % 2 != 0:\n            odd_count += 1\n    return odd_count <= 1",
    "tests": [
        "assert is_permutation_palindrome('tact coat') == True",
        "assert is_permutation_palindrome('aaaaaaabbbbbb') == False",
        "assert is_permutation_palindrome('hello world') == False",
        "assert is_permutation_palindrome('A man, a plan, a canal, Panama') == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}