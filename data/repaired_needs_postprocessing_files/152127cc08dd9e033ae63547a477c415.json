{
    "title": "Hard: Prime Factorization",
    "description": "Write a function `prime_factors` that returns the prime factorization of a given number. The input will be an integer greater than 1, and the output should be a list of integers representing the prime factors in ascending order.\n\n#### Function Signature\n```python\ndef prime_factors(n: int) -> List[int]:\n``` \n\n#### Input\n- `n` (int): An integer greater than 1.\n\n#### Output\n- Returns a list of integers representing the prime factors in ascending order.\n",
    "code": "from typing import List\n\ndef prime_factors(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors",
    "tests": [
        "assert prime_factors(8) == [2, 2, 2]",
        "assert prime_factors(37) == [37]",
        "assert prime_factors(100) == [2, 2, 5, 5]",
        "assert prime_factors(999) == [3, 3, 3, 37]"
    ],
    "model": "codestral:22b-repaired by Llama 3"
}