{
    "title": "Roman Numerals Conversion",
    "description": "Write a function `convert_to_roman` that converts an integer between 1 and 3999 (inclusive) into a Roman numeral. Write a function `convert_to_roman` that converts an integer between 1 and 3999 (inclusive) into a Roman numeral.\n\n#### Function Signature\n```python\ndef convert_to_roman(number: int) -> str:\n```\n\n#### Input\n- `number` (int): An integer between 1 and 3999 (inclusive).\n\n#### Output\n- Returns a string representing the Roman numeral equivalent of the input integer.\n",
    "code": "def convert_to_roman(number: int) -> str:\n    # Roman numerals for numbers upto 9\n    romans = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX']\n    # Roman numerals for tens, hundreds and thousands\n    tens_romans = ['X', 'XX', 'XXX', 'XL', 'L', 'LX', 'LXX', 'LXXX', 'XC']\n    hundreds_romans = ['C', 'CC', 'CCC', 'CD', 'D', 'DC', 'DCC', 'DCCC', 'CM']\n    thousands_romans = ['M', 'MM', 'MMM']\n    # List to store the Roman numerals for the input integer\n    roman_number = []\n    \n    while number > 0:\n        if number >= 1000:\n            number -= 1000\n            roman_number.append(thousands_romans[number % 10])\n        elif number >= 100:\n            number -= 100\n            roman_number.append(hundreds_romans[number % 10])\n        elif number >= 10:\n            number -= 10\n            tens_romans[number % 10 - 1] + roman_number.append(romans[number // 10] * 10)\n        else:\n            roman_number.append(romans[number])\n            number = 0\n    # Join the list of Roman numerals into a single string and return it.\n    return ''.join(roman_number)",
    "tests": [
        "assert convert_to_roman(1) == 'I'",
        "assert convert_to_roman(3) == 'III'",
        "assert convert_to_roman(4) == 'IV'",
        "assert convert_to_roman(9) == 'IX'",
        "assert convert_to_roman(58) == 'LVIII'",
        "assert convert_to_roman(1994) == 'MCMXCIV'"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}