{
    "title": "Perimeter of Islands",
    "description": "You are given a map of islands as a 2D grid where `0` represents water and `1` represents land. The perimeter of an island is the sum of its border lengths. Write a function `island_perimeter` that calculates the total perimeter of all islands in the given grid.#### Function Signature```pythondef island_perimeter(grid: list[list[int]]) -> int:    if not grid or not grid[0]:        return 0    perimeter = 0    for i in range(len(grid)):        for j in range(len(grid[i])):            if grid[i][j] == 1:                if i == 0 or grid[i-1][j] == 0:                    perimeter += 2                if i == len(grid) - 1 or grid[i+1][j] == 0:                    perimeter += 2                if j == 0 or grid[i][j-1] == 0:                    perimeter += 2                if j == len(grid[0]) - 1 or grid[i][j+1] == 0:                    perimeter += 2    return perimeter",
    "code": "def island_perimeter(grid: list[list[int]]) -> int:\n    if not grid or not grid[0]:        return 0\n    perimeter = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                if i == 0 or grid[i-1][j] == 0:\n                    perimeter += 2\n                if i == len(grid) - 1 or grid[i+1][j] == 0:\n                    perimeter += 2\n                if j == 0 or grid[i][j-1] == 0:\n                    perimeter += 2\n                if j == len(grid[0]) - 1 or grid[i][j+1] == 0:\n                    perimeter += 2\n    return perimeter",
    "tests": [
        "assert island_perimeter([[0, 1], [1, 0]]) == 4",
        "assert island_perimeter([[1, 0, 0], [1, 1, 0], [0, 0, 1]]) == 10",
        "assert island_perimeter([[1, 1, 1], [1, 0, 1], [1, 1, 1]]) == 12",
        "assert island_perimeter([]) == 0"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}