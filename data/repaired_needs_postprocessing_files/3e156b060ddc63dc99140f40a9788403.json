{
    "title": "Anagram Detector (Hard)",
    "description": "Given two strings, write a function `anagram_checker` that checks if the two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n#### Function Signature\n```python\ndef anagram_checker(s1: str, s2: str) -> bool:\n```\n#### Input\n- `s1`, `s2` (str): Two strings that may contain letters and no spaces.\n#### Output\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.",
    "code": "def anagram_checker(s1: str, s2: str) -> bool:\n    # Ensure both strings have the same length\n    if len(s1) != len(s2):\n        return False\n    \n    # Count frequency of each character in each string\n    count_dict1 = {}\n    count_dict2 = {}\n    for char in s1:\n        if char not in count_dict1:\n            count_dict1[char] = 1\n        else:\n            count_dict1[char] += 1\n        if char not in count_dict2:\n            count_dict2[char] = 1\n        else:\n            count_dict2[char] += 1\n    \n    # Check if the frequency of each character is the same in both strings\n    for key, value in count_dict1.items():\n        if count_dict2.get(key, 0) != value:\n            return False\n    \n    # If all characters have the same frequency, the two strings are anagrams\n    return True",
    "tests": [
        "assert anagram_checker(\"listen\", \"silent\") == True",
        "assert anagram_checker(\"act\", \"cat\") == False",
        "assert anagram_checker(\"anagram\", \"nagaram\") == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}