{
    "title": "Hard: Longest Increasing Subsequence with Rotations",
    "description": "Given an array of integers, find the length of the longest increasing subsequence that can be formed by potentially rotating the array. You are allowed to rotate the array any number of times.\n\n#### Function Signature\n```python\ndef longest_increasing_subsequence_with_rotations(nums: list[int]) -> int:\n```\n\n#### Input\n- `nums` (list[int]): A list of integers.\n\n#### Output\n- Returns the length of the longest increasing subsequence that can be formed after rotating the array.",
    "code": "def longest_increasing_subsequence_with_rotations(nums: list[int]) -> int:\n    n = len(nums)\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    # Find the maximum length in the 'dp' array\n    max_length = max(dp)\n\n    return max_length",
    "tests": [
        "'assert longest_increasing_subsequence_with_rotations([1, 2, 3]) == 3'",
        "'assert longest_increasing_subsequence_with_rotations([3, 1, 2]) == 3'",
        "'assert longest_increasing_subsequence_with_rotations([10, 9, 2, 5, 3, 7, 101, 18]) == 4'",
        "'assert longest_increasing_subsequence_with_rotations([1, 1, 1, 1]) == 1'"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}