{
    "title": "Hard: Minimal Path Sum",
    "description": "Find the path from (0, 0) to end point that minimizes the sum of grid values.\n\n#### Function Signature\n```python\ndef minimal_path_sum(grid: List[List[int]]) -> int:\n```\n\n#### Input\n- `grid` (List[List[int]]): A list of lists representing a matrix containing non-negative integers. Each element in the grid represents the cost to traverse that cell.\n\n#### Output\n- Returns an integer representing the minimum path sum from top-left corner `(0, 0)` to any bottom-right corner of the grid.",
    "code": "from typing import List\ndef minimal_path_sum(grid: List[List[int]]) -> int:\n    if not grid or len(grid[0]) == 0:\n        return 0\n    m, n = len(grid), len(grid[0])\n    dp = [[float('inf')] * (n + 1) for _ in range(m + 1)]\n    dp[0][1] = 0\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = grid[i-1][j-1] + min(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]",
    "tests": [
        "assert minimal_path_sum([[1, 3, 1], [1, 5, 1], [4, 2, 1]]) == 7",
        "assert minimal_path_sum([[1, 2, 5], [3, 2, 1]]) == 6",
        "assert minimal_path_sum([[1, 100]]) == 1",
        "assert minimal_path_sum([[0, -1, 9, 1], [-4, 7, -6, -4], [8, -5, 5, -1], [3, -2, 3, 4]]) == 11"
    ],
    "model": "qwen2:7b-repaired by Llama 3"
}