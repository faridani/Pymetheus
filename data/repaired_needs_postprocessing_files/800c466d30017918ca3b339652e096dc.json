{
    "title": "'Polindromes on Linked Lists' - Hard",
    "description": "Given a singly linked list, check if the linked list is a palindrome. A palindrome is a sequence that reads the same backward as forward.\n\n#### Function Signature```python\ndef is_polindrome(head: ListNode) -> bool:\n```\n\n#### Input\n- `head` (ListNode): The head of the linked list which can be empty or contain one or more nodes, each node contains an integer.\n\n#### Output\n- Returns `True` if the input linked list is a palindrome, `False` otherwise.",
    "code": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverse(head: ListNode) -> ListNode:\n    # Reverse the linked list recursively\n    if head is None or head.next is None:\n        return head\n    rev_head, prev, current = reverse(head.next), head, None\n    prev.next = current\n    current = head\n    prev = None\n    head.next = None\n    return rev_head\n\ndef is_polindrome(head: ListNode) -> bool:\n    # If the linked list has less than 2 nodes, it's not a palindrome\n    if head is None or head.next is None:\n        return False\n    # Reverse the second half of the linked list\n    rev_head = reverse(head.next)\n    # Compare the original and reversed linked lists\n    slow, fast = head, head\n    while fast is not None and fast.next is not None:\n        slow = slow.next\n        fast = fast.next.next\n    # Check if the second half of the list has an odd number of nodes\n    if fast is not None:\n        slow = slow.next\n    # Compare each node in both halves\n    while slow is not None:\n        if head.val != slow.val:\n            return False\n        head = head.next\n        slow = slow.next\n    return True",
    "tests": [
        "assert is_polindrome(ListNode(1, ListNode(2, ListNode(2, ListNode(1))))) == True",
        "assert is_polindrome(ListNode(1, ListNode(2))) == False",
        "assert is_polindrome(ListNode(1)) == True",
        "assert is_polindrome(None) == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}