{
    "title": "Anagram Detector (Hard)",
    "description": "Given two strings, determine if they are anagrams of each other. An anagram is a word or phrase that contains the same letters as another word or phrase, but in a different arrangement.\n\n#### Function Signature\n```python\ndef are_anagrams(s1: str, s2: str) -> bool:\n```\n\n#### Input\n- `s1` (str): A string containing only letters.\n- `s2` (str): Another string containing only letters.\n\n#### Output\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.\n",
    "code": "def are_anagrams(s1: str, s2: str) -> bool:\n    # Check if the lengths of the two strings are equal\n    if len(s1) != len(s2):\n        return False\n    \n    # Create dictionaries to count characters in each string\n    char_count1 = {}\n    for char in s1:\n        if char in char_count1:\n            char_count1[char] += 1\n        else:\n            char_count1[char] = 1\n    \n    char_count2 = {}\n    for char in s2:\n        if char in char_count2:\n            char_count2[char] += 1\n        else:\n            char_count2[char] = 1\n    \n    # Compare the two dictionaries to see if they have the same counts for each character\n    return char_count1 == char_count2",
    "tests": [
        "assert are_anagrams('listen', 'silent') == True",
        "assert are_anagrams('hello', 'olleh') == True",
        "assert are_anagrams('abcde', 'cdeab') == True",
        "assert are_anagrams('kitten', 'testing') == False"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}