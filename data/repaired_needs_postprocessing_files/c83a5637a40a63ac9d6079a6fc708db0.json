{
    "title": "Medium: Counting Subarrays with Product Less than K",
    "description": "Given an array of integers nums and a positive integer k, return the number of contiguous subarrays where the product of all the elements in the subarray is less than k. A contiguous subarray is a consecutive sequence of elements within an array.\n\n#### Function Signature\n```\ndef count_subarrays(nums: List[int], k: int) -> int:\n``` \n\n#### Input\n- `nums` (List[int]): A list of positive integers.\n- `k` (int): A positive integer that serves as the threshold for the product of elements in a subarray.\n\n#### Output\n- Returns an int representing the number of contiguous subarrays where the product of all the elements is less than k.",
    "code": "from typing import List\n\ndef count_subarrays(nums: List[int], k: int) -> int:\n    if k <= 1 or not nums:\n        return 0\n    product = 1\n    count = left = 0\n    for right in range(len(nums)):\n        product *= nums[right]\n        while product >= k:\n            product /= nums[left]\n            left += 1\n        count += (right - left + 1)\n    return count",
    "tests": [
        "assert count_subarrays([10, 5, 2, 6], 100) == 8",
        "assert count_subarrays([1, 2, 3], 0) == 0",
        "assert count_subarrays([1, 1, 1], 2) == 6"
    ],
    "model": "codestral:22b-repaired by Llama 3"
}