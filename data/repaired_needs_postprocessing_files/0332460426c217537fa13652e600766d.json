{
    "title": "Egg Drop Problem",
    "description": "Write a function `egg_drop` that takes two integers `n` and `k`, representing the number of eggs and the number of floors in a building, respectively. The function should return the minimum number of attempts required to find the highest floor from which an egg will not break if dropped.\n\n#### Function Signature\n```def egg_drop(n: int, k: int) -> int:\n```\n\n#### Input\n- `n` (int): The number of eggs.\n- `k` (int): The number of floors in the building.\n\n#### Output\n- Returns the minimum number of attempts required to find the highest floor from which an egg will not break if dropped.",
    "code": "import math\ndef egg_drop(n: int, k: int) -> int:\n    min_attempts = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        min_attempts[i][1] = 1\n        min_attempts[i][0] = 1\n    \n    for j in range(2, k + 1):\n        min_attempts[1][j] = j\n    \n    for i in range(2, n + 1):\n        for j in range(2, k + 1):\n            min_attempts[i][j] = math.ceil(min((min_attempts[i - 1][j - 1] + 1) if i > 1 else float('inf'), \n                                              (min_attempts[i][j - 1] + 1), \n                                              (min_attempts[i - 1][j] + 1)))\n    \n    return min_attempts[n][k]",
    "tests": [
        "assert egg_drop(2, 10) == 4",
        "assert egg_drop(3, 5) == 6",
        "assert egg_drop(5, 5) == 9",
        "assert egg_drop(1, 1) == 1"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}