{
    "title": "Anagram Checker (Hard)",
    "description": "Write a function `anagram_checker` that checks if two given strings are anagrams of each other. An anagram is a word or phrase that consists of the same letters as another word or phrase, but in a different order.\n\n#### Function Signature\n```python\ndef anagram_checker(str1: str, str2: str) -> bool:\n``` \n\n#### Input\n- `str1`, `str2` (str): Two strings that may contain the same letters in a different order.\n\n#### Output\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.\n",
    "code": "def anagram_checker(str1: str, str2: str) -> bool:\n    # Remove spaces and convert to lowercase\n    str1 = ''.join(sorted(str1.lower().replace(' ', '')))\n    str2 = ''.join(sorted(str2.lower().replace(' ', '')))\n    # Check if the two strings have the same length\n    if len(str1) != len(str2):\n        return False\n    # Check if each character of one string is present in the other string and vice versa, without considering their order\n    for char in str1:\n        if char not in str2 or str2.count(char) < str1.count(char):\n            return False\n    # If all checks pass, the strings are anagrams\n    return True",
    "tests": [
        "assert anagram_checker('listen', 'silent') == True",
        "assert anagram_checker('actinium', 'nicomaque') == True",
        "assert anagram_checker('hello', 'world') == False",
        "assert anagram_checker('alpha', 'apple') == False"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}