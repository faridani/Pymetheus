{
    "title": "Hard: Word Chaining",
    "description": "Write a function `word_chaining` that takes two parameters, an integer `n` and a list of `words`. The function should return the longest chain of words where each word is related to the previous one by having at least one common letter. For example, if the input list contains the words ['cat', 'bat', 'hat', 'mat'], the output would be 3 because you can form a chain like this: 'cat' -> 'bat' -> 'hat'. If no such chain exists, return -1.\n\n#### Function Signature\n```python\ndef word_chaining(n: int, words: list) -> int:\n```\n\n#### Input\n- `n` (int): The length of the longest chain to find.\n- `words` (list): A list of strings, each string is a single word.\n\n#### Output\n- Returns an integer representing the length of the longest chain found. If no such chain exists, return -1.",
    "code": "import collections\ndef word_chaining(n: int, words: list) -> int:\n    # Create a graph where each node is a word and two nodes are connected if they have at least one common letter.\n    graph = collections.defaultdict(list)\n    for i in range(len(words)-1):\n        for j in range(i+1, len(words)):\n            if any(char in words[i] for char in words[j]) or any(char in words[j] for char in words[i]):\n                graph[words[i]].append(words[j])\n    # Perform DFS to find the longest chain.\n    visited = set()\n    max_chain_length = 0\n    def dfs(word, current_chain):\n        nonlocal max_chain_length\n        if len(current_chain) > max_chain_length:\n            max_chain_length = len(current_chain)\n        for neighbor in graph[word]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                dfs(neighbor, current_chain + [neighbor])\n    # Start DFS from each word.\n    for word in words:\n        dfs(word, [word])\n    return max_chain_length if max_chain_length <= n else -1",
    "tests": [
        "assert word_chaining(3, ['cat', 'bat', 'hat', 'mat']) == 3",
        "assert word_chaining(5, ['apple', 'pear', 'banana', 'pineapple', 'grape']) == -1",
        "assert word_chaining(2, ['dog', 'cat']) == 2",
        "assert word_chaining(1, ['hello', 'world']) == 1"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}