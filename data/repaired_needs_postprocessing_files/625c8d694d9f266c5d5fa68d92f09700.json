{
    "title": "Tree Traversals",
    "description": "A tree traversal is a sequence of nodes visited during a traversal. Given a binary tree with N nodes, where each node has an integer value and two children (left and right), you are asked to find all possible sequences of nodes that can be obtained by performing in-order, pre-order, post-order, level-order traversals.\n\nWrite a function `tree_traversals` that takes as input the root node of the binary tree and returns a list of strings, where each string represents one of the possible traversal sequences. The sequence should be constructed by concatenating the values of the visited nodes with a space in between.",
    "code": "import collections\n\ndef tree_traversals(node):\n    if not node:\n        return []\n\ndef inorder(node):\n    if not node:\n        return []\n    left = inorder(node.left)\n    right = inorder(node.right)\n    return left + [str(node.val)] + right\n\ndef preorder(node):\n    if not node:\n        return []\n    return [str(node.val)] + preorder(node.left) + preorder(node.right)\n\ndef postorder(node):\n    if not node:\n        return []\n    left = postorder(node.left)\n    right = postorder(node.right)\n    return left + right + [str(node.val)]\n\ndef levelorder(node):\n    if not node:\n        return []\n    queue = collections.deque([node])\n    result = []\n    while queue:\n        node = queue.popleft()\n        result.append(str(node.val))\n        if node.left:\n            queue.append(node.left)\n        if node.right:\n            queue.append(node.right)\n\n    return [inorder(node), preorder(node), postorder(node), levelorder(node)]",
    "tests": [
        "assert tree_traversals(None) == [[''], [''], [''], []]",
        "assert tree_traversals(Node(1)) == [['1'], ['1'], ['1'], ['1']]",
        "assert tree_traversals(Node(1, Node(2), Node(3))) == [['1 2 3'], ['1 2 3'], ['3 2 1'], ['1 2 3']]",
        "assert len(tree_traversals(Node(1, Node(2, Node(4)), Node(3)))) == 16",
        "assert set(tree_traversals(Node(1, Node(2), Node(3)))[0].split()) == {'1', '2', '3'}"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}