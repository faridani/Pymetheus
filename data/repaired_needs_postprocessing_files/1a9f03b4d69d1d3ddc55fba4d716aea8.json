{
    "title": "[Medium] String Permutation Checker",
    "description": "Given two strings, write a function `can_permute` that checks if one string can be permuted to become the other. A permutation of a string is another string containing same characters but in different order.\n\n#### Function Signature\n```python\ndef can_permute(s1: str, s2: str) -> bool:\n``` \n\n#### Input\n- `s1`, `s2` (str): Strings that may contain lowercase letters and/or uppercase letters.\n\n#### Output\n- Returns `True` if the first string can be permuted to become the second string, `False` otherwise.",
    "code": "from collections import Counter\ndef can_permute(s1: str, s2: str) -> bool:\n    # If lengths are not equal, they can't be permutations of each other\n    if len(s1) != len(s2):\n        return False\n    # Count the occurrences of each character in both strings\n    count_s1 = Counter(s1)\n    count_s2 = Counter(s2)\n    # Check if the counts are equal for all characters\n    return count_s1 == count_s2",
    "tests": [
        "assert can_permute(\"abc\", \"cba\") == True",
        "assert can_permute(\"hello\", \"world\") == False",
        "assert can_permute(\"anagram\", \"nagaram\") == True",
        "assert can_permute(\"A man, a plan, a canal: Panama\", \"a manap lanacanal: Panama\") == True"
    ],
    "model": "codestral:22b-repaired by Llama 3"
}