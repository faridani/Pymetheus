{
    "title": "Anagram Detector (Hard)",
    "description": "Given two strings, write a function `are_anagrams` that determines if the two input strings are anagrams of each other. Anagrams are words or phrases that contain the same letters in the same frequency, regardless of their arrangement.\n\n#### Function Signature\n```python\ndef are_anagrams(str1: str, str2: str) -> bool:\n```\n\n#### Input\n- `str1` (str): A string containing lowercase alphabetic characters only.\n- `str2` (str): A string containing lowercase alphabetic characters only.\n\n#### Output\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.",
    "code": "def are_anagrams(str1: str, str2: str) -> bool:\n    # Sort both strings and convert to a dictionary for easy comparison\n    sorted_str1 = sorted(list(str1))\n    sorted_str2 = sorted(list(str2))\n    dict1 = {}\n    dict2 = {}\n    for char in sorted_str1:\n        if char not in dict1.keys():\n            dict1[char] = 1\n        else:\n            dict1[char] += 1\n    for char in sorted_str2:\n        if char not in dict2.keys():\n            dict2[char] = 1\n        else:\n            dict2[char] += 1\n    # Compare the dictionaries and return True if they are equal, False otherwise\n    return dict1 == dict2",
    "tests": [
        "assert are_anagrams(\"listen\", \"silent\") == True",
        "assert are_anagrams(\"hello\", \"olleh\") == True",
        "assert are_anagrams(\"cat\", \"act\") == True",
        "assert are_anagrams(\"python\", \"typhon\") == False"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}