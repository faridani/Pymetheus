{
    "title": "Check if a given string is a palindromic permutation (Easy)\n(Easy)\n#### Function Signature\n```python\ndef is_palindromic_permutation(s: str) -> bool:\n``` \n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n#### Output\n- Returns `True` if the input string can be rearranged into a palindrome, `False` otherwise.",
    "description": "A palindromic permutation is a string that can be rearranged into a palindrome (a word, phrase, number, or other sequence of characters that reads the same forward and backward).\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns `True` if the input string can be rearranged into a palindrome, `False` otherwise.",
    "code": "import collections\ndef is_palindromic_permutation(s: str) -> bool:\n    # Remove non-alphanumeric characters and convert to lowercase\n    s = ''.join([char for char in s if char in string.ascii_letters + string.digits]).lower()\n    # Count the frequency of each character\n    count = collections.Counter(s)\n    # If there is an odd number of characters that appear an odd number of times, then the input cannot be a palindromic permutation\n    return all([count[char] == 2 or count[char] % 2 == 0 for char in s])",
    "tests": [
        "assert is_palindromic_permutation(\"tact coact\") == True",
        "assert is_palindromic_permutation(\"leetcode\") == False",
        "assert is_palindromic_permutation(\"A man, a plan, a canal: Panama\") == True",
        "assert is_palindromic_permutation(\"racecar\") == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}