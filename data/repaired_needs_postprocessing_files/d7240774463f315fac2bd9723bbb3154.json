{
    "title": "Easy: Prime Counting",
    "description": "A prime number is a natural number greater than 1 that has no divisors other than 1 and itself. You are given a list of integers `n`, each representing the end of a range. For example, if `n` is 10, it means you need to count all prime numbers in the range from 2 to 10 (inclusive). Write a function that calculates the total number of prime numbers within these ranges. \ndef count_primes(n: int) -> int:\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    total = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            total += 1\n    return total",
    "code": "def count_primes(n: int) -> int:\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    total = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            total += 1\n    return total",
    "tests": [
        "assert count_primes(10) == 4",
        "assert count_primes(20) == 8",
        "assert count_primes(30) == 12"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}