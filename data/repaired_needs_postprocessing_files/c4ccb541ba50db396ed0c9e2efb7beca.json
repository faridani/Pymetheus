{
    "title": "Hard: Longest Increasing Subsequence with Rotations",
    "description": "Given an array of integers, find the length of the longest increasing subsequence (LIS) after allowing rotations of the array. ```python def lis_with_rotations(nums: list[int]) -> int:\n    n = len(nums)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] > nums[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)\n```\n",
    "code": "def lis_with_rotations(nums: list[int]) -> int:\n    n = len(nums)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] > nums[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)\n",
    "tests": [
        "assert lis_with_rotations([1, 2, 3]) == 3",
        "assert lis_with_rotations([3, 1, 2]) == 3",
        "assert lis_with_rotations([10, 9, 2, 5, 3, 7, 101, 18]) == 4"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}