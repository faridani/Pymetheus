{
    "title": "Hard - Minimum Swaps for Sorted Subsequence",
    "description": "You are given a list of integers `nums`.  Find the minimum number of swaps required to arrange a subsequence of `nums` in strictly increasing order. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n#### Function Signature\n```python\ndef min_swaps(nums: list[int]) -> int:\n```\n\n#### Input\n- `nums` (list[int]): A list of integers.\n\n#### Output\n- Returns the minimum number of swaps required to arrange a subsequence of `nums` in strictly increasing order.",
    "code": "def min_swaps(nums: list[int]) -> int:\n    n = len(nums)\n    sorted_nums = sorted(nums)\n    pos = [0] * n\n    for i, num in enumerate(sorted_nums):\n        pos[nums.index(num)] = i\n\n    count = 0\n    cycle_length = 1\n    visited = set()\n\n    for i in range(n):\n        if pos[i] == i or i in visited:\n            continue\n\n        j = pos[i]\n        while j != i:\n            count += 1\n            cycle_length += 1\n            visited.add(j)\n            j = pos[j]\n\n    return count // cycle_length",
    "tests": [
        "assert min_swaps([1, 5, 4, 3, 2]) == 3",
        "assert min_swaps([7, 1, 3, 2, 4, 5, 6]) == 5",
        "assert min_swaps([1, 2, 3, 4, 5]) == 0"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}