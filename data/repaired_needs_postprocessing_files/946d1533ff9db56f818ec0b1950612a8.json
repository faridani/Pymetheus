{
    "title": "Hard - Maximum Subarray Sum with Negative Numbers",
    "description": "Given an array of integers, both positive and negative, find the contiguous subarray that has the maximum sum. \n#### Function Signature\n```python\ndef max_subarray_sum(nums: list[int]) -> int:\n``` \n\n#### Input\n- `nums` (list[int]): A list of integers.\n\n#### Output\n- Returns the maximum sum of a contiguous subarray within the input list.",
    "code": "def max_subarray_sum(nums: list[int]) -> int:\n    max_so_far = nums[0]\n    current_max = nums[0]\n    for i in range(1, len(nums)):\n        current_max = max(nums[i], current_max + nums[i])\n        max_so_far = max(max_so_far, current_max)\n    return max_so_far",
    "tests": [
        "assert max_subarray_sum([-2,1,-3,4,-1,2,1,-5,4]) == 6",
        "assert max_subarray_sum([1]) == 1",
        "assert max_subarray_sum([-1, -2, -3]) == -1"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}