{
    "title": "Hard: Tree Traversal",
    "description": "Given a binary tree and an integer, write a function `find_path` that finds all paths in the tree where the sum of the nodes' values equals the given integer. The path should be printed as a list of node values.\n\n#### Function Signature\n```python\ndef find_path(root: 'TreeNode', target_sum: int) -> None:\n```\n\n#### Input\n- `root` ('TreeNode'): A binary tree root node.\n- `target_sum` (int): An integer that represents the target sum for the paths in the tree.\n\n#### Output\n- Prints all paths in the tree where the sum of the nodes' values equals the given integer.",
    "code": "class TreeNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\n    def find_path(root: 'TreeNode', target_sum: int) -> None:\n        if root is None:\n            return\n\n        result = []\n\n        def dfs(node, current_sum, path):\n            if node is None:\n                return\n\n            current_sum += node.value\n            path.append(node.value)\n\n            if current_sum == target_sum:\n                result.append(list(path))\n            elif current_sum < target_sum:\n                dfs(node.left, current_sum, path[:])\n                dfs(node.right, current_sum, path[:])\n            else:\n                while current_sum > target_sum and path:\n                    current_sum -= path.pop(0)\n\n        dfs(root, 0, [])\n\n        for path in result:\n            print(path)",
    "tests": [
        "assert find_path(TreeNode(1), 5) == [[1], [2, 3]]",
        "assert find_path(TreeNode(4), 6) == [[4], [2, 2]]"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}