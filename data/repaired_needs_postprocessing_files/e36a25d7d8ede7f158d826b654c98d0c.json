{
    "title": "Hard: Lexicographical Permutations",
    "description": "Given a string `s`, return the lexicographically next permutation of `s`. If there is no next permutation, return the string in reverse order. \n#### Function Signature\n```python\ndef next_permutation(s: str) -> str:\n``` \n#### Input\n- `s` (str): A string consisting of lowercase English letters.\n#### Output\n- Returns the lexicographically next permutation of `s`. If there is no next permutation, return the string in reverse order.",
    "code": "def next_permutation(s: str) -> str:\n    s = list(s)\n    i = len(s)-2\n    while i >= 0 and s[i] >= s[i+1]:\n        i -= 1\n    if i < 0:\n        return ''.join(reversed(s))\n    j = len(s) - 1\n    while j > i and s[j] <= s[i]:\n        j -= 1\n    s[i], s[j] = s[j], s[i]\n    s[i+1:] = reversed(s[i+1:])\n    return ''.join(s)\n",
    "tests": [
        "assert next_permutation('abc') == 'acb'",
        "assert next_Permutation('cba') == 'abc'",
        "assert next_permutation('ab') == 'ba'",
        "assert next_permutation('aab') == 'aba'",
        "assert next_permutation('aaa') == 'aaa'"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}