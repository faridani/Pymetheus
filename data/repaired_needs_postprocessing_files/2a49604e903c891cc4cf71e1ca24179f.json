{
    "title": "Hard: Counting Paths",
    "description": "Imagine you have an n x m grid where each cell can be either empty (0) or occupied by a wall (1). You are standing at the top left corner of the grid and want to find all possible paths from the top left corner to the bottom right corner. A path is considered valid if it does not pass through any cells that contain walls.\n\n#### Function Signature\n```python\ndef count_paths(grid: list[list[int]]) -> int:\n```\n\n#### Input\n- `grid` (list of lists): A 2D grid where each cell can be either empty (0) or occupied by a wall (1).\n\n#### Output\n- Returns the total number of valid paths from the top left corner to the bottom right corner.\n",
    "code": "from functools import lru_cache\ndef count_paths(grid: list[list[int]]) -> int:\n    n, m = len(grid), len(grid[0])\n    @lru_cache(None)\n    def dfs(i, j):\n        if i < 0 or i >= n or j < 0 or j >= m:\n            return 1\n        if grid[i][j] == 1:\n            return 0\n        paths = 1\n        for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < m:\n                paths += dfs(ni, nj)\n        return paths\n    \n    return dfs(0, 0)",
    "tests": [
        "assert count_paths([[0, 1], [0, 0]]) == 2",
        "assert count_paths([[0, 0], [0, 0]]) == 4",
        "assert count_paths([[0, 0, 0], [0, 1, 0], [0, 0, 0]]) == 3"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}