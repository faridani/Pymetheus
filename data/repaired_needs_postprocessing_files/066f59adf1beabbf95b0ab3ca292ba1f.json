{
    "title": "Anagram Detection (Hard)",
    "description": "Given two strings, determine if they are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n#### Function Signature\n```python\ndef are_anagrams(s1: str, s2: str) -> bool:\n```\n\n#### Input\n- `s1`, `s2` (str): Two strings that may contain letters (uppercase or lowercase), digits, spaces, and punctuation.\n\n#### Output\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.",
    "code": "def are_anagrams(s1: str, s2: str) -> bool:\n    # Remove non-alphabetic characters and convert to lowercase\n    s1 = ''.join([char for char in s1 if char.isalpha()]).lower()\n    s2 = ''.join([char for char in s2 if char.isalpha()]).lower()\n    # If the lengths of the strings are not equal, they cannot be anagrams\n    if len(s1) != len(s2):\n        return False\n    # Create a dictionary to count the frequency of each character in s1\n    freq = {}\n    for char in s1:\n        if char not in freq:\n            freq[char] = 0\n        freq[char] += 1\n    # Decrease the frequency of each character in s2 according to its count in s2\n    for char in s2:\n        if char in freq:\n            freq[char] -= 1\n        else:\n            return False\n    # If all frequencies are zero, the strings are anagrams\n    return True",
    "tests": [
        "assert are_anagrams('listen', 'silent') == True",
        "assert are_anagrams('hello', 'world') == False",
        "assert are_anagrams('Einstein', 'Stewie Griffin') == False"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}