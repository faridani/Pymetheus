{
    "title": "Maximum Sum of Divisible Subsets",
    "description": "Given an integer array `nums` and an integer `k`, find the maximum sum of a subset of `nums` such that each element in the subset can be divided by `k`. \n\n#### Function Signature\n```python\ndef max_sum_divisible(nums: list[int], k: int) -> int:\n```\n\n#### Input\n- `nums` (list[int]): A list of integers.\n- `k` (int): An integer.\n\n#### Output\n- Returns the maximum sum of a subset of `nums` such that each element in the subset can be divided by `k`. \n\n",
    "code": "import math\ndef max_sum_divisible(nums: list[int], k: int) -> int:\n    # Calculate the maximum possible sum by adding all numbers divisible by k\n    max_sum = sum(num for num in nums if num % k == 0)\n    \n    # Initialize the current sum to 0\n    current_sum = 0\n    \n    # Iterate over the list of numbers\n    for num in nums:\n        # If the number is not divisible by k, add it to the current sum\n        if num % k != 0:\n            current_sum += num\n        \n        # If the number is divisible by k and adding it would exceed the maximum possible sum,\n        # reset the current sum to 0\n        elif current_sum + num > max_sum:\n            current_sum = 0\n        \n        # Add the number to the current sum\n        else:\n            current_sum += num\n    \n    # Return the maximum of the maximum possible sum and the current sum\n    return max(max_sum, current_sum)",
    "tests": [
        "assert max_sum_divisible([1, 2, 3, 4, 5], 2) == 9",
        "assert max_sum_divisible([-1, -2, -3, -4, -5], 2) == -6",
        "assert max_sum_divisible([1, 3, 6, 8, 10], 2) == 14"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}