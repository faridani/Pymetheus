{
    "title": "Hard: Word Ladder",
    "description": "Given two words, <i>beginWord</i> and <i>endWord</i>, and a word list of valid English words, find the shortest transformation sequence from <i>beginWord</i> to <i>endWord</i> such that:\n* Only one letter can be changed at a time.\n* Each transformed word must exist in the given word list.\nReturn the length of the shortest transformation sequence, or -1 if no such sequence exists.",
    "code": "from collections import deque\ndef ladderLength(beginWord: str, endWord: str, wordList: list[str]) -> int:\n    if endWord not in wordList:\n        return -1\n    wordList = set(wordList)\n    queue = deque([(beginWord, 1)])\n    visited = {beginWord}\n    while queue:\n        current_word, level = queue.popleft()\n        for i in range(len(current_word)):\n            for char in 'abcdefghijklmnopqrstuvwxyz':\n                next_word = current_word[:i] + char + current_word[i+1:]\n                if next_word == endWord:\n                    return level + 1\n                if next_word in wordList and next_word not in visited:\n                    queue.append((next_word, level + 1))\n                    visited.add(next_word)\n    return -1",
    "tests": [
        "'assert ladderLength(\"hit\", \"cog\", [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]) == 5'",
        "'assert ladderLength(\"hit\", \"cog\", [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]) == 0'",
        "'assert ladderLength(\"a\", \"b\", [\"a\",\"b\"]) == 2'"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}