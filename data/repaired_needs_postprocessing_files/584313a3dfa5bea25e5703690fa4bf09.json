{
    "title": "Anagram Checker (Hard)",
    "description": "An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a function `is_anagram` that checks if two given strings are anagrams of each other. This function should handle strings that may contain letters, numbers, and spaces. Both input strings should have the same length. The function will return `True` if the two input strings are anagrams of each other, `False` otherwise.",
    "code": "import string\n\ndef is_anagram(s1: str, s2: str) -> bool:\n    # Check if both strings have the same length\n    if len(s1) != len(s2):\n        return False\n    # Create a dictionary to count the frequency of each character in s1\n    counter = {}\n    for char in s1:\n        if char not in counter.keys():\n            counter[char] = 1\n        else:\n            counter[char] += 1\n    # Subtract the count of each character from s2 and check if all counts become zero\n    for char in s2:\n        if char not in counter.keys():\n            return False\n        counter[char] -= 1\n    return len(counter) == 0",
    "tests": [
        "assert is_anagram(\"listen\", \"silent\") == True",
        "assert is_anagram(\"hello\", \"olleh\") == True",
        "assert is_anagram(\"world\", \"dragon\") == False"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}