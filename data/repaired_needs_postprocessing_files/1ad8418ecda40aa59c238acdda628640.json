{
    "title": "Hard - Circular Prime Checker",
    "description": "A circular prime is a prime number that remains prime when its digits are rotated. For example, 197 is a circular prime because 197, 971, and 719 are all prime. Write a function `is_circular_prime(num)` that takes an integer as input and returns True if the number is a circular prime, False otherwise.\n\n#### Function Signature\n```python\ndef is_circular_prime(num: int) -> bool:\n``` \n\n#### Input\n- `num` (int): A positive integer.\n\n#### Output\n- Returns `True` if the input number is a circular prime, `False` otherwise.",
    "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_circular_prime(num: int) -> bool:\n    if not is_prime(num):\n        return False\n    num_str = str(num)\n    for i in range(len(num_str)):\n        rotated_num = int(num_str[i:] + num_str[:i])\n        if not is_prime(rotated_num):\n            return False\n    return True",
    "tests": [
        "assert is_circular_prime(197) == True",
        "assert is_circular_prime(113) == True",
        "assert is_circular_prime(12) == False",
        "assert is_circular_prime(357) == False"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}