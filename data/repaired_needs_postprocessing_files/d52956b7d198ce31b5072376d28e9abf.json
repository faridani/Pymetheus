{
    "title": "'Anagram Detector (Hard)'",
    "description": "Given two strings, write a function `anagram_checker` that determines if the two strings are anagrams of each other.\n\n#### Function Signature\n```python\ndef anagram_checker(str1: str, str2: str) -> bool:\n```\n\n#### Input\n- `str1`, `str2` (str): Two strings that may contain letters, numbers and spaces.\n\n#### Output\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.\n\n**Hint:** An anagram is a word or phrase that consists of the same letters as another, but in a different order.",
    "code": "import collections\ndef anagram_checker(str1: str, str2: str) -> bool:\n    # Remove spaces and convert to lowercase\n    str1 = ''.join(char for char in str1.lower() if char.isalpha()).replace(' ', '')\n    str2 = ''.join(char for char in str2.lower() if char.isalpha()).replace(' ', '')\n    \n    # Count the frequency of each character in both strings\n    freq_dict1 = collections.Counter(str1)\n    freq_dict2 = collections.Counter(str2)\n    \n    # Check if the frequencies are the same for both strings\n    return freq_dict1 == freq_dict2",
    "tests": [
        "assert anagram_checker('listen', 'silent') == True",
        "assert anagram_checker('actinium', 'micauntia') == True",
        "assert anagram_checker('python', 'typhon') == False",
        "assert anagram_checker('civics', 'scivic') == False"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}