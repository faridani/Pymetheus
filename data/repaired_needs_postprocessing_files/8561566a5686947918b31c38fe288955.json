{
    "title": "Hard: Subarray Sum with Constraints",
    "description": "Given an array of integers `nums` and a target integer `target`, find the number of **non-empty** subarrays whose sum equals the `target`. The subarrays should also satisfy the following constraints:\n* Each element in the subarray must be unique.\n* The length of each subarray must be greater than 1.\n\n#### Function Signature\n```python\ndef count_subarrays(nums: list[int], target: int) -> int:\n```\n\n#### Input\n- `nums` (list[int]): A list of integers.\n- `target` (int): The target sum.\n\n#### Output\n- Returns the number of subarrays that satisfy the given conditions.",
    "code": "def count_subarrays(nums: list[int], target: int) -> int:\n    count = 0\n    for i in range(len(nums) - 1):\n        seen = set()\n        current_sum = 0\n        for j in range(i, len(nums)):\n            if nums[j] in seen:\n                break\n            current_sum += nums[j]\n            seen.add(nums[j])\n            if current_sum == target and len(seen) > 1:\n                count += 1\n    return count",
    "tests": [
        "assert count_subarrays([1,2,3,4,5], 7) == 1",
        "assert count_subarrays([1,1,1,2,3], 4) == 0",
        "assert count_subarrays([-1, -2, -3, 1, 2], 0) == 2"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}