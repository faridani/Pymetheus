{
    "title": "'Anagram Finder (Hard)',",
    "description": "Write a function `find_anagrams` that finds all anagrams of a given string within a list of strings. An anagram is a word or phrase formed by rearranging the letters of another, typically an English word.\n\n#### Function Signature\n```python\ndef find_anagrams(target: str, words: List[str]) -> Set[str]:\n``` \n\n#### Input\n- `target` (str): The target string to find anagrams of.\n- `words` (List[str]): A list of strings to search for anagrams within.\n\n#### Output\n- Returns a set of strings that are anagrams of the input `target`. ",
    "code": "import collections\ndef find_anagrams(target: str, words: List[str]) -> Set[str]:\n    # Count the frequency of each letter in the target string\n    target_freq = collections.Counter(target)\n    \n    # Create a set to store the found anagrams\n    anagrams = set()\n    \n    # Iterate through all words in the list\n    for word in words:\n        # Count the frequency of each letter in the current word\n        word_freq = collections.Counter(word)\n        \n        # Check if the frequencies match (ignoring case)\n        if target_freq == word_freq:\n            anagrams.add(word)\n    \n    return anagrams",
    "tests": [
        "assert find_anagrams('listen', ['enlists', 'silent', 'net']) == {'enlist', 'silent'}",
        "assert find_anagrams('actinia', ['actinium', 'acidic', 'basic', 'canine', 'cain']) == {'actinium'}"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}