{
    "title": "Mirror Sequence Checker (Medium)",
    "description": "A mirror sequence is a sequence of characters, where the sequence remains the same if it is read from left to right or from right to left. Write a function `is_mirror` that checks if a given list of elements forms a mirror sequence.\n\n#### Function Signature\n```\ndef is_mirror(arr: List[Any]) -> bool:\n``` \n\n#### Input\n- `arr` (List[Any]): A non-empty list of elements where each element can be any character or number.\n\n#### Output\n- Returns `True` if the input list forms a mirror sequence, `False` otherwise.",
    "code": "def is_mirror(arr: List[Any]) -> bool:\n    # Remove duplicates and sort the list\n    sorted_arr = sorted(set(arr))\n    # Check if the sorted list reads the same forwards and backwards\n    n = len(sorted_arr)\n    return (sorted_arr[0:n//2] == reversed(sorted_arr[n//2:]))",
    "tests": [
        "assert is_mirror([1, 2, 3, 2, 1]) == True",
        "assert is_mirror(['a', 'b', 'c', 'b', 'a']) == True",
        "assert is_mirror([1, 2, 3, 4]) == False",
        "assert is_mirror(['A', 'B', 'C', 'D', 'E']) == False"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}