{
    "title": "Anagram Detector (Hard)",
    "description": "Write a function `find_anagrams` that finds all anagrams within a given list of strings. Anagram is a word or phrase that contains the same letters as another word or phrase in a different order.\n\n#### Function Signature\n```python\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\n``` \n\n#### Input\n- `words` (List[str]): A list of strings that may contain letters, numbers, spaces and punctuation.\n\n#### Output\n- Returns a dictionary where each key is an anagram and the corresponding value is a list of words in the input that share the same anagram.\n",
    "code": "from collections import Counter\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\n    # Create a dictionary mapping each anagram to a list of words\n    anagrams = {}\n    for word in words:\n        # Sort the letters of the word and count them\n        sorted_word = ''.join(sorted(word.lower()))\n        counter = Counter(sorted_word)\n        if sorted_word in anagrams:\n            anagrams[sorted_word].append(word)\n        else:\n            anagrams[sorted_word] = [word]\n    return anagrams",
    "tests": [
        "assert find_anagrams(['listen', 'silent', 'enlist']) == {'enlstlsient': ['listen', 'silent', 'enlist']}",
        "assert find_anagrams(['racecar', 'radar', 'madam', 'man', 'mom', 'nurse']) == {\"adarm\": ['madam', 'aman'], \"mom\": ['mom', 'rom'], \"rarcecarr\": ['racecar', 'radar']}"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}