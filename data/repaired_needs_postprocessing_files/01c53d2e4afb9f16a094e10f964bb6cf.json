{
    "title": "'Levenshtein Distance Calculator - Easy'",
    "description": "The Levenshtein distance between two words is the minimum number of single-character edits (insertions, deletions or substitutions) required to change one word into the other.\n\n#### Function Signature\n```python\ndef levenshtein_distance(s: str, t: str) -> int:\n``` \n\n#### Input\n- `s`, `t` (str): Two strings containing only lowercase letters.\n\n#### Output\n- Returns an integer representing the Levenshtein distance between the two input strings.",
    "code": "def levenshtein_distance(s: str, t: str) -> int:\n    # Create a 2D matrix to store the distances between substrings of s and t\n    len_s = len(s) + 1\n    len_t = len(t) + 1\n    matrix = [[0 for _ in range(len_t)] for _ in range(len_s)]\n\n    # Fill in the matrix with the Levenshtein distances between substrings of s and t\n    for i in range(len_s):\n        for j in range(len_t):\n            if i == 0 or j == 0:\n                matrix[i][j] = i + j\n            else:\n                if s[i - 1] == t[j - 1]:\n                    matrix[i][j] = matrix[i - 1][j - 1]\n                else:\n                    matrix[i][j] = min(matrix[i - 1][j], matrix[i][j - 1], matrix[i - 1][j - 1]) + 1\n    return matrix[-1][-1]",
    "tests": [
        "assert levenshtein_distance(\"kitten\", \"sitting\") == 3",
        "assert levenshtein_distance(\"python\", \"python\") == 0",
        "assert levenshtein_distance(\"hello\", \"world\") == 4"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}