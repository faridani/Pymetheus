{
    "title": "Palindromic Substrings Count",
    "description": "Write a function `count_palindromes` that takes a string as input and returns the number of palindromic substrings it contains. A palindromic substring is a sequence of characters that reads the same forwards and backwards. The substring can overlap with itself.\n\n#### Function Signature\n```python\ndef count_palindromes(s: str) -> int:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns the number of palindromic substrings in the input string.",
    "code": "def count_palindromes(s: str) -> int:\n    # Initialize a 2D array to store counts for all possible substrings lengths and shifts\n    dp = [[0] * len(s) for _ in range(len(s))]\n    count = 0\n    # Iterate through the string, checking each substring for palindromes\n    for i in range(len(s)):\n        for j in range(i, -1, -1):\n            if s[i] == s[j]:\n                # Calculate the half length of the current substring\n                half_length = (j - i + 1) // 2\n                # Add the current palindrome to the count and update the dynamic programming table\n                count += len(s) - half_length * 2 + 1\n                for k in range(1, half_length + 1):\n                    dp[i][j] = max(dp[i][j], dp[i + k][j - k] + 1)\n    return count",
    "tests": [
        "assert count_palindromes('abcbcba') == 7",
        "assert count_palindromes('racecar') == 5",
        "assert count_palindromes('hello world') == 2"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}