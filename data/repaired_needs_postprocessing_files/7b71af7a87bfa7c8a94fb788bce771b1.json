{
    "title": "Lonely Two-Way Street - Check for Symmetric Words",
    "description": "A symmetric word is a word that reads the same forwards and backwards when each occurrence of a letter is replaced with its corresponding reverse-positioned letter (i.e., first letter becomes last, second letter becomes second to last, and so on). Write a function `is_symmetric` that checks if a given string is symmetric.\n\n#### Function Signature\n```python\ndef is_symmetric(s: str) -> bool:\n``` \n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns `True` if the input string is symmetric, `False` otherwise.\n",
    "code": "import itertools\ndef is_symmetric(s: str) -> bool:\n    # Remove non-alphanumeric characters\n    s = ''.join(char for char in s if char.isalnum()).lower()\n    # Generate permutations of the input string using itertools.permutations and ensure it has length equal to original string\n    perm_len = len(s)\n    perm_set = set(itertools.permutations(s, perm_len))\n    for perm in perm_set:\n        if perm == reversed(perm):\n            return True\n    return False",
    "tests": [
        "assert is_symmetric(\"level\") == True",
        "assert is_symmetric(\"racecar\") == True",
        "assert is_symmetric(\"hello\") == False",
        "assert is_symmetric(\"madam\") == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}