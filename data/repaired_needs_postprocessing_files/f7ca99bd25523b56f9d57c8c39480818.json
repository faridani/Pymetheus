{
    "title": "Prime Factorization (Hard)",
    "description": "Write a function `prime_factors` that takes an integer as input and returns a list of the prime factors of the input number. For example, if the input is 36, the output should be [2, 2, 3, 3].\n#### Function Signature\n```python\ndef prime_factors(n: int) -> list:\n``` \n#### Input\n- `n` (int): A positive integer.\n#### Output\n- Returns a list of the prime factors of the input number in non-descending order.\n",
    "code": "def prime_factors(n: int) -> list:\n    if n <= 1: return []\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    if n > 1: factors.append(n)\n    return factors",
    "tests": [
        "assert prime_factors(6) == [2, 3]",
        "assert prime_factors(9) == [3, 3]",
        "assert prime_factors(18) == [2, 3, 3, 3]",
        "assert prime_factors(495) == [3, 3, 7, 5]"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}