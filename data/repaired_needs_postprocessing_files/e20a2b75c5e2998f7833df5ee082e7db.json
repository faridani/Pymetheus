{
    "title": "'Palindromic Substrings Checker' - Medium",
    "description": "A palindromic substring of a string is any contiguous segment of the string that reads the same forwards and backwards (ignoring spaces, punctuation, and capitalization). Write a function `find_palindromes` that finds all the palindromic substrings in a given string. This problem can be solved by iterating over the input string, generating all possible substrings (including single characters), removing non-alphanumeric characters from the substrings, and then checking if each substring is the same when its characters are reversed. If it is, it's a palindromic substring. The function should return a list of these palindromic substrings.\n\n#### Function Signature\n```python\ndef find_palindromes(s: str) -> List[str]:\n``` \n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns a list of palindromic substrings in the input string as strings.",
    "code": "import re\n\ndef find_palindromes(s: str) -> List[str]:\n    # Find all possible substrings (ignoring spaces and punctuation)\n    substrings = [s[i:j] for i, j in zip(range(len(s)), range(1, len(s)+1))]\n    # Remove non-alphanumeric characters from the substrings\n    substrings = [''.join(char for char in substring if char in string.ascii_letters + string.digits) for substring in substrings]\n    # Find palindromic substrings using regex\n    palindromes = [substring for substring in substrings if re.match(f'^{reversed(substring)}$', substring)]\n    return palindromes",
    "tests": [
        "assert find_palindromes('racecar') == ['racecar']",
        "assert find_palindromes('A man, a plan, a canal, Panama') == ['amanaplanacanalpanama', 'aman']",
        "assert find_palindromes('hello world') == []"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}