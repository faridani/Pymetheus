{
    "title": "Anagram Checker (Medium)",
    "description": "Write a function `is_anagram` that checks if two given strings are anagrams of each other. Two strings are anagrams if they contain the same letters, regardless of their order.\n\n#### Function Signature\n```python\ndef is_anagram(s1: str, s2: str) -> bool:\n``` \n\n#### Input\n- `s1`, `s2` (str): Two strings that may contain letters, numbers, and punctuation.\n\n#### Output\n- Returns `True` if the input strings are anagrams of each other, `False` otherwise.",
    "code": "def is_anagram(s1: str, s2: str) -> bool:\n    # Remove non-alphabetic characters and convert to lowercase\n    s1 = ''.join([char for char in s1 if char.isalpha()]).lower()\n    s2 = ''.join([char for char in s2 if char.isalpha()]).lower()\n    # Check if both strings have the same length\n    if len(s1) != len(s2):\n        return False\n    # Count the frequency of each letter in each string\n    count_s1 = {}  # dictionary for s1\n    count_s2 = {}  # dictionary for s2\n    for char in s1:\n        if char in count_s1:\n            count_s1[char] += 1\n        else:\n            count_s1[char] = 1\n    for char in s2:\n        if char in count_s2:\n            count_s2[char] += 1\n        else:\n            count_s2[char] = 1\n    # Compare the frequency dictionaries\n    return count_s1 == count_s2",
    "tests": [
        "assert is_anagram(\"listen\", \"silent\") == True",
        "assert is_anagram(\"hello\", \"world\") == False",
        "assert is_anagram(\"eat\", \"tea\") == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}