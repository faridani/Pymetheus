{
    "title": "Difficult Python Coding Question: Dynamic Programming - Longest Increasing Subsequence",
    "description": "Given an array of integers, find the length of the longest increasing subsequence (LIS). An increasing subsequence is a sequence where each element in the sequence is larger than its predecessor. The problem should be solved using Dynamic Programming.\n\n#### Function Signature\n```python\ndef lis_length(nums: List[int]) -> int:\n```\n\n#### Input\n- `nums` (List[int]): A list of integers. The length of the list is between 1 and 20, inclusive.\n\n#### Output\n- Returns an integer representing the length of the longest increasing subsequence in the input list.",
    "code": "from typing import List\ndef lis_length(nums: List[int]) -> int:\n    if not nums:\n        return 0\n    dp = [1] * len(nums)\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
    "tests": [
        "assert lis_length([10, 9, 2, 5, 3, 7, 101, 18]) == 4",
        "assert lis_length([0, 1, 0, 3, 2, 3]) == 3",
        "assert lis_length([7, 2, 5, 1, 8, 6, 3]) == 3",
        "assert lis_length([4, 10, 4, 3, 8, 9]) == 3"
    ],
    "model": "phi3:14b-repaired by Llama 3"
}