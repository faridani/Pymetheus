{
    "title": "Minimum Window Substring",
    "description": "Given two strings `s1` and `s2`, find the minimum window in `s1` that contains all characters of `s2`. If there are multiple such windows, return the one with the smallest length. If no such window exists, return an empty string.\n\n#### Function Signature```python\ndef min_window_substring(s1: str, s2: str) -> str:\n```\n\n#### Input\n- `s1` (str): The string to search for the minimum window.\n- `s2` (str): The string containing the characters to be found in `s1`.\n\n#### Output\n- Returns the minimum window substring that contains all characters of `s2`, or an empty string if no such window exists.",
    "code": "from collections import Counter\ndef min_window_substring(s1: str, s2: str) -> str:\n    if not s2 or not s1:\n        return \"\"\n    s2_count = Counter(s2)\n    required_chars = len(s2_count)\n    left = 0\n    formed_chars = 0\n    window_counts = Counter()\n    min_len = float('inf')\n    min_window = \"\"\n    for right in range(len(s1)):\n        character = s1[right]\n        window_counts[character] += 1\n        if character in s2_count and window_counts[character] == s2_count[character]:\n            formed_chars += 1\n        while left <= right and formed_chars == required_chars:\n            character = s1[left]\n            if right - left + 1 < min_len:\n                min_len = right - left + 1\n                min_window = s1[left:right + 1]\n            window_counts[character] -= 1\n            if character in s2_count and window_counts[character] < s2_count[character]:\n                formed_chars -= 1\n            left += 1\n    return min_window",
    "tests": [
        "assert min_window_substring('ADOBECODEBANC', 'ABC') == 'BANC'",
        "assert min_window_substring('', 'abc') == ''",
        "assert min_window_substring('hello', 'world') == ''",
        "assert min_window_substring('aefdbccdfg', 'cdfd') == 'cdfd'"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}