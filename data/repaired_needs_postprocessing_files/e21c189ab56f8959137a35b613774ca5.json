{
    "title": "'Palindrome Indices Finder (Easy)'",
    "description": "A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Write a function `find_palindrome_indices` that finds all the indices where the given string contains a palindromic substring.\n\n#### Function Signature\n```python\ndef find_palindrome_indices(s: str) -> List[List[int]]:\n``` \n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns a list of lists, where each inner list contains the start and end indices of a palindromic substring in the input string. For example, if the input string is 'racecar', the output will be [[2, 5], [0, 4]]. If there are no palindromes in the string, return an empty list.\n",
    "code": "import string\ndef find_palindrome_indices(s: str) -> List[List[int]]:\n    # Convert to lowercase\n    s = s.lower()\n    # Remove non-alphanumeric characters\n    s = ''.join(char for char in s if char in string.ascii_letters + string.digits)\n    # Initialize results\n    results = []\n    \n    # Iterate through all possible palindromes of length 1 to the length of the input string\n    for i in range(len(s)):\n        # Check for palindrome starting at current index `i` and of length `2 * (length - i) + 1`\n        for j in range(i, len(s) - (2 * (i - 1)) + 1, 2):\n            if s[i:j] == s[j:i][::-1]:\n                results.append([i, j])\n    \n    return results",
    "tests": [
        "assert find_palindrome_indices(\"racecar\") == [[2,5], [0,4]]",
        "assert find_palindrome_indices(\"A man, a plan, a canal, Panama\") == [[1, 9], [17, 18]]",
        "assert find_palindrome_indices(\"No 'x' in Nixon\") == []",
        "assert find_palindrome_indices(\"madam\") == [[0, 3], [4, 6]]"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}