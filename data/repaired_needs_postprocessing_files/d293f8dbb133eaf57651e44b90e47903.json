{
    "title": "Hard: Maximum Subarray Sum",
    "description": "Given an array of integers, find the maximum sum that can be obtained by taking a subarray (contiguous segment) and then flipping it (i.e., negating all its elements).\n\n#### Function Signature\n```python\ndef max_flippable_sum(arr: list[int)) -> int:\n```\n\n#### Input\n- `arr` (list<int>): A list of integers.\n\n#### Output\n- Returns the maximum sum that can be obtained by taking a subarray and then flipping it.",
    "code": "from typing import List\ndef max_flippable_sum(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(n):\n        total_sum += arr[i]\n        curr_sum = max(curr_sum + arr[i], 0)\n        max_sum = max(max_sum, curr_sum - total_sum)\n    return max_sum",
    "tests": [
        "assert max_flippable_sum([-2,1,-3,4,-1]) == 6",
        "assert max_flippable_sum([1,-3,5,-9,2,3,7]) == 11",
        "assert max_flippable_sum([0,-1,0,1]) == 0",
        "assert max_flippable_sum([-5]) == -5"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}