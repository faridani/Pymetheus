{
    "title": "Hard:  Balanced Parentheses",
    "description": "Given a string containing only parentheses, curly braces, and square brackets, determine if the input string has balanced parentheses. A string is considered balanced if:\n1. All opening parentheses have corresponding closing parentheses.\n2. The parentheses are properly nested (e.g., \"([{}])\" is balanced, but \"([)]\" is not).\n\n#### Function Signature\n```python\ndef is_balanced(s: str) -> bool:\n```\n\n#### Input\n- `s` (str): A string containing only parentheses characters ('(', ')', '{', '}', '[', ']').\n\n#### Output\n- Returns `True` if the input string has balanced parentheses, `False` otherwise.",
    "code": "def is_balanced(s: str) -> bool:\n    stack = []\n    parentheses_map = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in parentheses_map.values():  # If it's an opening parenthesis\n            stack.append(char)\n        elif char in parentheses_map.keys():  # If it's a closing parenthesis\n            if not stack or stack.pop() != parentheses_map[char]:\n                return False\n        else:\n            continue  # Ignore non-parenthesis characters\n    return not stack",
    "tests": [
        "assert is_balanced('([])') == True",
        "assert is_balanced('{[]}') == True",
        "assert is_balanced('([{}])') == True",
        "assert is_balanced('((()))') == True",
        "assert is_balanced('(()))') == False",
        "assert is_balanced('[{}]') == True",
        "assert is_balanced('[{]}') == False",
        "assert is_balanced('{[}]') == False"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}