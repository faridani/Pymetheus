{
    "title": "Hard - Efficient Pathfinding",
    "description": "Given a 2D grid of integers representing terrain, where 0 represents a traversable cell and any other integer represents an obstacle, find the shortest path from the top-left corner (0, 0) to the bottom-right corner (m-1, n-1). You can move horizontally or vertically, but not diagonally.\n\n#### Function Signature\n```\ndef shortest_path(grid: list[list[int]]) -> int:\n``` \n\n#### Input\n- `grid` (list[list[int]]): A 2D grid representing the terrain.\n\n#### Output\n- Returns the length of the shortest path from the top-left to the bottom-right corner, or -1 if no path exists.",
    "code": "from collections import deque\ndef shortest_path(grid: list[list[int]]) -> int:\n    m, n = len(grid), len(grid[0])\n    queue = deque([(0, 0, 0)]) # (row, col, distance)\n    visited = set([(0, 0)])\n\n    while queue:\n        row, col, dist = queue.popleft()\n        if row == m - 1 and col == n - 1:\n            return dist\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            new_row = row + dr\n            new_col = col + dc\n            if (0 <= new_row < m and 0 <= new_col < n and grid[new_row][new_col] == 0\n                    and (new_row, new_col) not in visited):\n                queue.append((new_row, new_col, dist + 1))\n                visited.add((new_row, new_col))\n    return -1",
    "tests": [
        "grid = [[0,0,0],[0,1,0],[0,0,0]]; assert shortest_path(grid) == 4",
        "grid = [[0,1,0],[1,0,1],[0,1,0]]; assert shortest_path(grid) == -1",
        "grid = [[0,0,1,0],[1,0,0,1],[0,1,0,0]]; assert shortest_path(grid) == 7"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}