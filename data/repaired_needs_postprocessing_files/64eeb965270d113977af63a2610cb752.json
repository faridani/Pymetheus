{
    "title": "Prime Factors Count",
    "description": "Given a positive integer, return the count of its prime factors. The function should identify all distinct prime numbers that can divide the given number and provide their total count.\n#### Function Signature\n```python\ndef prime_factors_count(number: int) -> int:\n``` \n#### Inputs\n- `number` (int): A positive integer greater than 1, for which the function should find the distinct prime factors.\n#### Output\n- Returns an integer representing the count of unique prime numbers that are factors of the given number.",
    "code": "def prime_factors_count(number: int) -> int:\n    def is_prime(num):\n        if num < 2 or (num > 2 and num % 2 == 0):\n            return False\n        for i in range(3, int(num**0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    \n    def prime_factors(number: int) -> set:\n        factors = {}\n        for i in range(2, number + 1):\n            while is_prime(i) and number % i == 0:\n                if i not in factors:\n                    factors[i] = 0\n                factors[i] += 1\n                number //= i\n        return set(factors.keys())\n    \n    return len(prime_factors(number))",
    "tests": [
        "assert prime_factors_count(28) == 3",
        "assert prime_factors_count(17) == 1",
        "assert prime_factors_count(45) == 3",
        "assert prime_factors_count(60) == 3"
    ],
    "model": "phi3:14b-repaired by Llama 3"
}