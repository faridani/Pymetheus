{
    "title": "Economical Path",
    "description": "You are given a graph represented as an adjacency list, where the value at each index represents the weight of the edge from the starting point to that node. Write a function economical_path that finds the economical path in this graph.\n\n#### Function Signature\n```python\ndef economical_path(graph: list) -> int:\n```\n\n#### Input\n- `graph` (list): A list of lists representing the adjacency list, where each inner list represents the edges from a node to its neighbors. Each edge has a weight represented as an integer.\n\n#### Output\n- Returns the sum of the weights of the nodes in the economical path.",
    "code": "def economical_path(graph: list) -> int:\n    n = len(graph)\n    dp = [float('inf')] * n\n    dp[0] = 0\n    for i in range(1, n):\n        for j in range(i+1):\n            if j > 0 and graph[i][j-1] + dp[j-1] < dp[i]:\n                dp[i] = graph[i][j-1] + dp[j-1]\n    return dp[-1]",
    "tests": [
        "assert economical_path([[0,3],[2,5]]) == 8",
        "assert economical_path([[0,3,4],[2,5], [4]]) == 7",
        "assert economical_path([[1,2,3,4,5]]) == float('inf')"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}