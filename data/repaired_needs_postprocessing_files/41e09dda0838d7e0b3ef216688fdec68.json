{
    "title": "Maximum Rectangle",
    "description": "Given a binary matrix where each element can be 0 or 1. Consider all rectangles formed by the given matrix and calculate the maximum area of such rectangle.\n\n#### Function Signature\n```python\ndef max_rectangle_area(matrix: list[list[int]]) -> int:\n```\n\n#### Input\n- `matrix` (list[list[int]]): A binary matrix where each element is either 0 or 1.\n\n#### Output\n- Returns the maximum area of a rectangle that can be formed from the given matrix.",
    "code": "import itertools\ndef max_rectangle_area(matrix: list[list[int]]) -> int:\n    # Create a list to store all rectangles\n    rectangles = []\n    \n    # Generate all possible (x, y) pairs for each cell in the matrix\n    for x1 in range(len(matrix)):\n        for y1 in range(len(matrix[0])):\n            for x2 in range(x1, len(matrix)):\n                for y2 in range(y1, len(matrix[0])):\n                    # Check if all cells within the rectangle are either 0 or 1\n                    if all(all(cell == matrix[x][y] for cell in row) for row in zip(*[matrix[i][j:y2+1] for i in range(x1, x2+1)])):\n                        rectangles.append(((x1, y1), (x2, y2)))\n    \n    # Initialize the maximum area\n    max_area = 0\n    \n    # Calculate the area of each rectangle and update the maximum area if necessary\n    for rectangle in rectangles:\n        area = abs(rectangle[0][0] - rectangle[1][0]) * abs(rectangle[0][1] - rectangle[1][1])\n        max_area = max(max_area, area)\n    \n    return max_area",
    "tests": [
        "assert max_rectangle_area([[1, 0], [1, 1]]) == 2",
        "assert max_rectangle_area([[1, 0], [0, 1]]) == 1",
        "assert max_rectangle_area([[1, 1], [1, 1]]) == 4",
        "assert max_rectangle_area([[0, 0], [1, 1]]) == 2"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}