{
    "title": "Anagram Detection (Hard)",
    "description": "Given two strings, determine if they are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n#### Function Signature\n```\ndef are_anagrams(s1: str, s2: str) -> bool:\n``` \n\n#### Input\n- `s1` (str): A string containing only lowercase alphabets.\n- `s2` (str): A string containing only lowercase alphabets.\n\n#### Output\n- Returns `True` if the input strings are anagrams of each other, `False` otherwise.\n",
    "code": "def are_anagrams(s1: str, s2: str) -> bool:\n    # Remove spaces and convert to a sorted list of characters\n    s1 = sorted(list(filter(str.isalpha, s1)))\n    s2 = sorted(list(filter(str.isalpha, s2)))\n    # Compare the two sorted lists\n    return s1 == s2",
    "tests": [
        "assert are_anagrams(\"listen\", \"silent\") == True",
        "assert are_anagrams(\"hello\", \"world\") == False",
        "assert are_anagrams(\"actors\", \"rotasc\") == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}