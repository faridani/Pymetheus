{
    "title": "'Anagram Finder (Hard)'",
    "description": "Given two strings, write a function called `find_anagrams` that checks if the two input strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n#### Function Signature\n```python\ndef find_anagrams(str1: str, str2: str) -> bool:\n```\n\n#### Input\n- `str1` (str): A string containing only lowercase letters\n- `str2` (str): A string containing only lowercase letters\n\n#### Output\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.\n",
    "code": "from collections import Counter\ndef find_anagrams(str1: str, str2: str) -> bool:\n    # Create frequency dictionary for both strings\n    counter1 = Counter(str1)\n    counter2 = Counter(str2)\n    \n    # Check if both dictionaries have the same number of items (letters)\n    if len(counter1) != len(counter2):\n        return False\n    \n    # Iterate through the dictionary items and check if they are the same for both strings\n    for key, value in counter1.items():\n        if counter2[key] != value:\n            return False\n    \n    # If no mismatch found, return True\n    return True",
    "tests": [
        "assert find_anagrams('listen', 'silent') == True",
        "assert find_anagrams('apple', 'pear') == False",
        "assert find_anagrams('stars', 'rats') == True",
        "assert find_anagrams('abcde', 'cdeab') == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}