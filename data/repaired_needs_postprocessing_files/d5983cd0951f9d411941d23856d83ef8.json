{
    "title": "Maximum Sum of Words",
    "description": "Given a list of words and an integer `k`, find the maximum sum of `k` words that can be formed by concatenating adjacent words in the list. For example, if we have the list ['hello', 'world', 'abc', 'def'] and `k = 2`, one possible combination is 'helloworld' (concatenating 'hello' and 'world') and another possible combination is 'abcdef' (concatenating 'abc' and 'def'). The maximum sum of words would be the length of these concatenated strings.\n\n#### Function Signature\n```python\ndef max_sum_of_words(words: List[str], k: int) -> int:\n```\n\n#### Input\n- `words` (List[str]): A list of words.\n- `k` (int): The number of words to concatenate.\n\n#### Output\n- Returns the maximum sum of `k` words that can be formed by concatenating adjacent words in the list.",
    "code": "from typing import List\n\ndef max_sum_of_words(words: List[str], k: int) -> int:\n    if k == 0:\n        return 0\n    max_length = 0\n    for i in range(len(words) - k + 1):\n        concatenated_word = ''.join(words[i:i+k])\n        max_length = max(max_length, len(concatenated_word))\n    return max_length",
    "tests": [
        "assert max_sum_of_words(['hello', 'world', 'abc', 'def'], 2) == 10",
        "assert max_sum_of_words(['a', 'b', 'c'], 3) == 0",
        "assert max_sum_of_words(['apple', 'banana', 'cherry'], 1) == 5"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}