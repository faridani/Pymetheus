{
    "title": "Hard: Maximum Subarray Sum with Rotations",
    "description": "You are given an array of integers `nums`. You can rotate the array any number of times. Find the maximum sum of a contiguous subarray after performing zero or more rotations.\n\n#### Function Signature\n```python\ndef max_subarray_sum_with_rotations(nums: list[int]) -> int:\n```\n\n#### Input\n- `nums` (list[int]): An array of integers.\n\n#### Output\n- Returns the maximum sum of a contiguous subarray after performing zero or more rotations.",
    "code": "def max_subarray_sum_with_rotations(nums: list[int]) -> int:\n    n = len(nums)\n    max_so_far = nums[0]\n    curr_max = nums[0]\n\n    for i in range(1, n):\n        curr_max = max(nums[i], curr_max + nums[i])\n        max_so_far = max(max_so_far, curr_max)\n\n    for i in range(n - 1):\n        # Rotate the array\n        nums.append(nums.pop(0))\n        curr_max = nums[0]\n        for j in range(1, n):\n            curr_max = max(nums[j], curr_max + nums[j])\n            max_so_far = max(max_so_far, curr_max)\n\n    return max_so_far",
    "tests": [
        "assert max_subarray_sum_with_rotations([1, -2, 3, 4]) == 8",
        "assert max_subarray_sum_with_rotations([-1, 2, 1, -4]) == 3",
        "assert max_subarray_sum_with_rotations([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}