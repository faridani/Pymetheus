{
    "title": "'Anagram Palindrome Finder (Hard)'",
    "description": "Given a list of words, find the pair of words that form an anagram and are also palindromes. An anagram is a word or phrase that consists of the same letters as another word or phrase, but arranged differently. For example, 'listen' and 'silent' are anagrams.\n\n#### Function Signature\n```python\ndef find_anagram_palindromes(words: List[str]) -> List[Tuple[str, str]]:\n```\n\n#### Input\n- `words` (List[str]): A list of strings containing only alphanumeric characters.\n\n#### Output\n- Returns a list of tuples where each tuple contains two words that are anagrams and also palindromes.",
    "code": "def find_anagram_palindromes(words: List[str]) -> List[Tuple[str, str]]:\n    # Create a dictionary to store the frequency of each character in each word\n    char_freq = {}\n    for word in words:\n        for char in word:\n            if char not in char_freq:\n                char_freq[char] = 0\n            char_freq[char] += 1\n    # Create a list to store the anagram pairs\n    anagrams = []\n    # Iterate through all possible anagram combinations of two words\n    for i in range(len(words)):\n        for j in range(i + 1, len(words)):\n            # Check if the two words are anagrams\n            if sorted(char_freq[words[i]]) == sorted(char_freq[words[j]]):\n                # Check if both words are palindromes\n                if is_palindrome(words[i]) and is_palindrome(words[j]):\n                    anagrams.append((words[i], words[j]))\n    return anagrams",
    "tests": [
        "assert find_anagram_palindromes(['madam', 'racecar', 'level', 'deified', 'rotor', 'radar']) == [('madam', 'damam'), ('racecar', 'carcerar')]",
        "assert find_anagram_palindromes(['eye', 'yoyo', 'level', 'deified', 'rotor', 'radar']) == []"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}