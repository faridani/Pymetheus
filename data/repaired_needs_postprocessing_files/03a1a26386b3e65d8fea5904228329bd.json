{
    "title": "Anagram Detector (Hard)",
    "description": "An anagram is a word or phrase that consists of the same letters as another, but arranged differently. Write a function `anagram_checker` that checks if two given strings are anagrams of each other.\n#### Function Signature\n```python\ndef anagram_checker(str1: str, str2: str) -> bool:\n```\n\n#### Input\n- `str1`, `str2` (str): Two strings that may contain letters (case-insensitive), numbers, and punctuation.\n#### Output\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.",
    "code": "import string, collections\ndef anagram_checker(str1: str, str2: str) -> bool:\n    # Normalize the inputs (remove punctuation and convert to lowercase)\n    str1 = ''.join([char for char in str1 if char not in string.punctuation]).lower()\n    str2 = ''.join([char for char in str2 if char not in string.punctuation]).lower()\n    # Count the frequency of each character in both strings and compare\n    char_counts = collections.Counter(str1) & collections.Counter(str2)\n    return len(char_counts) == len(str1) and all(count == 0 or count == 2 for count in char_counts.values())",
    "tests": [
        "assert anagram_checker('Listen', 'Silent') == True",
        "assert anagram_checker('Madam', 'm' + 'a' + 'd' + 'a' + 'm') == True",
        "assert anagram_checker('Hello World', 'World Hello') == True",
        "assert anagram_checker('A man, a plan, a canal, Panama', 'amanaplanacanalpanamayadapalanama') == True",
        "assert anagram_checker('abcdef', 'cdefab') == False"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}