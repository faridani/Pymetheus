{
    "title": "Easy: Validating Anagrammed Strings",
    "description": "An anagrammed string is a rearrangement of the characters in a given string. Write a function `is_anagrammed` that takes two strings as input and returns `True` if the second string is an anagrammed version of the first string, and `False` otherwise.\n\n#### Function Signature\n```\ndef is_anagrammed(s1: str, s2: str) -> bool:\n``` \n\n#### Input\n- `s1` (str): The original string.\n- `s2` (str): A potential anagrammed version of the first string.\n\n#### Output\n- Returns `True` if `s2` is an anagrammed version of `s1`, `False` otherwise. ",
    "code": "import collections\ndef is_anagrammed(s1: str, s2: str) -> bool:\n    # Convert both strings to lowercase and remove non-alphanumeric characters\n    s1 = ''.join(char for char in s1.lower() if char.isalnum()).replace(' ', '')\n    s2 = ''.join(char for char in s2.lower() if char.isalnum()).replace(' ', '')\n    # Check if the two strings have the same characters and their counts are equal\n    return collections.Counter(s1) == collections.Counter(s2)",
    "tests": [
        "assert is_anagrammed('listen', 'silent') == True",
        "assert is_anagrammed('hello', 'world') == False",
        "assert is_anagrammed('acts', 'cats') == True",
        "assert is_anagrammed('abcde', 'edcba') == True"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}