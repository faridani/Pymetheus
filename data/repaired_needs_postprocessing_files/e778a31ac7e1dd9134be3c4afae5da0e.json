{
    "title": "Anagram Detection (Hard)",
    "description": "Determine if two given strings are anagrams of each other, meaning that the letters in both strings appear in the same frequency. For example, 'listen' and 'silent' are anagrams.\n\n#### Function Signature\n```python\ndef is_anagram(s1: str, s2: str) -> bool:\n```\n\n#### Input\n- `s1`, `s2` (str): Two strings of any length containing only lowercase letters.\n\n#### Output\n- Returns `True` if both input strings are anagrams of each other, `False` otherwise.\n",
    "code": "from collections import Counter\ndef is_anagram(s1: str, s2: str) -> bool:\n    # Ensure the strings have the same length\n    if len(s1) != len(s2):\n        return False\n    \n    # Count the frequency of each character in both strings\n    c1 = Counter(s1)\n    c2 = Counter(s2)\n    \n    # Check if both counts are equal (ignoring order)\n    return c1 == c2",
    "tests": [
        "assert is_anagram(\"listen\", \"silent\") == True",
        "assert is_anagram(\"racecar\", \"ceracarace\") == True",
        "assert is_anagram(\"hello\", \"world\") == False",
        "assert is_anagram(\"acttcat\", \"actcatc\") == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}