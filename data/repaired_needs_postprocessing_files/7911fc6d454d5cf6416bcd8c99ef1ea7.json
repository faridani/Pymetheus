{
    "title": "Palindromic Substrings Count - Easy",
    "description": "A palindromic substring is a sequence of characters that reads the same backward as forward. Write a function `count_palindromes` that finds and counts the number of non-overlapping palindromic substrings in a given string.\n\n#### Function Signature\n```python\ndef count_palindromes(s: str) -> int:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns the number of non-overlapping palindromic substrings found in the input string.\n",
    "code": "import re\ndef count_palindromes(s: str) -> int:\n    # Find all possible palindromic substrings using a regular expression\n    palindromes = len(re.findall('(\\b[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9].?[a-zA-Z0-9]\\b)', s))\n    # Account for the fact that each palindrome is counted twice due to its start and end positions, so divide by 2\n    return palindromes // 2",
    "tests": [
        "assert count_palindromes('racecar') == 3",
        "assert count_palindromes('abccba') == 4",
        "assert count_palindromes('hello world!') == 2",
        "assert count_palindromes('A man, a plan, a canal: Panama') == 15"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}