{
    "title": "Hard: Longest Increasing Subsequence with K Swaps",
    "description": "Given an array of integers `nums` and a non-negative integer `k`, find the length of the longest increasing subsequence (LIS) you can obtain from `nums` by performing at most `k` swaps. You are allowed to swap any two elements in the array.\n\n#### Function Signature\n```python\ndef longest_increasing_subsequence_with_swaps(nums: list[int], k: int) -> int:\n```\n\n#### Input\n- `nums` (list[int]): An array of integers. - `k` (int): The maximum number of swaps allowed.\n\n#### Output\n- Returns the length of the longest increasing subsequence obtainable after at most `k` swaps.",
    "code": "def longest_increasing_subsequence_with_swaps(nums: list[int], k: int) -> int:\n    n = len(nums)\n    dp = [[0 for _ in range(k + 1)] for _ in range(n)]\n\n    for i in range(n):\n        dp[i][0] = 1  # LIS without any swaps\n\n    for i in range(1, n):\n        for j in range(1, k + 1):\n            max_lis = 1\n            for p in range(i):\n                if nums[p] < nums[i]:\n                    max_lis = max(max_lis, dp[p][j - 1] + 1)\n            dp[i][j] = max_lis\n\n    return max(dp[n-1])",
    "tests": [
        "assert longest_increasing_subsequence_with_swaps([1, 2, 3], 0) == 3",
        "assert longest_increasing_subsequence_with_swaps([5, 2, 4, 1, 3], 1) == 4",
        "assert longest_increasing_subsequence_with_swaps([1, 5, 3, 2, 4], 2) == 4"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}