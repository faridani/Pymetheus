{
    "title": "Maximum Sum Subarray",
    "description": "Given an array of integers, find the maximum sum of a subarray within that array. A subarray is a contiguous part of the array.\n\n#### Function Signature\n```python\ndef max_sum_subarray(arr: list[int]) -> int:\n``` \n\n#### Input\n- `arr` (list[int]): An array of integers.\n\n#### Output\n- Returns an integer representing the maximum sum of a subarray within the input array.\n\nFor example, if the input array is `[1, 2, -3, 4, -1]`, your function should return `6`, because the maximum sum subarray is `[4, -1]` with a sum of `6`. \n",
    "code": "import copy\ndef max_sum_subarray(arr: list[int]) -> int:\n    if not arr:\n        return 0\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in arr:\n        current_sum += num\n        if current_sum < 0:\n            current_sum = 0\n        else:\n            max_sum = max(max_sum, current_sum)\n    return max_sum",
    "tests": [
        "assert max_sum_subarray([1, 2, -3, 4, -1]) == 6",
        "assert max_sum_subarray([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6",
        "assert max_sum_subarray([]) == 0",
        "assert max_sum_subarray([1, 2, 3]) == 6"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}