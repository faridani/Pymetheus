{
    "title": "Anagram Finder (Hard)",
    "description": "An anagram is a word or phrase that consists of the same letters as another, but arranged differently. Write a function `find_anagrams` that takes a list of words as input and returns all pairs of words in the list that are anagrams of each other.\n\n#### Function Signature\n```python\ndef find_anagrams(word_list: List[str]) -> Set[Tuple[str, str]]:\n```\n\n#### Input\n- `word_list` (List[str]): A list of lowercase strings containing only letters and spaces.\n\n#### Output\n- Returns a set of tuples where each tuple contains two words that are anagrams of each other.\n",
    "code": "from collections import Counter, defaultdict\ndef find_anagrams(word_list: List[str]) -> Set[Tuple[str, str]]:\n    # Create a counter for each word in the list\n    word_counter = defaultdict(int)\n    for word in word_list:\n        word_counter[word] += 1\n    \n    # Find all pairs of words that have the same count and their counts add up to the length of the word\n    anagrams = set()\n    for word1, count1 in word_counter.items():\n        for word2, count2 in word_counter.items():\n            if word1 != word2 and count1 + count2 == len(word1) and count1 == count2:\n                anagrams.add((word1, word2))\n    \n    return anagrams",
    "tests": [
        "assert find_anagrams(['listen', 'silent', 'enlist']) == {('listen', 'silent'), ('enlist', 'silent')}",
        "assert find_anagrams(['cool', 'loom', 'moo', 'tool']) == {('cool', 'loom'), ('moo', 'oom')}",
        "assert find_anagrams(['hello', 'world']) == set()"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}