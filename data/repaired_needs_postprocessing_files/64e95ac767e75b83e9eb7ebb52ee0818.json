{
    "title": "Anagram Finder (Hard)",
    "description": "Write a function `find_anagrams(words: List[str]) -> Dict[str, List[str]]` that finds all the anagrams of given words. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n#### Function Signature\n```python\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\n```\n\n#### Input\n- `words` (List[str]): A list of strings containing words that may have the same letters but in a different order.\n\n#### Output\n- Returns a dictionary where keys are anagrams and values are lists of their original words. For example, if input is ['listen', 'silent', 'enlists'] the output should be {'listen': ['listen'], 'enlist': ['enlist'], 'silent': ['silent']}\n",
    "code": "from collections import Counter\n\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\n    # Create a counter for each word to count the frequency of letters\n    anagram_dict = {}\n    for word in words:\n        # Count the frequency of letters in the current word\n        letter_count = Counter(word)\n        \n        # If this is the first occurrence of this anagram, create a list for it\n        if letter_count not in anagram_dict.keys():\n            anagram_dict[letter_count] = []\n        \n        # Add the original word to the list of anagrams\n        anagram_dict[letter_count].append(word)\n    return anagram_dict",
    "tests": [
        "assert find_anagrams(['listen', 'silent', 'enlists']) == {'listen': ['listen'], 'enlist': ['enlist'], 'silent': ['silent']}",
        "assert find_anagrams(['apple', 'apples', 'appell']) == {'apple': ['apple'], 'apples': ['apples'], 'appell': ['appell']}",
        "assert find_anagrams(['rat', 'cat', 'car', 'tarc', 'art', 'act']) == {'rat': ['rat'], 'cat': ['cat'], 'car': ['car'], 'tarc': ['tarc'], 'art': ['art'], 'act': ['act']}",
        "assert find_anagrams(['']) == {}"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}