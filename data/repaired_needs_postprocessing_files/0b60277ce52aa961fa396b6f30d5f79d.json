{
    "title": "'Palindrome Index' (Easy)",
    "description": "Given a non-empty string `s`, find the palindrome index of `s`. The 'palindrome index' is the smallest integer `k` such that the substring `s[0:k]` and the substring `s[k:len(s)]` are equal in reverse order.\n\n#### Function Signature\n```python\ndef palindrome_index(s: str) -> int:\n```\n\n#### Input\n- `s` (str): A non-empty string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns the smallest integer `k` such that the substring `s[0:k]` and the substring `s[k:len(s)]` are equal in reverse order. If no such `k` exists, return -1.",
    "code": "import re\ndef palindrome_index(s: str) -> int:\n    # Remove non-alphanumeric characters and spaces\n    s = re.sub('[^a-zA-Z0-9]', '', s)\n    if len(s) <= 1: return -1\n    # Find the midpoint of the string\n    mid = len(s) // 2\n    # Check the left and right halves for equality\n    left, right = s[:mid], s[mid:]\n    if left == right[::-1]: return mid\n    if left != right: return -1",
    "tests": [
        "assert palindrome_index(\"babad\") == 1",
        "assert palindrome_index(\"cbawewcbac\") == 2",
        "assert palindrome_index(\"abcdefghijklmnopqrstuvwxyz\") == -1",
        "assert palindrome_index(\"zots\") == 0"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}