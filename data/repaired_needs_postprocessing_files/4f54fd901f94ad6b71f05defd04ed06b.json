{
    "title": "Hard: Minimum Deletions for Unique Substrings",
    "description": "Given a string `s`, find the minimum number of characters you need to delete from the string so that all remaining substrings are unique.\n\n#### Function Signature```python\ndef min_deletions(s: str) -> int:\n```\n\n#### Input\n- `s` (str): A string containing lowercase letters.\n\n#### Output\n- Returns the minimum number of deletions required to make all substrings unique.",
    "code": "def min_deletions(s: str) -> int:\n    n = len(s)\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            dp[i][j] = dp[i][j - 1]\n            for k in range(i, j):\n                if s[k] != s[j]:\n                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k + 1][j - 1])\n    return n - dp[0][n-1]\n",
    "tests": [
        "assert min_deletions(\"abcabc\") == 3",
        "assert min_deletions(\"aabbccddeeff\") == 9",
        "assert min_deletions(\"aba\") == 1",
        "assert min_deletions(\"aaabbb\") == 4"
    ],
    "model": "gemma2:27b-instruct-q5_K_S-repaired by Llama 3"
}