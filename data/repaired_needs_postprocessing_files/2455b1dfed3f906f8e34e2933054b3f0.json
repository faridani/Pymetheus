{
    "title": "Counting Islands",
    "description": "Given a grid of 0s and 1s, write a function `count_islands` that counts the number of islands. An island is defined as any sequence of adjacent (horizontally or vertically) 1s. If there are no islands in the grid, return 0.\n\n#### Function Signature\n```python\ndef count_islands(grid: list[list[int]]) -> int:\n``` \n\n#### Input\n- `grid` (list[list[int]]): A grid of 0s and 1s where 1 represents an island.\n\n#### Output\n- Returns the number of islands in the grid.",
    "code": "def count_islands(grid: list[list[int]]) -> int:\n    if not grid or not grid[0]:\n        return 0\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                dfs(grid, i, j)\n    return count\n\ndef dfs(grid: list[list[int]], i: int, j: int):\n    if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] != 1:\n        return\n    grid[i][j] = 2  # mark as visited\n    dfs(grid, i - 1, j)\n    dfs(grid, i + 1, j)\n    dfs(grid, i, j - 1)\n    dfs(grid, i, j + 1)\n    global count\n    count += 1",
    "tests": [
        "assert count_islands([[0,0,1,0,0],[1,0,1,1,0],[0,1,0,0,1],[0,1,0,1,1]]) == 1",
        "assert count_islands([[0,0,0,0,0],[0,1,0,0,0],[0,1,1,1,0],[0,1,1,0,0]]) == 3",
        "assert count_islands([[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]) == 0"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}