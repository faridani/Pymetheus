{
    "title": "Anagram Checker (Hard)",
    "description": "Given two strings, determine if the characters from one string can be rearranged to form the other string. This is called an anagram.\n\n#### Function Signature\n```python\ndef check_anagram(s1: str, s2: str) -> bool:\n```\n\n#### Input\n- `s1` (str): A string containing lowercase letters.\n- `s2` (str): Another string containing lowercase letters.\n\n#### Output\n- Returns `True` if the two strings are anagrams, `False` otherwise.\n",
    "code": "def check_anagram(s1: str, s2: str) -> bool:\n    # Ensure both strings have the same length before checking for anagram\n    if len(s1) != len(s2):\n        return False\n    \n    # Count the frequency of each character in s1\n    counts = Counter(s1)\n    \n    # Iterate through characters in s2, decrementing their count in s1 if they exist and returning False immediately if any count becomes negative\n    for char in s2:\n        if char not in counts or counts[char] == 0:\n            return False\n        counts[char] -= 1\n    \n    # If we've gone through all characters in s2 and none of their counts have become negative, the strings are anagrams\n    return True",
    "tests": [
        "assert check_anagram(\"listen\", \"silent\") == True",
        "assert check_anagram(\"hello\", \"world\") == False",
        "assert check_anagram(\"cars\", \"race\") == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}