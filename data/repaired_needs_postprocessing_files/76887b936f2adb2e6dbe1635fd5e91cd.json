{
    "title": "Hard: Minimum Swaps for Increasing Sequence",
    "description": "Given an array of integers, find the minimum number of swaps required to sort the array into strictly increasing order. You can only swap adjacent elements.\n\n#### Function Signature\n```python\ndef min_swaps(arr):\n```\n\n#### Input\n- `arr` (list of int): An array of integers.\n\n#### Output\n- Returns the minimum number of swaps required to sort the array in strictly increasing order. If it's impossible to sort the array, return -1.",
    "code": "def min_swaps(arr):\n    n = len(arr)\n    visited = [False] * n\n    cycle_count = 0\n\n    for i in range(n):\n        if not visited[i]:\n            j = i\n            cycle_len = 0\n            while not visited[j]:\n                visited[j] = True\n                j = arr.index(min(arr[j:]))  # Find the index of the minimum element in the remaining unsorted part\n                cycle_len += 1\n            cycle_count += cycle_len - 1\n    return cycle_count if all(visited) else -1",
    "tests": [
        "assert min_swaps([7, 1, 3, 2, 4, 5, 6]) == 5",
        "assert min_swaps([1, 2, 3, 4, 5]) == 0",
        "assert min_swaps([4, 3, 2, 1]) == -1"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}