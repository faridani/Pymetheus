{
    "title": "Hard: Maximum Sum of Subarray with No More Than Two Consecutive Elements",
    "description": "Given a list of integers, find the maximum sum of a subarray where no more than two consecutive elements are used. The subarray can be of any length, from 1 to the length of the original array. Write a function `max_sum_subarray` that calculates this maximum sum.\n#### Function Signature\n```python\ndef max_sum_subarray(arr: list[int]) -> int:\n``` \n#### Input\n- `arr` (list[int]): A list of integers.\n#### Output\n- Returns the maximum sum of a subarray where no more than two consecutive elements are used.",
    "code": "def max_sum_subarray(arr: list[int]) -> int:\n    n = len(arr)\n    dp1 = [0] * (n + 1)\n    dp2 = [0] * (n + 1)\n\n    for i in range(n):\n        if i < 2:\n            dp1[i + 1] = max(0, arr[i])\n            dp2[i + 1] = max(dp1[i], arr[i])\n        else:\n            dp1[i + 1] = max(dp1[i - 1], 0)\n            if i > 1:\n                dp2[i + 1] = max(dp2[i - 1] + arr[i], dp1[i])\n            else:\n                dp2[i + 1] = max(0, arr[i])\n    return max(dp2[:n + 1])",
    "tests": [
        "assert max_sum_subarray([-1, 2, 3, -4, 5, -6]) == 7",
        "assert max_sum_subarray([1, -2, 3, -4, 5, -6]) == 8",
        "assert max_sum_subarray([10, 20, 30]) == 60",
        "assert max_sum_subarray([-1, -2, -3]) == -1"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}