{
    "title": "Anagram Checker (Medium)",
    "description": "Given two strings, determine if they are anagrams of each other. An anagram is a word or phrase that consists of the same letters as another, but in a different arrangement.\n\n#### Function Signature\n```python\ndef areAnagrams(s1: str, s2: str) -> bool:\n``` \n\n#### Input\n- `s1`, `s2` (str): Two strings that may contain only letters (no numbers or punctuation). The length of each string will be at most 100 characters.\n\n#### Output\n- Returns `True` if the two input strings are anagrams, `False` otherwise.\n",
    "code": "def areAnagrams(s1: str, s2: str) -> bool:\n    # Ensure both strings have the same length\n    if len(s1) != len(s2):\n        return False\n    \n    # Create two dictionaries to count the frequency of each letter in the input strings\n    s1_freq = {}\n    s2_freq = {}\n    for char in s1:\n        if char not in s1_freq:\n            s1_freq[char] = 0\n        s1_freq[char] += 1\n    for char in s2:\n        if char not in s2_freq:\n            s2_freq[char] = 0\n        s2_freq[char] += 1\n    \n    # Compare the two dictionaries to check if they are the same (ignoring the order of keys)\n    return sorted(s1_freq.items()) == sorted(s2_freq.items())",
    "tests": [
        "assert areAnagrams(\"listen\", \"silent\") == True",
        "assert areAnagrams(\"hello\", \"world\") == False",
        "assert areAnagrams(\"A man, a plan, a canal, Panama\", \"amanaplanacanalpanam\") == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}