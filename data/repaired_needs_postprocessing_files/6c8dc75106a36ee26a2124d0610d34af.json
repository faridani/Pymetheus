{
    "title": "'Anagram Finder (Hard)'",
    "description": "Write a function `find_anagrams(words: List[str]) -> Dict[str, List[str]]` that takes a list of words and returns a dictionary where the keys are the anagrams and the values are lists of words that form the anagram.\n\n#### Function Signature\n```python\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\n```\n\n#### Input\n- `words` (List[str]): A list of strings that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns a dictionary where the keys are anagrams (unique sorted strings) and the values are lists of words that form the anagram.",
    "code": "from collections import Counter, OrderedDict\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\n    # Count the occurrence of each character in each word\n    counts = [Counter(sorted(word)) for word in words]\n    \n    # Initialize an empty dictionary to store the result\n    anagrams = OrderedDict()\n\n    # Iterate through the list of counts\n    for count in counts:\n        # Combine the counts into a single string\n        key = ''.join([str(char) for char in count.elements()])\n        \n        # If the key is not already in the dictionary, add it and initialize its value as an empty list\n        if key not in anagrams:\n            anagrams[key] = []\n        \n        # Add the word to the corresponding anagram list\n        anagrams[key].append(count[''.join(count)])\n    \n    return anagrams",
    "tests": [
        "assert find_anagrams(['listen', 'silent', 'enlist']) == {'enlistsilente': ['listen', 'silent']}",
        "assert find_anagrams(['movie', 'chimpmunk', 'film']) == {'moviefilmimm': ['movie', 'film']}",
        "assert find_anagrams(['hello', 'world', 'olleh', 'dlrow']) == {'dlrowolleh': ['hello', 'olleh', 'dlrow']}"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}