{
    "title": "Maximum Sum of Non-Adjacent Elements",
    "description": "Given a list of integers, find the maximum sum of non-adjacent elements. For example, if you have [2, 7, 9, 3, 1], the maximum sum would be 12 (2 + 9), but you can't include both because they are adjacent. Write a function `max_sum` that takes a list of integers as input and returns the maximum sum.\n\n#### Function Signature\n```python\ndef max_sum(nums: list[int]) -> int:\n``` \n\n#### Input\n- `nums` (list[int]): A list of integers.\n\n#### Output\n- Returns the maximum sum of non-adjacent elements in the input list.\n",
    "code": "def max_sum(nums: list[int]) -> int:\n    if len(nums) == 0:\n        return 0\n    elif len(nums) <= 2:\n        return max(0, max(nums))\n    else:\n        dp = [0] * (len(nums) + 1)\n        dp[1] = max(0, nums[0])\n        for i in range(2, len(nums) + 1):\n            dp[i] = max(dp[i-1], dp[i-2] + nums[i-1])\n        return dp[-1]\n",
    "tests": [
        "assert max_sum([2, 7, 9, 3, 1]) == 12",
        "assert max_sum([2, 7, 9]) == 10",
        "assert max_sum([]) == 0",
        "assert max_sum([1, 2]) == 2"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}