{
    "title": "'Anagram Detection (Hard)'",
    "description": "An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a function `is_anagram` that checks if two given strings are anagrams. \n\n#### Function Signature\n```python\ndef is_anagram(str1: str, str2: str) -> bool:\n```\n\n#### Input\n- `str1` (str): A string containing lowercase English letters.\n- `str2` (str): Another string containing lowercase English letters.\n\n#### Output\n- Returns `True` if the two input strings are anagrams, `False` otherwise.",
    "code": "def is_anagram(str1: str, str2: str) -> bool:\n    # Ensure both strings have the same length\n    if len(str1) != len(str2):\n        return False\n    \n    # Count the frequency of each character in both strings\n    char_counts = {}  # This dictionary will store the counts for str1\n    for char in str1:\n        if char not in char_counts:\n            char_counts[char] = 1\n        else:\n            char_counts[char] += 1\n    \n    # Reset the count dictionary to store the counts for str2\n    for char in str2:\n        if char not in char_counts:\n            return False\n        char_counts[char] -= 1\n    \n    # If all characters have been accounted for and all counts are zero, then the strings are anagrams\n    return all(value == 0 for value in char_counts.values())",
    "tests": [
        "assert is_anagram('listen', 'silent') == True",
        "assert is_anagram('hello', 'world') == False",
        "assert is_anagram('actTcat', 'actcat') == True",
        "assert is_anagram('quickbrownfoxjumpsoverlazydog', 'dogzylazydogfroxnworbknuqq') == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}