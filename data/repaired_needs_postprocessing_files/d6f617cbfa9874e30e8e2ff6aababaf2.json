{
    "title": "Anagram Detection (Hard)",
    "description": "An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n#### Function Signature\n```python\ndef are_anagrams(str1: str, str2: str) -> bool:\n``` \n\n#### Input\n- `str1` (str): A string containing only lowercase alphabetical characters.\n- `str2` (str): A string containing only lowercase alphabetical characters.\n\n#### Output\n- Returns `True` if the two input strings are anagrams of each other, and `False` otherwise.\n\n#### Constraints\n- The length of both `str1` and `str2` will always be greater than 0.\n",
    "code": "def are_anagrams(str1: str, str2: str) -> bool:\n    # Ensure the strings have the same length\n    if len(str1) != len(str2):\n        return False\n    # Count the frequency of each character in both strings\n    count_dict = {char: 0 for char in string.ascii_lowercase}\n    for char in str1:\n        count_dict[char] += 1\n    for char in str2:\n        count_dict[char] -= 1\n    # Check if all counts are zero\n    return all(count == 0 for count in count_dict.values())",
    "tests": [
        "assert are_anagrams('listen', 'silent') == True",
        "assert are_anagrams('cats', 'act') == False",
        "assert are_anagrams('madam', 'dam') == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}