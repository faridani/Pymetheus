{
    "title": "Anagram Detection (Hard)",
    "description": "Write a function `is_anagram` that determines if two given strings are anagrams of each other. Anagram is a word or phrase formed by rearranging the letters of another word or phrase, typically using all the original letters exactly once.\n\n#### Function Signature\n```python\ndef is_anagram(s1: str, s2: str) -> bool:\n```\n\n#### Input\n- `s1` (str): A string containing only lowercase letters.\n- `s2` (str): Another string containing only lowercase letters.\n\n#### Output\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.",
    "code": "def is_anagram(s1: str, s2: str) -> bool:\n    # Check if both strings have the same length\n    if len(s1) != len(s2):\n        return False\n    \n    # Create two frequency dictionaries for the characters in each string\n    freq_dict1 = {}\n    freq_dict2 = {}\n    for char in s1:\n        if char in freq_dict1:\n            freq_dict1[char] += 1\n        else:\n            freq_dict1[char] = 1\n    for char in s2:\n        if char in freq_dict2:\n            freq_dict2[char] += 1\n        else:\n            freq_dict2[char] = 1\n    \n    # Compare the two frequency dictionaries to check for anagrams\n    return freq_dict1 == freq_dict2",
    "tests": [
        "assert is_anagram(\"listen\", \"silent\") == True",
        "assert is_anagram(\"hello\", \"world\") == False",
        "assert is_anagram(\"movie\", \"vomit\") == False",
        "assert is_anagram(\"Eleven plus two equals twelve\", \"Twelve plus two equals twenty-two\") == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}