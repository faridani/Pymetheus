{
    "title": "Hard: Tree Diameter",
    "description": "The diameter of a tree is the length of the longest path between any two nodes. Given the root of a binary tree, find its diameter.\n\n#### Function Signature\n```python\ndef diameter_of_binary_tree(root) -> int:\n``` \n\n#### Input\n- `root` (TreeNode): The root node of the binary tree.\n\n#### Output\n- Returns an integer representing the diameter of the binary tree.",
    "code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef diameter_of_binary_tree(root) -> int:\n    if not root: return 0\n\n    def depth(node):\n        if not node: return 0\n        return max(depth(node.left), depth(node.right)) + 1\n\n    left_height = depth(root.left)\n    right_height = depth(root.right)\n\n    left_diameter = diameter_of_binary_tree(root.left)\n    right_diameter = diameter_of_binary_tree(root.right)\n\n    return max(left_height + right_height, max(left_diameter, right_diameter))\n",
    "tests": [
        "# Test Case 1\ntree1 = TreeNode(1)\ntree1.left = TreeNode(2)\ntree1.right = TreeNode(3)\ntree1.left.left = TreeNode(4)\ntree1.left.right = TreeNode(5)\nassert diameter_of_binary_tree(tree1) == 3\n\n# Test Case 2\ntree2 = TreeNode(1)\ntree2.left = TreeNode(2)\nassert diameter_of_binary_tree(tree2) == 2"
    ],
    "model": "gemma2:27b-instruct-q5_K_S-repaired by Llama 3"
}