{
    "title": "Hard Graph Cycle Detection",
    "description": "You are given an undirected graph with N nodes and M edges. Determine if there exists at least one cycle in the graph using DFS traversal.\n\n#### Function Signature\n```python\ndef is_cycle_present(graph: List[List[int]]) -> bool:\n```\n\n#### Input\n- `graph` (List[List[int]]): A list of lists representing an undirected graph where each sublist contains nodes connected by an edge.",
    "code": "from typing import List\n\ndef dfs(node, visited, recursion_stack, graph):\n    visited[node] = True\n    recursion_stack[node] = True\n    for neighbor in graph[node]:\n        if not visited[neighbor]:\n            if dfs(neighbor, visited, recursion_stack, graph):\n                return True\n        elif recursion_stack[neighbor]:\n            return True\n    recursion_stack[node] = False\n    return False\n\ndef is_cycle_present(graph: List[List[int]]) -> bool:\n    N = len(graph)\n    visited = [False] * N\n    recursion_stack = [False] * N\n\n    for i in range(N):\n        if not visited[i]:\n            if dfs(i, visited, recursion_stack, graph):\n                return True\n    return False",
    "tests": [
        "assert is_cycle_present([[1, 2], [2, 3], [5, 1]]) == True",
        "assert is_cycle_present([[1, 2], [2, 3], [4, 5]]) == False",
        "assert is_cycle_present([[0, 1], [1, 2], [2, 3], [3, 4], [4, 0]]) == True"
    ],
    "model": "qwen2:7b-repaired by Llama 3"
}