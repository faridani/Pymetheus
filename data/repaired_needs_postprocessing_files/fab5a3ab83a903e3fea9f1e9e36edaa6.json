{
    "title": "Hard - Maximum Subarray Sum with Rotations",
    "description": "Given an array of integers `nums`, find the maximum sum of a contiguous subarray after performing zero or more rotations on the array.\n\n#### Function Signature\n```python\ndef max_subarray_sum_with_rotations(nums: list[int]) -> int:\n```\n\n#### Input\n- `nums` (list[int]): An array of integers.\n\n#### Output\n- Returns the maximum sum of a contiguous subarray after performing zero or more rotations on the array.\n\n#### Constraints\n- 1 <= len(nums) <= 10^5\n- -10^4 <= nums[i] <= 10^4\n\n#### Hints\n- Consider using Kadane's Algorithm to efficiently find the maximum subarray sum for a given rotation.",
    "code": "def max_subarray_sum_with_rotations(nums: list[int]) -> int:\n    n = len(nums)\n    max_so_far = nums[0]\n    curr_max = nums[0]\n\n    for i in range(1, n):\n        curr_max = max(nums[i], curr_max + nums[i])\n        max_so_far = max(max_so_far, curr_max)\n\n    # Rotate the array and repeat the process\n\n    for i in range(1, n):\n        rotated_nums = nums[i:] + nums[:i]\n        curr_max = rotated_nums[0]\n        max_in_rotation = rotated_nums[0]\n\n        for j in range(1, n):\n            curr_max = max(rotated_nums[j], curr_max + rotated_nums[j])\n            max_in_rotation = max(max_in_rotation, curr_max)\n\n        max_so_far = max(max_so_far, max_in_rotation)\n    return max_so_far",
    "tests": [
        "assert max_subarray_sum_with_rotations([1, 2, 3]) == 6",
        "assert max_subarray_sum_with_rotations([-1, -2, 1]) == 1",
        "assert max_subarray_sum_with_rotations([5, -4, 3, 2]) == 7"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}