{
    "title": "Prime Factorization (Easy)",
    "description": "Write a function called `prime_factorization` that takes a non-negative integer `n` as an argument and returns a list of prime numbers that are factors of `n`. The order of the elements in the returned list should be in ascending order.\r\n\r\n#### Function Signature\r\n```python\r\ndef prime_factorization(n: int) -> List[int]:\r``` \r\r\n#### Input\r\n- `n` (int): A non-negative integer.\r\r\n#### Output\r\n- Returns a list of prime numbers that are factors of the input integer, in ascending order.\r",
    "code": "def prime_factorization(n: int) -> List[int]:\r    if n <= 1: return []\r    i = 2\r    factors = []\r    while i * i <= n:\r        if n % i == 0:\r            n //= i\r            factors.append(i)\r        i += 1\r    if n > 1: factors.append(n)\r    return sorted(factors)",
    "tests": [
        "assert prime_factorization(1) == []",
        "assert prime_factorization(2) == [2]",
        "assert prime_factorization(4) == [2, 2]",
        "assert prime_factorization(6) == [2, 3]",
        "assert prime_factorization(7) == [7]",
        "assert prime_factorization(18) == [2, 3, 3, 5]"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}