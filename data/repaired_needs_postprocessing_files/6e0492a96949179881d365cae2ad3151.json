{
    "title": "Anagram Detector (Hard)",
    "description": "Given two strings, write a function `are_anagrams` that checks if the input strings are anagrams of each other. Anagram is a word or phrase formed by rearranging the letters of another word or phrase, typically using all the original letters exactly once.\n\n#### Function Signature\n```python\ndef are_anagrams(s1: str, s2: str) -> bool:\n```\n\n#### Input\n- `s1` (str): A string that may contain lowercase alphabets only.\n- `s2` (str): Another string that may contain lowercase alphabets only.\n\n#### Output\n- Returns `True` if the input strings are anagrams of each other, `False` otherwise.\n",
    "code": "def are_anagrams(s1: str, s2: str) -> bool:\n    # Remove spaces from both strings\n    s1 = s1.replace(' ', '')\n    s2 = s2.replace(' ', '')\n    \n    # If the lengths of the strings are not equal, they cannot be anagrams.\n    if len(s1) != len(s2):\n        return False\n    \n    # Count the frequency of each character in the first string and store it in a dictionary.\n    count = {char: s1.count(char) for char in sorted(set(s1))}\n    \n    # Iterate over the second string, decrement the count of each character that appears in it,\n    # and check if any count becomes less than 0 (indicating a character that is not present in the first string).\n    for char in sorted(set(s2)):\n        if count.get(char) == None or count[char] <= 0:\n            return False\n        count[char] -= 1\n    \n    # If we have checked all characters without finding any that are not anagrams,\n    # the strings are indeed anagrams.\n    return True",
    "tests": [
        "assert are_anagrams('listen', 'silent') == True",
        "assert are_anagrams('hello', 'world') == False",
        "assert are_anagrams('actress', 'star') == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}