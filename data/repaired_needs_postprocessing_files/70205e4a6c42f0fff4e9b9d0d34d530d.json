{
    "title": "Maximum Sum of a Subsequence",
    "description": "Write a function `max_sum_subseq` that takes an integer array `nums` and returns the maximum sum of a subsequence of length `k`. The sequence can be any subsequence of the input array, not necessarily contiguous.\n#### Function Signature\n```python\ndef max_sum_subseq(nums: list[int], k: int) -> int:\n``` \n#### Input\n- `nums` (list[int]): A non-empty list of integers.\n- `k` (int): The length of the subsequence to find.\n#### Output\n- Returns the maximum sum of a subsequence of length `k`. If there are multiple subsequences with the same maximum sum, return any one of them.",
    "code": "def max_sum_subseq(nums: list[int], k: int) -> int:\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    # Initialize the current sum and the maximum sum\n    curr_sum = 0\n    max_sum = 0\n    for _ in range(k):\n        curr_sum += nums.pop(0)\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum",
    "tests": [
        "assert max_sum_subseq([10, 20, 30], 2) == 60",
        "assert max_sum_subseq([-1, -2, 3, 4], 3) == 7",
        "assert max_sum_subseq([-5, -5, 0, 0, 0], 3) == 10",
        "assert max_sum_subseq([1, 2, 3, 4, 5], 5) == 15"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}