{
    "title": "Anagram Finder (Hard)",
    "description": "An anagram is a word or phrase that is formed by rearranging the letters of another word or phrase, typically using all the original letters exactly once. Write a function `find_anagrams` that finds all anagrams for a given string within a list of strings.\n#### Function Signature\n```python\ndef find_anagrams(target: str, words: List[str]) -> List[str]:\n``` \n\n#### Input\n- `target` (str): The target string to find anagrams for.\n- `words` (List[str]): A list of strings containing possible anagrams.\n\n#### Output\n- Returns a list of strings that are anagrams of the input `target`. If no anagrams are found, returns an empty list.",
    "code": "from collections import Counter\ndef find_anagrams(target: str, words: List[str]) -> List[str]:\n    # Count the frequency of each letter in the target string\n    counter = Counter(target)\n    \n    # Find all strings that have the same count of letters as the target and no extra letters\n    anagrams = [word for word in words if len(counter) == len(Counter(word)) and all([counter[char] == counter.get(char, 0) for char in word])]\n    return anagrams",
    "tests": [
        "assert find_anagrams(\"listen\", ['enlists','silent', 'enlist']) == ['silent', 'enlist']",
        "assert find_anagrams(\"motorcycle\", ['crotolom', 'locomotive']) == ['crotolom']",
        "assert find_anagrams(\"hello\", ['world', 'olleh']) == []"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}