{
    "title": "Hard: Prime Spiral",
    "description": "You are given a square grid of size `n x n`. Starting at the center of the grid, you spiral outwards clockwise filling each cell with consecutive prime numbers. Write a function `prime_spiral(n)` that returns a 2D list representing this spiral of primes.\r\n\r\n#### Function Signature\r\n```\ndef prime_spiral(n: int) -> list:\r\n``` \r\n\r\n#### Input\r\n- `n` (int): The size of the square grid.\r\n\r\n#### Output\r\n- Returns a 2D list of integers representing the spiral of primes. The first element in the list is the prime number 2, and each subsequent element is the next consecutive prime number.\r\n\r\n#### Constraints\r\n- 1 <= `n` <= 50",
    "code": "def prime_spiral(n: int) -> list:\r\n    def is_prime(num):\r\n        if num <= 1:\r\n            return False\r\n        for i in range(2, int(num**0.5) + 1):\r\n            if num % i == 0:\r\n                return False\r\n        return True\r\n\r\n    spiral = [[0 for _ in range(n)] for _ in range(n)]\r\n    row, col = n // 2, n // 2\r\n    direction = 'right'\r\n    prime_count = 1\r\n    num = 2\r\n\r\n    while prime_count <= (n * n):\r\n        spiral[row][col] = num if is_prime(num) else 0\r\n        if direction == 'right' and (col + 1 >= n or spiral[row][col + 1] != 0):\r\n            direction = 'down'\r\n        elif direction == 'down' and (row + 1 >= n or spiral[row + 1][col] != 0):\r\n            direction = 'left'\r\n        elif direction == 'left' and (col - 1 < 0 or spiral[row][col - 1] != 0):\r\n            direction = 'up'\r\n        elif direction == 'up' and (row - 1 < 0 or spiral[row - 1][col] != 0):\r\n            direction = 'right'\r\n\r\n        if direction == 'right':\r\n            col += 1\r\n        elif direction == 'down':\r\n            row += 1\r\n        elif direction == 'left':\r\n            col -= 1\r\n        elif direction == 'up':\r\n            row -= 1\r\n\r\n        num += 1\r\n        prime_count += 1\r\n    return spiral",
    "tests": [
        "assert prime_spiral(3) == [[0, 2, 0], [0, 3, 5], [0, 7, 0]]",
        "assert prime_spiral(5) == [[0, 0, 19, 0, 0], [0, 7, 23, 29, 0], [31, 37, 41, 43, 47], [0, 53, 59, 61, 0], [0, 0, 67, 0, 0]]"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}