{
    "title": "Anagram Detector (Hard)",
    "description": "An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n#### Function Signature\n```python\ndef find_anagrams(words: List[str]) -> Set[str]:\n```\n\n#### Input\n- `words` (List[str]): A list of strings, each string containing only lowercase letters.\n\n#### Output\n- Returns a set of strings that are anagrams of other words in the input list.\n",
    "code": "def find_anagrams(words: List[str]) -> Set[str]:\n    word_indices = {sorted(word): i for i, word in enumerate(words)}\n    anagrams = set()\n    for sorted_word in sorted(set(map(sorted, words)), key=len, reverse=True):\n        if sorted_word not in word_indices:\n            continue\n        larger_words = [word for word in words if len(word) == len(sorted_word) and word > sorted_word]\n        for larger_word in larger_words:\n            if sorted(larger_word) == sorted_word and larger_word not in {sorted_word}:\n                anagrams.add(word_indices[sorted(larger_word)])\n    return {words[i] for i in sorted(anagrams)}",
    "tests": [
        "assert find_anagrams(['listen', 'silent', 'enlist']) == {'silent'}",
        "assert find_anagrams(['abcd', 'dcba', 'loves', 'evil', 'elves']) == {'dcba', 'elves'}"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}