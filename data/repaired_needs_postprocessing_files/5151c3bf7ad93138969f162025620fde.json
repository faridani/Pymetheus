{
    "title": "Palindromic Substrings' (Hard)",
    "description": "A palindromic substring of a given string is any contiguous sequence that reads the same forward and backward. Write a function `find_palindromes` that finds all the palindromic substrings in a given string.\n\n#### Function Signature\n```python\ndef find_palindromes(s: str) -> list[str]:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns a list of palindromic substrings found in the input string.",
    "code": "import re\ndef find_palindromes(s: str) -> list[str]:\n    # Find all possible overlapping patterns of length 1 to half the length of the string\n    patterns = [re.findall('.{' + str(len(s) // 2) + '}', s)] + [\n               [re.findall('.' + s[i:][::-1], s) for i in range(1, len(s))]\n            ]\n    # Flatten the list of lists\n    palindromes = []\n    for pattern in patterns:\n        palindromes.extend(pattern)\n    # Remove duplicates and convert to lowercase\n    palindromes = set(palindromes)\n    return sorted(list(palindromes))",
    "tests": [
        "assert find_palindromes(\"racecar\") == [\"r\", \"ace\", \"acecar\", \"c\", \"car\"]",
        "assert find_palindromes(\"radar\") == [\"a\", \"da\", \"dad\", \"rar\"]",
        "assert find_palindromes(\"mom\") == [\"m\", \"mo\", \"omm\"]",
        "assert find_palindromes(\"hello world! hello\") == [\"o\", \"olleh\", \"llo\"]"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}