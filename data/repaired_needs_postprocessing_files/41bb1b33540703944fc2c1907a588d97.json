{
    "title": "'Radix Sort Algorithm Implementation (Hard)'",
    "description": "Implement a function for Radix Sort, a comparison-based sorting algorithm that sorts data using buckets. Radix sort works by sorting numbers based on individual digits, starting from the rightmost digit and moving leftwards.\n\n#### Function Signature\n```\ndef radix_sort(arr: List[int]) -> List[int]:\n``` \n\n#### Input\n- `arr` (List[int]): A sorted list of positive integers with a maximum number of digits `k`. The input can contain leading zeros.\n\n#### Output\n- Returns a new sorted list of integers in ascending order.\n\n**Hint:** Radix sort uses LSB first, and for each pass, counts from 0 to 9 and sorts the array based on the corresponding digit (1's place, 10's place, 100's place etc.). The number of passes is equal to the maximum number of digits in any integer. You may find the `len()` function useful for determining this value.\n",
    "code": "def radix_sort(arr: List[int]) -> List[int]:\n    k = len(str(max(arr))) + 1\n    buckets = [[[] for _ in range(10)] for _ in range(k)]\n    for i in range(k):\n        for num in arr:\n            bucket_num = (num // 10**i) % 10\n            buckets[i][bucket_num].append(num)\n        arr = []\n        for j in range(10):\n            arr.extend(sorted(buckets[i][j]))\n    return arr",
    "tests": [
        "assert radix_sort([3849, 2985, 9767, 145, 24]) == [145, 24, 2985, 3849, 9767]",
        "assert radix_sort([12, 100, 101, 123, 1001, 1234]) == [12, 100, 101, 123, 1001, 1234]",
        "assert radix_sort([999, 123, 567, 888, 456, 777]) == [456, 567, 777, 888, 999, 123]"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}