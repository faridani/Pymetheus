{
    "title": "'Palindromic Substrings Finder (Medium)'",
    "description": "Given a string `s`, find all the non-overlapping palindromic substrings of the string. A palindromic string is a sequence of characters that reads the same forward and backward.\n\n#### Function Signature\n```\ndef find_palindromes(s: str) -> List[str]:\n``` \n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns a list of all the non-overlapping palindromic substrings in the input string.\n",
    "code": "import re\ndef find_palindromes(s: str) -> List[str]:\n    # Find all possible palindromic patterns\n    patterns = ['.'.join((c, '.', c)) for c in string.ascii_letters + string.digits]\n    patterns += ['.', '..']\n    # Find all matches using regex\n    matches = re.findall('|'.join(patterns), s)\n    # Filter out non-palindromic substrings\n    return [match for match in matches if len(match) > 1 and match[0] == match[-1]]",
    "tests": [
        "assert find_palindromes('babad') == ['bab', 'aba']",
        "assert find_palindromes('racecar') == ['racecar', 'cecar', 'race', 'cc']",
        "assert find_palindromes('Hello World!') == ['ll']"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}