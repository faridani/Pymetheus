{
    "title": "Roman Numeral Converter (Easy)",
    "description": "Write a function `to_roman` that converts an integer into its equivalent Roman numeral.\n\n#### Function Signature\n```python\ndef to_roman(number: int) -> str:\n```\n\n#### Input\n- `number` (int): A positive integer, up to and including 3999.\n\n#### Output\n- Returns the equivalent Roman numeral as a string.",
    "code": "def to_roman(number: int) -> str:\n    # Define the mapping of numbers to Roman numerals\n    roman_numerals = {'M': 1000, 'CM': 900, 'D': 500, 'CD': 400, 'C': 100, 'XC': 90, 'L': 50, 'XL': 40, 'X': 10, 'IX': 9, 'V': 5, 'IV': 4, 'I': 1}\n    # Initialize an empty string to hold the Roman numeral\n    roman_numeral = ''\n    \n    # Iterate over the input number from right to left (units place first)\n    for power, roman in enumerate(reversed(list(str(number)))):\n        # Get the corresponding Roman numeral\n        while number - (10 ** power) >= roman_numerals[roman]:\n            number -= roman_numerals[roman]\n            roman_numeral += roman\n    \n    return roman_numeral",
    "tests": [
        "assert to_roman(3) == 'III'",
        "assert to_roman(4) == 'IV'",
        "assert to_roman(9) == 'IX'",
        "assert to_roman(58) == 'LVIII'",
        "assert to_roman(1994) == 'MCMXCIV'"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}