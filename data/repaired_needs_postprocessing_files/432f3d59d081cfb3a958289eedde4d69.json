{
    "title": "Hard: Longest Increasing Subsequence with Jumps",
    "description": "Given a list of integers `nums`, find the length of the longest increasing subsequence where you are allowed to skip elements.  You can jump ahead any number of indices to reach the next element in the subsequence.\n\n#### Function Signature\n```python\ndef longest_increasing_subsequence(nums: list[int]) -> int:\n``` \n\n#### Input\n- `nums` (list[int]): A list of integers. \n\n#### Output\n- Returns the length of the longest increasing subsequence.",
    "code": "def longest_increasing_subsequence(nums: list[int]) -> int:\n    n = len(nums)\n    dp = [1] * n  # Initialize dp array with 1s (each element is itself a subsequence of length 1)\n\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)  # Update dp[i] if a longer subsequence is found\n    return max(dp)",
    "tests": [
        "assert longest_increasing_subsequence([1, 3, 2, 4, 5]) == 4",
        "assert longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4 ",
        "assert longest_increasing_subsequence([1, 2, 3, 4, 5]) == 5"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}