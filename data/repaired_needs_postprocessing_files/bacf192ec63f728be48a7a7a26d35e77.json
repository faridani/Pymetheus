{
    "title": "Anagram Finder (Hard)",
    "description": "Write a function `find_anagrams(str1: str, str2: str) -> bool` that checks if two given strings are anagrams of each other. An anagram is a word or phrase that consists of the same letters as another word or phrase in a different order.\n\n#### Function Signature\n```python\ndef find_anagrams(str1: str, str2: str) -> bool:\n```\n\n#### Input\n- `str1` (str): A non-empty string containing only lowercase letters.\n- `str2` (str): Another non-empty string containing only lowercase letters.\n\n#### Output\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.\n",
    "code": "def find_anagrams(str1: str, str2: str) -> bool:\n    # Ensure both strings have the same length\n    if len(str1) != len(str2):\n        return False\n    \n    # Create a dictionary to count each letter in str1 and initialize it to 0\n    letter_count = {letter: 0 for letter in string.ascii_lowercase}\n    \n    # Iterate through str1, increment the count of each letter in the dictionary\n    for char in str1:\n        letter_count[char] += 1\n    \n    # Reset a flag to True\n    is_anagram = True\n    \n    # Iterate through str2, decrement the count of each letter in the dictionary\n    for char in str2:\n        if char not in letter_count or letter_count[char] <= 0:\n            is_anagram = False\n            break\n        else:\n            letter_count[char] -= 1\n    \n    # Return the result of our comparison\n    return is_anagram",
    "tests": [
        "assert find_anagrams(\"listen\", \"silent\") == True",
        "assert find_anagrams(\"hello\", \"world\") == False",
        "assert find_anagrams(\"acttact\", \"tcatta\") == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}