{
    "title": "Easy: Perfect Arrangements",
    "description": "Given a list of integers, find the number of perfect arrangements that can be made with these numbers. A perfect arrangement is an arrangement where the sum of every three consecutive elements is equal.\n\n#### Function Signature\n```python\ndef count_arrangements(nums: list[int]) -> int:\n``` \n\n#### Input\n- `nums` (list[int]): A list of integers.\n\n#### Output\n- Returns the number of perfect arrangements that can be made with the given numbers.",
    "code": "def count_arrangements(nums: list[int]) -> int:\n    # Initialize the count and a set to keep track of sums we've seen so far\n    count = 0\n    seen_sums = {0}\n    for i in range(len(nums) - 2):\n        # Calculate the sum of every three consecutive elements starting from this position\n        current_sum = nums[i] + nums[i+1] + nums[i+2]\n        if current_sum not in seen_sums:\n            count += 1\n            seen_sums.add(current_sum)\n    return count",
    "tests": [
        "assert count_arrangements([3, 4, 5]) == 0",
        "assert count_arrangements([1, 2, 3, 4, 5]) == 1",
        "assert count_arrangements([1, 2, 3, 4, 5, 6]) == 2"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}