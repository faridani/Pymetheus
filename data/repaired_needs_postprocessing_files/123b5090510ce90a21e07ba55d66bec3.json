{
    "title": "'Palindromic Subsequence' - A Hard Problem",
    "description": "Given a string, find the longest palindromic subsequence. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n#### Function Signature\n```\ndef find_longest_palindrome(s: str) -> str:\n``` \n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns the longest palindromic subsequence found as a string.",
    "code": "def find_longest_palindrome(s: str) -> str:\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    max_length = 1\n    max_start = 0\n    \n    # Build the dynamic programming table.\n    for i in range(1, n):\n        for j in range(i):\n            if s[i] == s[j] and (i - j) <= 2 or dp[j + 1][i - 1]:\n                dp[j][i] = True\n                if max_length < i - j + 1:\n                    max_start = j\n                    max_length = i - j + 1\n    \n    # Initialize the answer string.\n    ans = [' '] * max_length\n    \n    # Fill in the answer string from the dynamic programming table.\n    i, j = max_start, max_start + max_length - 1\n    while i <= j:\n        ans[j - i] = s[i]\n        i += 1\n        j -= 1\n    \n    # Return the answer string with only the characters from the palindromic subsequence.\n    return ''.join(ans).strip()",
    "tests": [
        "assert find_longest_palindrome('babad') == 'badab'",
        "assert find_longest_palindrome('cbbdde') == 'bdb'",
        "assert find_longest_palindrome('acbca') == 'acbca'",
        "assert find_longest_palindrome('zxcvcz') == 'cv'"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}