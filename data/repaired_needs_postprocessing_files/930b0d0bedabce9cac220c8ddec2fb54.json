{
    "title": "Medium: Unique Character String",
    "description": "You are given a string `s`. Write a function that returns the length of the longest substring that contains exactly one unique character.\n\n#### Function Signature\n```python\ndef unique_char_substring_length(s: str) -> int:\n```\n\n#### Input\n- `s` (str): A string containing only lowercase English letters, with a maximum length of 10^4 characters.\n\n#### Output\n- Returns an integer representing the length of the longest substring that contains exactly one unique character. If no such substring exists, return `0`.\n\n#### Constraints and Hints\n- The solution should be able to handle large inputs efficiently.\n- You can use Python's built-in functions for string manipulation but avoid using sets or dictionaries for counting characters.",
    "code": "from collections import Counter\ndef unique_char_substring_length(s: str) -> int:\n    max_len = 0\n    char_count = Counter()\n    left, right = -1, 0\n\n    while right < len(s):\n        if s[right] not in char_count or char_count[s[right]] == 0:\n            char_count[s[right]] += 1\n            max_len = max(max_len, right - left)\n            right += 1\n        else:\n            char_count[s[left + 1]] -= 1\n            left += 1\n\n    return max_len",
    "tests": [
        "assert unique_char_substring_length(\"abcabcbb\") == 3",
        "assert unique_char_substring_length(\"bbbbbbb\") == 6",
        "assert unique_char_substring_length(\"pwwkew\") == 3",
        "assert unique_char_substring_length(\"\") == 0",
        "assert unique_char_substring_length(\" \") == 1"
    ],
    "model": "qwen2:7b-repaired by Llama 3"
}