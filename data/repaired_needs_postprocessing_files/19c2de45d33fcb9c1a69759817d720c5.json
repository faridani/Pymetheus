{
    "title": "Hard: Array Partition II",
    "description": "Given an integer array `nums`, partition it into two subsets such that the difference between their sums is minimum. The function should return the size of the smaller subset's sum.\n\n#### Function Signature\n```python\ndef min_partition(nums: List[int]) -> int:\n``` \n\n#### Input\n- `nums` (List[int]): A list of integers.\n\n#### Output\n- Returns an integer representing the size of the smaller subset's sum.\n\n#### Constraints\n- 1 <= nums.length <= 10000\n- -109 <= nums[i] <= 109\n\n#### Hints\n- Consider using dynamic programming to solve this problem efficiently.",
    "code": "from typing import List\n\ndef min_partition(nums: List[int]) -> int:\n    total_sum = sum(nums)\n    n = len(nums)\n    dp = [[float('inf')] * (total_sum + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n\n    for i in range(1, n + 1):\n        num = nums[i - 1]\n        for j in range(total_sum // 2, num - 1, -1):\n            dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - num] + num)\n\n    smaller_sum = min(dp[n][total_sum // 2], total_sum - dp[n][total_sum // 2])\n    return len(nums) - nums.count(smaller_sum)",
    "tests": [
        "assert min_partition([3, 5, 8, 10, 20]) == 1",
        "assert min_partition([-1, 1, -1]) == 2",
        "assert min_partition([1, 3, 4, 6]) == 0",
        "assert min_partition([1, 10000000]) == 1"
    ],
    "model": "codegeex4:9b-repaired by Llama 3"
}