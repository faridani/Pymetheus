{
    "title": "Hard - Minimum Deletions to Make a String Balanced",
    "description": "A string is considered balanced if it contains an equal number of opening and closing parentheses. Given a string containing only parentheses, write a function `min_deletions` that returns the minimum number of deletions required to make the string balanced.\n\n#### Function Signature\n```python\ndef min_deletions(s: str) -> int:\n``` \n\n#### Input\n- `s` (str): A string containing only parentheses '(' and ')'.\n\n#### Output\n- Returns the minimum number of deletions required to make the string balanced.\n",
    "code": "def min_deletions(s: str) -> int:\n    open_count = 0\n    close_count = 0\n    for char in s:\n        if char == '(': \n            open_count += 1\n        elif char == ')':\n            close_count += 1\n    return abs(open_count - close_count) // 2\n",
    "tests": [
        "assert min_deletions('(())') == 0",
        "assert min_deletions('(()') == 1",
        "assert min_deletions(')())(') == 2"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}