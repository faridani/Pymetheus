{
    "title": "Anagram Detector (Hard)",
    "description": "An anagram is a word or phrase that is formed by rearranging the letters of another word or phrase, typically using all the original letters exactly once. Write a function `is_anagram` that checks if two given strings are anagrams of each other.\n\n#### Function Signature\n```python\ndef is_anagram(str1: str, str2: str) -> bool:\n``` \n\n#### Input\n- `str1` (str): A string that may contain letters, spaces and punctuation.\n- `str2` (str): Another string that may contain letters, spaces and punctuation.\n\n#### Output\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.",
    "code": "import collections\ndef is_anagram(str1: str, str2: str) -> bool:\n    # Remove non-alphabetic characters and convert to lowercase\n    str1 = ''.join(char for char in str1 if char.isalpha()).lower()\n    str2 = ''.join(char for char in str2 if char.isalpha()).lower()\n    \n    # If the strings have different lengths, they are not anagrams\n    if len(str1) != len(str2):\n        return False\n    \n    # Count the frequency of each character in both strings\n    freq1 = collections.Counter(str1)\n    freq2 = collections.Counter(str2)\n    \n    # If the frequencies are the same, they are anagrams\n    return freq1 == freq2",
    "tests": [
        "assert is_anagram('Listen', 'Silent') == True",
        "assert is_anagram('Hello World', 'World Hello') == True",
        "assert is_anagram('A man, a plan, a canal, Panama', 'amanaplanacanalpanama') == True",
        "assert is_anagram('apple', 'plea') == False"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}