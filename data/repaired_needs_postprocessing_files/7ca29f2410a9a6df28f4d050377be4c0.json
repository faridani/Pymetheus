{
    "title": "Anagram Detection (Hard)",
    "description": "Given two strings, write a function `anagram_check` that determines if the two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of another word or phrase.\n\n#### Function Signature\n```python\ndef anagram_check(s1: str, s2: str) -> bool:\n```\n\n#### Input\n- `s1` (str): A string that may contain letters and spaces but no other special characters.\n- `s2` (str): Another string that may contain letters and spaces but no other special characters.\n\n#### Output\n- Returns `True` if the two input strings can be rearranged to form each other, otherwise `False`. For example, \"listen\" and \"silent\" are anagrams while \"hello\" and \"world\" are not.",
    "code": "def anagram_check(s1: str, s2: str) -> bool:\n    # Remove spaces\n    s1 = ''.join([char for char in s1 if char != ' ']).lower()\n    s2 = ''.join([char for char in s2 if char != ' ']).lower()\n    # If the lengths are not equal, the strings cannot be anagrams.\n    if len(s1) != len(s2):\n        return False\n    # Create a count dictionary for each character in s1\n    count_dict = {}\n    for char in s1:\n        if char not in count_dict.keys():\n            count_dict[char] = 1\n        else:\n            count_dict[char] += 1\n    # Decrease the counts for each character in s2\n    for char in s2:\n        if char in count_dict.keys():\n            count_dict[char] -= 1\n        else:\n            return False\n    # If all counts are zero, the strings can be rearranged to form each other\n    return True",
    "tests": [
        "assert anagram_check(\"listen\", \"silent\") == True",
        "assert anagram_check(\"world\", \"hello\") == False",
        "assert anagram_check(\"acttor\", \"tacotr\") == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}