{
    "title": "Hard: Sudoku Solver",
    "description": "Write a function `solve_sudoku` that takes as input an incomplete Sudoku board represented as a 2D list of integers, where 0 represents an empty cell. The function should return whether the given Sudoku puzzle can be solved or not.\n\n#### Function Signature\n```python\ndef solve_sudoku(board: list[list[int]]) -> bool:\n```\n\n#### Input\n- `board` (list[list[int]]): A 2D list representing a partially filled-in Sudoku board. The values in the board are either integers from 1 to 9 or 0.\n\n#### Output\n- Returns `True` if the input Sudoku puzzle can be solved, `False` otherwise.",
    "code": "import copy\ndef solve_sudoku(board: list[list[int]]) -> bool:\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 0:\n                for num in range(1, 10):\n                    if is_valid(board, i, j, num):\n                        board[i][j] = num\n                        if solve_sudoku(board):\n                            return True\n                        else:\n                            board[i][j] = 0\n                return False\n    return True\ndef is_valid(board: list[list[int]], row: int, col: int, num: int) -> bool:\n    for i in range(9):\n        if board[row][i] == num:\n            return False\n    for j in range(9):\n        if board[j][col] == num:\n            return False\n    start_row = row - row % 3\n    start_col = col - col % 3\n    for i in range(3):\n        for j in range(3):\n            if board[i + start_row][j + start_col] == num:\n                return False\n    return True",
    "tests": [
        "assert solve_sudoku([[5,1,7,6,0,0,0,3,4], [2,8,9,0,0,4,0,0,0], [3,4,6,7,8,5,0,0,0], [0,0,0,0,8,6,0,0,3], [1,9,5,0,7,2,8,4,0], [8,5,0,0,1,9,7,6,3], [4,2,0,0,5,0,0,7,8], [8,1,6,4,0,0,2,5,0], [6,0,2,0,3,1,9,0,8]]) == True",
        "assert solve_sudoku([[0,0,0,0,0,0,0,7,5], [0,8,0,0,0,0,0,0,0], [0,5,0,3,4,1,9,0,0], [0,9,0,7,0,5,0,0,0], [1,0,0,0,8,6,4,0,3], [2,0,8,9,0,0,0,0,0], [5,3,0,0,7,1,0,0,0], [0,0,0,0,6,0,0,0,2]]) == False"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}