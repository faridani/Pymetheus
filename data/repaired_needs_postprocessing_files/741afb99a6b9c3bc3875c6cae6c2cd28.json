{
    "title": "Anagram Detector (Hard)",
    "description": "Write a function `are_anagrams` that checks if two given strings are anagrams of each other. An anagram is a word or phrase that consists of the same letters as another, but arranged differently.\n\n#### Function Signature\n```python\ndef are_anagrams(str1: str, str2: str) -> bool:\n```\n\n#### Input\n- `str1`, `str2` (str): Two strings that may contain letters, numbers, and punctuation.\n\n#### Output\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.\n",
    "code": "import collections\ndef are_anagrams(str1: str, str2: str) -> bool:\n    # Convert both strings to lowercase and remove non-alphabetic characters\n    str1 = ''.join(char for char in str1 if char.isalpha()).lower()\n    str2 = ''.join(char for char in str2 if char.isalpha()).lower()\n    # Create a frequency map of the characters in each string\n    freq_map1 = collections.Counter(str1)\n    freq_map2 = collections.Counter(str2)\n    \n    # Check if the frequency maps are equal, meaning both strings have the same number of occurrences for each character\n    return freq_map1 == freq_map2",
    "tests": [
        "assert are_anagrams('listen', 'silent') == True",
        "assert are_anagrams('wisdom', 'modify') == True",
        "assert are_anagrams('hello', 'world') == False",
        "assert are_anagrams('racecar', 'crazer') == False"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}