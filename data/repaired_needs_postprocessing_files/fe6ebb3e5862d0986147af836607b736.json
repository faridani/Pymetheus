{
    "title": "Maximum Sum of an Island",
    "description": "A landform surrounded by water on all sides is called an island. Given a 2D array `grid` representing the area, where `0`s represent water and `1`s represent land. Write a function `max_sum_island` that finds the maximum sum of all islands in the given grid.\n\n#### Function Signature\n```python\ndef max_sum_island(grid: list[list[int]]) -> int:\n```\n\n#### Input\n- `grid` (list[list[int]]): A 2D array representing the area, where `0`s represent water and `1`s represent land.\n\n#### Output\n- Returns the maximum sum of all islands in the given grid.",
    "code": "import heapq\ndef max_sum_island(grid: list[list[int]]) -> int:\n    if not grid:\n        return 0\n    m, n = len(grid), len(grid[0])\n    visited = [[False] * n for _ in range(m)]\n    queue = []\n    max_sum = 0\n\n    def dfs(i, j):\n        if i < 0 or i >= m or j < 0 or j >= n or visited[i][j] or grid[i][j] == 0:\n            return 0\n        visited[i][j] = True\n        total = 1\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            ni, nj = i + dx, j + dy\n            if 0 <= ni < m and 0 <= nj < n and grid[ni][nj] == 1:\n                total += dfs(ni, nj)\n        return total\n    \n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1 and not visited[i][j]:\n                heapq.heappush(queue, (dfs(i, j), i, j))\n    \n    while queue:\n        _, i, j = heapq.heappop(queue)\n        total = 0\n        stack = [(i, j)]\n        visited[i][j] = True\n        \n        while stack:\n            x, y = stack.pop()\n            if 0 <= x < m and 0 <= y < n and grid[x][y] == 1 and not visited[x][y]:\n                total += 1\n                visited[x][y] = True\n                for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 1 and not visited[nx][ny]:\n                        stack.append((nx, ny))\n        max_sum = max(max_sum, total)\n    \n    return max_sum",
    "tests": [
        "assert max_sum_island([[0,0,1,0],[0,1,1,0],[0,0,0,0]]) == 4",
        "assert max_sum_island([[1,1,1,1,0],[1,1,0,0,0],[0,0,0,0,0],[1,0,2,4,3]]) == 10"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}