{
    "title": "Prime Summation - Hard",
    "description": "Write a function `is_prime` that checks if a given number is prime.\n\n#### Function Signature\n```python\ndef is_prime(n: int) -> bool:\n```\n\n#### Input\n- `n` (int): A non-negative integer.\n\n#### Output\n- Returns `True` if the input number is a prime, `False` otherwise.\n\n#### Hint\nFor checking if a number is prime, you can use the sieve of Eratosthenes or Miller-Rabin primality test. For this problem, any method that works within the time constraints will be fine.\n\n#### Input/Output Examples\n```python\ndef test_is_prime():\n    assert is_prime(2) == True\n    assert is_prime(3) == True\n    assert is_prime(5) == True\n    assert is_prime(7) == True\n    assert is_prime(10) == False\n    assert is_prime(11) == True\n    assert is_prime(28) == False\n    assert is_prime(617) == True\n```",
    "code": "def is_prime(n: int) -> bool:\n    if n <= 1: return False\n    if n == 2 or n == 3: return True\n    i = 2\n    while i * i <= n:\n        if n % i == 0: return False\n        i += 1\n    return True",
    "tests": [
        "def test_is_prime():\n    assert is_prime(2) == True\n    assert is_prime(3) == True\n    assert is_prime(5) == True\n    assert is_prime(7) == True\n    assert is_prime(10) == False\n    assert is_prime(11) == True\n    assert is_prime(28) == False\n    assert is_prime(617) == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}