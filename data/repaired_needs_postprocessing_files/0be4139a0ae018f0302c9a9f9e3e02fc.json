{
    "title": "Tangled Tree Traversal",
    "description": "Write a function that traverses a tree data structure and returns the sum of all node values, where each node has an integer value and two children (left and right). The tree can be thought of as a binary tree. The root node is the starting point for the traversal. This means that it should visit the current node first, then recursively traverse its left child, and finally its right child.\n\n#### Function Signature\nndef tangled_tree_sum(root: 'TreeNode') -> int:\n```python\n#### Input\n* `root` (`TreeNode`): The root of the tree. Each node has an integer value and two children (left and right).\n#### Output\n* Returns the sum of all node values in the tree.\n#### Constraints\nThe tree is guaranteed to be a valid binary tree, with no cycles or disconnected nodes.",
    "code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef tangled_tree_sum(root: 'TreeNode') -> int:\n    if root is None:\n        return 0\n    else:\n        return root.val + tangled_tree_sum(root.left) + tangled_tree_sum(root.right)\n",
    "tests": [
        "assert tangled_tree_sum(TreeNode(1, TreeNode(2), TreeNode(3))) == 6",
        "assert tangled_tree_sum(TreeNode(5, TreeNode(3, TreeNode(2), TreeNode(4)), TreeNode(7))) == 22",
        "assert tangled_tree_sum(None) == 0"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}