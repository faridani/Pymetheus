{
    "title": "Hard: Circular Prime Sequence",
    "description": "A circular prime number is a prime number that remains prime when its digits are rotated. For example, 197 is a circular prime because 197, 971, and 719 are all prime. Write a function `circular_prime_sequence(n)` that takes an integer `n` as input and returns the first `n` numbers in the sequence of circular primes.\n\n#### Function Signature\n```python\ndef circular_prime_sequence(n: int) -> list:\n``` \n\n#### Input\n- `n` (int): The number of circular primes to return.\n\n#### Output\n- Returns a list containing the first `n` circular primes.",
    "code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef rotations(num):\n    rotations = []\n    num_str = str(num)\n    for i in range(len(num_str)):\n        rotations.append(int(num_str[i:] + num_str[:i]))\n    return rotations\n\ndef circular_prime_sequence(n: int) -> list:\n    count = 0\n    num = 2\n    circular_primes = []\n    while count < n:\n        if is_prime(num):\n            is_circular = True\n            for rot in rotations(num):\n                if not is_prime(rot):\n                    is_circular = False\n                    break\n            if is_circular:\n                circular_primes.append(num)\n                count += 1\n        num += 1\n    return circular_primes",
    "tests": [
        "assert circular_prime_sequence(5) == [2, 3, 5, 7, 11]",
        "assert circular_prime_sequence(10) == [2, 3, 5, 7, 11, 13, 17, 31, 37, 71]"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}