{
    "title": "Hard: Word Ladder",
    "description": "Given two words, beginWord and endWord, and a wordList of valid words, find the shortest transformation sequence from beginWord to endWord such that: Only one letter can be changed at a time. Each transformed word must exist in the wordList. Return the length of the shortest transformation sequence, or 0 if no such sequence exists.",
    "code": "from collections import deque\n\ndef ladderLength(beginWord: str, endWord: str, wordList: list[str]) -> int:\n    if endWord not in wordList:\n        return 0\n    wordSet = set(wordList)\n    queue = deque([(beginWord, 1)])\n    visited = set([beginWord])\n    while queue:\n        word, length = queue.popleft()\n        if word == endWord:\n            return length\n        for i in range(len(word)):\n            for char in 'abcdefghijklmnopqrstuvwxyz':\n                newWord = word[:i] + char + word[i+1:]\n                if newWord in wordSet and newWord not in visited:\n                    queue.append((newWord, length + 1))\n                    visited.add(newWord)\n    return 0",
    "tests": [
        "assert ladderLength('hit', 'cog', ['hot','dot','dog','lot','log','cog']) == 5",
        "assert ladderLength('hit', 'cog', ['hot','dot','dog','lot','log']) == 0"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}