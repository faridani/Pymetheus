{
    "title": "Counting the K-th Substring",
    "description": "A substring of a given string is any contiguous sequence of characters within the string. Write a function `kth_substring` that takes a string `s` and an integer `k`, and returns the k-th unique substring in lexicographical order.\n\n#### Function Signature\n```python\ndef kth_substring(s: str, k: int) -> str:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n- `k` (int): The index of the substring to return (1-indexed).\n\n#### Output\n- Returns the k-th unique substring in lexicographical order. If there are less than k unique substrings, returns an empty string.",
    "code": "import re\ndef kth_substring(s: str, k: int) -> str:\n    # Initialize a set to store unique substrings\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if re.match('^[a-zA-Z0-9_]+$', substring):\n                substrings.add(substring)\n    # Sort the substrings lexicographically\n    substrings = sorted(list(substrings))\n    # Return the k-th unique substring, or an empty string if there are less than k substrings\n    try:\n        return substrings[k - 1]\n    except IndexError:\n        return ''",
    "tests": [
        "assert kth_substring('abcde', 2) == 'bc'",
        "assert kth_substring('aabbccdd', 3) == 'cd'",
        "assert kth_substring('hello world', 5) == 'world'",
        "assert kth_substring('1234567890', 1) == '12'"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}