{
    "title": "Hard: K-th Largest Element in a Stream",
    "description": "Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the unique elements.\n\n#### Class Signature\n```python\nclass KthLargest:\n    def __init__(self, k: int, nums: List[int]):\n        ...,\n\n    def add(self, val: int) -> int:\n        ...,\n``` \n\n#### Methods\n- `__init__(k: int, nums: List[int])`: Initialize the object with a given integer k and an array of integers nums.\n- `add(val: int) -> int`: Adds val to the stream and returns the current kth largest element in the stream.\n \n#### Constraints\n- 1 <= k <= 104\n- 0 <= nums.length <= 104\n- -104 <= nums[i] <= 104\n- -104 <= val <= 104",
    "code": "import heapq\nclass KthLargest:\n    def __init__(self, k: int, nums: List[int]):\n        self.k = k\n        self.heap = nums[:k]\n        heapq.heapify(self.heap)\n        for num in nums[k:]:\n            if num > self.heap[0]:\n                heapq.heappop(self.heap)\n                heapq.heappush(self.heap, num)\n\n    def add(self, val: int) -> int:\n        if len(self.heap) < self.k:\n            heapq.heappush(self.heap, val)\n        elif val > self.heap[0]:\n            heapq.heappop(self.heap)\n            heapq.heappush(self.heap, val)\n        return self.heap[0]",
    "tests": [
        "kl = KthLargest(3, [4, 5, 8, 2]); assert kl.add(3) == 4; assert kl.add(5) == 5; assert kl.add(10) == 5; assert kl.add(9) == 8; assert kl.add(4) == 8"
    ],
    "model": "codestral:22b-repaired by Llama 3"
}