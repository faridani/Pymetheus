{
    "title": "Hard: Binary Tree Zigzag Level Order Traversal",
    "description": "Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).\n\n#### Function Signature\n```python\ndef zigzagLevelOrder(root: Optional[TreeNode]) -> list[list[int]]:\n```\n\n#### Input\n- `root` (Optional[TreeNode]): The root node of the binary tree.\n\n#### Output\n- Returns a list of lists, where each inner list represents a level in the zigzag order traversal and contains the values of the nodes at that level.\n\n#### Constraints\n- The number of nodes in the tree is in the range [0, 2000].\n- -100 <= Node.val <= 100\n",
    "code": "from collections import deque\ndef zigzagLevelOrder(root: Optional[TreeNode]) -> list[list[int]]:\n    if not root:\n        return []\n    result = []\n    queue = deque([root])\n    left_to_right = True\n\n    while queue:\n        level_size = len(queue)\n        current_level = deque()\n\n        for _ in range(level_size):\n            node = queue.popleft()\n            if left_to_right:\n                current_level.append(node.val)\n            else:\n                current_level.appendleft(node.val)\n\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n\n        result.append(list(current_level))\n        left_to_right = not left_to_right\n\n    return result",
    "tests": [
        "'assert zigzagLevelOrder(TreeNode(3, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7)))) == [[3], [20, 9], [15, 7]]'",
        "'assert zigzagLevelOrder(TreeNode(1)) == [[1]]'",
        "'assert zigzagLevelOrder(None) == []'"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}