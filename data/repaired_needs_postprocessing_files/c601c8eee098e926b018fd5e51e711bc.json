{
    "title": "Hard: Dominoes Combinations",
    "description": "You are given an array of domino pieces, each represented as a string. A piece is a combination of two numbers separated by a space (e.g., 1 2). Your task is to write a function that finds the maximum number of combinations of three domino pieces that can be placed side-by-side without any gaps.\n\n#### Function Signature\n```def max_combinations(dominoes: list[str]) -> int:\n```\n\n#### Input\n- `dominoes` (list[str]): A list of strings, where each string represents a domino piece.\n\n#### Output\n- Returns the maximum number of combinations of three domino pieces that can be placed side-by-side without any gaps.",
    "code": "import re\ndef max_combinations(dominoes: list[str]) -> int:\n    # Split each domino into its two parts\n    sides = [int(num) for piece in dominoes for num in map(int, re.split(' | ', piece))]\n    \n    # Sort the sides in ascending order\n    sides.sort()\n    \n    # Initialize the maximum number of combinations\n    max_combos = 0\n    \n    # Iterate over the sorted sides to find the maximum number of combinations\n    i = 0\n    while i < len(sides) - 2:\n        # Check if the current three sides can be placed side-by-side without any gaps\n        if sides[i] + 1 == sides[i+1] and sides[i+1] + 1 == sides[i+2]:\n            max_combos += 1\n            i += 3\n        else:\n            i += 1\n    \n    return max_combos",
    "tests": [
        "assert max_combinations(['1 2', '2 3', '3 4', '5 6']) == 1",
        "assert max_combinations(['1 2', '2 3', '3 4', '5 6', '7 8']) == 1",
        "assert max_combinations(['1 2', '2 3', '3 4', '5 6', '7 8', '9 10']) == 2"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}