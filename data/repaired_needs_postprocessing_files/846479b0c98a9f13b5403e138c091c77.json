{
    "title": "Anagram Detection (Hard)",
    "description": "Determine if two strings are anagrams of each other. An anagram is a word or phrase that is formed by rearranging the letters of another word or phrase, typically using all the original letters exactly once.\n#### Function Signature\n```python\ndef are_anagrams(s1: str, s2: str) -> bool:\n```\n#### Input\n- `s1`, `s2` (str): Two strings of lowercase letters with no special characters or numbers.\n#### Output\n- Returns `True` if the two input strings are anagrams, `False` otherwise.\n",
    "code": "def are_anagrams(s1: str, s2: str) -> bool:\n    # Ensure both strings have the same length\n    if len(s1) != len(s2):\n        return False\n    # Create a dictionary to count each letter in the first string\n    count_dict = {}\n    for char in s1:\n        if char not in count_dict:\n            count_dict[char] = 1\n        else:\n            count_dict[char] += 1\n    # Decrement each letter's count when processing the second string\n    for char in s2:\n        if char in count_dict:\n            count_dict[char] -= 1\n        else:\n            return False\n    # Check if all counts are zero, indicating that both strings have the same letters with the same frequency\n    for _, count in count_dict.items():\n        if count != 0:\n            return False\n    return True",
    "tests": [
        "assert are_anagrams(\"listen\", \"silent\") == True",
        "assert are_anagrams(\"hello\", \"world\") == False",
        "assert are_anagrams(\"civic\", \"clue\") == True",
        "assert are_anagrams(\"never\", \"revene\") == False"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}