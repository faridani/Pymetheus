{
    "title": "Hard: Minimum Swaps to Sort",
    "description": "You are given an array of integers. You can only swap adjacent elements. Find the minimum number of swaps required to sort the array.\n\n#### Function Signature\n```python\ndef min_swaps(arr: list[int]) -> int:\n```\n\n#### Input\n- `arr` (list[int]): A list of integers.\n\n#### Output\n- Returns the minimum number of swaps required to sort the array in ascending order.",
    "code": "def min_swaps(arr: list[int]) -> int:\n    n = len(arr)\n    cycle_len = 0\n    visited = [False] * n\n    swap_count = 0\n\n    for i in range(n):\n        if not visited[i]:\n            j = i\n            cycle_len = 0\n            while not visited[j]:\n                visited[j] = True\n                j = arr.index(min(arr[j:]))\n                cycle_len += 1\n            swap_count += cycle_len - 1\n    return swap_count",
    "tests": [
        "assert min_swaps([7, 1, 3, 2, 4, 5, 6]) == 5",
        "assert min_swaps([1, 2, 3, 4, 5]) == 0",
        "assert min_swaps([4, 3, 2, 1]) == 3",
        "assert min_swaps([1, 5, 4, 3, 2]) == 3"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}