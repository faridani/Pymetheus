{
    "title": "Palindromic Subsequence Count (Hard)",
    "description": "A palindromic subsequence of a string is a sequence of characters that can be read the same backward as forward. Write a function `count_palindrome_subsequences` that finds the count of all distinct palindromic subsequences in a given string.\n\n#### Function Signature\n```python\ndef count_palindrome_subsequences(s: str) -> int:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns the count of all distinct palindromic subsequences in the input string.",
    "code": "import collections\ndef count_palindrome_subsequences(s: str) -> int:\n    # Create an empty dictionary to store counts of each length of subsequence\n    counts = {len(x): 0 for x in range(1, len(s) + 1)}\n    # Iterate through all possible start indices for subsequences\n    for i in range(len(s)):\n        # Initialize an empty list to store the current subsequence\n        seq = []\n        # Find all palindromic subsequences of the given length starting at the current index\n        for j in range(i, len(s), 2):\n            if i + j >= len(s): break\n            # If the center character is not alphanumeric, skip it\n            if s[j] not in string.ascii_letters + string.digits: continue\n            # Add the current character to the subsequence\n            seq.append(s[j])\n            # Find the start index of the palindrome center\n            mid = (i + j) // 2\n            # Check if the palindrome center is within the string bounds\n            if mid >= len(s): continue\n            # Check if the center character is not alphanumeric, skip it\n            if s[mid] not in string.ascii_letters + string.digits: continue\n            # If the current and center characters are equal and their reflections are equal\n            if seq and s[j] == s[mid] and seq[-1] == s[mid - 1]:\n                # Increment the count for this subsequence length by 1\n                counts[len(seq)] += 1\n        # Check if the current subsequence is a palindrome itself\n        if len(seq) >= 2 and seq == seq[::-1]:\n            # Increment the count for this subsequence length by 1\n            counts[len(seq)] += 1\n    # Return the sum of all counts for each subsequence length\n    return sum(counts.values())",
    "tests": [
        "assert count_palindrome_subsequences(\"abcccccd\") == 10",
        "assert count_palindrome_subsequences(\"forgeeksskeegfor\") == 28",
        "assert count_palindrome_subsequences(\"aaaabbcc\") == 7",
        "assert count_palindrome_subsequences(\"abbbbaba\") == 9"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}