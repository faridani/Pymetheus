{
    "title": "Easy: Maximum Sum of Subarray",
    "description": "Given an array of integers, find the maximum sum of a subarray within it.\n#### Function Signature```ndef max_subarray_sum(arr: list[int)) -> int:\n```\n\n#### Input\n- `arr` (list[int]): A list of integers.\n\n#### Output\n- Returns the maximum sum of a subarray within the input array.",
    "code": "def max_subarray_sum(arr: list[int]) -> int:\n    if not arr:\n        return 0\n    current_max = max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > current_max + arr[i]:\n            current_max = arr[i]\n            max_ending_here = arr[i]\n        else:\n            max_ending_here += arr[i]\n        current_max = max(current_max, max_ending_here)\n    return current_max",
    "tests": [
        "assert max_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6",
        "assert max_subarray_sum([1, 2, 3, 10, 5, 16, 8, 4]) == 28",
        "assert max_subarray_sum([-1, -2, 3, 0, 1, 2]) == 6",
        "assert max_subarray_sum([]) == 0"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}