{
    "title": "Hard: Minimum Number of Moves to Equalize Array",
    "description": "Given an integer array `nums`, find the minimum number of moves required to make all elements equal. A move consists of incrementing or decrementing a chosen element by 1.\n\n#### Function Signature\n```python\ndef min_moves_to_equalize(nums: List[int]) -> int:\n```\n\n#### Input\n- `nums` (List[int]): An array of integers where the length is in the range `[1, 10^4]` and each integer is in the range `[1, 10^5].\n\n#### Output\n- Returns an integer representing the minimum number of moves required to make all elements equal.",
    "code": "from typing import List\ndef min_moves_to_equalize(nums: List[int]) -> int:\n    nums.sort()\n    median = nums[len(nums) // 2]\n    return sum(abs(num - median) for num in nums)",
    "tests": [
        "assert min_moves_to_equalize([1, 2, 3]) == 2",
        "assert min_moves_to_equalize([1, 10, 4]) == 6",
        "assert min_moves_to_equalize([-1, -3, -5]) == 8"
    ],
    "model": "qwen2:7b-repaired by Llama 3"
}