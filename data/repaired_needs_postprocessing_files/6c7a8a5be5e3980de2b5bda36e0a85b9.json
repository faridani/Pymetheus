{
    "title": "Palindromic Substrings Counter' (Hard)",
    "description": "Given a string, find all non-overlapping palindromic substrings and return their count.\n\n#### Function Signature\n```python\ndef count_palindromes(s: str) -> int:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns the number of non-overlapping palindromic substrings found in the input string.",
    "code": "import collections\ndef count_palindromes(s: str) -> int:\n    # Count the frequency of each character in the given string\n    counts = collections.Counter(s)\n    # Initialize an empty result list\n    palindromes = []\n    \n    # Iterate over the characters in the given string\n    for i in range(len(s)):\n        # If a character is its own frequency, then it can be part of a palindrome of odd length\n        if counts[s[i]] == 1:\n            left = i - 1\n            right = i + 1\n            while left >= 0 and right < len(s) and s[left] == s[right]:\n                left -= 1\n                right += 1\n            if left < right:\n                palindromes.append((left+2, right))\n        \n        # If a character is its own frequency plus one, then it can be part of a palindrome of even length\n        elif counts[s[i]] == 2:\n            left = i - 1\n            right = i + 1\n            while left >= 0 and right < len(s) and s[left] == s[right]:\n                left -= 1\n                right += 1\n            if left >= right:\n                palindromes.append((left+2, right))\n    \n    # Return the number of non-overlapping palindromic substrings found in the input string\n    return len(palindromes)",
    "tests": [
        "assert count_palindromes(\"racecar\") == 2",
        "assert count_palindromes(\"babad\") == 3",
        "assert count_palindromes(\"mom\") == 1",
        "assert count_palindromes(\"Hello, World!\") == 2"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}