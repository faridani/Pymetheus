{
    "title": "Anagram Checker (Hard)",
    "description": "An anagram is a word or phrase that can be formed by rearranging the letters of another word or phrase, typically using all the original letters exactly once. Write a function `is_anagram` that checks if two given strings are anagrams of each other.\n\n#### Function Signature\n```python\ndef is_anagram(str1: str, str2: str) -> bool:\n```\n\n#### Input\n- `str1` (str): A string that may contain letters, numbers, spaces and punctuation.\n- `str2` (str): Another string that may contain letters, numbers, spaces and punctuation.\n\n#### Output\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.",
    "code": "def is_anagram(str1: str, str2: str) -> bool:\n    # Remove non-alphabetic characters and convert to lowercase\n    str1 = ''.join(filter(str.isalpha, str1)).lower()\n    str2 = ''.join(filter(str.isalpha, str2)).lower()\n    \n    # If the lengths are not equal, they can't be anagrams\n    if len(str1) != len(str2):\n        return False\n    \n    # Count the frequencies of each letter in both strings and compare them\n    freq1 = Counter(str1)\n    freq2 = Counter(str2)\n    return freq1 == freq2",
    "tests": [
        "assert is_anagram(\"listen\", \"silent\") == True",
        "assert is_anagram(\"hello\", \"world\") == False",
        "assert is_anagram(\"wElcoM, wOrLd\", \"mleW ,dROWl\") == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}