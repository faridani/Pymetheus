{
    "title": "Hard - Subarray Summation",
    "description": "Given an array of integers and a target sum, find the number of contiguous subarrays whose elements sum up to the target sum.\n\n#### Function Signature\n```python\ndef count_subarrays(nums: list[int], target: int) -> int:\n``` \n\n#### Input\n- `nums` (list[int]): A list of integers.\n- `target` (int): The desired sum of the subarray.\n\n#### Output\n- Returns the number of contiguous subarrays that sum up to the target.",
    "code": "def count_subarrays(nums: list[int], target: int) -> int:\n    count = 0\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            if current_sum == target:\n                count += 1\n    return count",
    "tests": [
        "assert count_subarrays([1, 2, 3, 4], 5) == 2",
        "assert count_subarrays([1, -1, 2, -2, 3], 3) == 3",
        "assert count_subarrays([-1, 0, 1], 0) == 2",
        "assert count_subarrays([1, 2, 3, 4, 5], 15) == 1"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}