{
    "title": "Maximum Sum of Three Non-Adjacent Elements",
    "description": "Write a function `max_sum_of_three` that calculates the maximum sum of three non-adjacent elements in an array of integers. The input list may contain positive and negative numbers, as well as zeros.\n\n#### Function Signature\n```python\ndef max_sum_of_three(nums: list[int]) -> int:\n```\n\n#### Input\n- `nums` (list[int]): A list of integers containing at least three elements.\n\n#### Output\n- Returns the maximum sum of three non-adjacent elements in the input list.",
    "code": "def max_sum_of_three(nums: list[int]) -> int:\n    # Check if the input list has at least three elements\n    if len(nums) < 3:\n        raise ValueError('Input list must have at least three elements')\n    \n    # Initialize variables to store the maximum sum of one, two, and three non-adjacent elements\n    max_one = max_two = max_three = nums[0]\n    for num in nums[1:]:\n        # Update the maximum sum of one non-adjacent element\n        max_one = max(max_one, num)\n        \n        # Update the maximum sum of two non-adjacent elements\n        max_two = max(max_two + num, max_one if max_one > 0 else 0)\n        \n        # Update the maximum sum of three non-adjacent elements\n        max_three = max(max_three + num, max_two + (nums[0] if nums[0] > 0 else 0),\n                       max_one + max_two - (nums[0] if nums[0] > 0 else 0))\n    \n    # Return the maximum sum of three non-adjacent elements\n    return max_three",
    "tests": [
        "assert max_sum_of_three([3, 2, -6, 4, 0]) == 7",
        "assert max_sum_of_three([-2, -3, 4, -1, -2, 1]) == 3",
        "assert max_sum_of_three([1, 2, 3, 4, 5]) == 12"
    ],
    "model": "llama3.1:8b-repaired by Llama 3"
}