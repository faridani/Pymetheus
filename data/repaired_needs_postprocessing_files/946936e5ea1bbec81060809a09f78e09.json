{
    "title": "Anagram Detection (Hard)",
    "description": "An anagram is a word or phrase that is formed by rearranging the letters of another word or phrase. For example, 'listen' can be rearranged to form the word 'silent'. Write a function `are_anagrams` that checks if two given strings are anagrams. Write a function `are_anagrams(str1: str, str2: str) -> bool:`\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise. Ignore case and spaces.\n",
    "code": "import collections\n\ndef are_anagrams(str1: str, str2: str) -> bool:\n    # Remove spaces and convert to lowercase\n    str1 = ''.join(char for char in str1.lower() if char not in [' ',]).replace(' ', '')\n    str2 = ''.join(char for char in str2.lower() if char not in [' ',]).replace(' ', '')\n    # Count the frequency of each character\n    freq1 = collections.Counter(str1)\n    freq2 = collections.Counter(str2)\n    # Check if the two frequency counts are equal\n    return freq1 == freq2",
    "tests": [
        "assert are_anagrams('listen', 'silent') == True",
        "assert are_anagrams('hello', 'olleh') == True",
        "assert are_anagrams('world', 'drowl') == True",
        "assert are_anagrams('movie', 'vomit') == False"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}