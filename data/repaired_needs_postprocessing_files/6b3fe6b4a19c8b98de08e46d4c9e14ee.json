{
    "title": "Hard - Matrix Path Sum",
    "description": "You are given an m x n matrix of integers. You start at the top-left corner and want to reach the bottom-right corner. You can only move either right or down. Write a function `matrix_path_sum(matrix)` that returns the sum of all possible paths from the top-left corner to the bottom-right corner of the matrix.\n\n#### Function Signature\n```python\ndef matrix_path_sum(matrix: list[list[int]]) -> int:\n``` \n\n#### Input\n- `matrix` (list[list[int]]): An m x n matrix of integers.\n\n#### Output\n- Returns the sum of all possible paths from the top-left corner to the bottom-right corner of the matrix.",
    "code": "def matrix_path_sum(matrix: list[list[int]]) -> int:\n    m, n = len(matrix), len(matrix[0])\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n\n    dp[0][0] = matrix[0][0]\n    for i in range(1, m):\n        dp[i][0] = dp[i - 1][0] + matrix[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j - 1] + matrix[0][j]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]  + matrix[i][j]\n\n    return dp[m - 1][n - 1]",
    "tests": [
        "assert matrix_path_sum([[1,2,3],[4,5,6],[7,8,9]]) == 120",
        "assert matrix_path_sum([[1]]) == 1",
        "assert matrix_path_sum([[1,2],[3,4]]) == 10"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}