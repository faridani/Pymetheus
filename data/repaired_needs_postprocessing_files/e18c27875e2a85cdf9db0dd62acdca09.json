{
    "title": "Maximum Sum of Alternating Subsequences",
    "description": "Given a list of integers, find the maximum sum of alternating subsequences. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements.\n\n#### Function Signature\n```python\ndef max_alternating_sum(arr: List[int]) -> int:\n```\n\n#### Input\n- `arr` (List[int]): A list of integers.\n\n#### Output\n- Returns the maximum sum of alternating subsequences in the input array.",
    "code": "import heapq\ndef max_alternating_sum(arr):\n    # Calculate the prefix sums\n    prefix_sums = [0]\n    for num in arr:\n        prefix_sums.append(prefix_sums[-1] + num)\n\n    # Initialize a priority queue with the first and last elements\n    pq = [(arr[0], 0), (arr[-1], -1)]\n    heapq.heapify(pq)\n\n    max_sum = 0\n    prev_sign = 1\n\n    for _ in range(len(arr) // 2):\n        curr_sum, sign = heapq.heappop(pq)\n        if sign == prev_sign:\n            # If the current sum is the same sign as the previous one, skip it\n            continue\n        max_sum += abs(curr_sum - prefix_sums[0])\n        prev_sign *= -1\n\n    return max_sum",
    "tests": [
        "assert max_alternating_sum([-5, 10, -20, 30, -40]) == 110",
        "assert max_alternating_sum([1, 2, 3, 4, 5]) == 9",
        "assert max_alternating_sum([-1, 0, 1, 2, 3]) == 6"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}