{
    "title": "Hard: Substring Permutations",
    "description": "Given two strings, s and t, determine if all the permutations of string t are present as substrings within string s.\n#### Function Signature\n```python\ndef substring_permutations(s: str, t: str) -> bool:\n``` \n#### Input\n- `s` (str): The main string to search within.- `t` (str): The string whose permutations need to be found as substrings of `s`. \n#### Output\n- Returns `True` if all permutations of `t` are present as substrings in `s`, `False` otherwise. \"",
    "code": "from collections import Counter\ndef substring_permutations(s: str, t: str) -> bool:\n    if len(t) > len(s):\n        return False\n    \n    t_count = Counter(t)\n    window_count = Counter()\n\n    for i in range(len(s)):\n        window_count[s[i]] += 1\n        if i >= len(t):\n            window_count[s[i - len(t)]] -= 1\n            if window_count[s[i - len(t)]] == 0:\n                del window_count[s[i - len(t)]]\n        if window_count == t_count:\n            return True\n    return False",
    "tests": [
        "assert substring_permutations('abbcde', 'abb') == True",
        "assert substring_permutations('aabbcc', 'abc') == True",
        "assert substring_permutations('abcd', 'abce') == False",
        "assert substring_permutions('cbad', 'cab') == True",
        "assert substring_permutations('aabbccc', 'abc') == True"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}