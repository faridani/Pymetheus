{
    "title": "Anagram Detector (Hard)",
    "description": "Given two strings, write a function `are_anagrams` that checks if the given strings are anagrams of each other. Two words or phrases are anagrams if they contain the same letters with the same frequency.\n\n#### Function Signature\n```python\ndef are_anagrams(s1: str, s2: str) -> bool:\n```\n\n#### Input\n- `s1` (str): A non-empty string that may contain letters, numbers, and spaces.\n- `s2` (str): Another non-empty string that may contain letters, numbers, and spaces.\n\n#### Output\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.\n",
    "code": "def are_anagrams(s1: str, s2: str) -> bool:\n    # Remove non-alphabetic characters and convert to lowercase\n    s1 = ''.join([char for char in s1 if char.isalpha()]).lower()\n    s2 = ''.join([char for char in s2 if char.isalpha()]).lower()\n    # If the two strings have different lengths, they cannot be anagrams\n    if len(s1) != len(s2):\n        return False\n    # Create frequency dictionaries for both strings\n    freq_dict1 = {char: s1.count(char) for char in set(s1)}\n    freq_dict2 = {char: s2.count(char) for char in set(s2)}\n    # Check if the frequency dictionaries are the same\n    return freq_dict1 == freq_dict2",
    "tests": [
        "assert are_anagrams(\"listen\", \"silent\") == True",
        "assert are_anagrams(\"hello\", \"olleh\") == True",
        "assert are_anagrams(\"racecar\", \"carrace\") == True",
        "assert are_anagrams(\"python\", \"typhon\") == False"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}