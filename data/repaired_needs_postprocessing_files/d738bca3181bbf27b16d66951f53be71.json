{
    "title": "Hard: Treehouse Construction",
    "description": "Treehouses are a fun and creative way to enjoy the outdoors. Given a tree with a set of nodes (treehouse platforms) and edges (supporting beams), determine if it's possible to construct a valid treehouse by placing a certain number of trees on specific platforms. The rules for building a treehouse are as follows:\n#### Function Signature\n```python\ndef can_build_treehouse(nodes: list, edges: list, num_trees: int) -> bool:\n```\n\n#### Input\n- `nodes` (list): A list of node indices representing the platforms in the tree.\n- `edges` (list): A list of tuples, where each tuple contains two node indices representing the supporting beams connecting the nodes.\n- `num_trees`: An integer representing the number of trees to place on specific platforms.\n\n#### Output\n- Returns `True` if it's possible to construct a valid treehouse given the specified constraints, and `False` otherwise.\n",
    "code": "import networkx as nx\ndef can_build_treehouse(nodes: list, edges: list, num_trees: int) -> bool:\n    # Create an empty graph using NetworkX library\n    G = nx.Graph()\n    for edge in edges:\n        G.add_edge(edge[0], edge[1])\n    # Check if the number of trees is less than or equal to the number of nodes minus one (max number of trees on a treehouse)\n    if num_trees > len(nodes) - 1:\n        return False\n    # Use a depth-first search algorithm to check for connected components in the graph, ensuring that each component has at least one node with a tree placed\n    visited = set()\n    def dfs(node):\n        visited.add(node)\n        if num_trees > 0:\n            num_trees -= 1\n            return True\n        for neighbor in G.neighbors(node):\n            if neighbor not in visited and dfs(neighbor): return True\n        return False\n    # Perform DFS on the graph, checking for connected components and valid tree placement\n    if len(nodes) - sum(dfs(node) for node in nodes) > 0:\n        return False\n    return True\n",
    "tests": [
        "assert can_build_treehouse([1, 2, 3], [(1, 2), (2, 3)], 2) == True",
        "assert can_build_treehouse([1, 2, 3], [(1, 2), (2, 3)], 3) == False",
        "assert can_build_treehouse([1, 2, 3, 4], [(1, 2), (2, 3), (3, 4)], 0) == True",
        "assert can_build_treehouse([1, 2, 3], [], 1) == False"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}