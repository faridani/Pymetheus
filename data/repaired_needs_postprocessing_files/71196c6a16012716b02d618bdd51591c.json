{
    "title": "Maximum Sum of Non-Adjacent Elements",
    "description": "Given a list of integers, write a function `max_sum` that returns the maximum sum of non-adjacent elements. For example, given the list `[2, 7, 9, 3, 1]`, the maximum sum of non-adjacent elements is `12`, which is achieved by taking the elements at indices `0`, `2`, and `4`. Note that the list may contain negative numbers.\n#### Function Signature\n```python\ndef max_sum(nums: list) -> int:\n``` \n#### Input\n- `nums` (list): A list of integers.\n#### Output\n- Returns the maximum sum of non-adjacent elements in the input list.\n",
    "code": "import itertools\ndef max_sum(nums: list) -> int:\n    # Base case\n    if len(nums) <= 2:\n        return max(0, *nums)\n    # Initialize a table to store the maximum sums\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    dp[1] = max(nums[0], nums[1])\n    for i in range(2, len(nums)):\n        # Consider including the current element\n        include_current = dp[i - 1] + nums[i]\n        # Exclude the current element and consider the previous non-adjacent maximum sum\n        exclude_current = dp[i - 2] if i >= 2 else 0\n        # Update the maximum sum\n        dp[i] = max(include_current, exclude_current)\n    return dp[-1]\n",
    "tests": [
        "assert max_sum([2, 7, 9, 3, 1]) == 12",
        "assert max_sum([-5, -3, 3, 2]) == 4",
        "assert max_sum([1, 2, 3, 4]) == 6"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}