{
    "title": "Hard - Maximum Sum Subarray of Size K",
    "description": "Given an array of integers `nums` and an integer `k`, find the maximum sum of a contiguous subarray of size `k`. \n\n#### Function Signature\n```python\ndef max_sum_subarray(nums: list[int], k: int) -> int:\n``` \n\n#### Input\n- `nums` (list[int]): A list of integers.\n- `k` (int): The size of the subarray.\n\n#### Output\n- Returns the maximum sum of a contiguous subarray of size `k`. If `k` is greater than the length of `nums`, return 0.",
    "code": "def max_sum_subarray(nums: list[int], k: int) -> int:\n    if len(nums) < k:\n        return 0\n    max_sum = float('-inf')\n    for i in range(len(nums) - k + 1):\n        current_sum = 0\n        for j in range(i, i + k):\n            current_sum += nums[j]\n        max_sum = max(max_sum, current_sum)\n    return max_sum",
    "tests": [
        "assert max_sum_subarray([2, 1, 5, 1, 3, 2], 3) == 9",
        "assert max_sum_subarray([2, 3, 4, 1, 5], 2) == 7",
        "assert max_sum_subarray([1, -1, 2, 3, -2], 4) == 4",
        "assert max_sum_subarray([1, 2, 3], 4) == 0"
    ],
    "model": "gemma2:27b-instruct-q5_K_S-repaired by Llama 3"
}