{
    "title": "EASY: Number of Islands",
    "description": "You are given an m x n binary matrix grid where grid[i][j] = 1 represents land and grid[i][j] = 0 represents water. You want to count the number of islands in the grid.\nAn island is a group of adjacent cells with land values that can be reached by traveling horizontally or vertically from any cell with land value. Two cells are considered adjacent if they share an edge.\nWrite a function `num_islands` that takes the binary matrix as input and returns the total number of islands.\n\n#### Function Signature\n```python\ndef num_islands(grid: list[list[int]]) -> int:\n```\n\n#### Input\n- `grid` (list[list[int]]): A 2D binary grid where each cell represents land (1) or water (0).\n\n#### Output\n- Returns the total number of islands in the grid.\n",
    "code": "def num_islands(grid: list[list[int]]) -> int:\n    if not grid or not grid[0]:\n        return 0\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                self._dfs(grid, i, j)\n                count += 1\n    return count\n\n    def _dfs(self, grid: list[list[int]], i: int, j: int):\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[i]):\n            return\n        if grid[i][j] == 0:\n            return\n        grid[i][j] = 0\n        self._dfs(grid, i-1, j)\n        self._dfs(grid, i+1, j)\n        self._dfs(grid, i, j-1)\n        self._dfs(grid, i, j+1)",
    "tests": [
        "assert num_islands([[0,0,1,0,0],[0,0,1,0,0],[0,0,1,0,0]]) == 1",
        "assert num_islands([[1,1,0,0,0],[1,1,0,0,0],[0,0,1,0,0]]) == 3",
        "assert num_islands([]) == 0"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}