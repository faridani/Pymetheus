{
    "title": "'Anagram Detector (Hard)'",
    "description": "Given two strings, determine if they are anagrams of each other. An anagram is a word or phrase that is formed by rearranging the letters of another word or phrase, typically using all the original letters exactly once.\n#### Function Signature\n```python\ndef areAnagrams(s1: str, s2: str) -> bool:\n```\\n\\n#### Input\\n- `s1`, `s2` (str): Two strings that may contain letters in any case and any number of characters.\\n\\n#### Output\\n- Returns `True` if the two input strings are anagrams, `False` otherwise.\n",
    "code": "import collections\n\ndef areAnagrams(s1: str, s2: str) -> bool:\n    # Ensure both inputs are strings and have the same length\n    if not (isinstance(s1, str) and isinstance(s2, str) and len(s1) == len(s2)): return False\n    \n    # Convert the strings to lowercase and count the occurrence of each letter\n    counts1 = collections.Counter(s1.lower())\n    counts2 = collections.Counter(s2.lower())\n    \n    # Check if both dictionaries have the same keys (letters) and values (occurrences)\n    return counts1 == counts2",
    "tests": [
        "assert areAnagrams(\"listen\", \"silent\") == True",
        "assert areAnagrams(\"hello\", \"world\") == False",
        "assert areAnagrams(\"A man, a plan, a canal: Panama\", \"amanaplanacanalpanama\") == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}