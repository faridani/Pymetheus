{
    "title": "Medium - Array Rotation",
    "description": "Given an array of integers `nums` and an integer `k`, rotate the array to the right by `k` steps.\n#### Function Signature\n```python\ndef rotate(nums: list[int], k: int) -> None:\n```\n\n#### Input\n- `nums` (list[int]): A list of integers.\n- `k` (int): The number of steps to rotate the array.\n\n#### Output\n- Modifies the `nums` list in-place.\n\n#### Constraints\n- 1 <= nums.length <= 10^5\n- -2^31 <= nums[i] <= 2^31 - 1\n- 0 <= k <= 10^5\n\n#### Hints\n- You can use extra space (e.g., a new array) to store the rotated elements, but for optimal memory usage, try solving it in-place.",
    "code": "def rotate(nums: list[int], k: int) -> None:\n    n = len(nums)\n    k %= n\n    nums[:] = nums[-k:] + nums[:-k]",
    "tests": [
        "assert rotate([1, 2, 3, 4, 5, 6, 7], 3)",
        "assert rotate([-1, -100, 3, 99], 2)"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}