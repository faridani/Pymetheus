{
    "title": "Roman Numeral Converter (Medium)",
    "description": "Write a function `convert_to_roman` that converts an integer into its equivalent Roman numeral.\n\n#### Function Signature\n```python\ndef convert_to_roman(num: int) -> str:\n```\n\n#### Input\n- `num` (int): A positive integer between 1 and 3999.\n\n#### Output\n- Returns the equivalent Roman numeral as a string.",
    "code": "def convert_to_roman(num: int) -> str:\n    roman_numerals = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n\n    # Edge case: If the input number is not within the valid range\n    if num < 1 or num > 3999:\n        raise ValueError('Input number must be between 1 and 3999')\n\n    # Special cases for numbers less than 4\n    if num == 1:\n        return 'I' \n    elif num == 2:\n        return 'II'\n    elif num == 3:\n        return 'III'\n    elif num == 4:\n        return 'IV'\n    elif num == 5:\n        return 'V'\n\n    # Convert larger numbers using repeated patterns of smaller values\n    result = ''\n    i = 1000\n    while num > 0:\n        if num - i >= i:\n            num -= i\n            result += roman_numerals[f'{i}'] * (num // i)\n            num %= i\n            i //= 10\n        elif i == 100:\n            i = 1\n    return result",
    "tests": [
        "assert convert_to_roman(1) == 'I'",
        "assert convert_to_roman(2) == 'II'",
        "assert convert_to_roman(3) == 'III'",
        "assert convert_to_roman(4) == 'IV'",
        "assert convert_to_roman(5) == 'V'",
        "assert convert_to_roman(6) == 'VI'",
        "assert convert_to_roman(7) == 'VII'",
        "assert convert_to_roman(8) == 'VIII'",
        "assert convert_to_roman(9) == 'IX'",
        "assert convert_to_roman(10) == 'X'",
        "assert convert_to_roman(20) == 'XX'",
        "assert convert_to_roman(30) == 'XXX'",
        "assert convert_to_roman(40) == 'XL'",
        "assert convert_to_roman(50) == 'L'",
        "assert convert_to_roman(90) == 'XC'",
        "assert convert_to_roman(100) == 'C'",
        "assert convert_to_roman(400) == 'CD'",
        "assert convert_to_roman(500) == 'D'",
        "assert convert_to_roman(800) == 'DCCXXXVIII'",
        "assert convert_to_roman(1672) == 'MDCCLXXII'"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}