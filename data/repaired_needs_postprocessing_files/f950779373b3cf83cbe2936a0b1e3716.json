{
    "title": "Hard: Maximum Subarray Sum",
    "description": "Given an array of integers, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n\n#### Function Signature\n```python\ndef max_subarray_sum(nums: List[int]) -> int:\n```\n\n#### Input\n- `nums` (List[int]): A list of integers, where the size of the list will be between 1 and 3 * 10^4.\n\n#### Output\n- Returns an integer representing the maximum subarray sum.",
    "code": "def max_subarray_sum(nums: List[int]) -> int:\n    max_sum = current_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum",
    "tests": [
        "assert max_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6",
        "assert max_subarray_sum([1]) == 1",
        "assert max_subarray_sum([5, 4, -1, 7, 8]) == 23"
    ],
    "model": "codestral:22b-repaired by Llama 3"
}