{
    "title": "Anagram Detector (Hard)",
    "description": "Write a function `find_anagrams(wordlist: List[str], target: str)` that returns all the anagrams of the given target string from a list of words. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n#### Function Signature\n```python\ndef find_anagrams(wordlist: List[str], target: str) -> Set[str]:```\n\n#### Input\n- `wordlist` (List[str]): A list of strings that may contain letters and spaces.\n- `target` (str): The string to find anagrams for.\n\n#### Output\n- Returns a set of strings, each representing an anagram of the target string from the given wordlist.",
    "code": "from collections import Counter\ndef find_anagrams(wordlist: List[str], target: str) -> Set[str]:\n    # Count occurrences of each letter in the target string\n    target_count = Counter(target)\n\n    # Initialize an empty set to store anagrams\n    anagrams = set()\n\n    # Iterate over each word in the given wordlist\n    for word in wordlist:\n        # Count occurrences of each letter in the current word\n        word_count = Counter(word)\n\n        # Check if the number of occurrences of each letter in the target and the word are the same\n        if all(target_count[letter] == word_count[letter] for letter in target):\n            # If so, add the current word to the set of anagrams\n            anagrams.add(word)\n    \n    return anagrams",
    "tests": [
        "assert find_anagrams(['cat', 'act', 'tac', 'dog', 'god'], 'act') == {'cat', 'tac'}",
        "assert find_anagrams(['listen', 'silent', 'enlist', 'linen', 'garden'], 'enlist') == {'listen', 'silent', 'linen'}",
        "assert find_anagrams(['elephant', 'alphabet', 'teapot', 'paperhat', 'phonebooth'], 'teapot') == {'ephonebtap'}"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}