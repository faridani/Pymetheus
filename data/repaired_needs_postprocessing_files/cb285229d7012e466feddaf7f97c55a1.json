{
    "title": "Hard: Minimum Distance to Sort",
    "description": "Given an array of integers `arr` and an integer `n`, your task is to find the minimum distance required to sort the array. The distance between two elements at indices `i` and `j` is `|i - j|`. If it's not possible to sort the array, return `-1`. \n\n#### Function Signature\n```python\ndef min_distance_to_sort(arr: list[int], n: int) -> int:\n```\n\n#### Input\n- `arr` (list[int]): A list of `n` integers.\n- `n` (int): The size of the input array.\n\n#### Output\n- Returns an integer representing the minimum distance required to sort the array. If it's not possible to sort, return `-1`. \n",
    "code": "import heapq\ndef min_distance_to_sort(arr: list[int], n: int) -> int:\n    # Use a priority queue to keep track of the unsorted elements\n    pq = []\n    for i in range(n):\n        if arr[i] < 0 or arr[i] > n - 1:\n            heapq.heappush(pq, (arr[i], i))\n    \n    if len(pq) == 0:\n        return 0\n\n    min_distance = float('inf')\n    while len(pq) >= 2:\n        x1, i1 = pq[0]\n        x2, i2 = pq[1]\n\n        # Calculate the minimum distance to swap these two elements\n        min_distance = min(min_distance, abs(i1 - i2))\n\n        # Remove these two elements from the priority queue\n        heapq.heappop(pq)\n        heapq.heappop(pq)\n\n        if len(pq) > 0 and pq[0][0] == x2:\n            heapq.heappush(pq, (x1 + 1, i1))\n        elif len(pq) > 0 and pq[0][0] == -x2:\n            heapq.heappush(pq, (-x1 - 1, i1))\n\n    return min_distance if min_distance != float('inf') else -1\n",
    "tests": [
        "assert min_distance_to_sort([5, 3], 2) == 0",
        "assert min_distance_to_sort([-10, 9, 0, -4], 4) == 8",
        "assert min_distance_to_sort([0, 1, 2, 3, 4, 5], 6) == 0",
        "assert min_distance_to_sort([-1, 1, 2], 3) == -1"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}