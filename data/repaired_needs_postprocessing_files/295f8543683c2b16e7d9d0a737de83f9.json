{
    "title": "Prime Factorization in Python (Medium)",
    "description": "Write a function `prime_factorize` that takes a positive integer as input and returns a list of its prime factors.\n\n#### Function Signature\n```python\ndef prime_factorize(n: int) -> List[int]:\n```\n\n#### Input\n- `n` (int): A positive integer greater than 1.\n\n#### Output\n- Returns a list of prime numbers that multiply together to give the input number, sorted in ascending order.\n",
    "code": "from math import sqrt\ndef prime_factorize(n: int) -> List[int]:\n    # Initialize an empty list for factors\n    factors = []\n    # Loop from 2 to the square root of n (since a factor greater than the square root must be a multiple of another factor already found)\n    i = 2\n    while i <= int(sqrt(n)):\n        # If n is divisible by i, then it's a multiple of i and also a potential prime factor\n        if n % i == 0:\n            # Add i to the list of factors\n            factors.append(i)\n            # Update n (since we just found a factor, divide n by this factor)\n            n //= i\n    \n    # If n is greater than 1 after the loop (meaning it's still not fully factored), it must be a prime number itself\n    if n > 1:\n        factors.append(n)\n    return factors",
    "tests": [
        "assert prime_factorize(28) == [2, 2, 7]",
        "assert prime_factorize(496) == [2, 2, 31]",
        "assert prime_factorize(93) == [93]"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}