{
    "title": "Easy: Valid IP Addresses",
    "description": "Given a string `queryIP`, write a function that returns a list of valid IP addresses that can be formed by inserting dots into the string. The string will always contain exactly 4 parts separated by spaces. This problem is essentially asking you to find all possible valid IP addresses from a given query IP, considering each part as either a number or a string, and then validating whether the resulting IP address is valid or not. Here's the signature of the function: `def valid_ips(queryIP: str) -> List[str]:`. Input - `queryIP` (str): A string with exactly 4 parts separated by spaces, each part can be a number or a string. Output - Returns a list of strings representing the valid IP addresses that can be formed by inserting dots into the input string.",
    "code": "from typing import List\n\ndef valid_ips(queryIP: str) -> List[str]:\n    def is_valid_part(part: str) -> bool:\n        if len(part) > 1 and part[0] == '0': return False\n        if not part.isdigit(): return False\n        if int(part) > 255: return False\n        return True\n    parts = queryIP.split()\n    valid_addresses = []\n    for i in range(256):\n        for j in range(256):\n            for k in range(256):\n                address = f'{parts[0]}.{parts[1]}.{parts[2]}{i}.{j}{k}'\n                if all(is_valid_part(part) for part in address.split('.')):\n                    valid_addresses.append(address)\n    return sorted(list(set(valid_addresses)))",
    "tests": [
        "assert valid_ips('255.1.1.1 1.0.1.1') == ['255.1.1.1', '1.0.1.1']",
        "assert valid_ips('a.b.c.d e.f.g.h') == []",
        "assert valid_ips('2.3.4.5 6.7.8.9') == ['2.3.4.5', '6.7.8.9']"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}