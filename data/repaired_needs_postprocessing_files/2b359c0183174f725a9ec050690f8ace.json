{
    "title": "Anagram Detector (Hard)",
    "description": "In mathematics and computer science, an anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a function `are_anagrams` that checks if two given strings are anagrams.  #### Function Signature```pythonndef are_anagrams(s1: str, s2: str) -> bool:   # Remove non-alphabetic characters and convert to lowercase   s1 = ''.join(char for char in s1 if char.isalpha()).lower()   s2 = ''.join(char for char in s2 if char.isalpha()).lower()   # Sort the strings   sorted_s1 = sorted(s1)   sorted_s2 = sorted(s2)   # Check if sorted strings are equal   return sorted_s1 == sorted_s2",
    "code": "def are_anagrams(s1: str, s2: str) -> bool:\n    # Remove non-alphabetic characters and convert to lowercase\n    s1 = ''.join(char for char in s1 if char.isalpha()).lower()\n    s2 = ''.join(char for char in s2 if char.isalpha()).lower()\n    # Sort the strings\n    sorted_s1 = sorted(s1)\n    sorted_s2 = sorted(s2)\n    # Check if sorted strings are equal\n    return sorted_s1 == sorted_s2",
    "tests": [
        "assert are_anagrams(\"listen\", \"silent\") == True",
        "assert are_anagrams(\"python\", \"typhon\") == True",
        "assert are_anagrams(\"hello\", \"world\") == False",
        "assert are_anagrams(\"Anagram\", \"nag a men\") == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}