{
    "title": "Coin Change Problem",
    "description": "You are given an integer array `coins` and an integer `amount`. Return the number of combinations that sum up to `amount`. You may reuse coins of the same denomination. For example, if `coins = [1, 2, 5]` and `amount = 5`, there are three combinations: `[1, 1, 1, 1, 1], [1, 1, 1, 2], [5]`. You can use the following function signature:\n```python\ndef coinChange(coins: List[int], amount: int) -> int:\n``\n#### Input\n- `coins` (List[int]): A list of integers representing the available coin denominations.\n- `amount` (int): The target amount that you are trying to reach.\n#### Output\n- Returns the number of combinations that sum up to `amount`. If no such combination exists, return 0.\n",
    "code": "from typing import List\ndef coinChange(coins: List[int], amount: int) -> int:\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    for coin in coins:\n        for i in range(coin, amount + 1):\n            dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[amount] if dp[amount] != float('inf') else 0",
    "tests": [
        "assert coinChange([1, 2, 5], 5) == 4",
        "assert coinChange([1, 2, 5], 3) == 2",
        "assert coinChange([1, 2, 5], 11) == 0",
        "assert coinChange([2, 5, 10], 15) == 4"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}