{
    "title": "Hard - Binary Tree Path Sum",
    "description": "Given a binary tree and a target sum, return all root-to-leaf paths where the sum of node values along each path equals the target sum. You can assume that the tree does not contain duplicate values.\n\n#### Function Signature\n```python\ndef path_sum(root: TreeNode, target_sum: int) -> list[list[int]]:\n```\n\n#### Input\n- `root` (TreeNode): The root of the binary tree.\n- `target_sum` (int): The target sum to find.\n\n#### Output\n- Returns a list of lists, where each inner list represents a path from root to leaf with the specified sum. Each path is represented as a list of node values.",
    "code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef path_sum(root: TreeNode, target_sum: int) -> list[list[int]]:\n    result = []\n    def dfs(node, current_sum, path):\n        if not node:\n            return\n        current_sum += node.val\n        path.append(node.val)\n        if current_sum == target_sum and not node.left and not node.right:\n            result.append(path[:])\n        dfs(node.left, current_sum, path)\n        dfs(node.right, current_sum, path)\n        path.pop()\n    dfs(root, 0, [])\n    return result\n",
    "tests": [
        "# Example Usage:\ntree = TreeNode(5)\ntree.left = TreeNode(4)\ntree.right = TreeNode(8)\ntree.left.left = TreeNode(11, TreeNode(7), TreeNode(2))\ntree.right.left = TreeNode(13)\ntree.right.right = TreeNode(4, TreeNode(5), TreeNode(1))\nprint(path_sum(tree, 22)) # Output: [[5, 4, 11, 2]]"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}