{
    "title": "Easy: Garden Planting",
    "description": "A farmer has 20 plots of land that can be used to plant flowers. Each plot requires a certain number of days to prepare before planting, and each type of flower takes a different number of days to grow after planting. The farmer wants to use all the plots, but he only has 30 days in total for preparation and growth. Write a function `garden_planting` that determines if it is possible to plant a combination of flowers that will use up all the plots within the given time constraint.\n\n#### Function Signature\n```python\ndef garden_planting(plots: list[int], prep_days: list[int], grow_days: list[int]) -> bool:\n```\n\n#### Input\n- `plots` (list[int]): A list of 20 integers representing the number of plots available for each type of flower.\n- `prep_days` (list[int]): A list of 3 integers representing the preparation time required for each type of flower.\n- `grow_days` (list[int]): A list of 3 integers representing the growth time required for each type of flower after planting.\n\n#### Output\n- Returns `True` if it is possible to plant a combination of flowers that will use up all the plots within the given time constraint, `False` otherwise.",
    "code": "def garden_planting(plots: list[int], prep_days: list[int], grow_days: list[int]) -> bool:\n    total_prep_time = sum(prep_days)\n    total_grow_time = sum(grow_days)\n    if total_prep_time + total_grow_time <= 30 and sum(plots) == 20:\n        return True\n    else:\n        return False\n",
    "tests": [
        "assert garden_planting([5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1], [5, 4, 3]) == True",
        "assert garden_planting([10, 2, 8], [2, 1, 3], [3, 2, 1]) == False",
        "assert garden_planting([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3]) == False",
        "assert garden_planting([4, 2, 5, 3, 6, 7], [2, 1, 3], [4, 2, 5]) == True"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}