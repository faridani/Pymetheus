{
    "title": "Palindromic Substrings (Medium)",
    "description": "Given a string, find all the non-empty palindromic substrings within that string.\n\n#### Function Signature\n```python\ndef find_palindromes(s: str) -> List[str]:\n``` \n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns a list of non-empty palindromic substrings within the input string.",
    "code": "import re\ndef find_palindromes(s: str) -> List[str]:\n    # Find all possible substrings that may be palindromes\n    pattern = r'(.)\\1*'  # Matches any character followed by any number of repetitions of the same character\n    matches = re.finditer(pattern, s)\n    # Filter out non-palindromic substrings\n    palindromes = [match for match in matches if len(match.group()) > 1 and match.start() < s.index(match.group(0)[-1])]\n    return [''.join(substring) for substring in palindromes]",
    "tests": [
        "assert find_palindromes('racecar') == ['r', 'a', 'c', 'c', 'a', 'r']",
        "assert find_palindromes('A man, a plan, a canal, Panama') == ['a', 'man', 'canal', 'Panama']",
        "assert find_palindromes('Hello World!') == ['o']"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}