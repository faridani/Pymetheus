{
    "title": "Minimum Window Substring",
    "description": "Given two strings `s` and `t`, find the minimum window of `s` that contains all characters of `t`. If there is no such window, return an empty string.\n\n#### Function Signature\n```python\ndef min_window(s: str, t: str) -> str:\n```\n\n#### Input\n- `s` (str): The string to search for the minimum window in.\n- `t` (str): The string that must be contained in the minimum window of `s`.\n\n#### Output\n- Returns the minimum window of `s` that contains all characters of `t`. If there is no such window, return an empty string.",
    "code": "def min_window(s: str, t: str) -> str:\n    if not s or not t:\n        return \"\"\n    # Create a dictionary to store the frequency of each character in `t`\n    freq = {}\n    for char in t:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    # Initialize variables to keep track of the minimum window\n    min_window = \"\"\n    min_len = float('inf')\n    # Initialize two pointers for the sliding window\n    left = 0\n    formed = 0\n    # Iterate over `s` with a sliding window\n    for right in range(len(s)):\n        if s[right] in freq:\n            # If the current character is in `t`, increment the count of formed characters\n            freq[s[right]] -= 1\n            if freq[s[right]] == 0:\n                formed += 1\n        # While the window contains all characters of `t` and the left pointer is not at the start of the window\n        while formed == len(freq) and left <= right:\n            # If the current window is smaller than the minimum window found so far, update the minimum window\n            if right - left + 1 < min_len:\n                min_len = right - left + 1\n                min_window = s[left:right + 1]\n    # Return the minimum window found or an empty string if no such window exists\n    return min_window",
    "tests": [
        "assert min_window('ADOBECOC', 'ABC') == 'BCA'",
        "assert min_window('a', 'aa') == ''",
        "assert min_window('bba', 'ab') == 'ab'",
        "assert min_window('bba', 'ba') == 'ba'"
    ],
    "model": "llama3.1:8b-repaired by Llama 3"
}