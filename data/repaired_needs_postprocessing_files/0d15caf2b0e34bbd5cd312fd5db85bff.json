{
    "title": "Medium: Divisible Intervals",
    "description": "Given a list of intervals, where each interval is represented as a tuple of two integers (start, end), and an integer K. Find the number of intervals that have at least one point in common with every other interval.\n\n#### Function Signature\n```python\ndef divisible_intervals(intervals: list[tuple[int, int]], k: int) -> int:\n```\n\n#### Input\n- `intervals` (list[tuple[int, int]]): A list of intervals, where each interval is represented as a tuple of two integers (start, end).\n- `k` (int): An integer that represents the number of intervals to check.\n\n#### Output\n- Returns the number of intervals that have at least one point in common with every other interval.",
    "code": "def divisible_intervals(intervals: list[tuple[int, int]], k: int) -> int:\n    # Sort the intervals by their end points\n    intervals.sort(key=lambda x: x[1])\n    count = 0\n    for i in range(len(intervals)):\n        common = set()\n        for j in range(i+1, len(intervals)):\n            if not (intervals[i][1] < intervals[j][0] or intervals[i][0] > intervals[j][1]):\n                common.add(min(intervals[i][1], intervals[j][1]))\n            else:\n                break\n        if len(common) == k-1:\n            count += 1\n    return count",
    "tests": [
        "assert divisible_intervals([(1,3), (2,4), (5,7)], 2) == 2",
        "assert divisible_intervals([(0,10),(1,11),(2,12),(3,13),(4,14)], 2) == 3",
        "assert divisible_intervals([], 3) == 0"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}