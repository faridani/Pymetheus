{
    "title": "Is it an Anagram Solver (Medium)",
    "description": "An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a function `is_anagram` that checks if two given strings are anagrams of each other.\n\n#### Function Signature\n```python\ndef is_anagram(s1: str, s2: str) -> bool:\n```\n\n#### Input\n- `s1` (str): A string that may contain letters, numbers, spaces, and punctuation.\n- `s2` (str): Another string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.",
    "code": "import collections\ndef is_anagram(s1: str, s2: str) -> bool:\n    # Remove non-alphanumeric characters and convert to lowercase\n    s1 = ''.join(char for char in s1.lower() if char in string.ascii_letters + string.digits)\n    s2 = ''.join(char for char in s2.lower() if char in string.ascii_letters + string.digits)\n    # Count the frequency of each character\n    count1 = collections.Counter(s1)\n    count2 = collections.Counter(s2)\n    \n    # Check if the counts are the same for both strings\n    return count1 == count2",
    "tests": [
        "assert is_anagram(\"listen\", \"silent\") == True",
        "assert is_anagram(\"racecar\", \"carrace\") == True",
        "assert is_anagram(\"hello\", \"world\") == False",
        "assert is_anagram(\"No 'x' in Nixon\", \"Check you may come and see Xmas in this house.\") == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}