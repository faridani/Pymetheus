{
    "title": "'Anagram Finder (Hard)'",
    "description": "An anagram is a word or phrase that consists of the same letters as another, typically arranged differently. Write a function `find_anagrams` that finds all anagrams for a given string within a provided list of strings.\n\n#### Function Signature\n```python\ndef find_anagrams(str: str, words: List[str]) -> List[str]:\n```\n\n#### Input\n- `str` (str): The string to find anagrams for.\n- `words` (List[str]): A list of strings containing words from which to find anagrams.\n\n#### Output\n- Returns a list of strings, each representing a word that is an anagram of the input string. If no anagrams are found, returns an empty list.\n",
    "code": "def find_anagrams(str: str, words: List[str]) -> List[str]:\n    # Sort and convert to set for comparison\n    sorted_str = ''.join(sorted(str.lower()))\n    anagrams = set()\n    for word in words:\n        if sorted(word.lower()) == sorted_str:\n            anagrams.add(word)\n    return list(anagrams)",
    "tests": [
        "assert find_anagrams('listen', ['enlists', 'silent', 'enlist']) == ['enlist', 'silent']",
        "assert find_anagrams('world', ['ardour', 'goddess', 'drowel', 'dweller', 'sword']) == ['ardour', 'drowel', 'dweller']",
        "assert find_anagrams('python', ['typhon', 'potty', 'thypop', 'cytop', 'yhtpo']) == []"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}