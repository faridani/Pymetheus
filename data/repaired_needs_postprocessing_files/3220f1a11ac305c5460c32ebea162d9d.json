{
    "title": "Anagram Finder (Hard)",
    "description": "Write a function `find_anagrams(words: List[str]) -> Dict[str, List[str]]` that finds all pairs of words in the given list that are anagrams of each other.\n\n#### Function Signature\n```python\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\n```\n\n#### Input\n- `words` (List[str]): A list of strings containing only lowercase letters.\n\n#### Output\n- Returns a dictionary where each key is a word and the value is a list of words that are anagrams of the key word.\n",
    "code": "def find_anagrams(words: List[str]) -> Dict[str, List[str]]:\n    # Create a dictionary to store anagram pairs\n    anagrams = {\n        '': []\n    }\n    \n    # Sort each word and use it as the key in the dictionary\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        if sorted_word not in anagrams:\n            anagrams[sorted_word] = []\n        anagrams[sorted_word].append(word)\n    \n    # Return the dictionary of anagram pairs\n    return anagrams",
    "tests": [
        "assert find_anagrams(['listen', 'silent', 'enlist']) == {'listen': ['listen', 'silent'], 'enlist': ['enlist'], 'silent': ['listen', 'silent']}",
        "assert find_anagrams(['welcome', 'immediate', 'longest', 'mellow', 'world']) == {'come': ['welcome', 'immediate'], 'd': ['longest', 'world'], 'l': ['welcome', 'longest', 'mellow'], 'lo': ['welcome', 'longest', 'mellow'], 'mel': ['welcome', 'mellow'], 'more': ['world'], 'owl': ['world'], 'm': ['immediate', 'world']}",
        "assert find_anagrams(['apple', 'apples', 'beach', 'peach']) == {'pple': ['apple', 'apples'], 'each': ['beach', 'peach'], 'pe': ['apple', 'peach'], 'all': []}"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}