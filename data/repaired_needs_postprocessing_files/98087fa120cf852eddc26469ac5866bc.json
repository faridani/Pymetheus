{
    "title": "Hard - Path Sum",
    "description": "Given a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.\n\n#### Function Signature\n```python\ndef has_path_sum(root: TreeNode, targetSum: int) -> bool:\n```\nWhere `TreeNode` is a class representing a node in the binary tree with the following structure:\n```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n```\n#### Input\n- `root` (TreeNode): The root node of the binary tree.\n- `targetSum` (int): The target sum to check for.",
    "code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef has_path_sum(root: TreeNode, targetSum: int) -> bool:\n    if not root:\n        return False\n    \n    targetSum -= root.val\n\n    # If it's a leaf node and the sum is 0, we found a path\n    if not root.left and not root.right:\n        return targetSum == 0\n    \n    # Recursively check left and right subtrees\n    return has_path_sum(root.left, targetSum) or has_path_sum(root.right, targetSum)\n",
    "tests": [
        "node1 = TreeNode(5)\nnode2 = TreeNode(4)\nnode3 = TreeNode(8)\nnode4 = TreeNode(11)\nnode5 = TreeNode(13)\nnode6 = TreeNode(4)\nnode7 = TreeNode(7)\nnode8 = TreeNode(2)\nnode9 = TreeNode(1)\n\nnode1.left = node2\nnode1.right = node3\nnode2.left = node4\nnode4.left = node8\nnode4.right = node9\nnode3.left = node5\nnode3.right = node6\nnode6.right = node7\nassert has_path_sum(node1, 22) == True",
        "nodes = TreeNode(1)\nnodes.left = TreeNode(2)\nnodes.right = TreeNode(3)\nassert has_path_sum(nodes, 5) == False"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}