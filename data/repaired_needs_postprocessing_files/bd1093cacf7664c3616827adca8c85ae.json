{
    "title": "Knight's Tour Checker",
    "description": "A knight's tour is a sequence of moves of a knight on a chessboard such that the knight visits every square exactly once. Write a function `check_knights_tour` that takes as input the final position of the knight and checks if it has indeed visited every square exactly once.\n\n#### Function Signature\n```python\ndef check_knights_tour(final_position: tuple[int, int]) -> bool:\n```\n\n#### Input\n- `final_position` (tuple[int, int]): The final position of the knight on the chessboard, where the first element is the row and the second element is the column.\n\n#### Output\n- Returns `True` if the knight has visited every square exactly once, `False` otherwise.",
    "code": "import itertools\ndef check_knights_tour(final_position: tuple[int, int]) -> bool:\n    # Define the possible moves of a knight\n    moves = [(1, 2), (1, -2), (-1, 2), (-1, -2), (2, 1), (2, -1), (-2, 1), (-2, -1)]\n    \n    # Initialize the set of visited squares\n    visited = set()\n    \n    # Initialize the current position\n    current_position = (0, 0)\n    \n    # Generate all possible moves from the starting position\n    for _ in range(64):\n        # Add the current position to the set of visited squares\n        visited.add(current_position)\n        \n        # Get the possible moves from the current position\n        possible_moves = [move for move in moves if 0 <= current_position[0] + move[0] < 8 and 0 <= current_position[1] + move[1] < 8]\n        \n        # If there are no possible moves, it's not a valid tour\n        if not possible_moves:\n            return False\n        \n        # Generate all permutations of the possible moves\n        for permutation in itertools.permutations(possible_moves):\n            \n            # Initialize the new position\n            new_position = list(current_position)\n            \n            # Apply each move in the permutation\n            for move in permutation:\n                new_position[0] += move[0]\n                new_position[1] += move[1]\n                \n                # If this is the final position, it's a valid tour\n                if tuple(new_position) == final_position:\n                    return True\n            \n            # Update the current position\n            current_position = tuple(new_position)\n    \n    # If no valid tour was found, return False\n    return False",
    "tests": [
        "assert check_knights_tour((7, 4)) == True",
        "assert check_knights_tour((3, 3)) == False",
        "assert check_knights_tour((1, 0)) == False",
        "assert check_knights_tour((2, 5)) == True"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}