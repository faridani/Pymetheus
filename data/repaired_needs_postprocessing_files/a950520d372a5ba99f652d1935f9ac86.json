{
    "title": "Hard: Optimal Path Finding",
    "description": "You are given a grid represented as a list of lists, where each inner list represents a row in the grid. Each cell in the grid contains an integer representing the cost of traversing that cell.\nYour task is to find the path with the minimum total cost from the top-left corner to the bottom-right corner of the grid. You can only move down or right at each step.\n\n#### Function Signature\n```python\ndef min_cost_path(grid: list[list[int]]) -> int:\n``` \n\n#### Input\n- `grid` (list[list[int]]): A 2D list representing the grid with cost values.\n\n#### Output\n- Returns an integer representing the minimum total cost of the path from top-left to bottom-right.",
    "code": "def min_cost_path(grid: list[list[int]]) -> int:\n    rows = len(grid)\n    cols = len(grid[0])\n    dp = [[float('inf')] * (cols + 1) for _ in range(rows + 1)]\n    dp[1][1] = grid[0][0]\n\n    for i in range(1, rows + 1):\n        for j in range(1, cols + 1):\n            if i == 1 and j == 1:  # Starting point already set\n                continue\n            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i - 1][j - 1]\n    return dp[rows][cols]",
    "tests": [
        "assert min_cost_path([[1, 3, 1],[1, 5, 1],[4, 2, 1]]) == 7",
        "assert min_cost_path([[1, 2, 3],[4, 8, 2],[1, 5, 3]]) == 11",
        "assert min_cost_path([[10, 5, 2],[3, 9, 6],[1, 2, 8]]) == 18"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}