{
    "title": "Counting Inversions",
    "description": "Given an array of integers, write a function `count_inversions` that counts the number of inversions. An inversion occurs when a smaller element is placed after a larger one in the sorted array.\n\n#### Function Signature\n```python\ndef count_inversions(arr: list[int]) -> int:\n```\n\n#### Input\n- `arr` (list[int]): A list of integers.\n\n#### Output\n- Returns the number of inversions in the input array.",
    "code": "def count_inversions(arr: list[int]) -> int:\n    if len(arr) <= 1:\n        return 0\n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    left_count = count_inversions(left_half)\n    right_count = count_inversions(right_half)\n    merged_count = merge_and_count(left_half, right_half)\n    return left_count + right_count + merged_count\n\ndef merge_and_count(left: list[int], right: list[int]) -> int:\n    inversions = 0\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            inversions += len(left) - i\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return inversions",
    "tests": [
        "assert count_inversions([2, 3, 8, 7, 6, 5, 4, 3, 2]) == 12",
        "assert count_inversions([]) == 0",
        "assert count_inversions([1]) == 0",
        "assert count_inversions([1, 2]) == 0"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}