{
    "title": "Hard: Minimum Window Substring",
    "description": "Given two strings s and t, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return an empty string. The order of characters in t does not matter.\n\n#### Function Signature\n```python\ndef min_window(s: str, t: str) -> str:\n```\n\n#### Input\n- `s` (str): The input string.\n- `t` (str): The target string containing characters to be found in the window.\n\n#### Output\n- Returns the minimum window substring of `s` that contains all characters in `t`, or an empty string if no such substring exists.",
    "code": "def min_window(s: str, t: str) -> str:\n    if not t or not s:\n        return \"\"\n    dict_t = Counter(t)\n    required = len(dict_t)\n\n    filtered_s = []\n    for i, char in enumerate(s):\n        if char in dict_t:\n            filtered_s.append((i, char))\n\n    l, r = 0, 0\n    formed = 0\n    window_counts = {}\n    ans = float(\"inf\"), None, None\n\n    while r < len(filtered_s):\n        character = filtered_s[r][1]\n        window_counts[character] = window_counts.get(character, 0) + 1\n\n        if window_counts[character] == dict_t[character]:\n            formed += 1\n\n        while l <= r and formed == required:\n            character = filtered_s[l][1]\n\n            end = filtered_s[r][0]\n            start = filtered_s[l][0]\n\n            if end - start + 1 < ans[0]:\n                ans = (end - start + 1, start, end)\n\n            window_counts[character] -= 1\n\n            if window_counts[character] < dict_t[character]:\n                formed -= 1\n\n            l += 1\n    \n    r += 1\n\n    return \"\" if ans[0] == float(\"inf\") else s[ans[1] : ans[2]+1]\n",
    "tests": [
        "assert min_window('ADOBECODEBANC', 'ABC') == 'BANC'",
        "assert min_window('a', 'a') == 'a'",
        "assert min_window('aa', 'aa') == 'aa'",
        "assert min_window('ab', 'a') == 'a'",
        "assert min_window('a', 'b') == ''",
        "assert min_window('adobecodebanc', 'abc') == 'banc'",
        "assert min_window('azobecdx', 'abcd') == ''"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}