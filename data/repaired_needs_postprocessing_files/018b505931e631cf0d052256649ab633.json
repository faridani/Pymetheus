{
    "title": "Hard - Cyclical Prime Permutations",
    "description": "A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. A cyclical permutation of a prime number p is any integer obtained by rotating its digits. For example, 1487 is a cyclical permutation of the prime 1487. Write a function `cyclical_prime_permutations(n)` that returns the count of all prime numbers below n that have at least one cyclical permutation which is also a prime. n. #### Function Signature```python def cyclical_prime_permutations(n: int) -> int: ``` #### Input- `n` (int): An integer representing the upper limit for the search. #### Output- Returns an integer representing the count of primes below n with at least one cyclical prime permutation.",
    "code": "def is_prime(num):\n    if num <= 1: return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef cyclical_prime_permutations(n: int) -> int:\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            str_num = str(num)\n            is_cyclical = True\n            for i in range(len(str_num)):\n                rotated_num = int(str_num[i:] + str_num[:i])\n                if not is_prime(rotated_num):\n                    is_cyclical = False\n                    break\n            if is_cyclical:\n                count += 1\n    return count",
    "tests": [
        "assert cyclical_prime_permutations(100) == 13",
        "assert cyclical_prime_permutations(1000) == 43"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}