{
    "title": "Anagram Finder (Hard)",
    "description": "In the context of English alphabet, an anagram is a word or phrase that is formed by rearranging the letters of another word or phrase, typically using all the original letters exactly once.\n\n#### Function Signature\n```python\ndef find_anagrams(wordlist: List[str], target: str) -> List[str]:\n```\n\n#### Input\n- `wordlist` (List[str]): A list of words to search for anagrams.\n- `target` (str): The word or phrase you want to find the anagrams for.\n\n#### Output\n- Returns a list of words in `wordlist` that are anagrams of the given `target`. If there are no anagrams, it should return an empty list.",
    "code": "def find_anagrams(wordlist: List[str], target: str) -> List[str]:\n    # Create a dictionary to store the frequency of each letter in the target word\n    target_freq = {}\n    for char in target:\n        if char not in target_freq:\n            target_freq[char] = 0\n        target_freq[char] += 1\n    \n    # Initialize an empty list to store the found anagrams\n    anagrams = []\n    \n    # Iterate through each word in the input list\n    for word in wordlist:\n        # Create a dictionary to store the frequency of each letter in the current word\n        word_freq = {}\n        for char in word:\n            if char not in word_freq:\n                word_freq[char] = 0\n            word_freq[char] += 1\n        \n        # Check if the frequency of each letter in the current word matches the target's frequency\n        if len(target) == len(word):\n            for key, value in target_freq.items():\n                if key not in word_freq or word_freq[key] != value:\n                    break # If there's a mismatch, we can stop checking this word\n            else:\n                # If all frequencies match, the current word is an anagram of the target\n                anagrams.append(word)\n    return anagrams",
    "tests": [
        "assert find_anagrams(['apple', 'apples', 'banana', 'antidisestablishmentarianism'], 'apples') == ['apple']",
        "assert find_anagrams(['antidisestablishmentarianism', 'banana', 'man', 'racecar', 'level', 'evil'], 'racecar') == ['evil', 'level']"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}