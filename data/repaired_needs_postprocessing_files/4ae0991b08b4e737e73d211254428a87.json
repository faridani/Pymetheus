{
    "title": "Hard: Maximal Square",
    "description": "Write a function `maximal_square` that takes as input a 2D array of characters and returns the maximum size of square subarray with all characters being the same.\n\n#### Function Signature\n```python\ndef maximal_square(grid: list[list[str]]) -> int:\n``` \n\n#### Input\n- `grid` (list[list[str]]): A 2D array of characters, where each cell is either '0' or '1'. The grid may be empty.\n\n#### Output\n- Returns the maximum size of square subarray with all characters being the same. If no such square exists, returns 0.",
    "code": "def maximal_square(grid: list[list[str]]) -> int:\n    if not grid:\n        return 0\n    m, n = len(grid), len(grid[0])\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    max_size = 0\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if grid[i - 1][j - 1] == '1':\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j]) + 1\n                max_size = max(max_size, dp[i][j])\n    return max_size",
    "tests": [
        "assert maximal_square([['0', '1'], ['1', '0']]) == 1",
        "assert maximal_square([['1', '1', '1'], ['1', '1', '1'], ['1', '1', '1']]) == 3",
        "assert maximal_square([]) == 0",
        "assert maximal_square([['0']]) == 0"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}