{
    "title": "Reverse a Linked List (Medium)",
    "description": "Given the head of a singly linked list, reverse the list, and return the reversed list.\n\n#### Function Signature\n```python\ndef reverse_linked_list(head: ListNode) -> ListNode:\n```\n\n#### Input\n- `head` (ListNode): The head of a singly linked list.\n\n#### Output\n- Returns (ListNode): The head of the reversed linked list.\n\n### Hint\nYou may want to use a recursive approach to solve this problem.\n",
    "code": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverse_linked_list(head: ListNode) -> ListNode:\n    # Base case: if the list is empty or has only one node, return it as is\n    if not head or not head.next:\n        return head\n    # Recursive case: reverse the rest of the list and set the current node's next pointer to the reversed list\n    new_head = reverse_linked_list(head.next)\n    head.next.next = head\n    head.next = None\n    return new_head\n",
    "tests": [
        "from linked_list import ListNode\n\n# Create a linked list: 1 -> 2 -> 3 -> None\nnode1 = ListNode(1)\nnode2 = ListNode(2)\nnode3 = ListNode(3)\nnode1.next = node2\nnode2.next = node3\n\n# Call the function to reverse the linked list\nreversed_list = reverse_linked_list(node1)\n\n# Check if the reversed list is as expected: 3 -> 2 -> 1 -> None\nassert reversed_list.val == 3\nassert reversed_list.next.val == 2\nassert reversed_list.next.next.val == 1\nassert reversed_list.next.next.next is None"
    ],
    "model": "aya:35b-repaired by Llama 3"
}