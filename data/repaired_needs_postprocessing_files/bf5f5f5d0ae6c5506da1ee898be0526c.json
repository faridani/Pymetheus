{
    "title": "Anagram Detector (Hard)",
    "description": "Write a function `anagram_detector` that checks if two given strings are anagrams of each other. Two words or phrases are considered anagrams if they have the same letters and the same frequency of those letters, regardless of their order.\n#### Function Signature\n```python\ndef anagram_detector(str1: str, str2: str) -> bool:\n```\n#### Input\n- `str1` (str): A string that may contain any printable character.\n- `str2` (str): Another string that may contain any printable character.\n#### Output\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.",
    "code": "def anagram_detector(str1: str, str2: str) -> bool:\n    # Remove non-alphanumeric characters and convert to lowercase\n    str1 = ''.join([char for char in str1 if char in string.ascii_letters + string.digits]).lower()\n    str2 = ''.join([char for char in str2 if char in string.ascii_letters + string.digits]).lower()\n    # Check if both strings have the same length\n    if len(str1) != len(str2):\n        return False\n    # Create a dictionary to store letter counts for each string\n    letter_counts = {}\n    for char in str1:\n        if char in letter_counts:\n            letter_counts[char] += 1\n        else:\n            letter_counts[char] = 1\n    for char in str2:\n        if char in letter_counts:\n            letter_counts[char] -= 1\n        else:\n            return False\n    # All letters are present and have the same count in both strings\n    return True",
    "tests": [
        "assert anagram_detector('listen', 'silent') == True",
        "assert anagram_detector('hello', 'world') == False",
        "assert anagram_detector('A man, a plan, a canal: Panama', 'amanaplanacanalpanama') == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}