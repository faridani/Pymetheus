{
    "title": "Hard: Prime Factorization",
    "description": "#### Problem Statement\nWrite a function that takes an integer `n` as input and returns its prime factorization. The function should return a list of tuples, where each tuple contains a prime factor and its power in the factorization.\n\nFor example, if the input is 36, the output should be [(2, 2), (3, 1)].\n\n#### Function Signature\n```python\ndef prime_factorization(n: int) -> list[tuple[int, int]]:\n```\n\n#### Input\n- `n` (int): A positive integer.\n\n#### Output\n- Returns a list of tuples, where each tuple contains a prime factor and its power in the factorization.",
    "code": "import math\ndef prime_factorization(n: int) -> list[tuple[int, int]]:\n    factors = []\n    for p in range(2, int(math.sqrt(n)) + 1):\n        while n % p == 0:\n            count = 0\n            while n % p == 0:\n                n //= p\n                count += 1\n            if count > 0:\n                factors.append((p, count))\n    if n > 1:\n        factors.append((n, 1))\n    return factors",
    "tests": [
        "assert prime_factorization(36) == [(2, 2), (3, 1)]",
        "assert prime_factorization(100) == [(2, 2), (5, 2)]",
        "assert prime_factorization(25) == [(5, 1)]"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}