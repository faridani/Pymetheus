{
    "title": "Anagram Detection (Hard)",
    "description": "An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a function `is_anagram` that checks if two given strings are anagrams of each other.\n#### Function Signature\n```python\ndef is_anagram(s1: str, s2: str) -> bool:\n```\n#### Input\n- `s1` (str): A string containing lowercase letters that may be long or short.\n- `s2` (str): Another string containing lowercase letters that may be long or short.\n#### Output\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.",
    "code": "import collections\ndef is_anagram(s1: str, s2: str) -> bool:\n    # Ensure both strings have the same length\n    if len(s1) != len(s2):\n        return False\n    \n    # Count the frequency of each character in s1\n    count1 = collections.Counter(s1)\n    \n    # Count the frequency of each character in s2\n    count2 = collections.Counter(s2)\n    \n    # Check if the counts are the same for both strings\n    return count1 == count2",
    "tests": [
        "assert is_anagram('listen', 'silent') == True",
        "assert is_anagram('python', 'typhon') == False",
        "assert is_anagram('hello', 'world') == False",
        "assert is_anagram('madam', 'dam') == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}