{
    "title": "Hard: Minimum Deletions for Palindromic Subsequence",
    "description": "A subsequence of a string is a sequence that can be derived from the string by deleting zero or more elements without changing the order of the remaining elements. For example, \"ace\" is a subsequence of \"abcde.\" Given a string `s`, find the minimum number of deletions required to transform it into a palindrome. A palindrome is a word or phrase that reads the same backward as forward.\n\n#### Function Signature\n```python\ndef min_deletions(s: str) -> int:\n```\n\n#### Input\n- `s` (str): The input string.\n\n#### Output\n- Returns the minimum number of deletions required to transform `s` into a palindrome.\n\n#### Tests\n[ 'assert min_deletions(\"aebcbda\") == 2', 'assert min_deletions(\"abcba\") == 0', 'assert min_deletions(\"abca\") == 1', 'assert min_deletions(\"geeksforgeeks\") == 8' ]",
    "code": "def min_deletions(s: str) -> int:\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    # Fill the diagonal with 1s (single characters are palindromes)\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Iterate through substrings of increasing length\n    for l in range(2, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            if s[i] == s[j] and l == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    return n - dp[0][n - 1]",
    "tests": [
        "'assert min_deletions(\"aebcbda\") == 2'",
        "'assert min_deletions(\"abcba\") == 0'",
        "'assert min_deletions(\"abca\") == 1'",
        "'assert min_deletions(\"geeksforgeeks\") == 8'"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}