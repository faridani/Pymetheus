{
    "title": "Hard - Longest Subsequence with Difference at Most K",
    "description": "You are given an array of integers `nums` and an integer `k`. Find the length of the longest subsequence in `nums` where the absolute difference between any two adjacent elements is at most `k`. \n\n#### Function Signature\n```python\ndef longest_subsequence(nums: list[int], k: int) -> int:\n```\n\n#### Input\n- `nums` (list[int]): A list of integers.\n- `k` (int): The maximum allowed absolute difference between adjacent elements in the subsequence.\n\n#### Output\n- Returns the length of the longest subsequence satisfying the condition.\n\n#### Constraints\n - 1 <= len(nums) <= 10^5\n - -10^9 <= nums[i] <= 10^9\n - 0 <= k <= 10^9\n\n#### Hint: Consider using dynamic programming to track possible subsequence lengths ending at each index.",
    "code": "def longest_subsequence(nums: list[int], k: int) -> int:\n    dp = [1] * len(nums)\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if abs(nums[i] - nums[j]) <= k:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
    "tests": [
        "'assert longest_subsequence([1, 3, 2, 4, 5], 2) == 4'",
        "'assert longest_subsequence([1, 2, 3, 4, 5], 1) == 2'",
        "'assert longest_subsequence([10, 9, 8, 7, 6], 3) == 5'"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}