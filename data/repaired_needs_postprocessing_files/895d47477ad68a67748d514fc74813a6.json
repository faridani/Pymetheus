{
    "title": "Hard - Minimum Swaps to Sort an Array",
    "description": "Given an array of integers, find the minimum number of swaps required to sort the array in ascending order.\n\n#### Function Signature\n```python\ndef min_swaps(arr):\n``` \n\n#### Input\n- `arr` (list of int): An unsorted list of integers.\n\n#### Output\n- Returns the minimum number of swaps needed to sort the array.\n\n#### Constraints\n* 1 <= len(arr) <= 10^5\n* -10^9 <= arr[i] <= 10^9\n\n#### Hints:\n* Think about using a cycle detection algorithm.",
    "code": "def min_swaps(arr):\n    n = len(arr)\n    pos = [i for i in range(n)]\n    cycle_len = 0\n    total_swaps = 0\n    for i in range(n):\n        if pos[i] == i:\n            continue\n        cycle_len = 0\n        j = i\n        while pos[j] != i:\n            cycle_len += 1\n            j = pos[j]\n        total_swaps += cycle_len - 1\n        k = j\n        for _ in range(cycle_len):\n            pos[k], pos[pos[k]] = pos[pos[k]], k\n            k = pos[k]\n    return total_swaps",
    "tests": [
        "assert min_swaps([7, 1, 3, 2, 4, 5, 6]) == 5",
        "assert min_swaps([1, 2, 3, 4, 5]) == 0",
        "assert min_swaps([4, 3, 2, 1]) == 3"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}