{
    "title": "Hard: Minimum Swaps to Sort an Array",
    "description": "Given an array of integers `nums`, find the minimum number of swaps required to sort the array in ascending order. You can only swap adjacent elements.\n\n#### Function Signature\n```python\ndef min_swaps(nums: list[int]) -> int:\n```\n\n#### Input\n- `nums` (list[int]): A list of integers.\n\n#### Output\n- Returns the minimum number of swaps required to sort the array in ascending order.",
    "code": "def min_swaps(nums: list[int]) -> int:\n    n = len(nums)\n    pos = [0] * n\n    for i in range(n):\n        pos[nums[i]] = i\n\n    cycle_count = 0\n    visited = [False] * n\n    for i in range(n):\n        if not visited[i]:\n            j = i\n            cycle_len = 0\n            while not visited[j]:\n                visited[j] = True\n                j = pos[nums[j]]\n                cycle_len += 1\n            if cycle_len > 0:\n                cycle_count += cycle_len - 1\n\n    return cycle_count",
    "tests": [
        "assert min_swaps([7, 1, 3, 2, 4, 5, 6]) == 5",
        "assert min_swaps([1, 2, 3, 4, 5]) == 0",
        "assert min_swaps([4, 3, 2, 1]) == 3"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}