{
    "title": "Hard: Tree Summation",
    "description": "In this problem, you are given a tree represented as an adjacency list. The tree contains unique node IDs from 1 to N, and the value of each node is either 0 or 1. You need to write a function `summation` that calculates the sum of all leaf nodes in the tree. A leaf node is defined as a node with no children.\n\n#### Function Signature\n```python\ndef summation(tree: list[list[int]]) -> int:\n``` \n\n#### Input\n- `tree`: An adjacency list representing the tree, where each inner list represents the children of a node, and each element in the inner list is either 0 or 1.\n- `N`: The number of nodes in the tree (will be used to determine the number of leaf nodes).\n\n#### Output\n- Returns the sum of all leaf nodes in the tree.",
    "code": "def summation(tree: list[list[int]]) -> int:\n    N = len(tree)\n    total_sum = 0\n\n    def dfs(node_id):\n        nonlocal total_sum\n        if not tree[node_id]:\n            return\n        for child in tree[node_id]:\n            if child == 1:\n                total_sum += 1\n            dfs(child)\n\n    for node in range(1, N + 1):\n        if not tree[node]:\n            total_sum += 1\n    return total_sum",
    "tests": [
        "assert summation([[0, 0], [0, 0]]) == 2",
        "assert summation([[0], [0, 1], [0, 0]]) == 3",
        "assert summation([[0, 0], [0], [0, 0]]) == 4"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}