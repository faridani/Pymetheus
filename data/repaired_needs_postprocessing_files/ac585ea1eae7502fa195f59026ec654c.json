{
    "title": "'Polindromes by Vowel Count' - Easy",
    "description": "Given a string, determine if it can be formed by reversing the order of any substring within the string that only contains vowels (a, e, i, o, u). The rest of the characters can be in any order.\n#### Function Signature\n```python\ndef is_polindromic(s: str) -> bool:\n```\n#### Input\n- `s` (str): A non-empty string that may contain vowels, consonants and punctuation.\n#### Output\n- Returns `True` if the input string can be formed by reversing the order of any substring within the string that only contains vowels, `False` otherwise.",
    "code": "import re\ndef is_polindromic(s: str) -> bool:\n    # Find all non-empty substrings containing only vowels\n    vowel_substrings = [substring for match in re.finditer('([aeiou])+', s) for substring in match.group(0)]\n    # Check if there's a pair of vowel substrings that can be reversed to form the input string\n    return len(vowel_substrings) > 1 and any(reversed(substring) == s[len(substring):] for substring in vowel_substrings)",
    "tests": [
        "assert is_polindromic('ee') == True",
        "assert is_polindromic('aoeuao') == True",
        "assert is_polindromic('hello') == False",
        "assert is_polindromic('A man, a plan, a canal, Panama') == True"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}