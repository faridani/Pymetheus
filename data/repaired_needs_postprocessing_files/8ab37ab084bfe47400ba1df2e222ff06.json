{
    "title": "Hard - Path Finder",
    "description": "You are given a 2D grid represented by a list of lists, where each cell contains either '0' (representing an empty path) or '1' (representing an obstacle). You need to find the shortest path from the top-left corner to the bottom-right corner of the grid.\n#### Function Signature\n```python\ndef shortest_path(grid: list[list[str]]) -> int:\n```\n#### Input\n- `grid` (list[list[str]]): A 2D grid representing the path. Each cell contains either '0' or '1'.\n#### Output\n- Returns the length of the shortest path from the top-left corner to the bottom-right corner. If there is no valid path, return -1.",
    "code": "from collections import deque\n\ndef shortest_path(grid: list[list[str]]) -> int:\n    rows = len(grid)\n    cols = len(grid[0])\n    if grid[0][0] == '1' or grid[len(grid) - 1][len(grid[0]) - 1] == '1':\n        return -1\n    queue = deque([(0, 0, 1)])  # (row, col, path_length)\n    visited = set([(0, 0)])\n    while queue:\n        row, col, path_length = queue.popleft()\n        if row == len(grid) - 1 and col == len(grid[0]) - 1:\n            return path_length\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            new_row = row + dr\n            new_col = col + dc\n            if 0 <= new_row < len(grid) and 0 <= new_col < len(grid[0]) and grid[new_row][new_col] == '0' and (new_row, new_col) not in visited:\n                queue.append((new_row, new_col, path_length + 1))\n                visited.add((new_row, new_col))\n    return -1\n",
    "tests": [
        "assert shortest_path([[0, 0, 0], [0, 1, 0], [0, 0, 0]]) == 5",
        "assert shortest_path([[0, 1], [0, 0]]) == 3",
        "assert shortest_path([[1, 0], [0, 1]]) == -1",
        "assert shortest_path([[0, 0, 1, 0],[0, 1, 0, 1],[0, 0, 0, 0]]) == 7"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}