{
    "title": "Hard - Minimum Swaps for Sorted Array",
    "description": "Given an array of integers, find the minimum number of swaps required to sort the array in ascending order. You can only swap adjacent elements.\n\n#### Function Signature\n```python\ndef min_swaps(arr: list[int]) -> int:\n```\n\n#### Input\n- `arr` (list[int]): A list of integers.\n\n#### Output\n- Returns the minimum number of swaps required to sort the array.",
    "code": "def min_swaps(arr: list[int]) -> int:\n    n = len(arr)\n    # Create a list of pairs (element, index) to track original positions\n    pairs = [(arr[i], i) for i in range(n)]\n    # Sort the pairs based on element value\n    pairs.sort()\n    # Initialize swap count and visited array\n    swaps = 0\n    visited = [False] * n\n    # Iterate through each element\n    for i in range(n):\n        if visited[i] or pairs[i][1] == i:\n            continue\n        # Find the cycle length starting from this element\n        cycle_length = 0\n        j = i\n        while not visited[j]:\n            visited[j] = True\n            j = pairs[j][1]\n            cycle_length += 1\n        # Add (cycle_length - 1) swaps for each cycle\n        swaps += cycle_length - 1\n    return swaps",
    "tests": [
        "assert min_swaps([7, 1, 3, 2, 4, 5, 6]) == 5",
        "assert min_swaps([1, 2, 3, 4, 5]) == 0",
        "assert min_swaps([4, 3, 2, 1]) == 6"
    ],
    "model": "gemma2:27b-instruct-q5_K_S-repaired by Llama 3"
}