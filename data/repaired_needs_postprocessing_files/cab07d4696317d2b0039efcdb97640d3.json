{
    "title": "Reverse a Linked List (Medium)",
    "description": "Given the head of a linked list, reverse the list and return the reversed list.\n\n#### Function Signature\n```python\ndef reverse_linked_list(head: ListNode) -> ListNode:\n``` \n\n#### Input\n- `head` (ListNode): The head of the linked list.\n\n#### Output\n- Returns (ListNode): The head of the reversed linked list.\n\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\ndef reverse_linked_list(head: ListNode) -> ListNode:\n    # Check for base case\n    if not head or not head.next:\n        return head\n    # Find the tail of the list\n    current = head\n    while current.next:\n        current = current.next\n    tail = current\n    # Reverse the list\n    prev = None\n    while head:\n        current = head\n        head = head.next\n        current.next = prev\n        prev = current\n    # Set the new head and tail\n    tail.next = prev\n    return head\n",
    "code": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\ndef reverse_linked_list(head: ListNode) -> ListNode:\n    # Check for base case\n    if not head or not head.next:\n        return head\n    # Find the tail of the list\n    current = head\n    while current.next:\n        current = current.next\n    tail = current\n    # Reverse the list\n    prev = None\n    while head:\n        current = head\n        head = head.next\n        current.next = prev\n        prev = current\n    # Set the new head and tail\n    tail.next = prev\n    return head\n",
    "tests": [
        "from linked_list import ListNode\n# Create a linked list: 1 -> 2 -> 3 -> None\nnode1 = ListNode(1)\nnode2 = ListNode(2)\nnode3 = ListNode(3)\nnode1.next = node2\nnode2.next = node3\n# Call the function\nreversed_list = reverse_linked_list(node1)\n# Check if the list is reversed correctly\ncurrent = reversed_list\nwhile current:\n    print(current.val)\n    current = current.next\n    # Output: 3 2 1",
        "from linked_list import ListNode\n# Create a linked list with only one node\nnode1 = ListNode(1)\n# Call the function\nreversed_list = reverse_linked_list(node1)\n# Check if the list is reversed correctly\ncurrent = reversed_list\nwhile current:\n    print(current.val)\n    current = current.next\n    # Output: 1",
        "from linked_list import ListNode\n# Create a linked list with no nodes\n# Call the function\nreversed_list = reverse_linked_list(None)\n# Check if the output is None\nprint(reversed_list)\n# Output: None"
    ],
    "model": "aya:35b-repaired by Llama 3"
}