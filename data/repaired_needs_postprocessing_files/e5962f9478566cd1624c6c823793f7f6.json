{
    "title": "Hard: Cyclical Fibonacci Prime",
    "description": "#### Function Signature\n```python\ndef cyclical_fibonacci_prime(limit) -> int:\n```\nA cyclical Fibonacci prime is a prime number that can be obtained by repeatedly applying the Fibonacci sequence formula (F(n) = F(n-1) + F(n-2)) to an initial pair of Fibonacci numbers, and then checking if the resulting number is prime.\nThe first cyclical Fibonacci prime is 5.\nWrite a function `cyclical_fibonacci_prime(limit)` that takes an integer limit as input and returns the sum of all cyclical Fibonacci primes less than or equal to the given limit.\n#### Input\n- `limit` (int): An integer representing the upper bound for finding cyclical Fibonacci primes.\n#### Output\n- Returns the sum of all cyclical Fibonacci primes less than or equal to the given `limit`.\n\n",
    "code": "def is_prime(num):\n    if num <= 1: return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef cyclical_fibonacci_prime(limit):\n    a = 1\n    b = 1\n    total_sum = 0\n    while b <= limit:\n        if is_prime(b):\n            total_sum += b\n        a, b = b, a + b\n    return total_sum",
    "tests": [
        "assert cyclical_fibonacci_prime(10) == 5",
        "assert cyclical_fibonacci_prime(100) == 89"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}