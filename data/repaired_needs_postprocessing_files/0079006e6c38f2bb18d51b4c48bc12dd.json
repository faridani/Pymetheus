{
    "title": "Hard - Longest Increasing Subsequence With Jumps",
    "description": "Given an array of integers `nums`, find the length of the longest increasing subsequence where you are allowed to skip elements. You can jump any number of indices forward in the array.\n\n#### Function Signature\n```python\ndef longest_increasing_subsequence_with_jumps(nums: list[int]) -> int:\n``` \n\n#### Input\n- `nums` (list[int]): A list of integers.\n\n#### Output\n- Returns the length of the longest increasing subsequence.\n\n#### Constraints\n- 1 <= len(nums) <= 10^5\n- -10^4 <= nums[i] <= 10^4",
    "code": "def longest_increasing_subsequence_with_jumps(nums: list[int]) -> int:\n    dp = [1] * len(nums)\n    for i in range(len(nums)):\n        for j in range(i):\n            if nums[i] > nums[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)",
    "tests": [
        "assert longest_increasing_subsequence_with_jumps([1,3,2,4,5]) == 4",
        "assert longest_increasing_subsequence_with_jumps([10,9,2,5,3,7,101,18]) == 4",
        "assert longest_increasing_subsequence_with_jumps([2,1,4,3]) == 3"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}