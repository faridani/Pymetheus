{
    "title": "N-Queens Problem",
    "description": "The N-Queens problem is the problem of placing N queens on an NxN chessboard such that no two queens attack each other. Write a function `solve_n_queens` that generates all possible configurations of N queens on an NxN board.\n\n#### Function Signature\n```python\ndef solve_n_queens(n: int) -> list:\n```\n\n#### Input\n- `n` (int): The size of the chessboard.\n\n#### Output\n- Returns a list of all possible configurations of N queens on an NxN board. Each configuration is represented as a 2D list of zeros and ones, where ones indicate the presence of a queen.",
    "code": "import itertools\ndef solve_n_queens(n: int) -> list:\n    def is_valid(board):\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == 1:\n                    for k in range(i-1, -1, -1):\n                        if board[k][j] == 1:\n                            return False\n                    for k in range(j-1, -1, -1):\n                        if board[i][k] == 1:\n                            return False\n        return True\n\n    def place_queens(board):\n        if len(board) == 0:\n            return [board]\n        configurations = []\n        for queen_row in range(len(board)):\n            for queen_col in range(len(board[0])):\n                new_board = [[0]*len(board[0]) for _ in range(len(board))]\n                new_board[queen_row][queen_col] = 1\n                if is_valid(new_board):\n                    configurations.extend(place_queens(new_board))\n        return configurations\n\n    return place_queens([[0]*n for _ in range(n)])",
    "tests": [
        "assert len(solve_n_queens(2)) == 2",
        "assert len(solve_n_queens(3)) == 4",
        "assert len(solve_n_queens(4)) == 14"
    ],
    "model": "llama3:latest-repaired by Llama 3"
}