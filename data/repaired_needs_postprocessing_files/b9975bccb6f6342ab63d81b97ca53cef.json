{
    "title": "Hard: Find the Kth Smallest Element in a Sorted Matrix",
    "description": "Given an n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.\n\n#### Function Signature\n```python\ndef find_kth_smallest(matrix: list[list[int]], k: int) -> int:\n``` \n\n#### Input\n- `matrix` (list[list[int]]): An n x n matrix where each row and column is sorted in ascending order.\n- `k` (int): The kth smallest element to find.\n\n#### Output\n- Returns the kth smallest element in the matrix.",
    "code": "import heapq\ndef find_kth_smallest(matrix: list[list[int]], k: int) -> int:\n    n = len(matrix)\n    min_heap = [(matrix[0][0], 0, 0)]  # (value, row, col)\n\n    for _ in range(k - 1):\n        val, row, col = heapq.heappop(min_heap)\n        if row < n - 1:\n            heapq.heappush(min_heap, (matrix[row + 1][col], row + 1, col))\n        if col < n - 1:\n            heapq.heappush(min_heap, (matrix[row][col + 1], row, col + 1))\n\n    return heapq.heappop(min_heap)[0]\n",
    "tests": [
        "assert find_kth_smallest([[1,5,9],[10,11,13],[12,13,15]], 8) == 13",
        "assert find_kth_smallest([[1,2], [3,4]], 1) == 1"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}