{
    "title": "Palindromic Subsequence Count - Medium",
    "description": "A palindromic subsequence of a string is a sequence of characters that can be read the same backward as forward. Write a function `count_palindrome_subsequences` that finds and counts all unique palindromic subsequences in a given string.\n\n#### Function Signature\n```python\ndef count_palindrome_subsequences(s: str) -> int:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns the number of unique palindromic subsequences in the input string.",
    "code": "import collections\ndef count_palindrome_subsequences(s: str) -> int:\n    # Dictionary to store the count of each length of palindromic substrings\n    counts = collections.defaultdict(int)\n    # Helper function to find all palindromes of a given length in the string\n    def find_palindromes(s, start, length):\n        for i in range(start + 1, min(start + length, len(s))):\n            half = (i - start) // 2\n            left, right = s[i - half:i + half + 1]\n            if len(left) == len(right) and left == right:\n                counts[length] += 1\n    # Find all palindromes of odd length\n    find_palindromes(s, 0, 1)\n    # Find all palindromes of even length\n    for i in range(1, len(s) // 2 + 1):\n        find_palindromes(s, i, 2 * i)\n    \n    # Count total number of unique palindromic subsequences\n    return sum(counts.values())",
    "tests": [
        "assert count_palindrome_subsequences(\"babad\") == 7",
        "assert count_palindrome_subsequences(\"cbbd\") == 3",
        "assert count_palindrome_subsequences(\"a\") == 1",
        "assert count_palindrome_subsequences(\"acbbaca\") == 8"
    ],
    "model": "mistral:latest-repaired by Llama 3"
}