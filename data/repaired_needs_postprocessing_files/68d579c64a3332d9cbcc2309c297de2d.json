{
    "title": "Hard: String Compression",
    "description": "Given an input string `s`, write a function `compress_string` that compresses the string using run-length encoding. Run-length encoding replaces consecutive occurrences of the same character with the character followed by the count of its occurrences. For example, 'AAAABBBCCDAA' would become 'A4B3C2D1A2'.\n\n#### Function Signature\n```python\ndef compress_string(s: str) -> str:\n```\n\n#### Input\n- `s` (str): A string containing uppercase letters.\n\n#### Output\n- Returns the compressed version of the input string, or the original string if its length is less than or equal to the length of the compressed version.",
    "code": "def compress_string(s: str) -> str:\n    if len(s) <= 1:\n        return s\n    compressed = ''\n    count = 1\n    prev_char = s[0]\n    for i in range(1, len(s)):\n        if s[i] == prev_char:\n            count += 1\n        else:\n            compressed += prev_char + (str(count) if count > 1 else '')\n            prev_char = s[i]\n            count = 1\n    compressed += prev_char + (str(count) if count > 1 else '')\n    return compressed if len(compressed) < len(s) else s",
    "tests": [
        "assert compress_string('AAAABBBCCDAA') == 'A4B3C2D1A2'",
        "assert compress_string('ABCD') == 'ABCD'",
        "assert compress_string('') == ''",
        "assert compress_string('AAABBBBCCCDD') == 'A3B4C3D1'"
    ],
    "model": "gemma2:27b-repaired by Llama 3"
}