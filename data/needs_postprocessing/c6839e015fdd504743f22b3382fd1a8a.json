"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Knight\\'s Tour with Obstacles\\\\\", \\\\\"description\\\\\": \\\\\"A knight\\'s tour is a sequence of moves by a knight on a chessboard where the knight visits every square exactly once. Given an 8x8 chessboard represented as a list of lists, where \\'0\\' represents an empty square and \\'1\\' represents an obstacle, write a function `knights_tour` that determines if a valid knight\\'s tour is possible starting from the top-left corner (0,0). \\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef knights_tour(board: list[list[int]]) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `board` (list[list[int]]): An 8x8 list of lists representing the chessboard. \\'0\\' denotes an empty square, and \\'1\\' represents an obstacle.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if a knight\\'s tour is possible, `False` otherwise.\\\\\", \\\\\"code\\\\\": \\\\\"def knights_tour(board: list[list[int]]) -> bool:\\\\\\\\n    def is_valid(x, y):\\\\\\\\n        return 0 <= x < 8 and 0 <= y < 8 and board[x][y] == 0\\\\\\\\n\\\\\\\\n    def solve(x, y, move_count):\\\\\\\\n        if move_count == 64:\\\\\\\\n            return True\\\\\\\\n\\\\\\\\n        dx = [2, 1, -1, -2, -2, -1, 1, 2]\\\\\\\\n        dy = [1, 2, 2, 1, -1, -2, -2, -1]\\\\\\\\n\\\\\\\\n        for i in range(8):\\\\\\\\n            nx = x + dx[i]\\\\\\\\n            ny = y + dy[i]\\\\\\\\n\\\\\\\\n            if is_valid(nx, ny):\\\\\\\\n                board[nx][ny] = 1  # Mark as visited\\\\\\\\n                if solve(nx, ny, move_count + 1):\\\\\\\\n                    return True\\\\\\\\n                board[nx][ny] = 0  # Backtrack\\\\\\\\n\\\\\\\\n        return False\\\\\\\\n\\\\\\\\n    return solve(0, 0, 1) if board[0][0] == 0 else False\\\\\", \\\\\"tests\\\\\": [\\\\\"board = [[0, 0, 0, 0, 0, 0, 0, 0],\\\\\\\\n          [0, 0, 0, 0, 0, 0, 0, 0],\\\\\\\\n          [0, 0, 0, 0, 1, 0, 0, 0],\\\\\\\\n          [0, 0, 0, 0, 0, 0, 0, 0],\\\\\\\\n          [0, 0, 0, 0, 0, 0, 0, 0],\\\\\\\\n          [0, 0, 0, 1, 0, 0, 0, 0],\\\\\\\\n          [0, 0, 0, 0, 0, 0, 0, 0],\\\\\\\\n          [0, 0, 0, 0, 0, 0, 0, 0]]\\\\\\\\nassert knights_tour(board) == True\\\\\", \\\\\"board = [[1, 0, 0, 0, 0, 0, 0, 0],\\\\\\\\n          [0, 0, 0, 0, 0, 0, 0, 0],\\\\\\\\n          [0, 0, 0, 0, 0, 0, 0, 0],\\\\\\\\n          [0, 0, 0, 0, 0, 0, 0, 0],\\\\\\\\n          [0, 0, 0, 0, 0, 0, 0, 0],\\\\\\\\n          [0, 0, 0, 0, 0, 0, 0, 0],\\\\\\\\n          [0, 0, 0, 0, 0, 0, 0, 0],\\\\\\\\n          [0, 0, 0, 0, 0, 0, 0, 0]]\\\\\\\\nassert knights_tour(board) == False\\\\\"] }\"'}"