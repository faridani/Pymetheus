"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Maze Solver\\\\\", \\\\\"description\\\\\": \\\\\"Given a 2D grid representing a maze, where \\'0\\' represents a free cell and \\'1\\' represents a wall, write a function `find_path` that finds the shortest path from the top-left corner to the bottom-right corner. You may only move horizontally or vertically.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_path(maze: list[list[int]]) -> list[tuple[int, int]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `maze` (list[list[int]]): A 2D grid representing the maze. \\'0\\' represents a free cell and \\'1\\' represents a wall.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of tuples, where each tuple represents the coordinates (row, column) of a cell in the shortest path from the top-left corner to the bottom-right corner.\\\\\", \\\\\"code\\\\\": \\\\\"from collections import deque\\\\\\\\n\\\\\\\\ndef find_path(maze: list[list[int]]) -> list[tuple[int, int]]:\\\\\\\\n    rows = len(maze)\\\\\\\\n    cols = len(maze[0])\\\\\\\\n    start = (0, 0)\\\\\\\\n    end = (rows - 1, cols - 1)\\\\\\\\n\\\\\\\\n    queue = deque([(start, [])])  # Store cell and path\\\\\\\\n    visited = set([start])\\\\\\\\n\\\\\\\\n    while queue:\\\\\\\\n        (row, col), path = queue.popleft()\\\\\\\\n        if (row, col) == end:\\\\\\\\n            return path + [(row, col)]\\\\\\\\n\\\\\\\\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\\\\\\\\n            new_row = row + dr\\\\\\\\n            new_col = col + dc\\\\\\\\n            if (0 <= new_row < rows and 0 <= new_col < cols and \\\\\\\\n                maze[new_row][new_col] == 0 and (new_row, new_col) not in visited):\\\\\\\\n                queue.append(((new_row, new_col), path + [(row, col)]))\\\\\\\\n                visited.add((new_row, new_col))\\\\\\\\n    return []  # No path found\\\\\", \\\\\"tests\\\\\": [\\\\\"maze = [[0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [1, 1, 0, 0, 0], [0, 0, 0, 1, 0]]; assert find_path(maze) == [(0, 0), (0, 1), (0, 2), (0, 3), (1, 3), (2, 3), (3, 3)]\\\\\", \\\\\"maze = [[0, 1], [1, 0]]; assert find_path(maze) == [(0, 0), (1, 0)]\\\\\"] }\"'}"