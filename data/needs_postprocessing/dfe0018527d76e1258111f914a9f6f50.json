"{'model': 'qwen2:7b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Binary Search Tree Rebalancer\\\\\", \\\\\"description\\\\\": \\\\\"A binary search tree (BST) maintains its elements in sorted order. However, if it becomes unbalanced, it loses efficiency as the tree height increases. Implement a function that rebalances an existing BST using rotations to maintain its balance property.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef rebalance_bst(tree: TreeNode) -> TreeNode:\\\\\\\\n```\\\\\\\\n\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `tree`: A binary search tree node (rooted at this node)\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the root of a balanced BST with the same elements as input tree.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from typing import Optional, List\\\\\\\\n\\\\\\\\nclass TreeNode:\\\\\\\\n    def __init__(self, val=0):\\\\\\\\n        self.val = val\\\\\\\\n        self.left: Optional[TreeNode] = None\\\\\\\\n        self.right: Optional[TreeNode] = None\\\\\\\\n\\\\\\\\n\\\\\\\\ndef balance_factor(node: Optional[TreeNode]) -> int:\\\\\\\\n    if not node:\\\\\\\\n        return 0\\\\\\\\n    return height(node.left) - height(node.right)\\\\\\\\n\\\\\\\\n\\\\\\\\ndef height(node: Optional[TreeNode]) -> int:\\\\\\\\n    if not node:\\\\\\\\n        return -1\\\\\\\\n    return max(height(node.left), height(node.right)) + 1\\\\\\\\n\\\\\\\\n\\\\\\\\ndef rotate_left(node: TreeNode) -> None:\\\\\\\\n    right = node.right\\\\\\\\n    node.right, right.left = right.left, node\\\\\\\\n    node.height = max(height(node.left), height(node.right)) + 1\\\\\\\\n    right.height = max(height(right.left), height(right.right)) + 1\\\\\\\\n    return right\\\\\\\\n\\\\\\\\n\\\\\\\\ndef rotate_right(node: TreeNode) -> None:\\\\\\\\n    left = node.left\\\\\\\\n    node.left, left.right = left.right, node\\\\\\\\n    node.height = max(height(node.left), height(node.right)) + 1\\\\\\\\n    left.height = max(height(left.left), height(left.right)) + 1\\\\\\\\n    return left\\\\\\\\n\\\\\\\\n\\\\\\\\ndef balance_tree(root: Optional[TreeNode]) -> TreeNode:\\\\\\\\n    if not root:\\\\\\\\n        return None\\\\\\\\n    # Balance the tree by recursively applying rotations on nodes\\\\\\\\n    node_to_balance = root\\\\\\\\n    while node_to_balance and (balance_factor(node_to_balance) < -1 or balance_factor(node_to_balance) > 1):\\\\\\\\n        if balance_factor(node_to_balance.right) < 0:\\\\\\\\n            if balance_factor(node_to_balance.right.left) > 0:\\\\\\\\n                node_to_balance.right = rotate_right(node_to_balance.right)\\\\\\\\n            node_to_balance.right, node_to_balance = rotate_left(node_to_balance), rotate_left(node_to_balance)\\\\\\\\n        else:\\\\\\\\n            if balance_factor(node_to_balance.left) < 0:\\\\\\\\n                node_to_balance.left = rotate_left(node_to_balance.left)\\\\\\\\n            node_to_balance.left, node_to_balance = rotate_right(node_to_balance), rotate_right(node_to_balance)\\\\\\\\n    return root\\\\\\\\n\\\\\\\\n# Test cases\\\\\\\\n\\\\\\\\ntest_cases = [\\\\\\\\n    (TreeNode(5, TreeNode(3, TreeNode(1), TreeNode(4)), TreeNode(7, None, TreeNode(9))), TreeNode(6, TreeNode(2, TreeNode(0), TreeNode(4)), TreeNode(8, TreeNode(6), TreeNode(10)))),\\\\\\\\n    (TreeNode(), TreeNode()),\\\\\\\\n    (TreeNode(5, TreeNode(3, TreeNode(2), TreeNode(4)), TreeNode(7, None, TreeNode(9))), TreeNode(6, TreeNode(3, TreeNode(2), TreeNode(5)), TreeNode(8, TreeNode(7), TreeNode(10)))),\\\\\\\\n] \\\\\\\\n\\\\\\\\n\\\\\\\\nfor i, (in_tree, out_tree) in enumerate(test_cases):\\\\\\\\n    assert balance_tree(in_tree) == out_tree, f\\'Test case {i+1} failed\\',\\\\\\\\n\\\\\", \\\\\"tests\\\\\": [\\\\\"assert balance_tree(TreeNode(5, TreeNode(3, TreeNode(1), TreeNode(4)), TreeNode(7, None, TreeNode(9)))) == TreeNode(6, TreeNode(2, TreeNode(0), TreeNode(4)), TreeNode(8, TreeNode(6), TreeNode(10)))\\\\\", \\\\\"assert balance_tree(TreeNode()) == TreeNode()\\\\\", \\\\\"assert balance_tree(TreeNode(5, TreeNode(3, TreeNode(2), TreeNode(4)), TreeNode(7, None, TreeNode(9)))) == TreeNode(6, TreeNode(3, TreeNode(2), TreeNode(5)), TreeNode(8, TreeNode(7), TreeNode(10)))\\\\\"] }\"'}"