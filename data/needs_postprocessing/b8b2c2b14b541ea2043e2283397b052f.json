{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Number of Islands\\\", \\\"description\\\": \\\"You are given a 2D array of characters, where each character is either '0' or '1'. Write a function `num_islands` that counts the number of islands in the grid. An island is a group of adjacent cells (horizontally or vertically) with value '1'. The input grid will not contain any '0's surrounded by '1's, but it may have extra '0's that are not part of an island.\\\\n\\\\n#### Function Signature\\\\n\\\\n```python\\\\ndef num_islands(grid: list[list[str]]) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n\\\\n- `grid` (list[list[str]]): A 2D array of characters, where each character is either '0' or '1'.\\\\n\\\\n#### Output\\\\n\\\\n- Returns the number of islands in the grid.\\\\n\\\\n\\\", \\\"code\\\": \\\"from collections import deque\\\\n\\\\ndef num_islands(grid: list[list[str]]) -> int:\\\\n    if not grid:\\\\n        return 0\\\\n    count = 0\\\\n    for i in range(len(grid)):\\\\n        for j in range(len(grid[0])):\\\\n            if grid[i][j] == '1':\\\\n                count += 1\\\\n                dfs(grid, i, j)\\\\n    return count\\\\n\\\\ndef dfs(grid: list[list[str]], i: int, j: int):\\\\n    if i<0 or i>=len(grid) or j<0 or j>=len(grid[0]) or grid[i][j] == '0':\\\\n        return\\\\n    grid[i][j] = '0'\\\\n    dfs(grid, i-1, j)\\\\n    dfs(grid, i+1, j)\\\\n    dfs(grid, i, j-1)\\\\n    dfs(grid, i, j+1)\\\", \\\"tests\\\": [\\\"assert num_islands([['0', '1'], ['1', '0']]) == 2\\\", \\\"assert num_islands([['1', '1'], ['1', '1']]) == 1\\\", \\\"assert num_islands([]) == 0\\\", \\\"assert num_islands([[0, 0], [0, 0]]) == 0\\\"] }\""
}