"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Solver (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `is_anagram` that checks if two given strings are anagrams of each other. Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef is_anagram(s1: str, s2: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s1`, `s2` (str): Two strings that may contain letters (uppercase and lowercase), numbers, spaces, and punctuation.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"import string\\\\\\\\ndef is_anagram(s1: str, s2: str) -> bool:\\\\\\\\n    # Remove non-alphanumeric characters and convert to lowercase\\\\\\\\n    s1 = \\'\\'.join(char for char in s1.lower() if char in string.ascii_letters + string.digits)\\\\\\\\ns2 = \\'\\'.join(char for char in s2.lower() if char in string.ascii_letters + string.digits)\\\\\\\\n    # Sort the letters in each string\\\\\\\\ns1_sorted = sorted(s1)\\\\\\\\ns2_sorted = sorted(s2)\\\\\\\\n    # Check if the sorted strings are equal\\\\\\\\n    return s1_sorted == s2_sorted\\\\\", \\\\\"tests\\\\\": [\\\\\"assert is_anagram(\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert is_anagram(\\\\\\\\\\\\\"Hello World\\\\\\\\\\\\\", \\\\\\\\\\\\\"world Hello\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert is_anagram(\\\\\\\\\\\\\"apple\\\\\\\\\\\\\", \\\\\\\\\\\\\"applee\\\\\\\\\\\\\") == False\\\\\", \\\\\"assert is_anagram(\\\\\\\\\\\\\"racecar\\\\\\\\\\\\\", \\\\\\\\\\\\\"caracerace\\\\\\\\\\\\\") == False\\\\\"] }\"'}"