"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Binary Tree Path Sum\\\\\", \\\\\"description\\\\\": \\\\\"Given a binary tree and an integer `targetSum`, return the number of paths in the tree where the sum of all node values along the path equals `targetSum`.  A path can start at any node and go down to another node (potentially the same node). \\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef count_paths(root, targetSum):\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `root` (TreeNode): The root of the binary tree.\\\\\\\\n- `targetSum` (int): The desired sum for each path.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns an integer representing the number of paths with the specified sum.\\\\\", \\\\\"code\\\\\": \\\\\"class TreeNode:\\\\\\\\n    def __init__(self, val=0, left=None, right=None):\\\\\\\\n        self.val = val\\\\\\\\n        self.left = left\\\\\\\\n        self.right = right\\\\\\\\n\\\\\\\\ndef count_paths(root, targetSum):\\\\\\\\n    count = 0\\\\\\\\n\\\\\\\\n    def dfs(node, currentSum):\\\\\\\\n        nonlocal count\\\\\\\\n        if not node:\\\\\\\\n            return\\\\\\\\n\\\\\\\\n        currentSum += node.val\\\\\\\\n\\\\\\\\n        if currentSum == targetSum:\\\\\\\\n            count += 1\\\\\\\\n\\\\\\\\n        dfs(node.left, currentSum)\\\\\\\\n        dfs(node.right, currentSum)\\\\\\\\n\\\\\\\\n    dfs(root, 0)\\\\\\\\n    return count\\\\\", \\\\\"tests\\\\\": [\\\\\"t1 = TreeNode(10); t1.left = TreeNode(5); t1.right = TreeNode(-3); t1.left.left = TreeNode(3); t1.left.right = TreeNode(2); t1.right.right = TreeNode(11); assert count_paths(t1, 8) == 2\\\\\", \\\\\"t2 = TreeNode(5); t2.left = TreeNode(4); t2.right = TreeNode(8); t2.left.left = TreeNode(11); t2.left.left.left = TreeNode(7); t2.left.left.right = TreeNode(2); t2.right.left = TreeNode(13); t2.right.right = TreeNode(4); t2.right.right.right = TreeNode(1); assert count_paths(t2, 22) == 3\\\\\"] }\"'}"