{
    "model": "llama3:latest",
    "response": "{\"title\": \"Easy: Maximal Sum of a Subarray\", \"description\": \"#### Problem Statement\\nA subarray of an array A is any continuous sequence of elements within A. A contiguous subarray is either empty or begins and ends with indices in the half-open interval `[i, j]` for some `i \\u2264 j`. The sum of a subarray `A[i...j]` is `\\u03a3_{k=i}^{j}` `A[k]`. Given an array of integers, find the maximum sum of any contiguous subarray.\\n\\n#### Function Signature\\n```python\\ndef max_sum_subarray(arr: list[int)) -> int:\\n```\\n\\n#### Input\\n- `arr` (list[int]): A list of integers representing the array.\\n\\n#### Output\\n- Returns an integer, the maximum sum of any contiguous subarray in the input array.\", \"code\": \"def max_sum_subarray(arr: list[int)) -> int:\\n    n = len(arr)\\n    if n == 0:\\n        return 0\\n    max_sum = arr[0]\\n    current_sum = arr[0]\\n    for i in range(1, n):\\n        current_sum = max(current_sum + arr[i], arr[i])\\n        max_sum = max(max_sum, current_sum)\\n    return max_sum\", \"tests\": [\"assert max_sum_subarray([-2, -3, 4, -1, -2, 1, 5, -3]) == 7\", \"assert max_sum_subarray([1, -3, 2, 3, -1]) == 6\", \"assert max_sum_subarray([0, -1, 0, 0]) == 0\"]}"
}