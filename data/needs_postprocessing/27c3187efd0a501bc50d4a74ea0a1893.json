"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Detection (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Given two strings, determine if they are anagrams of each other. Anagrams are words or phrases that contain the same exact letters, but have different word order.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef are_anagrams(s1: str, s2: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s1`, `s2` (str): Two strings that may contain letters in any case.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"import collections\\\\\\\\n\\\\\\\\ndef are_anagrams(s1: str, s2: str) -> bool:\\\\\\\\n    # Convert both strings to lowercase and remove any non-alphabetic characters\\\\\\\\n    s1 = \\'\\'.join(char for char in s1.lower() if char in string.ascii_letters)\\\\\\\\n    s2 = \\'\\'.join(char for char in s2.lower() if char in string.ascii_letters)\\\\\\\\n    \\\\\\\\n    # Count the frequency of each letter in both strings\\\\\\\\n    counts1 = collections.Counter(s1)\\\\\\\\n    counts2 = collections.Counter(s2)\\\\\\\\n    \\\\\\\\n    # Compare the two dictionaries to check if they have the same total count and if all keys are present and have the same values in both\\\\\\\\n    return counts1 == counts2\\\\\", \\\\\"tests\\\\\": [\\\\\"assert are_anagrams(\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert are_anagrams(\\\\\\\\\\\\\"abcd\\\\\\\\\\\\\", \\\\\\\\\\\\\"dcba\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert are_anagrams(\\\\\\\\\\\\\"hello\\\\\\\\\\\\\", \\\\\\\\\\\\\"world\\\\\\\\\\\\\") == False\\\\\", \\\\\"assert are_anagrams(\\\\\\\\\\\\\"Roses are red\\\\\\\\\\\\\", \\\\\\\\\\\\\"The flowers are red\\\\\\\\\\\\\") == True\\\\\"] }\"'}"