{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Easy: Counting Islands\\\", \\\"description\\\": \\\"An island is a square surrounded by water on all sides. You are given a map of islands where 1 represents land and 0 represents water. Write a function `count_islands` that counts the number of islands in the given map.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef count_islands(map: list) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `map` (list): A 2D list where 1 represents land and 0 represents water.\\\\n\\\\n#### Output\\\\n- Returns the number of islands in the given map.\\\\n\\\", \\\"code\\\": \\\"def count_islands(map: list) -> int:\\\\n    if not map or not map[0]:\\\\n        return 0\\\\n    count = 0\\\\n    for i in range(len(map)):\\\\n        for j in range(len(map[0])):\\\\n            if map[i][j] == 1 and (i == 0 or j == 0 or i == len(map) - 1 or j == len(map[0]) - 1):\\\\n                self._dfs(map, i, j)\\\\n    return count\\\\n\\\\n    def _dfs(self, map: list, i: int, j: int):\\\\n        if i < 0 or i >= len(map) or j < 0 or j >= len(map[0]) or map[i][j] != 1:\\\\n            return\\\\n        map[i][j] = 2\\\\n        self._dfs(map, i - 1, j)\\\\n        self._dfs(map, i + 1, j)\\\\n        self._dfs(map, i, j - 1)\\\\n        self._dfs(map, i, j + 1)\\\\n        nonlocal count\\\\n        count += 1\\\", \\\"tests\\\": [\\\"assert count_islands([[0,0,0,1,0],[1,0,1,1,0],[0,0,0,1,0]]) == 1\\\", \\\"assert count_islands([[1,1,0,1,1],[1,1,0,1,1],[0,0,0,1,0]]) == 3\\\", \\\"assert count_islands([[0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0]]) == 0\\\", \\\"assert count_islands([[0,0,0,1,0],[0,0,0,1,0],[0,0,0,1,0]]) == 3\\\"] }\""
}