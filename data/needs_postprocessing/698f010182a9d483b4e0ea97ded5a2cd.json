"{'model': 'mistral:latest', 'response': '{\"title\": \"Anagram Detector (Hard)\", \"description\": \"Write a function `are_anagrams` that checks if two given strings are anagrams of each other. Anagram is a word or phrase formed by rearranging the letters of another word or phrase, typically using all the original letters exactly once.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef are_anagrams(s1: str, s2: str) -> bool:\\\\n```\\\\n\\\\n#### Input\\\\n- `s1` (str): A string containing lowercase alphabets only.\\\\n- `s2` (str): A string containing lowercase alphabets only.\\\\n\\\\n#### Output\\\\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.\", \"code\": \"from collections import Counter\\\\n\\\\ndef are_anagrams(s1: str, s2: str) -> bool:\\\\n    # Ensure both strings contain only lowercase alphabets and have the same length\\\\n    if len(s1) != len(s2) or not all(char.isalpha() for char in (s1 + s2)): return False\\\\n    \\\\n    # Count occurrences of each character in both strings\\\\n    counter1 = Counter(s1)\\\\ncounter2 = Counter(s2)\\\\n    \\\\n    # Check if the counts are identical\\\\n    return all(count == 0 or count1[char] == counter2[char] for char, count in counter1.items())\", \"tests\": [\"\\\\\"assert are_anagrams(\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\") == True\", \"\\\\\"assert are_anagrams(\\\\\\\\\\\\\"python\\\\\\\\\\\\\", \\\\\\\\\\\\\"typhon\\\\\\\\\\\\\") == False\", \"\\\\\"assert are_anagrams(\\\\\\\\\\\\\"hello\\\\\\\\\\\\\", \\\\\\\\\\\\\"olleh\\\\\\\\\\\\\") == True\", \",\\\\n        \\'\", \"assert are_anagrams(\\\\\"apple\\\\\", \\\\\"apples\\\\\") == False\\'\"]}'}"