"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Run-Length Encoding\\\\\", \\\\\"description\\\\\": \\\\\"Implement a function `run_length_encode` that applies run-length encoding to a given string. Run-length encoding is a simple form of lossless data compression in which runs of consecutive identical characters are represented as a single character followed by the count of times it occurs.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef run_length_encode(s: str) -> str:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s` (str): The input string to be encoded.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the run-length encoded representation of the input string as a new string. If the string is empty, return an empty string.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def run_length_encode(s: str) -> str:\\\\\\\\n    if not s:\\\\\\\\n        return \\'\\'\\\\\\\\n\\\\\\\\n    encoded_string = \\'\\'\\\\\\\\n    count = 1\\\\\\\\n    prev_char = s[0]\\\\\\\\n\\\\\\\\n    for i in range(1, len(s)):\\\\\\\\n        if s[i] == prev_char:\\\\\\\\n            count += 1\\\\\\\\n        else:\\\\\\\\n            encoded_string += prev_char + (str(count) if count > 1 else \\'\\')\\\\\\\\n            prev_char = s[i]\\\\\\\\n            count = 1\\\\\\\\n\\\\\\\\n    encoded_string += prev_char + (str(count) if count > 1 else \\'\\')\\\\\\\\n    return encoded_string\\\\\", \\\\\"tests\\\\\": [\\\\\"\\'assert run_length_encode(\\\\\\\\\\\\\"AAAABBBCCDAA\\\\\\\\\\\\\") == \\\\\\\\\\\\\"A4B3C2DA\\\\\\\\\\\\\"\\\\\", \\\\\"\\'assert run_length_encode(\\\\\\\\\\\\\"AAABBCCCDDDEEE\\\\\\\\\\\\\") == \\\\\\\\\\\\\"A3B2C3D3E3\\\\\\\\\\\\\"\\'\\\\\", \\\\\"\\'assert run_length_encode(\\\\\\\\\\\\\"abcdefg\\\\\\\\\\\\\") == \\\\\\\\\\\\\"abcdefg\\\\\\\\\\\\\"\\'\\\\\", \\\\\"\\'assert run_length_encode(\\\\\\\\\\\\\"\\\\\\\\\\\\\") == \\\\\\\\\\\\\"\\\\\\\\\\\\\"\\\\\"] }\"'}"