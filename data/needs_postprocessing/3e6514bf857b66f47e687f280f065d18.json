"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Finder (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"An anagram is a word or phrase that is formed by rearranging the letters of another word or phrase, typically using all the original letters exactly once. Write a function `find_anagrams` that finds all the anagrams for a given word within a larger string.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(word: str, text: str) -> List[str]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `word` (str): The word to find anagrams for.\\\\\\\\n- `text` (str): A larger string containing multiple words.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of the anagrams found within the given text, in the same order as they appear in the original string.\\\\\\\\n\\\\\\\\n#### Hint\\\\\\\\nYou may want to use a dictionary to store the frequency of each character in the word and compare this with the frequency of substrings within the text.\\\\\", \\\\\"code\\\\\": \\\\\"def find_anagrams(word: str, text: str) -> List[str]:\\\\\\\\n    # Initialize dictionary for the given word\\\\\\\\n    word_freq = {} \\\\\\\\n    for char in word:\\\\\\\\n        word_freq[char] = word_freq.get(char, 0) + 1\\\\\\\\n    \\\\\\\\n    # Create an empty list to store found anagrams\\\\\\\\n    anagrams = []\\\\\\\\n    \\\\\\\\n    # Iterate through each substring in the text\\\\\\\\n    for i in range(len(text) - len(word) + 1):\\\\\\\\n        substring = text[i:i+len(word)]\\\\\\\\n        if all(substring.count(char) == word_freq.get(char, 0) for char in substring):\\\\\\\\n            anagrams.append(substring)\\\\\\\\n    \\\\\\\\n    # Return the found anagrams\\\\\\\\n    return anagrams\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams(\\'listen\\', \\'Listening, it snowed early this week.\\') == [\\'listen\\']\\\\\", \\\\\"assert find_anagrams(\\'time\\', \\'Timestpamp is a timestamp\\') == [\\'time\\', \\'tme\\', \\'temps\\', \\'stempti\\']\\\\\"] }\"'}"