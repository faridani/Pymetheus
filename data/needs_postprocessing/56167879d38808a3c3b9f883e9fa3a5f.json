"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Finder (Medium)\\\\\", \\\\\"description\\\\\": \\\\\"An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(word: str, words: List[str]) -> List[str]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `word` (str): A string that will be checked for anagrams.\\\\\\\\n- `words` (List[str]): A list of strings containing possible anagrams.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of the words in `words` that are anagrams of `word`, empty list otherwise.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from collections import Counter\\\\\\\\n\\\\\\\\ndef find_anagrams(word: str, words: List[str]) -> List[str]:\\\\\\\\n    # Count the frequency of each letter in the word\\\\\\\\n    word_count = Counter(word)\\\\\\\\n    \\\\\\\\n    # Initialize an empty list to store the anagrams\\\\\\\\n    anagrams = []\\\\\\\\n    \\\\\\\\n    # Iterate through the possible anagrams\\\\\\\\n    for potential_anagram in words:\\\\\\\\n        # Count the frequency of each letter in the potential anagram\\\\\\\\n        potential_count = Counter(potential_anagram)\\\\\\\\n        \\\\\\\\n        # If the counts match, add the potential anagram to the list of anagrams\\\\\\\\n        if word_count == potential_count:\\\\\\\\n            anagrams.append(potential_anagram)\\\\\\\\n    \\\\\\\\n    return anagrams\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams(\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", [\\\\\\\\\\\\\"enlist\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\", \\\\\\\\\\\\\"signal\\\\\\\\\\\\\", \\\\\\\\\\\\\"education\\\\\\\\\\\\\"]) == [\\\\\\\\\\\\\"enlist\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\"]\\\\\", \\\\\"assert find_anagrams(\\\\\\\\\\\\\"act\\\\\\\\\\\\\", [\\\\\\\\\\\\\"tact\\\\\\\\\\\\\", \\\\\\\\\\\\\"cat\\\\\\\\\\\\\", \\\\\\\\\\\\\"action\\\\\\\\\\\\\"]) == [\\\\\\\\\\\\\"tact\\\\\\\\\\\\\", \\\\\\\\\\\\\"act\\\\\\\\\\\\\"]\\\\\", \\\\\"assert find_anagrams(\\\\\\\\\\\\\"never\\\\\\\\\\\\\", [\\\\\\\\\\\\\"revene\\\\\\\\\\\\\", \\\\\\\\\\\\\"raven\\\\\\\\\\\\\", \\\\\\\\\\\\\"verne\\\\\\\\\\\\\"]) == []\\\\\"] }\"'}"