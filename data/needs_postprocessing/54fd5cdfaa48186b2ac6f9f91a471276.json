{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Hard: Maximum Sum of Non-Adjacent Elements\\\", \\\"description\\\": \\\"Given a list of integers, return the maximum sum that can be obtained by adding up every other element. For example, if the input list is [1, 2, 3, 4, 5], the maximum sum would be 9 (1 + 3 + 5), since we are selecting non-adjacent elements.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef max_sum_non_adjacent(lst: list[int)) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `lst` (list[int]): A list of integers.\\\\n\\\\n#### Output\\\\n- Returns the maximum sum that can be obtained by adding up every other element in the input list.\\\", \\\"code\\\": \\\"def max_sum_non_adjacent(lst: list[int)) -> int:\\\\n    n = len(lst)\\\\n    if n <= 1:\\\\n        return sum(lst) if n == 1 else 0\\\\n    incl = lst[0]\\\\n    excl = 0\\\\n    for i in range(1, n):\\\\n        new_excl = max(incl, excl)\\\\n        incl = excl + lst[i]\\\\n        excl = new_excl\\\\n    return max(incl, excl)\\\\n\\\", \\\"tests\\\": [\\\"assert max_sum_non_adjacent([2, 7, 9, 3, 1]) == 12\\\", \\\"assert max_sum_non_adjacent([0, 6, 5, 2, 4, 8]) == 14\\\", \\\"assert max_sum_non_adjacent([-5, -3, 5, 2, 8, 4]) == 13\\\"] }\""
}