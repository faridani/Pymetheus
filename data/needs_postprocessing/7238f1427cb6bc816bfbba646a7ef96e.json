{
    "model": "llama3:latest",
    "response": "{\"title\": \"Maximum Path Sum in a Triangle\", \"description\": \"A triangle is specified by the following three numbers: edge1, edge2 and hypotenuse. Write a function `max_path_sum` that calculates the maximum possible path sum from the top of the triangle to its base.\\n\\n#### Function Signature\\n```python\\ndef max_path_sum(triangle: list) -> int:\\n```\\n\\n#### Input\\n- `triangle` (list): A 2D list representing the triangle, where each row is a sublist and each element in the sublist is an integer. The first row has one element, the second row has two elements, and so on.\\n\\n#### Output\\n- Returns the maximum possible path sum from the top of the triangle to its base.\", \"code\": \"def max_path_sum(triangle: list) -> int:\\n    if not triangle:\\n        return 0\\n    for i in range(len(triangle) - 2, -1, -1):\\n        for j in range(len(triangle[i])):\\n            triangle[i][j] += max(triangle[i + 1][j], triangle[i + 1][j + 1])\\n    return triangle[0][0]\", \"tests\": [\"assert max_path_sum([[75, 85\"], \"26\": \"assert max_path_sum([[-10, 20, -2], [-7, 3, -5], [6, 16, 14]]) == 20\"}"
}