"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Finder (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_anagrams` that takes a list of strings as input and returns a dictionary where the keys are strings and the values are lists of anagrams. Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of strings that may contain letters only.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a dictionary where the keys are unique anagrams and the values are lists of words that form the anagram.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n    # Create an empty dictionary to store the anagrams\\\\\\\\n    anagrams = {\\\\\\\\n}\\\\\\\\n    # Sort the words and use them as keys in the dictionary\\\\\\\\n    for word in sorted(set(words)):\\\\\\\\n        # Get all the words that have the same sorted characters as the current word\\\\\\\\n        anagram_list = [w for w in words if \\'\\'.join(sorted(w)) == \\'\\'.join(sorted(word))]\\\\\\\\n        # If the list is not empty, add it to the dictionary\\\\\\\\n        if anagram_list:\\\\\\\\n            anagrams[anagram_list[0]] = anagram_list\\\\\\\\n    \\\\\\\\n    return anagrams\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\'cats\\', \\'act\\', \\'tac\\', \\'sat\\', \\'tca\\']) == {\\'tcat\\': [\\'cats\\', \\'act\\', \\'tac\\'], \\'sart\\': [\\'sat\\']}\\\\\", \\\\\"assert find_anagrams([\\'listen\\', \\'silent\\', \\'enlist\\']) == {\\'nistsel\\': [\\'listen\\', \\'enlist\\'], \\'lsi\\' :[\\'silent\\']}\\\\\", \\\\\"assert find_anagrams([\\'abracadabra\\', \\'barracudabra\\']) == {\\'bracadara\\': [\\'abracadabra\\', \\'barracudabra\\']}\\\\\"] }\"'}"