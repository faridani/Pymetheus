{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Maximum Increasing Subsequence\\\", \\\"description\\\": \\\"A subsequence of a sequence is a sequence that can be derived from the original sequence by deleting some elements without changing the order of the remaining elements. A subsequence is considered increasing if each element is strictly greater than its predecessor. For example, in the sequence [1, 3, 5, 4, 2], the increasing subsequences are [1, 3, 5] and [1, 2]. Write a function `max_increasing_subsequence` that finds the length of the maximum increasing subsequence.\\\\n\\\\n#### Function Signature\\\\n```\\\\ndef max_increasing_subsequence(nums: list[int)) -> int:\\\\n```\\\", \\\"code\\\": \\\"def max_increasing_subsequence(nums: list[int)) -> int:\\\\n    if not nums:\\\\n        return 0\\\\n    dp = [1] * len(nums)\\\\n    for i in range(1, len(nums)):\\\\n        for j in range(i):\\\\n            if nums[i] > nums[j]:\\\\n                dp[i] = max(dp[i], dp[j] + 1)\\\\n    return max(dp)\\\", \\\"tests\\\": [\\\"assert max_increasing_subsequence([1, 3, 5, 4, 2]) == 3\\\", \\\"assert max_increasing_subsequence([10, 9, 8, 7]) == 1\\\", \\\"assert max_increasing_subsequence([1, 2, 3, 4, 5]) == 5\\\"] }\""
}