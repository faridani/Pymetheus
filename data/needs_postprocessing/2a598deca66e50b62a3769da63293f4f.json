"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Labyrinth Pathfinding\\\\\", \\\\\"description\\\\\": \\\\\"Given a 2D grid representing a labyrinth, where \\'0\\' represents an empty path and \\'1\\' represents a wall, find the shortest path from the top-left corner to the bottom-right corner. You can only move horizontally or vertically.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_shortest_path(grid: list[list[int]]) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `grid` (list[list[int]]): A 2D grid representing the labyrinth.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the length of the shortest path from the top-left corner to the bottom-right corner. If no path exists, return -1.\\\\\", \\\\\"code\\\\\": \\\\\"from collections import deque\\\\\\\\n\\\\\\\\ndef find_shortest_path(grid: list[list[int]]) -> int:\\\\\\\\n    rows = len(grid)\\\\\\\\n    cols = len(grid[0])\\\\\\\\n    if grid[0][0] == 1 or grid[rows-1][cols-1] == 1:\\\\\\\\n        return -1\\\\\\\\n\\\\\\\\n    queue = deque([(0, 0, 0)]) # (row, col, path_length)\\\\\\\\n    visited = set([(0, 0)])\\\\\\\\n\\\\\\\\n    while queue:\\\\\\\\n        row, col, path_length = queue.popleft()\\\\\\\\n        if row == rows - 1 and col == cols - 1:\\\\\\\\n            return path_length\\\\\\\\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\\\\\\\\n            new_row = row + dr\\\\\\\\n            new_col = col + dc\\\\\\\\n            if 0 <= new_row < rows and 0 <= new_col < cols and grid[new_row][new_col] == 0 and (new_row, new_col) not in visited:\\\\\\\\n                queue.append((new_row, new_col, path_length + 1))\\\\\\\\n                visited.add((new_row, new_col))\\\\\\\\n\\\\\\\\n    return -1\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_shortest_path([[0,0,0],[0,1,0],[0,0,0]]) == 4\\\\\", \\\\\"assert find_shortest_path([[0,1,0],[1,1,0],[0,0,0]]) == 5\\\\\", \\\\\"assert find_shortest_path([[1,0,0],[1,1,0],[0,0,0]]) == -1\\\\\"] }\"'}"