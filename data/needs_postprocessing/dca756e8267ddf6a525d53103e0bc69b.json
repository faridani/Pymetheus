"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"\\'Anagram Splitter (Hard)\\'\\\\\", \\\\\"description\\\\\": \\\\\"An anagram is a word or phrase formed by rearranging the letters of another word or phrase, typically using all the original letters exactly once.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef split_anagrams(words: List[str]) -> Dictionary[str, List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of strings containing words to find anagrams for.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a dictionary where the keys are unique sorted strings representing the anagram groups and values are lists of the original words in each group.\\\\\\\\n\\\\\\\\n#### Constraints and Hints\\\\\\\\n- Case is ignored, treat all letters as lowercase.\\\\\\\\n- Words may contain spaces, but these will not be included in the anagram check.\\\\\\\\n- A word can have multiple anagrams. These should all appear together in a single key-value pair.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from collections import Counter, defaultdict\\\\\\\\n\\\\\\\\ndef split_anagrams(words: List[str]) -> Dictionary[str, List[str]]:\\\\\\\\n    # Create counter for letter frequencies of each word\\\\\\\\n    counter = defaultdict(int)\\\\\\\\n    anagrams = defaultdict(list)\\\\\\\\n    for word in words:\\\\\\\\n        # Remove spaces and convert to lowercase\\\\\\\\n        word = \\'\\'.join(word.split()).lower()\\\\\\\\n        # Count the letters in this word\\\\\\\\n        for char in word:\\\\\\\\n            counter[char] += 1\\\\\\\\n    \\\\\\\\n    # For each letter frequency, find all words that have the same frequencies and group them together\\\\\\\\n    for key, value in counter.items():\\\\\\\\n        if value == 0:\\\\\\\\n            continue\\\\\\\\n        words_with_key = [word for word in words if Counter(word) == counter]\\\\\\\\n        anagrams[sorted(anagrams[key])].extend(words_with_key)\\\\\\\\n    \\\\\\\\n    # Return the resulting dictionary of anagram groups\\\\\\\\n    return anagrams\\\\\", \\\\\"tests\\\\\": [\\\\\"assert split_anagrams([\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\", \\\\\\\\\\\\\"enlist\\\\\\\\\\\\\"]) == {\\\\\\\\\\\\\"eiltsnednis\\\\\\\\\\\\\", [\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\"], [\\\\\\\\\\\\\"enlist\\\\\\\\\\\\\"]}\\\\\", \\\\\"assert split_anagrams([\\\\\\\\\\\\\"hello\\\\\\\\\\\\\", \\\\\\\\\\\\\"world\\\\\\\\\\\\\", \\\\\\\\\\\\\"olleh\\\\\\\\\\\\\", \\\\\\\\\\\\\"dlrow\\\\\\\\\\\\\"]) == {\\\\\\\\\\\\\"dlorwollhe\\\\\\\\\\\\\", [\\\\\\\\\\\\\"hello\\\\\\\\\\\\\", \\\\\\\\\\\\\"world\\\\\\\\\\\\\", \\\\\\\\\\\\\"olleh\\\\\\\\\\\\\", \\\\\\\\\\\\\"dlrow\\\\\\\\\\\\\"]}\\\\\"] }\"'}"