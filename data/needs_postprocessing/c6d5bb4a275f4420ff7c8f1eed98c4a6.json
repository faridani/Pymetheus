{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Medium: Maximal Square\\\", \\\"description\\\": \\\"#### Problem Description\\\\nWrite a function `maximal_square` that finds the maximal size of square submatrix with all values equal to 1 in a given binary matrix.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef maximal_square(matrix: list[list[int]]) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `matrix` (list[list[int]]): A binary matrix where each cell is either 0 or 1.\\\\n\\\\n#### Output\\\\n- Returns the size of the maximal square submatrix with all values equal to 1.\\\", \\\"code\\\": \\\"def maximal_square(matrix: list[list[int]]) -> int:\\\\n    if not matrix or not matrix[0]:\\\\n        return 0\\\\n\\\\n    m, n = len(matrix), len(matrix[0])\\\\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\\\\n\\\\n    max_size = 0\\\\n    for i in range(1, m + 1):\\\\n        for j in range(1, n + 1):\\\\n            if matrix[i - 1][j - 1] == 1:\\\\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j]) + 1\\\\n                max_size = max(max_size, dp[i][j])\\\\n    return max_size\\\", \\\"tests\\\": [\\\"assert maximal_square([[0, 1], [1, 0]]) == 1\\\", \\\"assert maximal_square([[1, 1], [1, 1]]) == 2\\\", \\\"assert maximal_square([[0, 0, 0], [0, 1, 1], [0, 1, 1]]) == 3\\\", \\\"assert maximal_square([]) == 0\\\"] }\""
}