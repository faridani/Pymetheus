"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Check if a string is a palindromic permutation\\\\\", \\\\\"description\\\\\": \\\\\"A palindromic permutation is a string that can be rearranged to form a palindrome. Write a function `is_palindromic_permutation` that checks if a given string is a palindromic permutation.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef is_palindromic_permutation(s: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the input string is a palindromic permutation, `False` otherwise.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"import collections\\\\\\\\n\\\\\\\\ndef is_palindromic_permutation(s: str) -> bool:\\\\\\\\n    # Remove non-alphanumeric characters and store frequency of each character in a dictionary\\\\\\\\n    s = \\'\\'.join(char for char in s if char in string.ascii_letters + string.digits)\\\\\\\\n    counter = collections.Counter(s)\\\\\\\\n    # If the number of odd count characters is 1, check that the majority element is the middle character\\\\\\\\n    return sum(value % 2 for value in counter.values()) <= 1 and any(counter[char] > len(s) // 2 if char == s[len(s) // 2] else False for char in s)\\\\\", \\\\\"tests\\\\\": [\\\\\"assert is_palindromic_permutation(\\'tact\\') == True\\\\\", \\\\\"assert is_palindromic_permutation(\\'amanaplanacanalpanama\\') == True\\\\\", \\\\\"assert is_palindromic_permutation(\\'racecar\\\\\\\\nexampledexampledexample\\') == False\\\\\", \\\\\"assert is_palindromic_permutation(\\'No \\\\\\\\\\'x\\\\\\\\\\' in Nixon\\') == True\\\\\"] }\"'}"