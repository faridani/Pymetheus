"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Text Justification\\\\\", \\\\\"description\\\\\": \\\\\"Given a list of words and a maximum width for each line, write a function `justify_text` that arranges the words into lines such that each line is as close to the maximum width as possible, with words evenly spaced. The last line should be left-justified.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef justify_text(words: list[str], max_width: int) -> list[str]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (list[str]): A list of words.\\\\\\\\n- `max_width` (int): The maximum width allowed for each line.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of strings, where each string represents a justified line of text.\\\\\", \\\\\"code\\\\\": \\\\\"def justify_text(words: list[str], max_width: int) -> list[str]:\\\\\\\\n    result = []\\\\\\\\n    current_line = []\\\\\\\\n    current_width = 0\\\\\\\\n\\\\\\\\n    for word in words:\\\\\\\\n        if current_width + len(word) + len(current_line) <= max_width:\\\\\\\\n            current_line.append(word)\\\\\\\\n            current_width += len(word)\\\\\\\\n        else:\\\\\\\\n            # Justify the current line\\\\\\\\n            spaces_to_add = max_width - current_width\\\\\\\\n            if len(current_line) == 1:\\\\\\\\n                current_line[0] += \\\\\\\\\\\\\" \\\\\\\\\\\\\" * spaces_to_add\\\\\\\\n            else:\\\\\\\\n                gaps = len(current_line) - 1\\\\\\\\n                spaces_per_gap = spaces_to_add // gaps\\\\\\\\n                extra_spaces = spaces_to_add % gaps\\\\\\\\n                for i in range(len(current_line) - 1):\\\\\\\\n                    current_line[i] += \\\\\\\\\\\\\" \\\\\\\\\\\\\" * (spaces_per_gap + (1 if i < extra_spaces else 0))\\\\\\\\n            result.append(\\\\\\\\\\\\\"\\\\\\\\\\\\\".join(current_line))\\\\\\\\n            # Start a new line\\\\\\\\n            current_line = [word]\\\\\\\\n            current_width = len(word)\\\\\\\\n\\\\\\\\n    # Justify the last line\\\\\\\\n    last_line = \\\\\\\\\\\\\" \\\\\\\\\\\\\".join(current_line)\\\\\\\\n    result.append(last_line)\\\\\\\\n    return result\\\\\", \\\\\"tests\\\\\": [\\\\\"assert justify_text([\\'This\\', \\'is\\', \\'an\\', \\'example\\', \\'of\\', \\'text\\', \\'justification.\\'], 16) == [\\'This    is    an\\',\\\\\\\\n \\'example  of text\\',\\\\\\\\n\\'justification.\\']\\\\\", \\\\\"assert justify_text([\\'What\\',\\'must\\',\\'be\\',\\'shall\\',\\'be.\\'], 12) == [\\'What must be\\',\\\\\\\\n \\'shall be.\\']\\\\\"] }\"'}"