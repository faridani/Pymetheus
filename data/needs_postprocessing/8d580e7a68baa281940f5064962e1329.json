{
    "model": "llama3:latest",
    "response": "{\"title\": \"Cinema Seat Reservation\", \"description\": \"Write a function `reserve_seats` that takes a list of seat preferences and a number of available seats as input. The function should return the maximum number of consecutive seats that can be reserved.\\n\\nFor example, if the seat preferences are ['A1', 'B2', 'C3', 'D4'] and there are 4 available seats, the function should return 2 because two consecutive seats ('A1' and 'B2') and one more seat ('C3') can be reserved. If there are not enough seats to fulfill all preferences, the function should return the maximum number of consecutive seats that can be reserved.\\n\\n#### Function Signature\\n```\\ndef reserve_seats(seat_preferences: list, available_seats: int) -> int:\\n```\\n\\n#### Input\\n- `seat_preferences` (list): A list of seat preferences where each preference is a string in the format 'letter-number' (e.g., 'A1', 'B2', etc.).\\n- `available_seats` (int): The number of available seats.\\n\\n#### Output\\n- Returns an integer representing the maximum number of consecutive seats that can be reserved.\", \"code\": \"\\n```\\nimport re\\n\\ndef reserve_seats(seat_preferences: list, available_seats: int) -> int:\\n    # Sort the seat preferences by their numbers\\n    seat_preferences.sort(key=lambda x: int(re.search(r'\\\\d+', x).group()))\\n\\n    max_consecutive_seats = 0\\n    current_seat_number = None\\n\\n    for preference in seat_preferences:\\n        seat_number = int(re.search(r'\\\\d+', preference).group())\\n        if seat_number != current_seat_number + 1:\\n            # If the seats are not consecutive, update the maximum and reset the current seat number\\n            max_consecutive_seats = max(max_consecutive_seats, seat_number - current_seat_number - 1)\\n            current_seat_number = seat_number\\n        else:\\n            # If the seats are consecutive, update the current seat number\\n            current_seat_number = seat_number\\n\\n    return min(max_consecutive_seats + (available_seats - seat_number), available_seats)\", \"tests\": [\"assert reserve_seats(['A1', 'B2', 'C3', 'D4'], 4) == 2\", \"assert reserve_seats(['A1', 'B3', 'C5', 'D7'], 6) == 3\", \"assert reserve_seats(['A1', 'B2'], 2) == 1\", \"assert reserve_seats(['A1', 'B3'], 4) == 2\"]}"
}