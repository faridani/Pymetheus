{
    "model": "llama3:latest",
    "response": "{\"title\": \"Hard: Maximum Sum of Subarray with Constraints\", \"description\": \"Write a function `max_sum_subarray` that finds the maximum sum of a subarray within an input array. The twist is that you can only select at most two elements from each pair of adjacent numbers. If no such subarray exists, return -1.\\n\\n#### Function Signature\\n```\\ndef max_sum_subarray(arr: list[int]) -> int:\\n```\", \"code\": \"\", \"\\ndef max_sum_subarray(arr: list[int]) -> int:\\n    if not arr:\\n        return -1\\n\\n    n = len(arr)\\n    dp = [[-float('inf')] * 2 for _ in range(n + 1)]\\n\\n    dp[0][0] = 0\\n    dp[0][1] = 0\\n\\n    for i in range(1, n + 1):\\n        for j in range(2):\\n            if i > 1:\\n                dp[i][j] = max(dp[i - 1][j], arr[i - 1] + dp[i - 2][1 - j])\\n            else:\\n                dp[i][j] = arr[0]\\n\\n    return max(dp[-1])\": \"tests': ['assert max_sum_subarray([10, -5, 20]) == 25\", \"assert max_sum_subarray([-10, 9, 3, 8, 2]) == 14\": \"assert max_sum_subarray([]) == -1\", \"assert max_sum_subarray([0, 0, 0]) == 0\": \"\"}"
}