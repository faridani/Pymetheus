"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"\\\\\\\\\\\\\"Anagram Detection\\\\\\\\\\\\\" (hard)\\\\\", \\\\\"description\\\\\": \\\\\"Given two strings, write a function `is_anagram` that checks if the input strings are anagrams of each other. Anagram is a word or phrase formed by rearranging the letters of a different word or phrase.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef is_anagram(s1: str, s2: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s1`, `s2` (str): Two strings that may contain letters (no numbers or punctuation).\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the input strings are anagrams of each other, `False` otherwise.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def is_anagram(s1: str, s2: str) -> bool:\\\\\\\\n    # Ensure both inputs are strings and have the same length\\\\\\\\n    if not (isinstance(s1, str) and isinstance(s2, str) and len(s1) == len(s2)): return False\\\\\\\\n\\\\\\\\n    # Convert to lowercase and remove duplicates\\\\\\\\ns1 = sorted(list(map(str.lower, s1.replace(\\' \\', \\'\\'))))\\\\\\\\ns2 = sorted(list(map(str.lower, s2.replace(\\' \\', \\'\\'))))\\\\\\\\n\\\\\\\\n    # Check if the sorted lists are equal\\\\\\\\n    return s1 == s2\\\\\", \\\\\"tests\\\\\": [\\\\\"assert is_anagram(\\'listen\\', \\'silent\\') == True\\\\\", \\\\\"assert is_anagram(\\'hello\\', \\'world\\') == False\\\\\", \\\\\"assert is_anagram(\\'act\\', \\'tcat\\') == True\\\\\"] }\"'}"