"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Detector (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_anagrams(words: List[str]) -> Dict[str, List[str]]` that takes a list of words and returns a dictionary where each key is a word from the input list and its corresponding values are the anagrams of that word.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of strings containing only lowercase letters with no spaces or punctuation.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a dictionary where each key is a word from the input list and its corresponding values are the anagrams of that word. If a word has no anagrams, it should not be included in the output dictionary.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from collections import Counter\\\\\\\\n\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n    # Count the frequency of each letter in each word\\\\\\\\n    count_map = {word: Counter(word) for word in words}\\\\\\\\n    # Create an empty dictionary to store the results\\\\\\\\n    result = {}\\\\\\\\n    \\\\\\\\n    # Iterate over the counting map\\\\\\\\n    for key, value in count_map.items():\\\\\\\\n        sorted_value = sorted(value.elements())\\\\\\\\n        sorted_key = \\'\\'.join(sorted(key))\\\\\\\\n        \\\\\\\\n        # If this word is not already in the result dictionary and it sorts to a word that is,\\\\\\\\n        # add it to the result with its anagrams\\\\\\\\n        if sorted_key in result:\\\\\\\\n            result[sorted_key].append(key)\\\\\\\\n        else:\\\\\\\\n            result[sorted_key] = [key]\\\\\\\\n    \\\\\\\\n    return result\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\'listen\\', \\'silent\\', \\'enlist\\']) == {\\'listen\\': [\\'enlist\\'], \\'silent\\': [\\'listen\\']}\\\\\", \\\\\"assert find_anagrams([\\'motorboat\\', \\'robotom\\', \\'tomorrow\\']) == {\\'motorboat\\': [\\'robotom\\', \\'tomorrow\\'], \\'robotom\\': [\\'motorboat\\', \\'tomorrow\\'], \\'tomorrow\\': [\\'motorboat\\', \\'robotom\\']}\\\\\", \\\\\"assert find_anagrams([\\'apple\\', \\'pear\\', \\'appel\\', \\'bearp\\']) == {\\'apple\\': [\\'appel\\'], \\'pear\\': []}\\\\\", \\\\\"assert find_anagrams([]) == {}\\\\\"] }\"'}"