{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Minimum Window Substring\\\", \\\"description\\\": \\\"Write a function `min_window_substring` that finds the minimum window substring of `s1` that contains all characters from `s2`.\\\\n\\\\n#### Function Signature\\\\n```\\\\ndef min_window_substring(s1: str, s2: str) -> str:\\\\n```\\\\n\\\\n#### Input\\\\n- `s1` (str): A string that may contain letters, numbers, and special characters.\\\\n- `s2` (str): A string that contains only the unique characters to be found in `s1`.\\\\n\\\\n#### Output\\\\n- Returns the minimum window substring of `s1` that contains all characters from `s2`. If no such substring exists, return an empty string.\\\\n\\\\n\\\", \\\"code\\\": \\\"\\\\nfrom collections import defaultdict\\\\n\\\\ndef min_window_substring(s1: str, s2: str) -> str:\\\\n    if not s2 or not s1:\\\\n        return ''\\\\n\\\\n    char_count = defaultdict(int)\\\\n    for char in s2:\\\\n        char_count[char] += 1\\\\n\\\\n    required_chars = len(char_count)\\\\n\\\\n    left, right = 0, 0\\\\n    min_window = ''\\\\n    min_length = float('inf')\\\\n\\\\n    while right < len(s1):\\\\n        if not all(s1[left:right+1].count(char) >= char_count[char] for char in char_count):\\\\n            left += 1\\\\n            continue\\\\n\\\\n        if right - left + 1 < min_length:\\\\n            min_window = s1[left:right+1]\\\\n            min_length = right - left + 1\\\\n\\\\n        right += 1\\\\n\\\\n    return min_window\\\\n\\\", \\\"tests\\\": [\\\"assert min_window_substring('ADOBECODEBANC', 'ABC') == 'BANC'\\\", \\\"assert min_window_substring('hello', 'lo') == 'lo'\\\", \\\"assert min_window_substring('', 'abc') == ''\\\", \\\"assert min_window_substring('a', 'b') == ''\\\"] }\""
}