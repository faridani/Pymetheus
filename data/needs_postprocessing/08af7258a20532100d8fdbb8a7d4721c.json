"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"\\'Prime Digit Count (Medium)\\', \\'description\\': \\'Write a function `prime_digit_count` that takes an integer `n` and returns the number of prime digits in `n`. For example, if `n = 375`, then the function should return 3 because the only prime digits in 375 are 3, 5, and the trailing 7.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef prime_digit_count(n: int) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `n` (int): A non-negative integer.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the number of prime digits in the input integer.\\\\\\\\n\\\\\\\\n#### Hints\\\\\\\\n- Recall that a number is prime if it has only two distinct positive divisors: 1 and itself. For example, the first few primes are 2, 3, 5, 7.\\\\\\\\n- It may be helpful to use a helper function to check if a number is prime, or consult existing solutions for this problem on Project Euler.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def is_prime(n: int) -> bool:\\\\\\\\n    if n < 2: return False\\\\\\\\n    if n == 2: return True\\\\\\\\n    for i in range(2, int(n**0.5)+1):\\\\\\\\n        if n % i == 0: return False\\\\\\\\n    return True\\\\\\\\n\\\\\\\\ndef prime_digit_count(n: int) -> int:\\\\\\\\n    digits = [int(d) for d in str(n)]\\\\\\\\n    count = 0\\\\\\\\n    for digit in digits:\\\\\\\\n        if is_prime(digit): count += 1\\\\\\\\n    return count\\\\\", \\\\\"tests\\\\\": [\\\\\"assert prime_digit_count(375) == 3\\\\\", \\\\\"assert prime_digit_count(22) == 2\\\\\", \\\\\"assert prime_digit_count(9876) == 3\\\\\", \\\\\"assert prime_digit_count(123456) == 1\\\\\"] }\"'}"