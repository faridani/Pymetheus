"{'model': 'gemma2:27b-instruct-q5_K_S', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Medium -  Valid Parentheses\\\\\", \\\\\"description\\\\\": \\\\\"Given a string containing only parentheses, determine if the input string is valid. \\\\\\\\n\\\\\\\\nA valid string of parentheses must meet the following conditions:\\\\\\\\n\\\\\\\\n1. Open parentheses must be closed by the same type of parentheses.\\\\\\\\n2. Open parentheses must be closed in the correct order.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef is_valid(s: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s` (str): A string containing only parentheses characters \\'(\\', \\')\\', \\'{\\', \\'}\\', \\'[\\' and \\']\\'.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the input string is valid, `False` otherwise.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def is_valid(s: str) -> bool:\\\\\\\\n    stack = []\\\\\\\\n    parentheses_map = {\\')\\': \\'(\\', \\'}\\': \\'{\\', \\']\\': \\'[\\'}\\\\\\\\n\\\\\\\\n    for char in s:\\\\\\\\n        if char in parentheses_map.values():  # If it\\'s an opening parenthesis, push onto the stack\\\\\\\\n            stack.append(char)\\\\\\\\n        elif char in parentheses_map.keys():  # If it\\'s a closing parenthesis\\\\\\\\n            if not stack or stack.pop() != parentheses_map[char]:\\\\\\\\n                return False\\\\\\\\n        else:\\\\\\\\n            return False  # Invalid character\\\\\\\\n    return len(stack) == 0 # True if all parentheses are matched\\\\\", \\\\\"tests\\\\\": [\\\\\"assert is_valid(\\'()\\') == True\\\\\", \\\\\"assert is_valid(\\'{}[]\\') == True\\\\\", \\\\\"assert is_valid(\\'([{}])\\') == True\\\\\", \\\\\"assert is_valid(\\'(]\\') == False\\\\\", \\\\\"assert is_valid(\\'({[})\\') == False\\\\\", \\\\\"assert is_valid(\\'\\') == True\\\\\"] }\"'}"