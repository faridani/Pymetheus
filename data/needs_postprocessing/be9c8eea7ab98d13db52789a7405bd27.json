{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Hard: Matrix Rotations\\\", \\\"description\\\": \\\"A rotation of a matrix M about its main diagonal (or anti-diagonal) is defined as a new matrix R such that R[i][j] = M[abs(i-j)][i-j sign]. Write a function `rotate` that takes a 2D list `matrix` and returns the rotated matrix. Note that the input matrix may not be square.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef rotate(matrix: list[list[int]]) -> list[list[int]]:\\\\n```\\\\n\\\\n#### Input\\\\n- `matrix` (list[list[int]]): A 2D list of integers representing a matrix.\\\\n\\\\n#### Output\\\\n- Returns the rotated matrix.\\\\n\\\", \\\"code\\\": \\\"def rotate(matrix: list[list[int]]) -> list[list[int]]:\\\\n    result = [[0 for _ in range(len(matrix))] for _ in range(len(matrix))]\\\\n    for i in range(len(matrix)):\\\\n        for j in range(len(matrix[0])):\\\\n            if (i + j) % 2 == 0:\\\\n                result[i][j] = matrix[len(matrix) - i - 1][len(matrix[0]) - j - 1]\\\\n            else:\\\\n                result[i][j] = matrix[i][j]\\\\n    return result\\\\n\\\", \\\"tests\\\": [\\\"assert rotate([[1, 2], [3, 4]]) == [[1, 4], [2, 3]]\\\", \\\"assert rotate([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) == [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\\\", \\\"assert rotate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\\\"] }\""
}