{
    "model": "llama3:latest",
    "response": "{\"title\": \"Maximum Sum of Subarray with Prime Length\", \"description\": \"Given a list of integers, find the maximum sum of a subarray whose length is equal to the next prime number. If there are multiple such subarrays, return any one of them.\\n\\n#### Function Signature\\n```python\\ndef max_prime_sum(lst: list[int]) -> tuple[list[int], int]:\\n```\\n\\n#### Input\\n- `lst` (list[int]): A list of integers.\\n\\n#### Output\\n- Returns a tuple containing the subarray and its sum, where the length of the subarray is equal to the next prime number. If there are multiple such subarrays, return any one of them.\", \"code\": \"import itertools\\n\\ndef max_prime_sum(lst: list[int]) -> tuple[list[int]\", \"int]\": \"def is_prime(n: int) -> bool:\\n        if n <= 1:\\n            return False\\n        for i in range(2\", \"1)\": \"if n % i == 0:\\n                return False\\n        return True\\n\\n    primes = []\\n    next_prime = 2\\n    while len(lst) > next_prime:\\n        while not is_prime(next_prime):\\n            next_prime += 1\\n        primes.append(next_prime)\\n        next_prime += 1\\n\\n    max_sum = float('-inf')\\n    best_subarray = None\\n    for prime in primes:\\n        for subarray in itertools.zip_longest(*[iter(lst)] * prime\", \"fillvalue=0)\": \"if sum(subarray) > max_sum:\\n                max_sum = sum(subarray)\\n                best_subarray = list(subarray)\\n\\n    return (best_subarray\", \"tests\": [\"assert ([(1, 2, 3), 6], 6) == max_prime_sum([(1, 2, 3, 4, 5]),\", \"assert (([10, 20, 30, 40, 50], 150),) == max_prime_sum([10, 20, 30, 40, 50]),\"]}"
}