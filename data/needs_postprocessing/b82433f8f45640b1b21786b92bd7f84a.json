"{'model': 'mistral:latest', 'response': '{\"title\": \"Anagram Finder (Hard)\", \"description\": \"Write a function `find_anagrams` that takes a list of strings as input and returns all pairs of strings from the list that are anagrams of each other. An anagram is a word or phrase that is formed by rearranging the letters of another word or phrase, using all the original letters exactly once.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef find_anagrams(words: List[str]) -> Set[Tuple[str, str]]:\\\\n```\\\\n\\\\n#### Input\\\\n- `words` (List[str]): A list of strings that may contain only lowercase letters.\\\\n\\\\n#### Output\\\\n- Returns a set of tuples where each tuple contains two strings that are anagrams of each other. The order in which the pair appears in the result does not matter.\", \"code\": \"from collections import Counter, defaultdict\\\\n\\\\ndef find_anagrams(words: List[str]) -> Set[Tuple[str, str]]:\\\\n    # Create a dictionary to store the frequency of each letter for each word in the list\\\\n    counter_dict = defaultdict(int)\\\\n    anagrams = set()\\\\n    for word in words:\\\\n        # Increment the count of each letter in the word\\\\n        for char in word:\\\\n            counter_dict[char] += 1\\\\n        # If the dictionary keys match, they are anagrams\\\\n        if all(counter_dict[key] == counter_dict.get(sorted(word)[i], 0) for i, key in enumerate(sorted(word))):\\\\n            anagrams.add((word, sorted(word)[::-1]))\\\\n    return anagrams\", \"tests\": [\"assert find_anagrams([\\\\\"listen\\\\\", \\\\\"silent\\\\\"]) == {\\\\\"(\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\")\\\\\"}\", \"assert find_anagrams([\\\\\"act\\\\\", \\\\\"tac\\\\\"]) == {\\\\\"(\\\\\\\\\\\\\"act\\\\\\\\\\\\\", \\\\\\\\\\\\\"tac\\\\\\\\\\\\\")\", \",\\\\n        \", \"assert find_anagrams([\\\\\"hello\\\\\", \\\\\"world\\\\\"\"]}'}"