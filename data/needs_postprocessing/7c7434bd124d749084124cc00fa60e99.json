"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Detector (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `are_anagrams` that checks if two given strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef are_anagrams(str1: str, str2: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `str1`, `str2` (str): Two strings that may contain letters, numbers and spaces.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the input strings are anagrams of each other, `False` otherwise.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def are_anagrams(str1: str, str2: str) -> bool:\\\\\\\\n    # Remove non-alphabetic characters from both strings\\\\\\\\n    str1 = \\'\\'.join([char for char in str1 if char.isalpha()])\\\\\\\\n    str2 = \\'\\'.join([char for char in str2 if char.isalpha()])\\\\\\\\n    \\\\\\\\n    # If the lengths of the cleaned strings are not equal, they cannot be anagrams\\\\\\\\n    if len(str1) != len(str2):\\\\\\\\n        return False\\\\\\\\n    \\\\\\\\n    # Sort both strings and compare them for equality\\\\\\\\n    return sorted(str1) == sorted(str2)\\\\\\\\n\\\\\", \\\\\"tests\\\\\": [\\\\\"assert are_anagrams(\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert are_anagrams(\\\\\\\\\\\\\"hello\\\\\\\\\\\\\", \\\\\\\\\\\\\"olleh\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert are_anagrams(\\\\\\\\\\\\\"world\\\\\\\\\\\\\", \\\\\\\\\\\\\"drilled\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert are_anagrams(\\\\\\\\\\\\\"apple\\\\\\\\\\\\\", \\\\\\\\\\\\\"apples\\\\\\\\\\\\\") == False\\\\\"] }\"'}"