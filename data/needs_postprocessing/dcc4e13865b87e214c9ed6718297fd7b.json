"{'model': 'mistral:latest', 'response': '{\"title\": \"Anagram Detector (Hard)\", \"description\": \"Write a function `find_anagrams` that takes a list of strings and returns all pairs of strings in the list that are anagrams of each other. An anagram is a word or phrase that contains the same letters as another word or phrase, but in a different order.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef find_anagrams(words: List[str]) -> Set[Tuple[str, str]]:\\\\n```\\\\n\\\\n#### Input\\\\n- `words` (List[str]): A list of strings containing uppercase and lowercase letters only.\\\\n\\\\n#### Output\\\\n- Returns a set of tuples where each tuple contains two words that are anagrams of each other.\", \"code\": \"from collections import Counter, defaultdict\\\\ndef find_anagrams(words: List[str]) -> Set[Tuple[str, str]]:\\\\n    # Create a counter for each word\\\\n    counter = defaultdict(int)\\\\n    for word in words:\\\\n        count_word = counter[word] = Counter(word)\\\\n    \\\\n    # Find pairs of words with the same counter\\\\n    result = set()\\\\n    for word1, count1 in counter.items():\\\\n        for word2, count2 in counter.items():\\\\n            if word1 != word2 and count1 == count2:\\\\n                result.add((word1, word2))\\\\n    \\\\n    # Return the set of anagram pairs\\\\n    return result\", \"tests\": [\"assert find_anagrams([\\'cats\\', \\'act\\', \\'tac\\', \\'dog\\', \\'god\\']) == {\\'(\\'\\'tac\\'\\', \\'\\'cat\\'\\')\", \"assert find_anagrams([\\'nap\\', \\'pan\\', \\'tan\\', \\'rap\\', \\'can\\']) == {\\'(\\'\\'nap\\'\\', \\'\\'pan\\'\\')\", \"(\\'\\'rap\\'\\', \\'\\'tar\\'\\')\", \"(\\'\\'can\\'\\', \\'\\'cat\\'\\')\"], \"assert find_anagrams([\\'abba\\', \\'baab\\', \\'baba\\', \\'bbaa\\', \\'abcd\\']) == set()\": \"assert find_anagrams([\\'a\\', \\'b\\', \\'c\\', \\'d\\', \\'e\\', \\'e\\', \\'d\\', \\'c\\', \\'b\\', \\'a\\']) == {\\'(\\'\\'a\\'\\', \\'\\'a\\'\\')\"}'}"