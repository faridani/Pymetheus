"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Finder (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_anagrams(words: List[str]) -> Dict[str, List[str]]` that takes a list of words as input and returns a dictionary where the keys are unique words and the values are lists of all anagrams for each key.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of strings containing only lowercase alphabetic characters.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a dictionary where the keys are unique words and the values are lists of all anagrams for each key.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n    # Create a frequency map\\\\\\\\n    freq_map = {}\\\\\\\\n    for word in words:\\\\\\\\n        letter_freq = {}  # Reset the frequency counter for each word\\\\\\\\n        for letter in word:\\\\\\\\n            if letter not in letter_freq:\\\\\\\\n                letter_freq[letter] = 0\\\\\\\\n            letter_freq[letter] += 1\\\\\\\\nn        word_key = tuple(sorted(letter_freq.items()))  # Sort the letters and frequencies to get a unique key for each word\\\\\\\\n        if word_key not in freq_map:\\\\\\\\n            freq_map[word_key] = [word]\\\\\\\\n        else:\\\\\\\\n            freq_map[word_key].append(word)\\\\\\\\nn    return freq_map\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\'listen\\', \\'silent\\', \\'enlist\\', \\'education\\']) == {\\'edu:cion\\': [\\'education\\'], \\'enli:st\\': [\\'enlist\\'], \\'ilsi:t\\': [\\'listen\\', \\'silent\\']}\\\\\", \\\\\"assert find_anagrams([\\'apple\\', \\'appel\\', \\'apples\\', \\'applle\\']) == {\\'apples\\': [\\'apples\\', \\'appel\\'], \\'ppla\\': [\\'apple\\', \\'appel\\', \\'applle\\']}\\\\\", \\\\\"assert find_anagrams([\\'racecar\\', \\'carrer\\', \\'ecarcer\\', \\'recarrc\\']) == {\\'car:rer\\': [\\'racecar\\', \\'carrer\\'], \\'cac:r\\': [\\'ecarcer\\'], \\'reca:rc\\': [\\'recarrc\\']}\\\\\", \\\\\"assert find_anagrams([]) == {}\\\\\"] }\"'}"