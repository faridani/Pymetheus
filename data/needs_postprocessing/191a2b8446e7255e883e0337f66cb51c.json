"{'model': 'llama3.1:8b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"N-Queens Problem\\\\\", \\\\\"description\\\\\": \\\\\"The N-Queens problem is the problem of placing N queens on an NxN chessboard such that no two queens attack each other. In this problem, we will be checking if a given configuration is valid.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef is_valid_board(board: List[List[str]]) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `board` (List[List[str]]): A 2D list representing the chessboard where \\\\\\\\\\\\\"Q\\\\\\\\\\\\\" represents a queen, \\\\\\\\\\\\\".\\\\\\\\\\\\\" represents an empty space and \\\\\\\\\\\\\"X\\\\\\\\\\\\\" represents a square that cannot contain a queen.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the configuration is valid, `False` otherwise.\\\\\", \\\\\"code\\\\\": \\\\\"from typing import List\\\\\\\\n\\\\\\\\ndef is_valid_board(board: List[List[str]]) -> bool:\\\\\\\\n    def is_safe(row: int, col: int) -> bool:\\\\\\\\n        # Check this row on left or right of column\\\\\\\\n        for i in range(len(board[0])):\\\\\\\\n            if board[row][i] == \\'Q\\':\\\\\\\\n                return False\\\\\\\\n        # Check upper diagonal on left\\\\\\\\n        for i, j in zip(range(row, -1, -1), range(col, -1, -1)):\\\\\\\\n            if board[i][j] == \\'Q\\':\\\\\\\\n                return False\\\\\\\\n        # Check upper diagonal on right\\\\\\\\n        for i, j in zip(range(row, -1, -1), range(col + 1, len(board[0]))):\\\\\\\\n            if board[i][j] == \\'Q\\':\\\\\\\\n                return False\\\\\\\\n        return True\\\\\\\\n    n = len(board)\\\\\\\\n    for row_idx, row in enumerate(board):\\\\\\\\n        for col_idx, cell in enumerate(row):\\\\\\\\n            if cell == \\'Q\\' and not is_safe(row_idx, col_idx):\\\\\\\\n                return False\\\\\\\\n    return True\\\\\", \\\\\"tests\\\\\": [\\\\\"assert is_valid_board([[\\\\\\\\\\\\\".\\\\\\\\\\\\\", \\\\\\\\\\\\\".\\\\\\\\\\\\\", \\\\\\\\\\\\\"Q\\\\\\\\\\\\\"], [\\\\\\\\\\\\\".\\\\\\\\\\\\\", \\\\\\\\\\\\\".\\\\\\\\\\\\\", \\\\\\\\\\\\\".\\\\\\\\\\\\\"]]) == False\\\\\", \\\\\"assert is_valid_board([[\\\\\\\\\\\\\".\\\\\\\\\\\\\" for _ in range(4)] for _ in range(4)]) == True\\\\\", \\\\\"assert is_valid_board([[\\\\\\\\\\\\\"X\\\\\\\\\\\\\" for _ in range(4)] for _ in range(4)]) == True\\\\\", \\\\\"assert is_valid_board([[\\\\\\\\\\\\\"Q\\\\\\\\\\\\\", \\\\\\\\\\\\\".\\\\\\\\\\\\\", \\\\\\\\\\\\\".\\\\\\\\\\\\\"], [\\\\\\\\\\\\\".\\\\\\\\\\\\\", \\\\\\\\\\\\\"Q\\\\\\\\\\\\\", \\\\\\\\\\\\\".\\\\\\\\\\\\\"], [\\\\\\\\\\\\\"Q\\\\\\\\\\\\\", \\\\\\\\\\\\\".\\\\\\\\\\\\\", \\\\\\\\\\\\\".\\\\\\\\\\\\\"]]) == False\\\\\"] }\"'}"