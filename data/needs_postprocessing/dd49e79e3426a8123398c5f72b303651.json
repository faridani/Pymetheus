{
    "model": "gemma2:27b",
    "response": "\"{ \\\"title\\\": \\\"Hard:  Binary Tree Path Sum\\\", \\\"description\\\": \\\"Given a binary tree and a target sum, write a function `path_sum` that returns the number of paths in the tree whose nodes sum up to the given target. A path is defined as any sequence of nodes from a starting node (potentially the root) down to a leaf node.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef path_sum(root, target_sum: int) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `root` (TreeNode): The root node of the binary tree. Each node has attributes `val` (integer value), `left` (left child node), and `right` (right child node).\\\\n- `target_sum` (int): The target sum to search for.\\\\n\\\\n#### Output\\\\n- Returns the number of paths in the tree whose nodes sum up to the given target.\\\", \\\"code\\\": \\\"class TreeNode:\\\\n    def __init__(self, val=0, left=None, right=None):\\\\n        self.val = val\\\\n        self.left = left\\\\n        self.right = right\\\\n\\\\ndef path_sum(root, target_sum: int) -> int:\\\\n    paths = 0\\\\n\\\\n    def dfs(node, current_sum):\\\\n        nonlocal paths\\\\n        if not node:\\\\n            return\\\\n\\\\n        current_sum += node.val\\\\n        if current_sum == target_sum:\\\\n            paths += 1\\\\n\\\\n        dfs(node.left, current_sum)\\\\n        dfs(node.right, current_sum)\\\\n\\\\n    dfs(root, 0)\\\\n    return paths\\\", \\\"tests\\\": [\\\"# Example Tree: \\\\n#     5\\\\n#   / \\\\\\\\ \\\\n#  4   8\\\\n# / \\\\\\\\  \\\\\\\\ \\\\n# 11 13  4\\\\n# / \\\\\\\\    \\\\\\\\\\\\n# 7  2  1\\\\ntree = TreeNode(5, TreeNode(4, TreeNode(11, TreeNode(7), TreeNode(2)), TreeNode(13)), TreeNode(8, None, TreeNode(4, None, TreeNode(1)))))\\\\nassert path_sum(tree, 22) == 3\\\", \\\"assert path_sum(tree, 15) == 2\\\"] }\""
}