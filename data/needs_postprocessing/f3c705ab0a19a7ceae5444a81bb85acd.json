"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Prime Factorization of Large Numbers (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `prime_factors` that returns the prime factors of a given positive integer.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef prime_factors(n: int) -> list:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `n` (int): A positive integer that may be very large, up to 10^18.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a sorted list of the prime factors of the input number.\\\\\\\\n\\\\\\\\nThe function should handle both small and large numbers gracefully. For example, it should handle `2` as a special case because it is the only even prime number, and it should efficiently factor large numbers without causing excessive memory usage or time complexity issues.\\\\\\\\n\\\\\\\\nHint: You may find the `math.gcd()` function helpful in determining common factors between two numbers.\\\\\", \\\\\"code\\\\\": \\\\\"import math\\\\\\\\n\\\\\\\\ndef prime_factors(n: int) -> list:\\\\\\\\n    if n == 1:\\\\\\\\n        return []\\\\\\\\n    if n % 2 == 0:\\\\\\\\n        return [2] + prime_factors(n // 2)\\\\\\\\n    i = 3\\\\\\\\n    factors = []\\\\\\\\n    while i * i <= n:\\\\\\\\n        if n % i == 0:\\\\\\\\n            factors.append(i)\\\\\\\\n            n = n // i\\\\\\\\n        i += 2\\\\\\\\n    if n > 1:\\\\\\\\n        factors.append(n)\\\\\\\\n    return sorted(factors)\\\\\", \\\\\"tests\\\\\": [\\\\\"assert prime_factors(2) == [2]\\\\\", \\\\\"assert prime_factors(5) == [5]\\\\\", \\\\\"assert prime_factors(9) == [3, 3]\\\\\", \\\\\"assert prime_factors(17) == [17]\\\\\", \\\\\"assert prime_factors(28) == [2, 2, 7]\\\\\", \\\\\"assert prime_factors(496) == [2, 2, 7, 71]\\\\\"] }\"'}"