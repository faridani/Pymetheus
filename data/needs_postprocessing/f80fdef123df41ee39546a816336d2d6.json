"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Prime Spiral\\\\\", \\\\\"description\\\\\": \\\\\"You are given a square grid of size `n x n`. Starting at the center of the grid, you spiral outwards clockwise filling each cell with consecutive prime numbers. Write a function `prime_spiral(n)` that returns a 2D list representing this spiral of primes.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef prime_spiral(n: int) -> list:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `n` (int): The size of the square grid.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a 2D list of integers representing the spiral of primes. The first element in the list is the prime number 2, and each subsequent element is the next consecutive prime number.\\\\\\\\n\\\\\\\\n#### Constraints\\\\\\\\n- 1 <= `n` <= 50\\\\\", \\\\\"code\\\\\": \\\\\"def prime_spiral(n: int) -> list:\\\\\\\\n    def is_prime(num):\\\\\\\\n        if num <= 1:\\\\\\\\n            return False\\\\\\\\n        for i in range(2, int(num**0.5) + 1):\\\\\\\\n            if num % i == 0:\\\\\\\\n                return False\\\\\\\\n        return True\\\\\\\\n\\\\\\\\n    spiral = [[0 for _ in range(n)] for _ in range(n)]\\\\\\\\n    row, col = n // 2, n // 2\\\\\\\\n    direction = \\'right\\'\\\\\\\\n    prime_count = 1\\\\\\\\n    num = 2\\\\\\\\n\\\\\\\\n    while prime_count <= (n * n):\\\\\\\\n        spiral[row][col] = num if is_prime(num) else 0\\\\\\\\n        if direction == \\'right\\' and (col + 1 >= n or spiral[row][col + 1] != 0):\\\\\\\\n            direction = \\'down\\'\\\\\\\\n        elif direction == \\'down\\' and (row + 1 >= n or spiral[row + 1][col] != 0):\\\\\\\\n            direction = \\'left\\'\\\\\\\\n        elif direction == \\'left\\' and (col - 1 < 0 or spiral[row][col - 1] != 0):\\\\\\\\n            direction = \\'up\\'\\\\\\\\n        elif direction == \\'up\\' and (row - 1 < 0 or spiral[row - 1][col] != 0):\\\\\\\\n            direction = \\'right\\'\\\\\\\\n\\\\\\\\n        if direction == \\'right\\':\\\\\\\\n            col += 1\\\\\\\\n        elif direction == \\'down\\':\\\\\\\\n            row += 1\\\\\\\\n        elif direction == \\'left\\':\\\\\\\\n            col -= 1\\\\\\\\n        elif direction == \\'up\\':\\\\\\\\n            row -= 1\\\\\\\\n\\\\\\\\n        num += 1\\\\\\\\n        prime_count += 1\\\\\\\\n    return spiral\\\\\", \\\\\"tests\\\\\": [\\\\\"assert prime_spiral(3) == [[0, 2, 0], [0, 3, 5], [0, 7, 0]]\\\\\", \\\\\"assert prime_spiral(5) == [[0, 0, 19, 0, 0], [0, 7, 23, 29, 0], [31, 37, 41, 43, 47], [0, 53, 59, 61, 0], [0, 0, 67, 0, 0]]\\\\\"] }\"'}"