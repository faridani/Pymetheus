"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Detection (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Given two strings, write a function to check if they are anagrams of each other. An anagram is a word or phrase that is formed by rearranging the letters of another word or phrase, using all the original letters exactly once.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef are_anagrams(s1: str, s2: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s1`, `s2` (str): Two strings containing only lowercase English alphabets.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def are_anagrams(s1: str, s2: str) -> bool:\\\\\\\\n    # Ensure both strings have the same length and are only alphabets\\\\\\\\n    if len(s1) != len(s2) or not all(char.isalpha() for char in s1) or not all(char.isalpha() for char in s2):\\\\\\\\n        return False\\\\\\\\n    # Count the frequency of each character in both strings\\\\\\\\n    count1 = {char: s1.count(char) for char in set(s1)}\\\\\\\\n    count2 = {char: s2.count(char) for char in set(s2)}\\\\\\\\n    # Check if both counts are equal\\\\\\\\n    return count1 == count2\\\\\", \\\\\"tests\\\\\": [\\\\\"assert are_anagrams(\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert are_anagrams(\\\\\\\\\\\\\"racecar\\\\\\\\\\\\\", \\\\\\\\\\\\\"carrerace\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert are_anagrams(\\\\\\\\\\\\\"hello\\\\\\\\\\\\\", \\\\\\\\\\\\\"olleh\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert are_anagrams(\\\\\\\\\\\\\"world\\\\\\\\\\\\\", \\\\\\\\\\\\\"drlorw\\\\\\\\\\\\\") == False\\\\\"] }\"'}"