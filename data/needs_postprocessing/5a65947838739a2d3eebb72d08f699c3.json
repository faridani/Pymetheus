{
    "model": "llama3:latest",
    "response": "{\"title\": \"Maximum Sum of Non-Adjacent Elements\", \"description\": \"Given an integer array `nums`, find the maximum sum of non-adjacent elements. For example, for input `[2, 7, 9, 3, 1]`, the maximum sum is `12` because we can choose `2`, `9` and skip `7`, `3`, and `1`. Write a function `max_sum` that solves this problem.\\n\\n#### Function Signature\\n```python\\ndef max_sum(nums: list[int)) -> int:\\n```\\n\\n#### Input\\n- `nums` (list[int]): A list of integers.\\n\\n#### Output\\n- Returns the maximum sum of non-adjacent elements in the input list.\", \"code\": \"def max_sum(nums: list[int)) -> int:\\n    if len(nums) <= 2:\\n        return max(0, max(nums))\\n    dp = [0] * (len(nums) + 1)\\n    dp[0] = 0\\n    dp[1] = max(0, nums[0])\\n    for i in range(2, len(nums) + 1):\\n        dp[i] = max(dp[i-1], dp[i-2] + nums[i-1])\\n    return dp[-1]\", \"tests\": [\"assert max_sum([2, 7, 9, 3, 1]) == 12\", \"assert max_sum([-5, -3, 5, 0, 8, 8, 10]) == 15\"]}"
}