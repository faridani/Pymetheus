{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Prime Factors Decomposition\\\", \\\"description\\\": \\\"Write a function that takes an integer as input and returns its prime factors decomposition. The function should return a dictionary where the keys are the prime factors and the values are their corresponding powers.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef prime_factors_decomposition(n: int) -> dict:\\\\n```\\\\n\\\\n#### Input\\\\n- `n` (int): A positive integer that is greater than 1.\\\\n\\\\n#### Output\\\\n- Returns a dictionary where the keys are the prime factors and the values are their corresponding powers.\\\\n\\\", \\\"code\\\": \\\"\\\\nimport math\\\\n\\\\ndef prime_factors_decomposition(n: int) -> dict:\\\\n    i = 2\\\\n    factors = {}\\\\n    while i * i <= n:\\\\n        if n % i:\\\\n            i += 1\\\\n        else:\\\\n            n //= i\\\\n            factors[i] = factors.get(i, 0) + 1\\\\n    if n > 1:\\\\n        factors[n] = factors.get(n, 0) + 1\\\\n    return factors\\\", \\\"tests\\\": [\\\"assert prime_factors_decomposition(13195) == {5: 3}\\\", \\\"assert prime_factors_decomposition(600851475143) == {29: 1, 641: 1}\\\"] }\""
}