"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Binary Tree Path Sum\\\\\", \\\\\"description\\\\\": \\\\\"Given a binary tree, find all paths that sum to a given target. \\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_paths(root, target):\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `root` (TreeNode): The root of the binary tree.\\\\\\\\n- `target` (int): The target sum.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of lists, where each inner list represents a path from root to leaf that sums to the target.  Each element in an inner list is the value of a node in the path.\\\\\", \\\\\"code\\\\\": \\\\\"class TreeNode:\\\\\\\\n    def __init__(self, val=0, left=None, right=None):\\\\\\\\n        self.val = val\\\\\\\\n        self.left = left\\\\\\\\n        self.right = right\\\\\\\\n\\\\\\\\ndef find_paths(root, target):\\\\\\\\n    result = []\\\\\\\\n    def dfs(node, current_sum, path):\\\\\\\\n        if not node:\\\\\\\\n            return\\\\\\\\n        current_sum += node.val\\\\\\\\n        path.append(node.val)\\\\\\\\n        if current_sum == target and not node.left and not node.right:\\\\\\\\n            result.append(path[:])\\\\\\\\n        dfs(node.left, current_sum, path)\\\\\\\\n        dfs(node.right, current_sum, path)\\\\\\\\n        path.pop()\\\\\\\\n    dfs(root, 0, [])\\\\\\\\n    return result\\\\\", \\\\\"tests\\\\\": [\\\\\"root = TreeNode(5, TreeNode(4, TreeNode(11, TreeNode(7), TreeNode(2))), TreeNode(8, TreeNode(13), TreeNode(4, TreeNode(5), TreeNode(1))))\\\\\\\\ntarget = 22\\\\\\\\nassert find_paths(root, target) == [[5, 4, 11, 2], [5, 8, 4, 5]]\\\\\", \\\\\"root = TreeNode(1)\\\\\\\\ntarget = 1\\\\\\\\nassert find_paths(root, target) == [[1]]\\\\\"] }\"'}"