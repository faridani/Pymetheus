"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Finder (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_anagrams(words: List[str]) -> Dict[str, List[str]]` that takes a list of words as input and returns a dictionary where each key is a word and its corresponding value is a list of all the words in the input that are anagrams of the key. Anagrams are words formed by rearranging the letters of another word. For example, \\'listen\\' can be rearranged to form \\'silent\\'.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of strings containing only lowercase letters.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a dictionary where each key is a word and its corresponding value is a list of all the words in the input that are anagrams of the key.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from collections import Counter, defaultdict\\\\\\\\n\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n    # Create a dictionary to store the count of each letter in each word\\\\\\\\n    counts = defaultdict(int)\\\\\\\\n    anagrams = {} \\\\\\\\n    for word in words:\\\\\\\\n        # Count the letters in the current word and update the counts\\\\\\\\n        for char in word:\\\\\\\\n            counts[char] += 1\\\\\\\\n        # If the count of letters in this word is equal to the total count of all letters in the input, add it to anagrams\\\\\\\\n        if len(word) == sum(counts.values()):\\\\\\\\n            anagrams[tuple(sorted(word))] = [w for w in words if sorted(w) == tuple(sorted(word)) and w != word]\\\\\\\\n    return anagrams\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\'listen\\', \\'silent\\', \\'enlist\\', \\'service\\']) == {\\'enlist\\': [\\'listen\\', \\'enlist\\'], \\'service\\': [], \\'silent\\': [\\'listen\\', \\'silent\\']}\\\\\", \\\\\"assert find_anagrams([\\'abba\\', \\'baidab\\', \\'babad\\', \\'madam\\', \\'mom\\']) == {\\'abba\\': [\\'abba\\'], \\'baidab\\': [], \\'babad\\': [\\'babad\\'], \\'madam\\': [\\'madam\\'], \\'mom\\': [\\'mom\\']}\\\\\"] }\"'}"