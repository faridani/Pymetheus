"{'model': 'qwen2:7b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Prime Number Generator\\\\\", \\\\\"description\\\\\": \\\\\"Create a function `prime_generator` that returns an infinite generator of prime numbers, starting from 2. Use the Sieve of Eratosthenes algorithm to efficiently find and yield prime numbers.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef prime_generator() -> Iterator[int]:\\\\\\\\n    \\'\\'\\'A generator that yields prime numbers in ascending order.\\'\\'\\'\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Constraints\\\\\\\\n- The function should handle large inputs, up to the maximum value supported by Python\\'s memory limitations.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"import math\\\\\\\\nfrom typing import Generator, Iterator\\\\\\\\n\\\\\\\\ndef _sieve_of_eratosthenes(limit: int) -> list:\\\\\\\\n    primes = [True] * (limit + 1)\\\\\\\\n    primes[0] = primes[1] = False\\\\\\\\n    for i in range(2, int(math.sqrt(limit)) + 1):\\\\\\\\n        if primes[i]:\\\\\\\\n            for j in range(i*i, limit+1, i):\\\\\\\\n                primes[j] = False\\\\\\\\n    return [i for i, is_prime in enumerate(primes) if is_prime]\\\\\\\\n\\\\\\\\ndef prime_generator() -> Iterator[int]:\\\\\\\\n    \\'\\'\\'A generator that yields prime numbers in ascending order.\\'\\'\\'\\\\\\\\n    yield 2\\\\\\\\n    found_primes = _sieve_of_eratosthenes(10**6)\\\\\\\\n    current_index = 1\\\\\\\\n    while True:\\\\\\\\n        current_prime = found_primes[current_index]\\\\\\\\n        if current_prime > len(found_primes) - current_index:\\\\\\\\n            # Recalculate the sieve up to twice as many primes needed\\\\\\\\n            found_primes += _sieve_of_eratosthenes(len(found_primes)*2)\\\\\\\\n            current_index = 0\\\\\\\\n        yield current_prime\\\\\\\\n        current_index += 1\\\\\", \\\\\"tests\\\\\": [\\\\\"next(prime_generator()) == 2\\\\\", \\\\\"next(prime_generator()) == 3\\\\\", \\\\\"next(prime_generator()) == 5\\\\\", \\\\\"next(prime_generator()) == 7\\\\\", \\\\\"next(prime_generator()) == 11\\\\\", \\\\\"sum(next(prime_generator() for _ in range(10))) == 104\\\\\"] }\"'}"