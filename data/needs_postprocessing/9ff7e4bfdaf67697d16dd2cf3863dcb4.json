"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Detection (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_anagrams` that takes a list of strings and returns all pairs of strings that are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of another, usually with all the original letters in the same alphabet and only one unique representation of each letter.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: List[str]) -> Set[Tuple[str, str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of strings containing only letters, with no spaces or punctuation.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a set of tuples where each tuple contains two strings that are anagrams of each other.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def find_anagrams(words: List[str]) -> Set[Tuple[str, str]]:\\\\\\\\n    # Create a dictionary to store the frequency of each letter in each word\\\\\\\\n    word_freq = {}\\\\\\\\n    for word in words:\\\\\\\\n        for char in word:\\\\\\\\n            if char not in word_freq:\\\\\\\\n                word_freq[char] = 1\\\\\\\\n            else:\\\\\\\\n                word_freq[char] += 1\\\\\\\\n    # Create a set to store the anagram pairs\\\\\\\\n    anagrams = set()\\\\\\\\n    # Iterate over all possible combinations of two words and check if they are anagrams\\\\\\\\n    for i in range(len(words)):\\\\\\\\n        for j in range(i+1, len(words)):\\\\\\\\n            # Check if the frequencies of letters in both words match\\\\\\\\n            if word_freq[list(words[i])] == word_freq[list(words[j])]:\\\\\\\\n                # Add the pair to the set of anagrams and sort them alphabetically for unique representation\\\\\\\\n                anagrams.add((min(words[i], words[j]), max(words[i], words[j]))) \\\\\\\\n    return anagrams\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\\\\\\\\\\\\"cats\\\\\\\\\\\\\", \\\\\\\\\\\\\"act\\\\\\\\\\\\\", \\\\\\\\\\\\\"tac\\\\\\\\\\\\\"]) == {(\\\\\\\\\\\\\"act\\\\\\\\\\\\\", \\\\\\\\\\\\\"cats\\\\\\\\\\\\\"), (\\\\\\\\\\\\\"tac\\\\\\\\\\\\\", \\\\\\\\\\\\\"cats\\\\\\\\\\\\\")}\\\\\", \\\\\"assert find_anagrams([\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\", \\\\\\\\\\\\\"enlist\\\\\\\\\\\\\"]) == {(\\\\\\\\\\\\\"enlist\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\"), (\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\")}\\\\\"] }\"'}"