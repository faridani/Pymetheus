"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Goldbach\\'s Conjecture Solver (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Goldbach\\'s conjecture is a famous unsolved problem in number theory. It states that every even integer greater than 2 can be expressed as the sum of two prime numbers.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef is_prime(n: int) -> bool:\\\\\\\\n    # Check if a given number is prime\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef goldbach(n: int) -> list[int]:\\\\\\\\n    # Find two prime numbers that sum to the input integer `n`\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `n` (int): An even integer greater than 2.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of two integers that sum to `n`, in non-descending order, if such numbers exist. If there is no solution, return an empty list.\\\\\\\\n\\\\\\\\nHint: Use the function `is_prime(n)` to check if a number is prime.\\\\\", \\\\\"code\\\\\": \\\\\"def is_prime(n: int) -> bool:\\\\\\\\n    # Edge case: 1 is not a prime number\\\\\\\\n    if n == 1: return False\\\\\\\\n    # Check divisibility by 2 and 3\\\\\\\\n    if n % 2 == 0 or n % 3 == 0: return False\\\\\\\\n    i = 5\\\\\\\\n    while i * i <= n:\\\\\\\\n        if n % i == 0 or n % (i + 2) == 0:\\\\\\\\n            return False\\\\\\\\n        i += 6\\\\\\\\n    return True\\\\\\\\n\\\\\\\\ndef goldbach(n: int) -> list[int]:\\\\\\\\n    # Find all primes less than or equal to the square root of `n`\\\\\\\\n    primes = [2] + [i for i in range(3, int(n ** 0.5) + 1) if is_prime(i)]\\\\\\\\n    # Loop through each prime and check if it plus another prime equals `n`\\\\\\\\n    solution = []\\\\\\\\n    for p in primes:\\\\\\\\n        complement = n - p\\\\\\\\n        if complement in primes: solution.append([p, complement])\\\\\\\\n    return solution or []\\\\\", \\\\\"tests\\\\\": [\\\\\"assert goldbach(4) == [2, 2]\\\\\", \\\\\"assert goldbach(6) == [3, 3]\\\\\", \\\\\"assert goldbach(10) == [2, 8]\\\\\", \\\\\"assert goldbach(14) == [5, 9]\\\\\", \\\\\"assert goldbach(20) == []\\\\\"] }\"'}"