"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"\\'Palindromic Subsequence\\' - Hard\\\\\", \\\\\"description\\\\\": \\\\\"A palindromic subsequence of a string is a sequence that can be read the same forwards and backwards. Write a function `palindrome_subsequence` that takes in a string `s`, and returns the length of its longest palindromic subsequence.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef palindrome_subsequence(s: str) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns an integer representing the length of the longest palindromic subsequence found in the input string.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def palindrome_subsequence(s: str) -> int:\\\\\\\\n    # Create a memoization table to store the lengths of subproblems\\\\\\\\n    n = len(s)\\\\\\\\n    dp = [[0] * n for _ in range(n)]\\\\\\\\n\\\\\\\\n    # Initialize base cases\\\\\\\\n    for i in range(n):\\\\\\\\n        dp[i][i] = 1\\\\\\\\n\\\\\\\\n    # Find the length of longest palindromic subsequence recursively\\\\\\\\n    def length_of_longest_palindrome(low, high):\\\\\\\\n        if low > high:\\\\\\\\n            return 0\\\\\\\\n        elif low == high:\\\\\\\\n            return 1\\\\\\\\n        elif dp[low][high] != 0:\\\\\\\\n            return dp[low][high]\\\\\\\\n\\\\\\\\n        # Expand from the center\\\\\\\\n        for k in range(low, high):\\\\\\\\n            if s[k] != s[high]:\\\\\\\\n                break\\\\\\\\n            if (high - k) < 3 or dp[k + 1][high - 1] == 0:\\\\\\\\n                break\\\\\\\\n            length = length_of_longest_palindrome(k + 1, high - 1)\\\\\\\\n            dp[low][high] = max(dp[low][high], length + 2)\\\\\\\\n        return dp[low][high]\\\\\\\\n\\\\\\\\n    # Find the longest palindromic subsequence for the entire string\\\\\\\\n    return length_of_longest_palindrome(0, n - 1)\\\\\", \\\\\"tests\\\\\": [\\\\\"assert palindrome_subsequence(\\\\\\\\\\\\\"babbba\\\\\\\\\\\\\") == 5\\\\\", \\\\\"assert palindrome_subsequence(\\\\\\\\\\\\\"cbaacbc\\\\\\\\\\\\\") == 4\\\\\", \\\\\"assert palindrome_subsequence(\\\\\\\\\\\\\"abcd\\\\\\\\\\\\\") == 1\\\\\"] }\"'}"