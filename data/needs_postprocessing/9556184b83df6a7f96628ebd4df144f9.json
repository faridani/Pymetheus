"{'model': 'gemma2:27b-instruct-q5_K_S', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard - Recursive Tree Traversal and Summation\\\\\", \\\\\"description\\\\\": \\\\\"Given a binary tree represented as nested dictionaries, write a function `sum_tree` that calculates the sum of all node values using recursion. Each dictionary in the tree represents a node and has keys \\'value\\', \\'left\\', and \\'right\\'. \\'left\\' and \\'right\\' contain either another nested dictionary representing a child node or None if there is no child.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef sum_tree(tree: dict) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `tree` (dict): A binary tree represented as a nested dictionary.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the sum of all node values in the tree.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def sum_tree(tree: dict) -> int:\\\\\\\\n    if tree is None:\\\\\\\\n        return 0\\\\\\\\n    return tree[\\'value\\'] + sum_tree(tree.get(\\'left\\')) + sum_tree(tree.get(\\'right\\'))\\\\\\\\n\\\\\", \\\\\"tests\\\\\": [\\\\\"tree1 = {\\'value\\': 1, \\'left\\': {\\'value\\': 2, \\'left\\': None, \\'right\\': None}, \\'right\\': {\\'value\\': 3, \\'left\\': None, \\'right\\': None}}\\\\\\\\nasert sum_tree(tree1) == 6\\\\\\\\n\\\\\", \\\\\"tree2 = {\\'value\\': 5, \\'left\\': {\\'value\\': 4, \\'left\\': {\\'value\\': 1, \\'left\\': None, \\'right\\': None}, \\'right\\': {\\'value\\': 2, \\'left\\': None, \\'right\\': None}}, \\'right\\': {\\'value\\': 6, \\'left\\': None, \\'right\\': None}}\\\\\\\\nasert sum_tree(tree2) == 18\\\\\\\\n\\\\\", \\\\\"assert sum_tree(None) == 0\\\\\"] }\"'}"