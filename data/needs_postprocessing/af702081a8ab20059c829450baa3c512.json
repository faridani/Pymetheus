{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Easiest Way to Get the Job\\\", \\\"description\\\": \\\"A company wants to hire the best candidate for a job. The candidates are evaluated based on their skills and experience. Write a function `highest_rated_candidate` that takes in two lists of strings: `skills` and `candidates`. It should return the name of the candidate with the highest total rating.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef highest_rated_candidate(skills: list[str], candidates: list[tuple(str, int)]) -> str:\\\\n```\\\\n\\\\n#### Input\\\\n- `skills`: A list of strings representing the skills required for the job.\\\\n- `candidates`: A list of tuples where each tuple contains a candidate's name (str) and their rating for each skill in the range [0, 10]. The length of the tuple must match the number of skills.\\\\n\\\\n#### Output\\\\n- Returns the name of the candidate with the highest total rating. If there is a tie, return any one of the candidates.\\\", \\\"code\\\": \\\"def highest_rated_candidate(skills: list[str], candidates: list[tuple(str, int)]) -> str:\\\\n    max_rating = 0\\\\n    best_candidate = ''\\\\n    for candidate in candidates:\\\\n        total_rating = sum(skill_rating for skill_rating in map(int, candidate[1].split(',')) if skill_rating <= 10)\\\\n        if total_rating > max_rating:\\\\n            max_rating = total_rating\\\\n            best_candidate = candidate[0]\\\\n    return best_candidate\\\\n\\\", \\\"tests\\\": [\\\"assert highest_rated_candidate(['Python', 'Java'], [('Alice', '6,8'), ('Bob', '9,7')]) == 'Bob'\\\", \\\"assert highest_rated_candidate(['C++', 'Data Structures', 'Algorithms'], [('John', '5,3,8'), ('Jane', '8,4,5')]) == 'John'\\\", \\\"assert highest_rated_candidate(['Machine Learning', 'Deep Learning'], [('Mike', '9,8'), ('Sarah', '7,6')]) == 'Mike'\\\"] }\""
}