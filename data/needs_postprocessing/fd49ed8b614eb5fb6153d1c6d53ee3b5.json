"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Finder (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_anagrams(words: List[str]) -> Dict[str, List[str]]` that finds all the anagrams of words in the given list. Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of strings containing words, which may contain letters and spaces.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a dictionary where each key is an anagram and the value is a list of words that form this anagram.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from collections import Counter\\\\\\\\n\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n    # Count the frequency of each letter in every word\\\\\\\\n    counter = Counter()\\\\\\\\n    anagrams = {} \\\\\\\\n    for word in words:\\\\\\\\n        counter.update(Counter(word))\\\\\\\\n        key = \\'\\'.join(sorted(counter.elements()))\\\\\\\\n        if key not in anagrams:\\\\\\\\n            anagrams[key] = [word]\\\\\\\\n        else:\\\\\\\\n            anagrams[key].append(word)\\\\\\\\n    return anagrams\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\", \\\\\\\\\\\\\"enlist\\\\\\\\\\\\\"]) == {\\\\\\\\\\\\\"enlistmenteils\\\\\\\\\\\\\", [\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\"]}\\\\\", \\\\\"assert find_anagrams([\\\\\\\\\\\\\"python\\\\\\\\\\\\\", \\\\\\\\\\\\\"typhon\\\\\\\\\\\\\", \\\\\\\\\\\\\"hotyp\\\\\\\\\\\\\"]) == {\\\\\\\\\\\\\"hotypytophon\\\\\\\\\\\\\", [\\\\\\\\\\\\\"python\\\\\\\\\\\\\", \\\\\\\\\\\\\"typhon\\\\\\\\\\\\\"]}\\\\\"] }\"'}"