{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Hard: Prime Factorization\\\", \\\"description\\\": \\\"Write a function `prime_factorize` that takes an integer `n` as input and returns a list of prime factors. Note that each prime factor should only appear once in the list, even if it appears multiple times in the original number.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef prime_factorize(n: int) -> list[int]:\\\\n```\\\\n\\\\n#### Input\\\\n- `n` (int): A positive integer to be factored.\\\\n\\\\n#### Output\\\\n- Returns a list of unique prime factors that multiply to `n`.\\\", \\\"code\\\": \\\"import math\\\\n\\\\ndef prime_factorize(n: int) -> list[int]:\\\\n    i = 2\\\\n    factors = []\\\\n    while i * i <= n:\\\\n        if n % i:\\\\n            i += 1\\\\n        else:\\\\n            n //= i\\\\n            while n % i == 0:\\\\n                n //= i\\\\n            factors.append(i)\\\\n    if n > 1:\\\\n        factors.append(n)\\\\n    return factors\\\\n\\\\n\\\", \\\"tests\\\": [\\\"assert prime_factorize(315) == [3, 3, 5, 7]\\\", \\\"assert prime_factorize(10) == [2, 5]\\\", \\\"assert prime_factorize(25) == [5, 5]\\\", \\\"assert prime_factorize(1001) == [7, 11, 13]\\\"] }\""
}