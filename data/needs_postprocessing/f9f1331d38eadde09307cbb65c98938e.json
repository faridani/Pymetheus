{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Minimum Path Sum Hard\\\", \\\"description\\\": \\\"Given a 2D grid of integers, find the minimum path sum from top left to bottom right. The path can only move either down or right at each step. For example, if the input grid is `[[1,3,5],[4,2,1],[1,5,3]]`, then the output should be `7` because the minimum path sum is 1+3+5 = 9 and the shortest path is `1 -> 3 -> 5 -> 1`. Write a function `min_path_sum` that calculates the minimum path sum.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef min_path_sum(grid: list) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `grid` (list): A 2D grid of integers, where `grid[i][j]` represents the value at the ith row and jth column.\\\\n\\\\n#### Output\\\\n- Returns the minimum path sum from top left to bottom right.\\\\n\\\", \\\"code\\\": \\\"def min_path_sum(grid: list) -> int:\\\\n    m = len(grid)\\\\n    n = len(grid[0])\\\\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\\\\n\\\\n    for i in range(1, m + 1):\\\\n        for j in range(1, n + 1):\\\\n            if i == 1 and j == 1:\\\\n                dp[i][j] = grid[0][0]\\\\n            elif i > 1 and j > 1:\\\\n                dp[i][j] = grid[i-1][j-1] + min(dp[i-1][j], dp[i][j-1])\\\\n            elif i > 1:\\\\n                dp[i][j] = dp[i-1][j] + grid[i-1][j]\\\\n            else:\\\\n                dp[i][j] = dp[i][j-1] + grid[i][j-1]\\\\n\\\\n    return dp[m][n]\\\", \\\"tests\\\": [\\\"assert min_path_sum([[1,3,5],[4,2,1],[1,5,3]]) == 7\\\", \\\"assert min_path_sum([[10,11,12,13],[14,15,16,17],[18,19,20,21]]) == 60\\\"] }\""
}