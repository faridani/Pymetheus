"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Medium: Word Ladder\\\\\", \\\\\"description\\\\\": \\\\\"Given two words, beginWord and endWord, and a wordList containing unique words of the same length. Return <i>the shortest transformation sequence</i> from beginWord to endWord, such that:\\\\\\\\n\\\\\\\\n- Only one letter can be changed at a time.\\\\\\\\n- Each transformed word must exist in the wordList.\\\\\\\\n\\\\\\\\nReturn an empty list if no such transformation sequence exists.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef word_ladder(beginWord: str, endWord: str, wordList: list[str]) -> list[str]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `beginWord` (str): The starting word.\\\\\\\\n- `endWord` (str): The target word.\\\\\\\\n- `wordList` (list[str]): A list of unique words of the same length as beginWord and endWord.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of strings representing the shortest transformation sequence from beginWord to endWord, including the start and end words. If no such sequence exists, return an empty list.\\\\\", \\\\\"code\\\\\": \\\\\"from collections import deque\\\\\\\\n\\\\\\\\ndef word_ladder(beginWord: str, endWord: str, wordList: list[str]) -> list[str]:\\\\\\\\n    if endWord not in wordList:\\\\\\\\n        return []\\\\\\\\n    wordList = set(wordList)\\\\\\\\n    queue = deque([(beginWord, [beginWord])])\\\\\\\\n    while queue:\\\\\\\\n        current_word, path = queue.popleft()\\\\\\\\n        if current_word == endWord:\\\\\\\\n            return path\\\\\\\\n        for i in range(len(current_word)):\\\\\\\\n            for letter in \\'abcdefghijklmnopqrstuvwxyz\\':\\\\\\\\n                new_word = current_word[:i] + letter + current_word[i+1:]\\\\\\\\n                if new_word in wordList and new_word not in path:\\\\\\\\n                    queue.append((new_word, path + [new_word]))\\\\\\\\n    return []\\\\\", \\\\\"tests\\\\\": [\\\\\"assert word_ladder(\\'hit\\', \\'cog\\', [\\'hot\\',\\'dot\\',\\'dog\\',\\'lot\\',\\'log\\',\\'cog\\']) == [\\'hit\\', \\'hot\\', \\'dot\\', \\'dog\\', \\'cog\\']\\\\\", \\\\\"assert word_ladder(\\'hit\\', \\'cog\\', [\\'hot\\',\\'dot\\',\\'dog\\',\\'lot\\',\\'log\\']) == []\\\\\"] }\"'}"