{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Longest Increasing Subsequence\\\", \\\"description\\\": \\\"Given a list of integers, write a function `longest_increasing_subsequence` that returns the length of the longest increasing subsequence. For example, if the input is `[10, 22, 9, 33, 21, 50, 41, 60]`, the output should be `5`, because the longest increasing subsequence is `[10, 22, 33, 50, 60]`. The function should work for any list of integers. #### Function Signature\\\\n```python\\\\ndef longest_increasing_subsequence(nums: list[int]) -> int:\\\\n```\\\\n#### Input\\\\n- `nums` (list[int]): A list of integers.\\\\n\\\\n#### Output\\\\n- Returns the length of the longest increasing subsequence.\\\\n\\\", \\\"code\\\": \\\"def longest_increasing_subsequence(nums: list[int]) -> int:\\\\n    if not nums:\\\\n        return 0\\\\n    dp = [1] * len(nums)\\\\n    for i in range(1, len(nums)):\\\\n        for j in range(i):\\\\n            if nums[i] > nums[j]:\\\\n                dp[i] = max(dp[i], dp[j] + 1)\\\\n    return max(dp)\\\", \\\"tests\\\": [\\\"assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5\\\", \\\"assert longest_increasing_subsequence([]) == 0\\\", \\\"assert longest_increasing_subsequence([1]) == 1\\\"] }\""
}