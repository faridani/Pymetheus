{
    "model": "llama3:latest",
    "response": "{\"title\": \"Hard: Maximum Area of Island\", \"description\": \"An island is a contiguous group of islands that are connected by bridges. An island may be surrounded by water or by the edge of the grid. For example, the following grid represents two islands.\\n\\n```\\n0 0 1 1 1 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0\\n1 1 1 0 0 1 0 0 0 0\\n0 1 1 1 0 1 0 0 0 0\\n1 1 1 1 1 1 0 0 0 0\\n``` \\nWrite a function `max_island_area` that takes in a grid of islands, represented as a list of strings where each string is a row in the grid. The grid will only contain '0's (representing water) and '1's (representing land). The function should return the maximum area of an island in the grid.\\n\\n#### Function Signature\\n```python\\ndef max_island_area(grid: list[str]) -> int:\\n```\\n\\n#### Input\\n- `grid` (list[str]): A 2D grid where '0's represent water and '1's represent land.\\n\\n#### Output\\n- Returns the maximum area of an island in the grid.\", \"code\": \"def max_island_area(grid: list[str]) -> int:\\n    if not grid or not grid[0]:\\n        return 0\\n    def dfs(i, j):\\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] != '1':\\n            return 0\\n        grid[i] = grid[i][:j] + '*' + grid[i][j+1:]\\n        return 1 + dfs(i-1, j) + dfs(i+1, j) + dfs(i, j-1) + dfs(i, j+1)\\n    max_area = 0\\n    for i in range(len(grid)):\\n        for j in range(len(grid[0])):\\n            if grid[i][j] == '1':\\n                area = dfs(i, j)\\n                max_area = max(max_area, area)\\n    return max_area\", \"tests\": [\"assert max_island_area([['1','1','1'],['1','1','0\"], \"1','1','1']]) == 4\": \"assert max_island_area([['1','1','1'], ['1','1','1'], ['1','1','1']]) == 9\", \"assert max_island_area([['0', '0', '0'], ['0', '0', '0'], ['0', '0', '0']]) == 0\": \"\"}"
}