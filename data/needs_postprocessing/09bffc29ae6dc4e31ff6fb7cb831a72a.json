{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Maximum Sum of a Subarray\\\", \\\"description\\\": \\\"Given an array of integers, find the maximum sum of a subarray (a contiguous part of the array) that does not contain more than k elements.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef max_sum_subarray(arr: list[int], k: int) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `arr` (list[int]): A list of integers.\\\\n- `k` (int): The maximum number of elements allowed in the subarray.\\\\n\\\\n#### Output\\\\n- Returns the maximum sum of a subarray that does not contain more than k elements.\\\", \\\"code\\\": \\\"\\\\nimport heapq\\\\n\\\\ndef max_sum_subarray(arr: list[int], k: int) -> int:\\\\n    n = len(arr)\\\\n    prefix_sum = [0] * (n + 1)\\\\n    for i in range(n):\\\\n        prefix_sum[i + 1] = prefix_sum[i] + arr[i]\\\\n\\\\n    dp = [[-float('inf')] * (k + 1) for _ in range(n + 1)]\\\\n    dp[0][0] = 0\\\\n\\\\n    for i in range(1, n + 1):\\\\n        for j in range(min(i, k) + 1):\\\\n            if i == j:\\\\n                dp[i][j] = prefix_sum[i]\\\\n            else:\\\\n                dp[i][j] = max(dp[i - 1][j], prefix_sum[i] - prefix_sum[i - j])\\\\n\\\\n    return max(max(row) for row in dp)\\\\n\\\\n\\\", \\\"tests\\\": [\\\"assert max_sum_subarray([-2, -3, 4, -1, -2, 1, 5, -3], 2) == 7\\\", \\\"assert max_sum_subarray([1, 2, 3, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 5) == 30\\\", \\\"assert max_sum_subarray([-1, -2, -3, -4, -5], 3) == -1\\\"] }\""
}