"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Recursive Palindrome Checker (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a recursive function `is_palindrome` that checks if a given string is a palindrome. Unlike the previous question, this function should be implemented recursively.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef is_palindrome(s: str, start: int = 0, end: int = len(s) - 1) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\\\\\\\\n- `start` (int): The index of the leftmost character to be compared. Default is 0.\\\\\\\\n- `end` (int): The index of the rightmost character to be compared. Default is the length of the string minus one.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the substring from `start` to `end` is a palindrome, and both `start` and `end` are moving towards each other, `False` otherwise.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"import string\\\\\\\\ndef is_palindrome(s: str, start: int = 0, end: int = len(s) - 1) -> bool:\\\\\\\\n    # Base case: if the distance between start and end is 1, return True\\\\\\\\n    if abs(start - end) == 1:\\\\\\\\n        return True\\\\\\\\n    # Recursive case: compare characters at start and end, move towards each other\\\\\\\\n    else:\\\\\\\\n        char_at_start = s[start] if start < end else s[end]\\\\\\\\n        char_at_end = s[end] if start < end else s[start]\\\\\\\\n        # Remove non-alphanumeric characters and convert to lowercase\\\\\\\\n        cleaned_char_at_start = \\'\\'.join(char for char in char_at_start if char in string.ascii_letters + string.digits)\\\\\\\\n        cleaned_char_at_end = \\'\\'.join(char for char in char_at_end if char in string.ascii_letters + string.digits)\\\\\\\\n        # If the characters do not match, return False\\\\\\\\n        if cleaned_char_at_start != cleaned_char_at_end:\\\\\\\\n            return False\\\\\\\\n        # Move start and end indices towards each other and recursively call is_palindrome function\\\\\\\\n        return is_palindrome(s, start + 1, end - 1)\\\\\", \\\\\"tests\\\\\": [\\\\\"assert is_palindrome(\\'A man, a plan, a canal, Panama\\') == True\\\\\", \\\\\"assert is_palindrome(\\'racecar\\') == True\\\\\", \\\\\"assert is_palindrome(\\'hello\\') == False\\\\\", \\\\\"assert is_palindrome(\\'No \\\\\\\\\\'x\\\\\\\\\\' in Nixon\\') == True\\\\\"] }\"'}"