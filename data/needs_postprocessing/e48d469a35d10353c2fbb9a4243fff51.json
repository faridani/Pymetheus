"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Finder (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_anagrams` that finds all the anagrams of a given word or phrase. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(word: str) -> List[str]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `word` (str): A string of lowercase letters that may contain spaces.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of strings where each string is an anagram of the input word.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"import itertools\\\\\\\\ndef find_anagrams(word: str) -> List[str]:\\\\\\\\n    # Create a dictionary from the characters in the word, with counts as values\\\\\\\\n    char_dict = {} \\\\\\\\n    for char in word:\\\\\\\\n        if char not in char_dict:\\\\\\\\n            char_dict[char] = 1\\\\\\\\n        else:\\\\\\\\n            char_dict[char] += 1\\\\\\\\n    # Generate all permutations of the characters in the word\\\\\\\\n    permutations = list(itertools.permutations(word))\\\\\\\\n    anagrams = []\\\\\\\\n    \\\\\\\\n    for perm in permutations:\\\\\\\\n        # Create a dictionary from the characters in the permutation, with counts as values\\\\\\\\n        perm_dict = {} \\\\\\\\n        for char in perm:\\\\\\\\n            if char not in perm_dict:\\\\\\\\n                perm_dict[char] = 1\\\\\\\\n            else:\\\\\\\\n                perm_dict[char] += 1\\\\\\\\n        # Check if the two dictionaries have the same counts\\\\\\\\n        if perm_dict == char_dict:\\\\\\\\n            anagrams.append(\\'\\'.join(perm))\\\\\\\\n    return anagrams\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams(\\\\\\\\\\\\\"listen\\\\\\\\\\\\\") == [\\\\\\\\\\\\\"enlist\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\"]\\\\\", \\\\\"assert find_anagrams(\\\\\\\\\\\\\"programming\\\\\\\\\\\\\") == [\\\\\\\\\\\\\"grommep\\\\\\\\\\\\\", \\\\\\\\\\\\\"margopn\\\\\\\\\\\\\", \\\\\\\\\\\\\"program\\\\\\\\\\\\\", \\\\\\\\\\\\\"mrappog\\\\\\\\\\\\\", \\\\\\\\\\\\\"grmmpp\\\\\\\\\\\\\", \\\\\\\\\\\\\"nmgropa\\\\\\\\\\\\\"]\\\\\"] }\"'}"