"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Detector (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a function `find_anagrams` that finds all anagrams for a given input list of words.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of strings containing lowercase words separated by spaces or newlines.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a dictionary where the keys are anagrams and the values are lists of words that form that anagram.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"import collections\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n    # Count the frequency of each character in each word\\\\\\\\n    counts = {word: collections.Counter(word) for word in words}\\\\\\\\n    \\\\\\\\n    # Find anagrams by comparing the frequency dictionaries\\\\\\\\n    anagrams = {\\\\\\\\ncount: [word for word in words if count == counts[word]] for count in counts.values() if len(count) == len(set(count))}\\\\\\\\n    return anagrams\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\'listen\\', \\'silent\\', \\'enlist\\']) == {\\'enlist\\': [\\'listen\\', \\'silent\\'], \\'silent\\': []}\\\\\", \\\\\"assert find_anagrams([\\'apple\\', \\'apples\\', \\'app\\', \\'approve\\']) == {\\'app\\': [\\'apple\\', \\'app\\'], \\'ppa\\': [\\'apples\\']}\\\\\"] }\"'}"