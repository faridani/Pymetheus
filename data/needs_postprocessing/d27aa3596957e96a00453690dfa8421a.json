"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Detector (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"An anagram is a word or phrase that is formed by rearranging the letters of another word or phrase, typically using all the original letters exactly once.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: List[str]) -> List[List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of strings containing words, each word is a maximum of 10 lowercase English letters.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of lists, where each inner list contains the anagrams of each original word. Words that do not have any anagrams should not be included in the result.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def find_anagrams(words: List[str]) -> List[List[str]]:\\\\\\\\n    # Create a dictionary to store words and their sorted letters\\\\\\\\n    word_dict = {}\\\\\\\\n    for word in words:\\\\\\\\n        sorted_word = \\'\\'.join(sorted(word))\\\\\\\\n        if sorted_word not in word_dict:\\\\\\\\n            word_dict[sorted_word] = [word]\\\\\\\\n        else:\\\\\\\\n            word_dict[sorted_word].append(word)\\\\\\\\n    # Convert the dictionary values back to lists and return\\\\\\\\n    result = []\\\\\\\\n    for anagrams in word_dict.values():\\\\\\\\n        result.append(anagrams)\\\\\\\\n    return result\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\", \\\\\\\\\\\\\"enlist\\\\\\\\\\\\\"]) == [[\\\\\\\\\\\\\"listen\\\\\\\\\\\\\"], [\\\\\\\\\\\\\"silent\\\\\\\\\\\\\"], [\\\\\\\\\\\\\"enlist\\\\\\\\\\\\\"]]\\\\\", \\\\\"assert find_anagrams([\\\\\\\\\\\\\"wow\\\\\\\\\\\\\", \\\\\\\\\\\\\"now\\\\\\\\\\\\\"]) == [[\\\\\\\\\\\\\"wow\\\\\\\\\\\\\", \\\\\\\\\\\\\"now\\\\\\\\\\\\\"]]\\\\\", \\\\\"assert find_anagrams([\\\\\\\\\\\\\"hello\\\\\\\\\\\\\", \\\\\\\\\\\\\"world\\\\\\\\\\\\\", \\\\\\\\\\\\\"olleh\\\\\\\\\\\\\", \\\\\\\\\\\\\"dlrow\\\\\\\\\\\\\"]) == [[\\\\\\\\\\\\\"hello\\\\\\\\\\\\\", \\\\\\\\\\\\\"olleh\\\\\\\\\\\\\"], [\\\\\\\\\\\\\"world\\\\\\\\\\\\\", \\\\\\\\\\\\\"dlrow\\\\\\\\\\\\\"]]\\\\\"] }\"'}"