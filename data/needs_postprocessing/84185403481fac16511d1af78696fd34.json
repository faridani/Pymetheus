{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Hard: Find the Maximum Sum of a Subarray with Constraints\\\", \\\"description\\\": \\\"Given an array of integers and two constraints, find the maximum sum of a subarray that satisfies both constraints. A subarray is a contiguous part of the array.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef max_subarray_sum(arr: list[int], k: int, w: int) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `arr` (list[int]): An array of integers where all elements are between 0 and 100 inclusive.\\\\n- `k` (int): The sum constraint. The maximum sum of the subarray should be less than or equal to `k`.\\\\n- `w` (int): The weight constraint. The difference between any two adjacent elements in the subarray should be greater than or equal to `w`.\\\\n\\\\n#### Output\\\\n- Returns the maximum sum of a subarray that satisfies both constraints.\\\", \\\"code\\\": \\\"\\\\nimport heapq\\\\n\\\\ndef max_subarray_sum(arr: list[int], k: int, w: int) -> int:\\\\n    n = len(arr)\\\\n    prefix_sum = [0] * (n + 1)\\\\n    for i in range(n):\\\\n        prefix_sum[i + 1] = prefix_sum[i] + arr[i]\\\\n\\\\n    max_sum = 0\\\\n    left = right = 0\\\\n\\\\n    while right < n:\\\\n        if prefix_sum[right + 1] - prefix_sum[left] > k:\\\\n            left += 1\\\\n        elif prefix_sum[right + 1] - prefix_sum[left] <= k and (not right or arr[right] - arr[left - 1] >= w):\\\\n            max_sum = max(max_sum, prefix_sum[right + 1] - prefix_sum[left])\\\\n            if max_sum == k:\\\\n                return max_sum\\\\n        right += 1\\\\n\\\\n    return max_sum\\\", \\\"tests\\\": [\\\"assert max_subarray_sum([10, 20, 30, 40], 50, 5) == 45\\\", \\\"assert max_subarray_sum([1, 2, 3, 4, 5], 6, 0) == 6\\\", \\\"assert max_subarray_sum([100, 90, 80, 70, 60, 50, 40, 30, 20, 10], 110, 10) == 100\\\"] }\""
}