"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"\\'Palindromic Anagrams\\' (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_palindromic_anagrams` that finds all pairs of palindromic anagrams in a given list of strings. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_palindromic_anagrams(words: List[str]) -> Set[Tuple[str, str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of strings containing only lowercase letters.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a set of tuples, each containing two palindromic anagrams from the input list.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from collections import Counter, defaultdict\\\\\\\\ndef find_palindromic_anagrams(words: List[str]) -> Set[Tuple[str, str]]:\\\\\\\\n    # Create a dictionary to count the frequency of each letter in each word\\\\\\\\n    counter = defaultdict(int)\\\\\\\\n    for word in words:\\\\\\\\n        for char in word:\\\\\\\\n            counter[char] += 1\\\\\\\\n    # Filter only palindromes\\\\\\\\n    palindromes = set(filter(lambda s: s == s[::-1], words))\\\\\\\\n    # Find pairs of anagrams among the palindromes\\\\\\\\n    anagram_pairs = set()\\\\\\\\n    for p1 in palindromes:\\\\\\\\n        frequencies = counter.copy()\\\\\\\\n        for char, freq in frequencies.items():\\\\\\\\n            frequencies[char] -= 2\\\\\\\\n        sorted_freqs = sorted(frequencies.items(), key=lambda item: item[1])\\\\\\\\n        for p2 in palindromes:\\\\\\\\n            if len(p2) != len(p1) or p2 < p1:\\\\\\\\n                continue\\\\\\\\n            frequencies2 = Counter(p2)\\\\\\\\n            if not all(freq == frequencies2[char] for char, freq in sorted_freqs):\\\\\\\\n                continue\\\\\\\\n            anagram_pairs.add((p1, p2))\\\\\\\\n    return anagram_pairs\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_palindromic_anagrams([\\\\\\\\\\\\\"racecar\\\\\\\\\\\\\", \\\\\\\\\\\\\"level\\\\\\\\\\\\\", \\\\\\\\\\\\\"deified\\\\\\\\\\\\\", \\\\\\\\\\\\\"didde\\\\\\\\\\\\\"]) == {(\\\\\\\\\\\\\"racecar\\\\\\\\\\\\\", \\\\\\\\\\\\\"deified\\\\\\\\\\\\\"), (\\\\\\\\\\\\\"racecar\\\\\\\\\\\\\", \\\\\\\\\\\\\"didde\\\\\\\\\\\\\")}\\\\\", \\\\\"assert find_palindromic_anagrams([\\\\\\\\\\\\\"mom\\\\\\\\\\\\\", \\\\\\\\\\\\\"madam\\\\\\\\\\\\\", \\\\\\\\\\\\\"momma\\\\\\\\\\\\\"]) == {(\\\\\\\\\\\\\"madam\\\\\\\\\\\\\", \\\\\\\\\\\\\"mom\\\\\\\\\\\\\"), (\\\\\\\\\\\\\"madam\\\\\\\\\\\\\", \\\\\\\\\\\\\"momma\\\\\\\\\\\\\")}\\\\\"] }\"'}"