"{'model': 'mistral-nemo:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"FizzBuzz\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `fizz_buzz` that takes an integer `n` as input and returns a list of strings representing the FizzBuzz sequence up to that number.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef fizz_buzz(n: int) -> List[str]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `n` (int): An integer between 1 and 100.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of strings where:\\\\\\\\n  - If the number is divisible by both 3 and 5, the string \\'FizzBuzz\\' should be appended.\\\\\\\\n  - If the number is divisible by 3 but not by 5, the string \\'Fizz\\' should be appended.\\\\\\\\n  - If the number is divisible by 5 but not by 3, the string \\'Buzz\\' should be appended.\\\\\\\\n  - If the number is not divisible by either 3 or 5, the number itself should be appended as a string.\\\\\", \\\\\"code\\\\\": \\\\\"from typing import List\\\\\\\\n\\\\\\\\ndef fizz_buzz(n: int) -> List[str]:\\\\\\\\n    result = []\\\\\\\\n    for i in range(1, n + 1):\\\\\\\\n        if i % 3 == 0 and i % 5 == 0:\\\\\\\\n            result.append(\\'FizzBuzz\\')\\\\\\\\n        elif i % 3 == 0:\\\\\\\\n            result.append(\\'Fizz\\')\\\\\\\\n        elif i % 5 == 0:\\\\\\\\n            result.append(\\'Buzz\\')\\\\\\\\n        else:\\\\\\\\n            result.append(str(i))\\\\\\\\n    return result\\\\\\\\n\\\\\", \\\\\"tests\\\\\": [\\\\\"assert fizz_buzz(15) == [\\'1\\', \\'2\\', \\'Fizz\\', \\'4\\', \\'Buzz\\', \\'Fizz\\', \\'7\\', \\'8\\', \\'Fizz\\', \\'Buzz\\', \\'11\\', \\'Fizz\\', \\'13\\', \\'14\\', \\'FizzBuzz\\']\\\\\", \\\\\"assert fizz_buzz(20) == [\\'1\\', \\'2\\', \\'Fizz\\', \\'4\\', \\'Buzz\\', \\'Fizz\\', \\'7\\', \\'8\\', \\'Fizz\\', \\'Buzz\\', \\'11\\', \\'Fizz\\', \\'13\\', \\'14\\', \\'FizzBuzz\\', \\'16\\', \\'17\\', \\'Fizz\\', \\'19\\', \\'Buzz\\']\\\\\"] }\"'}"