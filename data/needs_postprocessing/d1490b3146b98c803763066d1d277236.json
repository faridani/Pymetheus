{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Minimum Window Substring\\\", \\\"description\\\": \\\"Given two strings `s1` and `s2`, write a function that returns the minimum window substring from `s1` that contains all characters of `s2`. If no such window exists, return an empty string.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef min_window_substring(s1: str, s2: str) -> str:\\\\n```\\\\n\\\\n#### Input\\\\n- `s1` (str): The main string to search for the minimum window substring.\\\\n- `s2` (str): The target string that contains characters to be searched in `s1`.\\\\n\\\\n#### Output\\\\n- Returns a minimum window substring from `s1` that contains all characters of `s2`, or an empty string if no such window exists.\\\", \\\"code\\\": \\\"\\\\nfrom collections import defaultdict\\\\n\\\\ndef min_window_substring(s1: str, s2: str) -> str:\\\\n    if not s1 or not s2:\\\\n        return ''\\\\n\\\\n    dict_s2 = defaultdict(int)\\\\n    for char in s2:\\\\n        dict_s2[char] += 1\\\\n\\\\n    required_chars = len(dict_s2)\\\\n    left, right = 0, 0\\\\n\\\\n    formed_chars = 0\\\\n    window_counts = defaultdict(int)\\\\n\\\\n    min_length = float('inf')\\\\n    min_window = ''\\\\n\\\\n    while right < len(s1):\\\\n        character = s1[right]\\\\n        window_counts[character] += 1\\\\n\\\\n        if character in dict_s2 and window_counts[character] == dict_s2[character]:\\\\n            formed_chars += 1\\\\n\\\\n        while left <= right and formed_chars == required_chars:\\\\n            character = s1[left]\\\\n\\\\n            if right - left + 1 < min_length:\\\\n                min_length = right - left + 1\\\\n                min_window = s1[left:right + 1]\\\\n\\\\n            window_counts[character] -= 1\\\\n            if character in dict_s2 and window_counts[character] < dict_s2[character]:\\\\n                formed_chars -= 1\\\\n\\\\n            left += 1\\\\n\\\\n        right += 1\\\\n\\\\n    return min_window\\\", \\\"tests\\\": [\\\"assert min_window_substring('ADOBECODEBANC', 'ABC') == 'BANC'\\\", \\\"assert min_window_substring('A', 'A') == 'A'\\\", \\\"assert min_window_substring('ABCD', 'DEF') == ''\\\"] }\""
}