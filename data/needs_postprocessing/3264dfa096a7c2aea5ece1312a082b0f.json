{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Hard: Binary Tree Depth\\\", \\\"description\\\": \\\"Write a function `max_depth` that calculates the maximum depth of a binary tree. The function should take as input the root node of the binary tree, where each node is an object with `value`, `left`, and `right` attributes.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef max_depth(node: dict) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `node` (dict): The root node of a binary tree. Each node has `value`, `left`, and `right` attributes, where `left` and `right` are either `None` or references to other nodes.\\\\n\\\\n#### Output\\\\n- Returns the maximum depth of the input binary tree.\\\\n\\\", \\\"code\\\": \\\"def max_depth(node: dict) -> int:\\\\n    if node is None:\\\\n        return 0\\\\n    else:\\\\n        left_depth = max_depth(node['left']) if node['left'] else 0\\\\n        right_depth = max_depth(node['right']) if node['right'] else 0\\\\n        return 1 + max(left_depth, right_depth)\\\\n\\\", \\\"tests\\\": [\\\"assert max_depth({'value': 'root', 'left': {'value': 'left1', 'left': None, 'right': {'value': 'left2'}}, 'right': None}) == 3\\\", \\\"assert max_depth({'value': 'root', 'left': {'value': 'left1'}, 'right': None}) == 2\\\", \\\"assert max_depth({'value': 'root', 'left': None, 'right': {'value': 'right'}}) == 2\\\"] }\""
}