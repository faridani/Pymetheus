"{'model': 'qwen2:7b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Advanced Word Ladder\\\\\", \\\\\"description\\\\\": \\\\\"Word ladder problem where you need to transform one word into another using a dictionary of valid words. You can change exactly one letter at a time, and each intermediate word must be in the dictionary. Write a function `word_ladder` that takes two strings representing the start word (`start`) and end word (`end`), as well as a list of valid words (`dictionary`). The function returns an integer representing the length of the shortest path from the start word to the end word, or -1 if no such path exists.\\\\\", \\\\\"code\\\\\": \\\\\"\\\\\\\\nfrom collections import deque\\\\\\\\n\\\\\\\\ndef word_ladder(start: str, end: str, dictionary: list)\\\\\\\\n    graph = build_graph(dictionary)\\\\\\\\n    queue = deque([(start, 0)])\\\\\\\\n    visited = set()\\\\\\\\n    visited.add(start)\\\\\\\\n    while queue:\\\\\\\\n        current_word, steps = queue.popleft()\\\\\\\\n        if current_word == end:\\\\\\\\n            return steps\\\\\\\\n        for i in range(len(current_word)):\\\\\\\\n            for c in string.ascii_lowercase:\\\\\\\\n                new_word = current_word[:i] + c + current_word[i+1:]\\\\\\\\n                if new_word != current_word and new_word in graph[current_word] and new_word not in visited:\\\\\\\\n                    queue.append((new_word, steps + 1))\\\\\\\\n                    visited.add(new_word)\\\\\\\\n    return -1\\\\\\\\n\\\\\\\\ndef build_graph(words):\\\\\\\\n    graph = {}\\\\\\\\n    for word in words:\\\\\\\\n        for i in range(len(word)):\\\\\\\\n            pattern = word[:i] + \\'*\\' + word[i+1:]\\\\\\\\n            if pattern not in graph:\\\\\\\\n                graph[pattern] = set()\\\\\\\\n            graph[pattern].add(word)\\\\\\\\n    return graph\\\\\\\\n\\\\\", \\\\\"tests\\\\\": [\\\\\"assert word_ladder(\\\\\\\\\\\\\"hit\\\\\\\\\\\\\", \\\\\\\\\\\\\"cog\\\\\\\\\\\\\", [\\\\\\\\\\\\\"hot\\\\\\\\\\\\\",\\\\\\\\\\\\\"dot\\\\\\\\\\\\\",\\\\\\\\\\\\\"dog\\\\\\\\\\\\\",\\\\\\\\\\\\\"lot\\\\\\\\\\\\\",\\\\\\\\\\\\\"log\\\\\\\\\\\\\"]) == 5\\\\\", \\\\\"assert word_ladder(\\\\\\\\\\\\\"apple\\\\\\\\\\\\\", \\\\\\\\\\\\\"orange\\\\\\\\\\\\\", [\\\\\\\\\\\\\"apple\\\\\\\\\\\\\", \\\\\\\\\\\\\"orange\\\\\\\\\\\\\"]) == -1\\\\\", \\\\\"assert word_ladder(\\\\\\\\\\\\\"a\\\\\\\\\\\\\", \\\\\\\\\\\\\"b\\\\\\\\\\\\\", [\\\\\\\\\\\\\"a\\\\\\\\\\\\\", \\\\\\\\\\\\\"b\\\\\\\\\\\\\", \\\\\\\\\\\\\"ab\\\\\\\\\\\\\"]) == 2\\\\\"] }\"'}"