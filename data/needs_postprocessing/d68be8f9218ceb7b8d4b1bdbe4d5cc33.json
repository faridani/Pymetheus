{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Easy: Number of Islands\\\", \\\"description\\\": \\\"Given an n x m grid, where each cell can have a value of either 0 (representing water) or 1 (representing land), write a function `count_islands` that returns the number of islands in the grid.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef count_islands(grid: list[list[int]]) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `grid` (list[list[int]]): A 2D list representing the n x m grid, where each cell's value is either 0 or 1.\\\\n\\\\n#### Output\\\\n- Returns the number of islands in the grid.\\\\n\\\", \\\"code\\\": \\\"def count_islands(grid: list[list[int]]) -> int:\\\\n    if not grid:\\\\n        return 0\\\\n    count = 0\\\\n    for i in range(len(grid)):\\\\n        for j in range(len(grid[0])):\\\\n            if grid[i][j] == 1:\\\\n                self._dfs(grid, i, j)\\\\n                count += 1\\\\n    return count\\\\n\\\\n    def _dfs(self, grid: list[list[int]], i: int, j: int):\\\\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == 0:\\\\n            return\\\\n        grid[i][j] = 0\\\\n        self._dfs(grid, i - 1, j)\\\\n        self._dfs(grid, i + 1, j)\\\\n        self._dfs(grid, i, j - 1)\\\\n        self._dfs(grid, i, j + 1)\\\", \\\"tests\\\": [\\\"assert count_islands([['0', '0'], ['1', '0']]) == 1\\\", \\\"assert count_islands([['1', '1', '1'], ['1', '1', '1'], ['1', '1', '1']]) == 1\\\", \\\"assert count_islands([['1', '0'], ['1', '0']]) == 2\\\", \\\"assert count_islands([]) == 0\\\"] }\""
}