"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"\\'Anagram Detector (Hard)\\'\\\\\", \\\\\"description\\\\\": \\\\\"An anagram is a word or phrase that consists of the same letters as another, but arranged differently. Write a function `is_anagram` that checks if two given strings are anagrams of each other.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef is_anagram(str1: str, str2: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `str1` (str): A non-empty string containing lowercase English letters only.\\\\\\\\n- `str2` (str): Another non-empty string containing lowercase English letters only.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def is_anagram(str1: str, str2: str) -> bool:\\\\\\\\n    # Ensure both strings have the same length\\\\\\\\n    if len(str1) != len(str2):\\\\\\\\n        return False\\\\\\\\n    # Count each letter in the first string and store in a dictionary\\\\\\\\n    count = {letter: 0 for letter in string.ascii_lowercase}\\\\\\\\n    for char in str1:\\\\\\\\n        count[char] += 1\\\\\\\\n    # Decrease the count of each letter in the second string by one and check if it becomes zero\\\\\\\\n    for char in str2:\\\\\\\\n        if char in count:\\\\\\\\n            count[char] -= 1\\\\\\\\n        else:\\\\\\\\n            return False\\\\\\\\n    # If all characters in the second string are accounted for and all counts are zero, the strings are anagrams\\\\\\\\n    return all(count.values()) == [0]\\\\\", \\\\\"tests\\\\\": [\\\\\"assert is_anagram(\\'listen\\', \\'silent\\') == True\\\\\", \\\\\"assert is_anagram(\\'act\\', \\'cat\\') == False\\\\\", \\\\\"assert is_anagram(\\'madam\\', \\'dam\\') == True\\\\\", \\\\\"assert is_anagram(\\'hello\\', \\'olleh\\') == True\\\\\"] }\"'}"