{
    "model": "command-r7b:latest",
    "response": "\"{ \\\"title\\\": \\\"Medium: Maximum Product Subarray\\\", \\\"description\\\": \\\"You are given an array of integers `nums`. Write a function `max_product_subarray` that returns the maximum product of any subarray within this array.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef max_product_subarray(nums: List[int]) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `nums`: A list of integers where each integer is a number in the range `[1, 10^5]`.\\\\n\\\\n#### Output\\\\n- The maximum product of any subarray within the given array.\\\\n\\\", \\\"code\\\": \\\"from typing import List\\\\r\\\\n\\\\r\\\\ndef max_product_subarray(nums: List[int]) -> int:\\\\r\\\\n    if not nums:\\\\r\\\\n        return 0\\\\r\\\\n\\\\r\\\\n    # Initialize variables to track the maximum and minimum product ending at the current position\\\\r\\\\n    max_ending_here = min_ending_here = result = nums[0]\\\\r\\\\n\\\\r\\\\n    for i in range(1, len(nums)):\\\\r\\\\n        if nums[i] < 0:\\\\r\\\\n            # Swap max_ending_here and min_ending_here when a negative number is encountered\\\\r\\\\n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\\\\r\\\\n        \\\\r\\\\n        # Update the maximum or minimum product ending at the current position\\\\r\\\\n        max_ending_here = max(nums[i], max_ending_here * nums[i])\\\\r\\\\n        min_ending_here = min(nums[i], min_ending_here * nums[i])\\\\r\\\\n        \\\\r\\\\n        # Update the overall result\\\\r\\\\n        result = max(result, max_ending_here)\\\\r\\\\n\\\\r\\\\n    return result\\\", \\\"tests\\\": [\\\"assert max_product_subarray([2, 3, -2, 4]) == 6\\\", \\\"assert max_product_subarray([-1, 0, 1, 2, -3, 4]) == 24\\\", \\\"assert max_product_subarray([1, 2, 3]) == 6\\\", \\\"assert max_product_subarray([-1, -2, -3, -4]) == -24\\\"] }\""
}