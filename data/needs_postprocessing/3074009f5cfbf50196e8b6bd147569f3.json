{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Maximum Island Size\\\", \\\"description\\\": \\\"You are given a 2D array of size `m x n` where each cell contains either `0` or `1`. A cell with value `1` represents a land cell. Your task is to write a function that finds the maximum size of an island (i.e., the largest connected group of `1`s) in the given grid.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef max_island_size(grid: list[list[int]]) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `grid` (list[list[int]]): A 2D array where each cell contains either `0` or `1`, representing a land or water cell.\\\\n\\\\n#### Output\\\\n- Returns the maximum size of an island in the given grid.\\\\n\\\", \\\"code\\\": \\\"from typing import List\\\\n\\\\ndef max_island_size(grid: List[List[int]]) -> int:\\\\n    if not grid:\\\\n        return 0\\\\n    m, n = len(grid), len(grid[0])\\\\n    visited = [[False for _ in range(n)] for _ in range(m)]\\\\n    def dfs(i, j):\\\\n        if i < 0 or i >= m or j < 0 or j >= n or visited[i][j] or grid[i][j] == 0:\\\\n            return 0\\\\n        visited[i][j] = True\\\\n        size = 1\\\\n        for x, y in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\\\\n            ni, nj = i + x, j + y\\\\n            size += dfs(ni, nj)\\\\n        return size\\\\n    max_size = 0\\\\n    for i in range(m):\\\\n        for j in range(n):\\\\n            if grid[i][j] == 1 and not visited[i][j]:\\\\n                max_size = max(max_size, dfs(i, j))\\\\n    return max_size\\\", \\\"tests\\\": [\\\"assert max_island_size([[0,0,1,0,0],[0,0,1,0,0],[0,0,1,0,0]]) == 4\\\", \\\"assert max_island_size([[0,0,1,0],[0,0,1,0],[0,0,1,0]]) == 3\\\", \\\"assert max_island_size([]) == 0\\\", \\\"assert max_island_size([[0,0,0]]) == 0\\\"] }\""
}