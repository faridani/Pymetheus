{
    "model": "llama3:latest",
    "response": "{\"title\": \"Hard: Tree Traversals\", \"description\": \"A tree traversals problem. You are given a binary tree with the following operations allowed: left, right, parent (the parent of a node), and value (the value stored at a node). The goal is to find all nodes that have exactly one child. Write a function `one_child_nodes` that returns a list of values of these nodes.\\n\\n#### Function Signature\\n```python\\ndef one_child_nodes(root: dict) -> list:\\n```\\n\\n#### Input\\n- `root` (dict): The root node of the binary tree, where each node is represented as a dictionary with keys 'left', 'right', and 'parent' representing the left child, right child, and parent of the node respectively. The value of a node is stored in key 'value'.\\n\\n#### Output\\n- A list of values of nodes that have exactly one child.\", \"code\": \"def one_child_nodes(root: dict) -> list:\\n    result = []\\n    def traverse(node, parent):\\n        if node == None:\\n            return\\n        if node['left'] and node['right']:\\n            traverse(node['left'], node)\\n            traverse(node['right'], node)\\n        elif node['left'] and not node['right']:\\n            result.append(node['value'])\\n            traverse(node['left'], node)\\n        elif not node['left'] and node['right']:\\n            result.append(node['value'])\\n            traverse(node['right'], node)\\n        else:\\n            return\\n    traverse(root, None)\\n    return result\", \"tests\": [\"assert one_child_nodes({\\\"value\\\": 1, \\\"left\\\": None, \\\"right\\\": {\\\"value\\\": 2, \\\"left\\\": None, \\\"right\\\": None}, \\\"parent\\\": None}) == [2]\", \"assert one_child_nodes({\\\"value\\\": 1, \\\"left\\\": None, \\\"right\\\": {\\\"value\\\": 2, \\\"left\\\": None, \\\"right\\\": None, \\\"parent\\\": None}, \\\"parent\\\": None}) == []\", \"assert one_child_nodes({\\\"value\\\": 1, \\\"left\\\": None, \\\"right\\\": {\\\"value\\\": 2, \\\"left\\\": None, \\\"right\\\": {\\\"value\\\": 3, \\\"left\\\": None, \\\"right\\\": None}, \\\"parent\\\": None}) == [3]\"]}"
}