{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Minimum Time to Meet in a Circle\\\", \\\"description\\\": \\\"In a circle of people, each person knows exactly two other people. We want to find the minimum time it takes for everyone to know each other.\\\\n\\\\nThe graph is represented as an adjacency list where the key is the index of the person and the value is a set of people that person knows.\\\\n\\\\nWrite a function `min_time` that returns the minimum time it takes for everyone to know each other.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef min_time(graph: dict) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `graph` (dict): A dictionary representing the graph where the key is the index of the person and the value is a set of people that person knows.\\\\n\\\\n#### Output\\\\n- Returns the minimum time it takes for everyone to know each other.\\\\n\\\", \\\"code\\\": \\\"import collections\\\\n\\\\ndef min_time(graph: dict) -> int:\\\\n    visited = set()\\\\n    queue = collections.deque()\\\\n\\\\n    for node in graph:\\\\n        if node not in visited:\\\\n            queue.append(node)\\\\n            visited.add(node)\\\\n\\\\n            time = 0\\\\n            while queue:\\\\n                level_size = len(queue)\\\\n                for _ in range(level_size):\\\\n                    current_node = queue.popleft()\\\\n                    for neighbor in graph[current_node]:\\\\n                        if neighbor not in visited:\\\\n                            visited.add(neighbor)\\\\n                            queue.append(neighbor)\\\\n                time += 1\\\\n\\\\n    return time\\\", \\\"tests\\\": [\\\"assert min_time({0: set([1]), 1: set([0, 2]), 2: set([1])}) == 3\\\", \\\"assert min_time({0: set([1, 2]), 1: set([0]), 2: set([0])}) == 2\\\"] }\""
}