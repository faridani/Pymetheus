"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard - Labyrinth Solver\\\\\", \\\\\"description\\\\\": \\\\\"You are given a 2D grid representing a labyrinth. Each cell in the grid can be either \\'.\\' (empty) or \\'#\\' (wall). You start at the top-left corner (\\'S\\') and your goal is to find the shortest path to the bottom-right corner (\\'E\\'). You can move up, down, left, or right one cell at a time.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef solve_labyrinth(grid: list[list[str]]) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `grid` (list[list[str]]): A 2D grid representing the labyrinth. The top-left corner will be \\'S\\' and the bottom-right corner will be \\'E\\'.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the length of the shortest path from \\'S\\' to \\'E\\', or -1 if no path exists.\\\\\", \\\\\"code\\\\\": \\\\\"from collections import deque\\\\\\\\n\\\\\\\\ndef solve_labyrinth(grid: list[list[str]]) -> int:\\\\\\\\n    rows = len(grid)\\\\\\\\n    cols = len(grid[0])\\\\\\\\n    start = (0, 0)\\\\\\\\n    end = (rows - 1, cols - 1)\\\\\\\\n\\\\\\\\n    queue = deque([(start, 0)])  # Queue to store (position, distance)\\\\\\\\n    visited = set([start])\\\\\\\\n\\\\\\\\n    while queue:\\\\\\\\n        (row, col), dist = queue.popleft()\\\\\\\\n        if (row, col) == end:\\\\\\\\n            return dist\\\\\\\\n\\\\\\\\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\\\\\\\\n            new_row = row + dr\\\\\\\\n            new_col = col + dc\\\\\\\\n            if 0 <= new_row < rows and 0 <= new_col < cols and grid[new_row][new_col] != \\'#\\' and (new_row, new_col) not in visited:\\\\\\\\n                queue.append(((new_row, new_col), dist + 1))\\\\\\\\n                visited.add((new_row, new_col))\\\\\\\\n\\\\\\\\n    return -1  # No path found\\\\\", \\\\\"tests\\\\\": [\\\\\"assert solve_labyrinth([[\\'S\\',\\'.\\',\\'.\\'],[\\'.\\',\\'.\\',\\'#\\'],[\\'E\\',\\'.\\',\\'.\\']]) == 4\\\\\", \\\\\"assert solve_labyrinth([[\\'S\\',\\'.\\',\\'.\\'],[\\'.#\\',\\'#\\'],[\\'E\\',\\'.\\',\\'.\\']]) == -1\\\\\"] }\"'}"