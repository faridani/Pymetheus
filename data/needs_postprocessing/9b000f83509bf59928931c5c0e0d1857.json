{
    "model": "codestral:22b",
    "response": "\"{ \\\"title\\\": \\\"Hard: Longest Common Subsequence\\\", \\\"description\\\": \\\"Given two sequences, find the length of their longest common subsequence. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Write a function `longest_common_subsequence` that computes the length of the longest common subsequence of two given sequences.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef longest_common_subsequence(seq1: List[int], seq2: List[int]) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `seq1` (List[int]): A list of integers representing the first sequence.\\\\n- `seq2` (List[int]): A list of integers representing the second sequence.\\\\n\\\\n#### Output\\\\n- Returns an integer representing the length of the longest common subsequence of the two input sequences.\\\\n\\\", \\\"code\\\": \\\"from typing import List\\\\n\\\\ndef longest_common_subsequence(seq1: List[int], seq2: List[int]) -> int:\\\\n    # Create a matrix to store lengths of longest common subsequences of substrings\\\\n    dp = [[0] * (len(seq2) + 1) for _ in range(len(seq1) + 1)]\\\\n\\\\n    # Fill the matrix using bottom-up approach\\\\n    for i in range(1, len(seq1) + 1):\\\\n        for j in range(1, len(seq2) + 1):\\\\n            if seq1[i - 1] == seq2[j - 1]:\\\\n                dp[i][j] = dp[i - 1][j - 1] + 1\\\\n            else:\\\\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\\\\n    \\\\n    # Return the length of longest common subsequence\\\\n    return dp[-1][-1]\\\\n\\\", \\\"tests\\\": [\\\"assert longest_common_subsequence([1, 2, 3, 4], [1, 3, 5]) == 2\\\", \\\"assert longest_common_subsequence([1, 2, 3, 4], [4, 3, 2, 1]) == 0\\\", \\\"assert longest_common_subsequence([1, 2, 3, 4], [1, 2, 3, 4]) == 4\\\"] }\""
}