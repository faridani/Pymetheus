"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: String Compression\\\\\", \\\\\"description\\\\\": \\\\\"#### Description\\\\\\\\nWrite a function `compress_string` that takes a string as input and returns the compressed version of the string. The compression algorithm should work as follows:\\\\\\\\n\\\\\\\\n1. **Count consecutive identical characters.** For example, in the string \\'aaabbccc\\', the character \\'a\\' appears three times consecutively.\\\\\\\\n2. **Replace the repetition with the character followed by the count.** In the above example, \\'aaa\\' would be replaced with \\'a3\\'.\\\\\\\\n3. **If a character appears only once, keep it as is.**\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef compress_string(s: str) -> str:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s` (str): A string consisting of lowercase letters.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the compressed version of the string.\\\\\", \\\\\"code\\\\\": \\\\\"def compress_string(s: str) -> str:\\\\\\\\n    if not s:\\\\\\\\n        return s\\\\\\\\n\\\\\\\\n    compressed = \\'\\'\\\\\\\\n    count = 1\\\\\\\\n    prev_char = s[0]\\\\\\\\n\\\\\\\\n    for i in range(1, len(s)):\\\\\\\\n        if s[i] == prev_char:\\\\\\\\n            count += 1\\\\\\\\n        else:\\\\\\\\n            compressed += prev_char + (str(count) if count > 1 else \\'\\')\\\\\\\\n            prev_char = s[i]\\\\\\\\n            count = 1\\\\\\\\n    compressed += prev_char + (str(count) if count > 1 else \\'\\')\\\\\\\\n    return compressed\\\\\", \\\\\"tests\\\\\": [\\\\\"\\'assert compress_string(\\'aaabbccc\\') == \\'a3b1c3\\'\\\\\", \\\\\"\\'assert compress_string(\\'aabbcc\\') == \\'a2b2c2\\'\\\\\", \\\\\"\\'assert compress_string(\\'abc\\') == \\'abc\\'\\\\\", \\\\\"\\'assert compress_string(\\'\\') == \\'\\'\\\\\", \\\\\"\\'assert compress_string(\\'aaaaaaaabbbbbbbcccc\\') == \\'a7b6c4\\'\\\\\"] }\"'}"