{
    "model": "llama3:latest",
    "response": "{\"title\": \"Hard: Maze Generation\", \"description\": \"A maze is a graph with no cycles where each node (or vertex) has degree 2. Write a function `generate_maze` that takes as input the number of rows and columns in the maze, and returns a 2D list representing the generated maze.\\n\\n#### Function Signature\\n```python\\ndef generate_maze(rows: int, cols: int) -> list:\\n```\\n\\n#### Input\\n- `rows` (int): The number of rows in the maze.\\n- `cols` (int): The number of columns in the maze.\\n\\n#### Output\\n- Returns a 2D list representing the generated maze, where each cell can be either a wall (`#`) or an open space (`.`).\", \"code\": \"import random\\ndef generate_maze(rows: int, cols: int) -> list:\\n    # Initialize the maze with all walls\\n    maze = [['#' for _ in range(cols)] for _ in range(rows)]\\n    \\n    # Start at a random cell and try to carve out a path\\n    start_row, start_col = random.randint(0, rows - 1), random.randint(0, cols - 1)\\n    stack = [(start_row, start_col)]\\n    maze[start_row][start_col] = '.'\\n    \\n    while stack:\\n        row, col = stack[-1]\\n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\\n        random.shuffle(directions)\\n        for dr, dc in directions:\\n            new_row, new_col = row + dr, col + dc\\n            if (0 <= new_row < rows and 0 <= new_col < cols and \\n                    maze[new_row][new_col] == '#'):\\n                maze[new_row][new_col] = '.'\\n                stack.append((new_row, new_col))\\n                break\\n        else:\\n            stack.pop()\\n    \\n    return maze\", \"tests\": [\"assert generate_maze(5, 5) == [['#' for _ in range(5)] for _ in range(5)],\", \"assert len(generate_maze(10, 10)) == 10,\", \"assert all(len(row) == 10 for row in generate_maze(10, 10)),\", \"assert any(cell == '.' for row in generate_maze(10, 10) for cell in row),\"]}"
}