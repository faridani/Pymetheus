"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Prime Factorization (Medium)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `prime_factors` that takes an integer as input and returns a list of its prime factors. If the input is 1 or a negative number, return an empty list.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef prime_factors(n: int) -> List[int]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `n` (int): A non-negative integer.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of the prime numbers that divide the input number.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def prime_factors(n: int) -> List[int]:\\\\\\\\n    if n <= 1:\\\\\\\\n        return []\\\\\\\\n    factors = []\\\\\\\\n    i = 2\\\\\\\\n    while i * i <= n:\\\\\\\\n        if n % i == 0:\\\\\\\\n            factors.append(i)\\\\\\\\n            n //= i\\\\\\\\n        i += 1\\\\\\\\n    if n > 1:\\\\\\\\n        factors.append(n)\\\\\\\\n    return factors\\\\\", \\\\\"tests\\\\\": [\\\\\"assert prime_factors(12) == [2, 2, 3]\\\\\", \\\\\"assert prime_factors(17) == [17]\\\\\", \\\\\"assert prime_factors(48) == [2, 2, 2, 2, 3, 7]\\\\\", \\\\\"assert prime_factors(1024) == [2, 2, 2, 2, 31, 31]\\\\\", \\\\\"assert prime_factors(9) == []\\\\\", \\\\\"assert prime_factors(-5) == []\\\\\"] }\"'}"