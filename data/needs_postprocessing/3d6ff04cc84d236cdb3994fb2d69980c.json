{
    "model": "llama3:latest",
    "response": "{\"title\": \"Hard: Maximum Sum Increasing Subsequence\", \"description\": \"#### Problem Statement\\nGiven a list of integers, find the maximum sum of a subsequence that is strictly increasing. In other words, for each pair of adjacent elements in the subsequence, their values must be different.\\n\\n#### Function Signature\\n```python\\ndef max_sum_increasing_subsequence(nums: list[int)) -> int:\\n```\\n\\n#### Input\\n- `nums` (list[int]): A list of integers, where all elements are distinct.\\n\\n#### Output\\n- Returns the maximum sum of a strictly increasing subsequence.\", \"code\": \"def max_sum_increasing_subsequence(nums: list[int)) -> int:\\n    n = len(nums)\\n    dp = [0] * (n + 1)\\n    for i in range(n):\\n        for j in range(i, -1, -1):\\n            if nums[i] > nums[j]:\\n                dp[i + 1] = max(dp[i + 1], dp[j] + nums[i])\\n    return max(dp)\", \"tests\": [\"assert max_sum_increasing_subsequence([10, 20, 30, 40, 50]) == 150\", \"assert max_sum_increasing_subsequence([-5, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == 7\", \"assert max_sum_increasing_subsequence([10, 20, 30, 40, 50, 100]) == 150\", \"assert max_sum_increasing_subsequence([]) == 0\"]}"
}