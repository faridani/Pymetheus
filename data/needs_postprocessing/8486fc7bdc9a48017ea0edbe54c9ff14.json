{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Hard: Maximum Area of Island\\\", \\\"description\\\": \\\"Given a binary grid, find the maximum area of an island that can be formed by connecting any number of adjacent cells. For example, given the following 3x3 binary grid:\\\\n\\\\n```\\\\n0 1 0\\\\n1 1 0\\\\n0 0 1\\\\n````\\\\n\\\\nThe maximum area of an island is 4 because you can form a square with side length 2 by connecting the top-left, bottom-right, and two middle cells.\\\\n\\\\n#### Function Signature\\\\n```\\\\ndef max_island_area(grid: List[List[int]]) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `grid` (List[List[int]]): A binary grid where 0 represents an empty cell and 1 represents a cell that can be part of the island.\\\\n\\\\n#### Output\\\\n- Returns the maximum area of an island that can be formed by connecting any number of adjacent cells.\\\\n\\\", \\\"code\\\": \\\"from typing import List\\\\n\\\\ndef max_island_area(grid: List[List[int]]) -> int:\\\\n    if not grid or not grid[0]:\\\\n        return 0\\\\n\\\\n    max_area = 0\\\\n    for i in range(len(grid)):\\\\n        for j in range(len(grid[0])):\\\\n            if grid[i][j] == 1:\\\\n                area = dfs(i, j, grid)\\\\n                max_area = max(max_area, area)\\\\n\\\\n    return max_area\\\\n\\\\ndef dfs(i: int, j: int, grid: List[List[int]]) -> int:\\\\n    if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == 0:\\\\n        return 0\\\\n    grid[i][j] = 0\\\\n    area = 1\\\\n    for x, y in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\\\\n        ni, nj = i + x, j + y\\\\n        if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj] == 1:\\\\n            area += dfs(ni, nj, grid)\\\\n    return area\\\", \\\"tests\\\": [\\\"assert max_island_area([[0, 1, 0], [1, 1, 0], [0, 0, 1]]) == 4\\\", \\\"assert max_island_area([[0, 0, 0], [0, 1, 0], [0, 0, 0]]) == 1\\\", \\\"assert max_island_area([[0, 1, 1], [0, 0, 0], [0, 1, 0]]) == 2\\\"] }\""
}