"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Binary Tree Maximum Path Sum\\\\\", \\\\\"description\\\\\": \\\\\"Given a binary tree, find the maximum path sum. The path may start and end at any node in the tree. For example, given the following binary tree:\\\\\\\\n\\\\\\\\n```\\\\\\\\n      10\\\\\\\\n     /  \\\\\\\\\\\\\\\\\\\\\\\\n    2   10\\\\\\\\n   / \\\\\\\\\\\\\\\\     \\\\\\\\\\\\\\\\\\\\\\\\n  20  1    -25\\\\\\\\n        / \\\\\\\\\\\\\\\\\\\\\\\\n       3   4\\\\\\\\n```\\\\\\\\n\\\\\\\\nThe maximum path sum is 42 (20 -> 2 -> 10 -> 10).\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef max_path_sum(root) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `root` (TreeNode): The root of the binary tree. TreeNode has attributes `val`, `left` and `right` representing its value, left child and right child respectively.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the maximum path sum in the binary tree.\\\\\\\\n\\\\\\\\n\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"class TreeNode:\\\\\\\\n    def __init__(self, val=0, left=None, right=None):\\\\\\\\n        self.val = val\\\\\\\\n        self.left = left\\\\\\\\n        self.right = right\\\\\\\\n\\\\\\\\ndef max_path_sum(root) -> int:\\\\\\\\n    max_sum = float(\\'-inf\\')\\\\\\\\n\\\\\\\\n    def dfs(node):\\\\\\\\n        nonlocal max_sum\\\\\\\\n        if not node:\\\\\\\\n            return 0\\\\\\\\n\\\\\\\\n        left_gain = max(dfs(node.left), 0)\\\\\\\\n        right_gain = max(dfs(node.right), 0)\\\\\\\\n\\\\\\\\n        price_newpath = node.val + left_gain + right_gain\\\\\\\\n        max_sum = max(max_sum, price_newpath)\\\\\\\\n\\\\\\\\n        return node.val + max(left_gain, right_gain)\\\\\\\\n\\\\\\\\n    dfs(root)\\\\\\\\n    return max_sum\\\\\\\\n\\\\\", \\\\\"tests\\\\\": [\\\\\"root = TreeNode(10, TreeNode(2, TreeNode(20), TreeNode(1)), TreeNode(10, None, TreeNode(-25, TreeNode(3), TreeNode(4))))\\\\\\\\nassert max_path_sum(root) == 42\\\\\", \\\\\"root = TreeNode(1)\\\\\\\\nassert max_path_sum(root) == 1\\\\\", \\\\\"root = TreeNode(-3)\\\\\\\\nassert max_path_sum(root) == -3\\\\\"] }\"'}"