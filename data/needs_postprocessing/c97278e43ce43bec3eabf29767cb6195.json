"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Knights Tour\\\\\", \\\\\"description\\\\\": \\\\\"A knight\\'s tour is a sequence of moves by a knight on a chessboard such that the knight visits every square exactly once.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef knights_tour(n: int) -> list:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `n` (int): The dimension of the chessboard (nxn).\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list representing a valid knight\\'s tour on the nxn chessboard. Each element in the list is a tuple representing the (row, column) coordinates of a square visited by the knight. Return an empty list if no valid tour exists.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def knights_tour(n: int) -> list:\\\\\\\\n    def is_valid(x, y):\\\\\\\\n        return 0 <= x < n and 0 <= y < n\\\\\\\\n    \\\\\\\\n    def solve_util(board, x, y, move_count):\\\\\\\\n        if move_count == n * n:\\\\\\\\n            return True\\\\\\\\n\\\\\\\\n        moves = [(2, 1), (1, 2), (-1, 2), (-2, 1),\\\\\\\\n                 (-2, -1), (-1, -2), (1, -2), (2, -1)]\\\\\\\\n\\\\\\\\n        for dx, dy in moves:\\\\\\\\n            nx = x + dx\\\\\\\\n            ny = y + dy\\\\\\\\n\\\\\\\\n            if is_valid(nx, ny) and board[nx][ny] == -1:\\\\\\\\n                board[nx][ny] = move_count\\\\\\\\n                if solve_util(board, nx, ny, move_count + 1):\\\\\\\\n                    return True\\\\\\\\n                board[nx][ny] = -1  # Backtrack\\\\\\\\n        return False\\\\\\\\n    \\\\\\\\n    board = [[-1 for _ in range(n)] for _ in range(n)]\\\\\\\\n    board[0][0] = 0\\\\\\\\n    if solve_util(board, 0, 0, 1):\\\\\\\\n        tour = []\\\\\\\\n        for i in range(n):\\\\\\\\n            for j in range(n):\\\\\\\\n                if board[i][j] != -1:\\\\\\\\n                    tour.append((i, j))\\\\\\\\n        return tour\\\\\\\\n    else:\\\\\\\\n        return []\\\\\", \\\\\"tests\\\\\": [\\\\\"assert knights_tour(8) == [(0, 0), (2, 1), (4, 3), (6, 2), (5, 0), (7, 1), (5, 3), (3, 2), (1, 3), (3, 5), (5, 6), (7, 7), (6, 5), (4, 6), (2, 7), (0, 6), (1, 4), (3, 1), (5, 2), (7, 3), (6, 1), (4, 2), (2, 3), (0, 4)] or knights_tour(8) == [(0, 0), (1, 2), (3, 3), (5, 2), (7, 1), (6, 3), (4, 4), (2, 5), (0, 6), (2, 7), (4, 6), (6, 5), (7, 3), (5, 4), (3, 5), (1, 6), (0, 2), (2, 1), (4, 0)]\\\\\", \\\\\"assert knights_tour(5) != []\\\\\"] }\"'}"