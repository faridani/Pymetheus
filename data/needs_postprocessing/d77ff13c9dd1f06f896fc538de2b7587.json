"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard - Integer Partitioning\\\\\", \\\\\"description\\\\\": \\\\\"Given a positive integer *n*, find all possible ways to partition it into a sum of positive integers. The order of the integers in a partition does not matter.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef partition(n: int) -> list[list[int]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `n` (int): A positive integer.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of lists, where each inner list represents a valid partition of *n*. For example, if *n* = 4, the output should be: [[1, 1, 1, 1], [1, 1, 2], [1, 3], [2, 2], [4]].\\\\\", \\\\\"code\\\\\": \\\\\"def partition(n: int) -> list[list[int]]:\\\\\\\\n    result = []\\\\\\\\n    def backtrack(remaining: int, current_partition: list[int]):\\\\\\\\n        if remaining == 0:\\\\\\\\n            result.append(current_partition.copy())\\\\\\\\n            return\\\\\\\\n        if remaining < 0:\\\\\\\\n            return\\\\\\\\n        for i in range(1, remaining + 1):\\\\\\\\n            current_partition.append(i)\\\\\\\\n            backtrack(remaining - i, current_partition)\\\\\\\\n            current_partition.pop()\\\\\\\\n    backtrack(n, [])\\\\\\\\n    return result\\\\\", \\\\\"tests\\\\\": [\\\\\"assert partition(4) == [[1, 1, 1, 1], [1, 1, 2], [1, 3], [2, 2], [4]]\\\\\", \\\\\"assert partition(5) == [[1, 1, 1, 1, 1], [1, 1, 1, 2], [1, 1, 3], [1, 2, 2], [1, 4], [2, 3], [5]]\\\\\"] }\"'}"