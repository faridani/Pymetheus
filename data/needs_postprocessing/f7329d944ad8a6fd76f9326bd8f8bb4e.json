{
    "model": "llama3:latest",
    "response": "{\"title\": \"Easy: Counting Inversions\", \"description\": \"#### Problem Description\\nAn inversion occurs when an element in the left half of an array is greater than an element in the right half. Write a function `count_inversions` that counts the number of inversions in a given array.\\n\\n#### Function Signature\\n```python\\ndef count_inversions(arr: list[int]) -> int:\\n```\\n\\n#### Input\\n- `arr` (list[int]): A list of integers.\\n\\n#### Output\\n- Returns an integer representing the number of inversions in the input array.\", \"code\": \"def count_inversions(arr: list[int]) -> int:\\n    n = len(arr)\\n    if n <= 1:\\n        return 0\\n    else:\\n        mid = n // 2\\n        left_half = arr[:mid]\\n        right_half = arr[mid:]\\n        left_count = count_inversions(left_half)\\n        right_count = count_inversions(right_half)\\n        cross_count = merge_and_count_inversions(left_half, right_half)\\n        return left_count + right_count + cross_count\\n\\ndef merge_and_count_inversions(left_half: list[int], right_half: list[int]) -> int:\\n    inversions = 0\\n    merged_arr = [\\n        for x in (left_half if i < len(left_half) else [None]) for i, y in enumerate(right_half)\\n        if left_half is None or y >= left_half[i]\\n        else:\\n            inversions += len(left_half)\\n            right_half.insert(0, left_half.pop(0))\\n    ] + [i for i in (left_half + right_half) if i is not None]\\n    return inversions\", \"tests\": [\"assert count_inversions([2, 1]) == 1\", \"assert count_inversions([3, 1, 2]) == 2\", \"assert count_inversions([1, 3, 2, 4, 5]) == 5\", \"assert count_inversions([]) == 0\"]}"
}