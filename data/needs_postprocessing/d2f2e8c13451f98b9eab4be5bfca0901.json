"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard - Optimal String Partitioning\\\\\", \\\\\"description\\\\\": \\\\\"Given a string `s` and an integer `k`, partition the string into at most `k` substrings such that the sum of the squares of the lengths of the substrings is minimized. Return this minimum sum.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef min_partition_sum(s: str, k: int) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s` (str): The input string to be partitioned.\\\\\\\\n- `k` (int): The maximum number of substrings allowed in the partition.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the minimum sum of squared substring lengths after partitioning.\\\\\", \\\\\"code\\\\\": \\\\\"def min_partition_sum(s: str, k: int) -> int:\\\\\\\\n    n = len(s)\\\\\\\\n    dp = [[float(\\'inf\\')] * (k + 1) for _ in range(n + 1)]\\\\\\\\n    dp[0][0] = 0\\\\\\\\n\\\\\\\\n    for i in range(1, n + 1):\\\\\\\\n        for j in range(1, min(i, k) + 1):\\\\\\\\n            for p in range(i):\\\\\\\\n                dp[i][j] = min(dp[i][j], dp[p][j - 1] + (i - p)**2)\\\\\\\\n\\\\\\\\n    return dp[n][k]\\\\\\\\n\\\\\", \\\\\"tests\\\\\": [\\\\\"assert min_partition_sum(\\\\\\\\\\\\\"abcde\\\\\\\\\\\\\", 2) == 9\\\\\", \\\\\"assert min_partition_sum(\\\\\\\\\\\\\"aabbccdd\\\\\\\\\\\\\", 3) == 16\\\\\", \\\\\"assert min_partition_sum(\\\\\\\\\\\\\"abcdefghij\\\\\\\\\\\\\", 4) == 25\\\\\"] }\"'}"