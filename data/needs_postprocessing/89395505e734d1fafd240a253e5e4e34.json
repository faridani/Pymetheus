"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Finder (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_anagrams(words: List[str]) -> Dict[str, List[str]]` that finds all anagrams of the given list of words. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of strings containing words that may have multiple anagrams.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a dictionary where each key is an anagram and the value is a list of all the words in the input that form that anagram.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from collections import Counter, defaultdict\\\\\\\\n\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n    # Create a dictionary where each key is a word and the value is its count in the input list\\\\\\\\n    word_count = defaultdict(int)\\\\\\\\n    for word in words:\\\\\\\\n        word_count[word] += 1\\\\\\\\n    \\\\\\\\n    # Create an empty dictionary to store the anagrams\\\\\\\\n    anagrams = {}\\\\\\\\n    \\\\\\\\n    # Iterate through each possible sorted combination of letters\\\\\\\\n    for sorted_letters in sorted(set(\\'\\'.join(words)), key=str):\\\\\\\\n        # Count the current sorted letters\\\\\\\\n        letter_count = Counter(sorted_letters)\\\\\\\\n        \\\\\\\\n        # Check if the current sorted letters can form a real word\\\\\\\\n        if all(letter_count[letter] <= word_count[letter] for letter in sorted_letters):\\\\\\\\n            # If it can, add the current sorted letters as a key and the list of words that form this anagram as value to the anagrams dictionary\\\\\\\\n            anagrams[sorted_letters] = [word for word in words if \\'\\'.join(sorted(word)) == sorted_letters]\\\\\\\\n    \\\\\\\\n    # Return the anagrams dictionary\\\\\\\\n    return anagrams\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\'cat\\', \\'act\\', \\'tac\\', \\'atc\\']) == {\\'cat\\': [\\'cat\\'], \\'act\\': [\\'act\\', \\'tac\\'], \\'tac\\': [\\'tac\\', \\'atc\\']}\\\\\", \\\\\"assert find_anagrams([\\'listen\\', \\'silent\\', \\'enlist\\']) == {\\'enlist\\': [\\'enlist\\'], \\'silent\\': [\\'silent\\'], \\'listen\\': [\\'listen\\']}\\\\\", \\\\\"assert find_anagrams([\\'python\\', \\'typhon\\', \\'hotyp\\']) == {\\'hotyp\\': [\\'hotyp\\'], \\'typhon\\': [\\'typhon\\'], \\'python\\': [\\'python\\']}\\\\\", \\\\\"assert find_anagrams([\\'hello\\', \\'olleh\\']) == {\\'olleh\\': [\\'olleh\\'], \\'hello\\': [\\'hello\\']}\\\\\"] }\"'}"