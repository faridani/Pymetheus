{
    "model": "codegemma:7b",
    "response": "{\"title\": \"Medium: Balanced Brackets\", \"description\": \"Given a string containing only the characters '(', ')', '{', '}', '[', and ']', determine if the string has balanced brackets. A string is balanced if each opening bracket is properly closed with the corresponding closing bracket in the correct order.\\n\\n#### Function Signature\\n\\n```python\\ndef is_balanced(s: str) -> bool:\\n```\\n\\n#### Input\\n\\n- `s` (str): A string containing only the characters '(', ')', '{', '}', '[', and ']'\\n\\n#### Output\\n\\n- Returns `True` if the string has balanced brackets, `False` otherwise.\\n\\n#### Constraints\\n\\n- The length of the string is between 1 and 1000 characters.\\n\\n#### Hints\\n\\n- Use a stack to keep track of opening brackets.\\n- Iterate through the string, checking for opening and closing brackets.\\n- If an opening bracket is encountered, push it onto the stack.\\n- If a closing bracket is encountered, check if the stack is empty or if the top of the stack matches the corresponding opening bracket. If either condition fails, the string is not balanced.\\n- After iterating through the entire string, the stack should be empty if the string is balanced.\", \"code\": \"def is_balanced(s: str) -> bool:\\n    stack = []\\n    brackets = {'(': ')', '{': '}', '[': ']'}\\n    for char in s:\\n        if char in brackets.keys():\\n            stack.append(char)\\n        elif char in brackets.values():\\n            if not stack or char != brackets[stack.pop()]:\\n                return False\\n    return not stack\", \"tests\": [\"assert is_balanced('{[()]}') == True\", \"assert is_balanced('{[()]})') == False\", \"assert is_balanced('[{()]') == False\", \"assert is_balanced('(([]{}))') == True\", \"assert is_balanced('[(\"], \") == False\": \"\"}"
}