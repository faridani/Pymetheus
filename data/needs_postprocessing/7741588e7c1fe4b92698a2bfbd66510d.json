"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Binary Tree Path Sum\\\\\", \\\\\"description\\\\\": \\\\\"Given a binary tree where each node contains an integer value, and a target sum, determine if there exists a path from the root to any leaf node that sums up to the given target.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef has_path_sum(root: Optional[TreeNode], target_sum: int) -> bool:\\\\\\\\n```\\\\\\\\nWhere `TreeNode` is defined as follows:\\\\\\\\n\\\\\\\\n```python\\\\\\\\nclass TreeNode:\\\\\\\\n    def __init__(self, val=0, left=None, right=None):\\\\\\\\n        self.val = val\\\\\\\\n        self.left = left\\\\\\\\n        self.right = right\\\\\\\\n```\\\\\\\\n#### Input\\\\\\\\n- `root` (Optional[TreeNode]): The root node of the binary tree.\\\\\\\\n- `target_sum` (int): The target sum to check for.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if there is a path from the root to any leaf node that sums up to the given target sum, `False` otherwise.\\\\\", \\\\\"code\\\\\": \\\\\"class TreeNode:\\\\\\\\n    def __init__(self, val=0, left=None, right=None):\\\\\\\\n        self.val = val\\\\\\\\n        self.left = left\\\\\\\\n        self.right = right\\\\\\\\n\\\\\\\\ndef has_path_sum(root: Optional[TreeNode], target_sum: int) -> bool:\\\\\\\\n    if not root:\\\\\\\\n        return False\\\\\\\\n\\\\\\\\n    target_sum -= root.val\\\\\\\\n\\\\\\\\n    # If it\\'s a leaf node and the sum is zero, we found a path\\\\\\\\n    if not root.left and not root.right:\\\\\\\\n        return target_sum == 0\\\\\\\\n\\\\\\\\n    # Recursively check left and right subtrees\\\\\\\\n    return has_path_sum(root.left, target_sum) or has_path_sum(root.right, target_sum)\\\\\", \\\\\"tests\\\\\": [\\\\\"\\'test_tree = TreeNode(5, TreeNode(4, TreeNode(11, TreeNode(7), TreeNode(2)), None),\\\\\\\\nTreeNode(8, TreeNode(13), TreeNode(4, None, TreeNode(1))))\\\\\\\\nassert has_path_sum(test_tree, 22) == True\\'\\\\\", \\\\\"\\'test_tree = TreeNode(1, TreeNode(2, TreeNode(3)), None)\\\\\\\\nassert has_path_sum(test_tree, 5) == False\\'\\\\\", \\\\\"\\'test_tree = TreeNode(1, TreeNode(2), TreeNode(3))\\\\\\\\nassert has_path_sum(test_tree, 6) == True\\'\\\\\"] }\"'}"