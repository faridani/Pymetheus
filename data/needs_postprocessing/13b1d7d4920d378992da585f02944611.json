"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Medium: Word Ladder\\\\\", \\\\\"description\\\\\": \\\\\"Given two words, `beginWord` and `endWord`, and a dictionary of valid words (`wordList`), find the length of the shortest transformation sequence from `beginWord` to `endWord`. Each transformation must consist of changing exactly one letter at a time while still maintaining a valid word in the `wordList`. If no transformation sequence exists, return 0.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef ladderLength(beginWord: str, endWord: str, wordList: list[str]) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `beginWord` (str): The starting word.\\\\\\\\n- `endWord` (str): The target word.\\\\\\\\n- `wordList` (list[str]): A list of valid words.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the length of the shortest transformation sequence, or 0 if no sequence exists.\\\\\", \\\\\"code\\\\\": \\\\\"from collections import deque\\\\\\\\ndef ladderLength(beginWord: str, endWord: str, wordList: list[str]) -> int:\\\\\\\\n    if endWord not in wordList:\\\\\\\\n        return 0\\\\\\\\n\\\\\\\\n    wordList = set(wordList)\\\\\\\\n    queue = deque([(beginWord, 1)])  # Store (word, length) pairs\\\\\\\\n\\\\\\\\n    while queue:\\\\\\\\n        current_word, level = queue.popleft()\\\\\\\\n        if current_word == endWord:\\\\\\\\n            return level\\\\\\\\n        for i in range(len(current_word)):\\\\\\\\n            for char in \\'abcdefghijklmnopqrstuvwxyz\\':\\\\\\\\n                new_word = current_word[:i] + char + current_word[i+1:]\\\\\\\\n                if new_word in wordList:\\\\\\\\n                    wordList.remove(new_word)\\\\\\\\n                    queue.append((new_word, level + 1))\\\\\\\\n    return 0\\\\\", \\\\\"tests\\\\\": [\\\\\"assert ladderLength(\\\\\\\\\\\\\"hit\\\\\\\\\\\\\",\\\\\\\\\\\\\"cog\\\\\\\\\\\\\",[\\\\\\\\\\\\\"hot\\\\\\\\\\\\\",\\\\\\\\\\\\\"dot\\\\\\\\\\\\\",\\\\\\\\\\\\\"dog\\\\\\\\\\\\\",\\\\\\\\\\\\\"lot\\\\\\\\\\\\\",\\\\\\\\\\\\\"log\\\\\\\\\\\\\",\\\\\\\\\\\\\"cog\\\\\\\\\\\\\"]) == 5\\\\\", \\\\\"assert ladderLength(\\\\\\\\\\\\\"hit\\\\\\\\\\\\\",\\\\\\\\\\\\\"cog\\\\\\\\\\\\\",[\\\\\\\\\\\\\"hot\\\\\\\\\\\\\",\\\\\\\\\\\\\"dot\\\\\\\\\\\\\",\\\\\\\\\\\\\"dog\\\\\\\\\\\\\",\\\\\\\\\\\\\"lot\\\\\\\\\\\\\",\\\\\\\\\\\\\"log\\\\\\\\\\\\\"]) == 0\\\\\"] }\"'}"