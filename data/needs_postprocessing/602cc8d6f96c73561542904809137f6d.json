"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Finder (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_anagrams` that finds all the anagrams of a given string within a list of strings.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(word: str, words: List[str]) -> List[str]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `word` (str): The word to find anagrams for.\\\\\\\\n- `words` (List[str]): A list of strings that may contain anagrams of the given word.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of all the anagrams found in the input list.\\\\\\\\n\\\\\\\\n#### Constraints\\\\\\\\n- The function should be case insensitive.\\\\\\\\n- Characters other than letters and spaces are ignored when checking for anagrams.\\\\\\\\n- Spaces within words do not affect whether they are considered anagrams.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"import collections\\\\\\\\ndef find_anagrams(word: str, words: List[str]) -> List[str]:\\\\\\\\n    # Convert the given word to a sorted list of its characters (ignoring case)\\\\\\\\n    word_sorted = sorted(list(word.lower()))\\\\\\\\n    \\\\\\\\n    # Initialize an empty dictionary to count the frequency of each character in the given word\\\\\\\\n    freq = collections.Counter(word_sorted)\\\\\\\\n    \\\\\\\\n    # Initialize an empty list to store the found anagrams\\\\\\\\n    anagrams = []\\\\\\\\n    \\\\\\\\n    # Iterate over all the words in the input list\\\\\\\\n    for w in words:\\\\\\\\n        # Convert the current word to a sorted list of its characters (ignoring case)\\\\\\\\n        w_sorted = sorted(list(w.lower()))\\\\\\\\n        \\\\\\\\n        # If the length of the current word is not equal to the length of the given word, skip it\\\\\\\\n        if len(w) != len(word):\\\\\\\\n            continue\\\\\\\\n        \\\\\\\\n        # If the frequency of each character in the current word does not match the frequency of the corresponding character in the given word, skip it\\\\\\\\n        if collections.Counter(w_sorted) != freq:\\\\\\\\n            continue\\\\\\\\n        \\\\\\\\n        # If the current word is not already in the list of found anagrams, add it\\\\\\\\n        if w not in anagrams:\\\\\\\\n            anagrams.append(w)\\\\\\\\n    \\\\\\\\n    # Return the list of found anagrams\\\\\\\\n    return anagrams\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams(\\'listen\\', [\\'enlistment\\', \\'silent\\', \\'enlisted\\']) == [\\'silent\\', \\'enlisted\\']\\\\\", \\\\\"assert find_anagrams(\\'python\\', [\\'trypython\\', \\'typhon\\', \\'pythons\\']) == [\\'typhon\\', \\'pythons\\']\\\\\", \\\\\"assert find_anagrams(\\'hello\\', [\\'world\\', \\'hollo\\', \\'olleh\\']) == [\\'hollo\\', \\'olleh\\']\\\\\", \\\\\"assert find_anagrams(\\'example\\', [\\'gnepxe\\', \\'mpeagex\\', \\'expaime\\']) == [\\'gnepxe\\', \\'mpeagex\\', \\'expaime\\']\\\\\"] }\"'}"