"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Binary Tree Path Sum\\\\\", \\\\\"description\\\\\": \\\\\"Given a binary tree and a target sum, determine if there exists a path from the root to any leaf node where the sum of node values along the path equals the target sum. \\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef has_path_sum(root, target_sum):\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `root` (TreeNode): The root of the binary tree.\\\\\\\\n- `target_sum` (int): The desired target sum.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if a path with the target sum exists, `False` otherwise.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"class TreeNode:\\\\\\\\n    def __init__(self, val=0, left=None, right=None):\\\\\\\\n        self.val = val\\\\\\\\n        self.left = left\\\\\\\\n        self.right = right\\\\\\\\n\\\\\\\\ndef has_path_sum(root, target_sum):\\\\\\\\n    if not root:\\\\\\\\n        return False\\\\\\\\n    if not root.left and not root.right:\\\\\\\\n        return root.val == target_sum\\\\\\\\n    return has_path_sum(root.left, target_sum - root.val) or has_path_sum(root.right, target_sum - root.val)\\\\\\\\n\\\\\", \\\\\"tests\\\\\": [\\\\\"tree = TreeNode(5, TreeNode(4, TreeNode(11, TreeNode(7), TreeNode(2))), TreeNode(8, TreeNode(13), TreeNode(4, TreeNode(1))))\\\\\\\\nassert has_path_sum(tree, 22) == True\\\\\", \\\\\"tree = TreeNode(1)\\\\\\\\nassert has_path_sum(tree, 1) == True\\\\\", \\\\\"tree = TreeNode(1, TreeNode(2))\\\\\\\\nassert has_path_sum(tree, 3) == True\\\\\"] }\"'}"