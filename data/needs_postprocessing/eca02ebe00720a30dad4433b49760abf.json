{
    "model": "llama3:latest",
    "response": "{\"title\": \"Hard: Maximum Sum of a Subarray Without Adjacent Elements\", \"description\": \"Given an array `arr` of integers, find the maximum sum of a subarray without adjacent elements. A subarray is defined as a contiguous sequence of elements within the array.\\n\\n#### Function Signature\\n```\\ndef max_sum_no_adjacent(arr: list[int)) -> int:\\n```\\n\\n#### Input\\n- `arr` (list[int)): An integer array with non-negative values.\\n\\n#### Output\\n- Returns the maximum sum of a subarray without adjacent elements.\", \"code\": \"def max_sum_no_adjacent(arr: list[int)) -> int:\\n    if len(arr) <= 2:\\n        return max(0, max(arr))\\n    prev = arr[0]\\n    curr = max(arr[1], arr[0])\\n    max_sum = curr\\n    for i in range(2, len(arr)):\\n        prev, curr = curr, max(curr, prev + arr[i])\\n        max_sum = max(max_sum, curr)\\n    return max_sum\", \"tests\": [\"assert max_sum_no_adjacent([1, 3, 5, 7, 9]) == 18\", \"assert max_sum_no_adjacent([4, 2, 6, 8, 10, 20]) == 26\", \"assert max_sum_no_adjacent([-1, -2, 0, 1, 1]) == 3\", \"assert max_sum_no_adjacent([]) == 0\"]}"
}