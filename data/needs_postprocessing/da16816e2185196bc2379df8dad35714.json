{
    "model": "llama3:latest",
    "response": "{\"title\": \"Minimum Window Substring\", \"description\": \"Given two strings, `s` and `t`, find the minimum window substring in `s` that contains all characters in `t`. If no such window exists, return an empty string.\\n\\n#### Function Signature\\n```python\\ndef min_window_substring(s: str, t: str) -> str:\\n```\\n\\n#### Input\\n- `s` (str): The source string.\\n- `t` (str): The target string.\\n\\n#### Output\\n- Returns the minimum window substring in `s` that contains all characters in `t`, or an empty string if no such window exists.\", \"code\": \"from collections import defaultdict\\n\\ndef min_window_substring(s: str, t: str) -> str:\\n    if not t:\\n        return \\\"\\\"\\n    t_count = defaultdict(int)\\n    for char in t:\\n        t_count[char] += 1\\n    required_chars = len(t_count)\\n    left, right = 0, 0\\n    min_window_length = float('inf')\\n    min_window_start = 0\\n    while right < len(s):\\n        if s[right] in t_count:\\n            t_count[s[right]] -= 1\\n            if all(count == 0 for count in t_count.values()):\\n                required_chars -= 1\\n        while left <= right and required_chars == 0:\\n            if right - left + 1 < min_window_length:\\n                min_window_length = right - left + 1\\n                min_window_start = left\\n            if s[left] in t_count:\\n                t_count[s[left]] += 1\\n                if all(count > 0 for count in t_count.values()):\\n                    required_chars += 1\\n            left += 1\\n    return \\\"\\\" if min_window_length == float('inf') else s[min_window_start:min_window_start + min_window_length]\", \"tests\": [\"assert min_window_substring(\\\"a\\\" * 10, \\\"a\\\") == \\\"a\\\" * 2\", \"assert min_window_substring(\\\"ABCD\\\" * 3, \\\"ABC\\\") == \\\"ABC\\\", \\\"assert min_window_substring(\\\"AAAAAA\", \"B\", \"\\\", \\\"assert min_window_substring(\\\"\", \") == \\\"\\\"]\"]}"
}