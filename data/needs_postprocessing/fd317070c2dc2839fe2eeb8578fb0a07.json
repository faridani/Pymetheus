"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Spiral Matrix Traversal\\\\\", \\\\\"description\\\\\": \\\\\"Given a 2D matrix (list of lists), traverse it in a clockwise spiral pattern and return the elements in the order they are visited.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef spiral_traversal(matrix):\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `matrix` (list of lists): A rectangular 2D matrix containing integers.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list containing the elements of the matrix in spiral order.\\\\\", \\\\\"code\\\\\": \\\\\"def spiral_traversal(matrix):\\\\\\\\n    m, n = len(matrix), len(matrix[0])\\\\\\\\n    top, bottom = 0, m - 1\\\\\\\\n    left, right = 0, n - 1\\\\\\\\n    result = []\\\\\\\\n    while top <= bottom and left <= right:\\\\\\\\n        for i in range(left, right + 1):\\\\\\\\n            result.append(matrix[top][i])\\\\\\\\n        top += 1\\\\\\\\n        for i in range(top, bottom + 1):\\\\\\\\n            result.append(matrix[i][right])\\\\\\\\n        right -= 1\\\\\\\\n        if top <= bottom and left <= right:\\\\\\\\n            for i in range(right, left - 1, -1):\\\\\\\\n                result.append(matrix[bottom][i])\\\\\\\\n            bottom -= 1\\\\\\\\n            for i in range(bottom, top - 1, -1):\\\\\\\\n                result.append(matrix[i][left])\\\\\\\\n            left += 1\\\\\\\\n    return result\\\\\", \\\\\"tests\\\\\": [\\\\\"assert spiral_traversal([[1,2,3],[4,5,6],[7,8,9]]) == [1,2,3,6,9,8,7,4,5]\\\\\", \\\\\"assert spiral_traversal([[1,2],[3,4]]) == [1, 2, 4, 3]\\\\\", \\\\\"assert spiral_traversal([[1]]) == [1]\\\\\"] }\"'}"