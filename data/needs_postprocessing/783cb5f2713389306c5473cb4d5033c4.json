"{'model': 'qwen2:7b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Maximal Sum Rectangle\\\\\", \\\\\"description\\\\\": \\\\\"Given a 2D matrix of integers, find the rectangle with maximum sum within it. The rectangle can be any size but must be aligned with the grid (i.e., its sides are parallel to the x and y axes). Write a function `max_sum_rectangle` that takes a list of lists as input and returns the coordinates of the top-left corner and bottom-right corner of the rectangle along with its maximum sum. Example: Given matrix = [[1, -2, 3], [-4, 5, -6], [7, -8, 9]], return the coordinates (0, 0) -> (1, 1) since it has a maximal sum of -2 + 5 = 3.\\\\\", \\\\\"code\\\\\": \\\\\"from typing import List\\\\\\\\n\\\\\\\\ndef max_sum_rectangle(matrix: List[List[int]]) -> tuple:\\\\\\\\n    if not matrix or not matrix[0]: return None\\\\\\\\n    row_count, col_count = len(matrix), len(matrix[0])\\\\\\\\n    max_sum = float(\\'-inf\\')\\\\\\\\n    best_left, best_right = 0, -1\\\\\\\\n    best_top = best_bottom = prev_row_sum = current_max_sum = 0\\\\\\\\n\\\\\\\\n    for top in range(row_count):\\\\\\\\n        prev_row_sum = [float(\\'inf\\')] * col_count\\\\\\\\n        current_max_sum = float(\\'-inf\\')\\\\\\\\n        left = right = 0\\\\\\\\n\\\\\\\\n        for bottom in range(top, row_count):\\\\\\\\            # Compute prefix sum of columns in the window\\\\\\\\n            column_sums = [sum(row[column] + prev_row_sum[column] for row in matrix[top:bottom+1]) for column in range(col_count)]\\\\\\\\n\\\\\\\\n            # Kadane\\'s algorithm to find maximum subarray with non-negative sum\\\\\\\\n            max_subarray_sum, current_max = float(\\'-inf\\'), float(\\'-inf\\')            \\\\\\\\n            start, end, current_sum = 0, -1, 0\\\\\\\\n            for i in range(len(column_sums)):\\\\\\\\n                current_sum += column_sums[i]\\\\\\\\n                if current_sum > max_subarray_sum:\\\\\\\\n                    max_subarray_sum = current_sum\\\\\\\\n                    start = end + 1\\\\\\\\n                    end = i\\\\\\\\n                elif current_sum >= 0:\\\\\\\\n                    current_max = max(current_max, current_sum)\\\\\\\\n                    end = i\\\\\\\\n            \\\\\\\\n            # Update the maximum sum rectangle if necessary\\\\\\\\n            total_sum = column_sums[left] + column_sums[right]\\\\\\\\            if current_max == float(\\'-inf\\') and total_sum > max_sub_sum:                max_sub_sum = total_sum\\\\\\\\n            elif current_max >= 0:\\\\\\\\n                for i in range(left, right+1):\\\\\\\\n                    prev_row_sum[i] += current_max_sum\\\\\\\\n                    current_max_sum += column_sums[i]\\\\\\\\n                    if (bottom - top + 1) * max_subarray_sum > max_sum:\\\\\\\\                        best_left = left\\\\\\\\n                        best_right = right\\\\\\\\n                        best_top = bottom\\\\\\\\n                        best_bottom = top\\\\\\\\n            elif total_sum == max_sub_sum:\\\\\\\\n                for i in range(left, right+1):\\\\\\\\n                    prev_row_sum[i] += current_max_sum\\\\\\\\n                    if (bottom - top + 1) * max_sub_sum > max_sum:\\\\\\\\                        best_left = left\\\\\\\\n                        best_right = right\\\\\\\\n                        best_top = bottom\\\\\\\\n                        best_bottom = top\\\\\\\\n            elif total_sum > max_sub_sum:                for i in range(left, right+1):\\\\\\\\n                    prev_row_sum[i] += current_max_sum\\\\\\\\n                    if (bottom - top + 1) * total_sum > max_sum:\\\\\\\\                        max_sub_sum = total_sum\\\\\\\\n                        best_left = left\\\\\\\\n                        best_right = right\\\\\\\\n                        best_top = bottom\\\\\\\\n                        best_bottom = top\\\\\\\\n            left, right = end + 1, min(right + 1, col_count)\\\\\\\\n        prev_row_sum[0] += current_max_sum\\\\\\\\n    return ((best_top, best_left), (best_bottom+1, best_right)) if max_sum != float(\\'-inf\\') else None\\\\\", \\\\\"tests\\\\\": [\\\\\"assert max_sum_rectangle([[1, -2, 3], [-4, 5, -6], [7, -8, 9]]) == ((0, 0), (1, 1))\\\\\", \\\\\"assert max_sum_rectangle([[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]]) == None\\\\\", \\\\\"assert max_sum_rectangle([[2, 2, 2], [2, 2, 2], [2, 2, 2]]) == ((0, 0), (2, 2))\\\\\"] }\"'}"