{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Eulerian Path Checker\\\", \\\"description\\\": \\\"An Eulerian path is a trail that uses every edge of a graph or multigraph exactly once. Given an undirected, connected and unweighted graph as an adjacency matrix representation, write a function to check if the graph has an Eulerian path.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef has_eulerian_path(graph: list[list[int]]) -> bool:\\\\n```\\\\n\\\\n#### Input\\\\n- `graph` (list[list[int]]): An undirected, connected and unweighted graph as an adjacency matrix representation. The input will be a 2D list where each element represents the number of edges between two nodes.\\\\n\\\\n#### Output\\\\n- Returns `True` if the graph has an Eulerian path, `False` otherwise.\\\\n\\\", \\\"code\\\": \\\"from collections import defaultdict\\\\n\\\\ndef has_eulerian_path(graph: list[list[int]]) -> bool:\\\\n    in_degree = [0] * len(graph)\\\\n    out_degree = [0] * len(graph)\\\\n    for i in range(len(graph)):\\\\n        for j in range(len(graph[i])):\\\\n            if graph[i][j]:\\\\n                out_degree[i] += 1\\\\n                in_degree[j] += 1\\\\n    return all(out_degree == in_degree for _ in range(len(graph))) and not any(in_degree == 0 or out_degree == 0 for _ in range(len(graph)))\\\", \\\"tests\\\": [\\\"assert has_eulerian_path([[2, 2], [2, 2]]) == True\\\", \\\"assert has_eulerian_path([[1, 1], [1, 1]]) == False\\\", \\\"assert has_eulerian_path([[3, 0, 0], [0, 3, 0], [0, 0, 3]]) == True\\\"] }\""
}