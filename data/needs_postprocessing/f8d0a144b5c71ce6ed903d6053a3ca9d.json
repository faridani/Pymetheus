"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Finder (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a function `find_anagrams` that finds all the anagrams of a given string within a list of words.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(target: str, words: List[str]) -> Set[str]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `target` (str): A string to find anagrams for.\\\\\\\\n- `words` (List[str]): A list of candidate strings to check as potential anagrams.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a set containing the words that are anagrams of the target string, case insensitive and ignoring spaces, punctuation, and special characters.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"import collections\\\\\\\\ndef find_anagrams(target: str, words: List[str]) -> Set[str]:\\\\\\\\n    # Remove non-alphanumeric characters from the target and candidate strings\\\\\\\\n    target = \\'\\'.join(char for char in target if char.isalnum()).lower()\\\\\\\\n    candidates = set(word.lower().replace(\\' \\', \\'\\') for word in words)\\\\\\\\n    \\\\\\\\n    # Count the frequency of each character in the target string\\\\\\\\n    target_counts = collections.Counter(target)\\\\\\\\n\\\\\\\\n    # Find anagrams by checking if the counts of characters match with candidate strings\\\\\\\\n    return set(word for word in candidates if collections.Counter(word) == target_counts)\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams(\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", [\\\\\\\\\\\\\"silent\\\\\\\\\\\\\", \\\\\\\\\\\\\"enlist\\\\\\\\\\\\\", \\\\\\\\\\\\\"softly\\\\\\\\\\\\\", \\\\\\\\\\\\\"school\\\\\\\\\\\\\"]) == {\\\\\\\\\\\\\"silent\\\\\\\\\\\\\", \\\\\\\\\\\\\"enlist\\\\\\\\\\\\\"}\\\\\", \\\\\"assert find_anagrams(\\\\\\\\\\\\\"elk\\\\\\\\\\\\\", [\\\\\\\\\\\\\"kelp\\\\\\\\\\\\\", \\\\\\\\\\\\\"kept\\\\\\\\\\\\\", \\\\\\\\\\\\\"able\\\\\\\\\\\\\", \\\\\\\\\\\\\"pelek\\\\\\\\\\\\\"]) == {\\\\\\\\\\\\\"kelp\\\\\\\\\\\\\", \\\\\\\\\\\\\"pelek\\\\\\\\\\\\\"}\\\\\", \\\\\"assert find_anagrams(\\\\\\\\\\\\\"racecar\\\\\\\\\\\\\", [\\\\\\\\\\\\\"A man, a plan, a canal, Panama\\\\\\\\\\\\\", \\\\\\\\\\\\\"No \\'x\\' in Nixon\\\\\\\\\\\\\", \\\\\\\\\\\\\"racecar\\\\\\\\\\\\\"]) == {\\\\\\\\\\\\\"racecar\\\\\\\\\\\\\"}\\\\\"] }\"'}"