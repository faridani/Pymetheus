"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Labyrinth Pathfinding\\\\\", \\\\\"description\\\\\": \\\\\"You are given a rectangular grid representing a labyrinth. The grid is filled with \\'#\\' characters for walls and \\'.\\' characters for empty spaces. You start at the top-left corner (0, 0) and need to find a path to the bottom-right corner. \\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_path(grid: list[list[str]]) -> list[tuple[int, int]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `grid` (list[list[str]]): A 2D list representing the labyrinth. Each inner list represents a row of the grid.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of tuples, where each tuple represents the coordinates (row, column) of a step in the path from the top-left corner to the bottom-right corner. If no path exists, return an empty list.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from collections import deque\\\\\\\\n\\\\\\\\ndef find_path(grid: list[list[str]]) -> list[tuple[int, int]]:\\\\\\\\n    rows = len(grid)\\\\\\\\n    cols = len(grid[0])\\\\\\\\n    start = (0, 0)\\\\\\\\n    end = (rows - 1, cols - 1)\\\\\\\\n\\\\\\\\n    queue = deque([(start, [])])  # Store coordinates and path so far\\\\\\\\n\\\\\\\\n    while queue:\\\\\\\\n        (row, col), path = queue.popleft()\\\\\\\\n\\\\\\\\n        if (row, col) == end:\\\\\\\\n            return path + [(row, col)]\\\\\\\\n\\\\\\\\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\\\\\\\\n            new_row = row + dr\\\\\\\\n            new_col = col + dc\\\\\\\\n\\\\\\\\n            if (0 <= new_row < rows and\\\\\\\\n                0 <= new_col < cols and\\\\\\\\n                grid[new_row][new_col] == \\'.\\'):\\\\\\\\n                queue.append(((new_row, new_col), path + [(row, col)]))\\\\\\\\n\\\\\\\\n    return []  # No path found\\\\\\\\n\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_path([[\\'.\\', \\'.\\', \\'#\\'], [\\'#\\', \\'.\\', \\'.\\'], [\\'.\\', \\'.\\', \\'.\\']]) == [(0, 0), (0, 1), (1, 1), (2, 1), (2, 2)]\\\\\", \\\\\"assert find_path([[\\'#\\', \\'.\\'], [\\' .\\', \\'#\\']]) == []\\\\\"] }\"'}"