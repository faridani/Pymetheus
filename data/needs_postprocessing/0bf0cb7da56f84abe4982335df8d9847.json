"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Detector (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"An anagram is a word or phrase that contains the same letters as another word or phrase, but arranged in a different order. For example, \\'listen\\' and \\'silent\\' are anagrams of each other.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: List[str]) -> List[List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of strings containing only lowercase alphabetic characters.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of lists, where each inner list contains anagrams of at least two words from the input list.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from collections import defaultdict\\\\\\\\n\\\\\\\\ndef find_anagrams(words: List[str]) -> List[List[str]]:\\\\\\\\n    # Create a dictionary to count the frequency of each letter in each word\\\\\\\\n    word_counts = defaultdict(int)\\\\\\\\n    anagrams = []\\\\\\\\n\\\\\\\\n    for word in words:\\\\\\\\n        # Count the frequency of each letter in the current word\\\\\\\\n        for char in word:\\\\\\\\n            word_counts[char] += 1\\\\\\\\n\\\\\\\\n        # If we\\'ve seen this frequency distribution before, add the current word to an existing anagram list\\\\\\\\n        # Otherwise, start a new anagram list with the current word\\\\\\\\n        if word_counts == anagrams[-1][-1] if anagrams else False:\\\\\\\\n            anagrams[-1].append(word)\\\\\\\\n        elif all([word_counts[char] == count for char, count in anagrams[-1][-1].items()]):\\\\\\\\n            anagrams.append([word])\\\\\\\\n\\\\\\\\n    return anagrams\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\", \\\\\\\\\\\\\"enlist\\\\\\\\\\\\\", \\\\\\\\\\\\\"education\\\\\\\\\\\\\", \\\\\\\\\\\\\"deed\\\\\\\\\\\\\", \\\\\\\\\\\\\"cool\\\\\\\\\\\\\"]) == [[\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\"], [\\\\\\\\\\\\\"enlist\\\\\\\\\\\\\"], [\\\\\\\\\\\\\"education\\\\\\\\\\\\\"], [\\\\\\\\\\\\\"deed\\\\\\\\\\\\\"], [\\\\\\\\\\\\\"cool\\\\\\\\\\\\\"]]\\\\\", \\\\\"assert find_anagrams([\\\\\\\\\\\\\"hello\\\\\\\\\\\\\", \\\\\\\\\\\\\"olleh\\\\\\\\\\\\\"]) == [[\\\\\\\\\\\\\"hello\\\\\\\\\\\\\", \\\\\\\\\\\\\"olleh\\\\\\\\\\\\\"]]\\\\\", \\\\\"assert find_anagrams([\\\\\\\\\\\\\"apple\\\\\\\\\\\\\", \\\\\\\\\\\\\"pleap\\\\\\\\\\\\\"]) == []\\\\\"] }\"'}"