"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"URL Validator (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `is_valid_url` that checks if a given string is a valid URL.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef is_valid_url(url: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `url` (str): A string representing a URL.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the input string is a valid URL, `False` otherwise.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"import re\\\\\\\\n\\\\\\\\ndef is_valid_url(url: str) -> bool:\\\\\\\\n    # Check if the string starts with http or https\\\\\\\\n    if not url.startswith(\\'http://\\') and not url.startswith(\\'https://\\'):\\\\\\\\n        return False\\\\\\\\n    # Remove the scheme (http or https)\\\\\\\\n    url = url[len(url.split(\\'://\\')):]\\\\\\\\n    # Check if the URL contains at least one / character\\\\\\\\n    if \\'/\\' not in url:\\\\\\\\n        return False\\\\\\\\n    # Split the URL into parts\\\\\\\\n    parts = url.split(\\'/\\')\\\\\\\\n    # The first part should be the domain name\\\\\\\\n    domain = parts[0]\\\\\\\\n    # Check if the domain contains at least one . character\\\\\\\\n    if \\'.\\' not in domain:\\\\\\\\n        return False\\\\\\\\n    # Check if the domain ends with a . character\\\\\\\\n    if domain[-1] != \\'.\\':\\\\\\\\n        return False\\\\\\\\n    # Check if there is no .. sequence in the domain\\\\\\\\n    if \\'..\\' in domain:\\\\\\\\n        return False\\\\\\\\n    # Check if the URL contains at least two parts after the domain\\\\\\\\n    if len(parts) < 3:\\\\\\\\n        return False\\\\\\\\n    # The second part should be the subdomain (optional)\\\\\\\\n    if parts[1] and not parts[1].isalnum():\\\\\\\\n        return False\\\\\\\\n    # The third part should be the file or folder name (optional)\\\\\\\\n    if parts[2] and not parts[2].isalnum() and parts[2] != \\'index.html\\':\\\\\\\\n        return False\\\\\\\\n    # Check if the URL contains at least one query parameter (? character) or value (= character)\\\\\\\\n    if any(char in url for char in [\\'?\\', \\'&\\']):\\\\\\\\n        # Split the query parameters and check each key-value pair\\\\\\\\n        params = dict([x.split(\\'=\\') for x in url[url.find(\\'?\\'):].split(\\'&\\')])\\\\\\\\n        if any(not param or not re.match(\\'^[a-zA-Z0-9]+$\\', param) for param in params.keys()):\\\\\\\\n            return False\\\\\\\\n    # The URL is valid\\\\\\\\n    return True\\\\\", \\\\\"tests\\\\\": [\\\\\"assert is_valid_url(\\'http://www.example.com\\') == True\\\\\", \\\\\"assert is_valid_url(\\'https://www.google.com/search?q=python&ie=UTF-8\\') == True\\\\\", \\\\\"assert not is_valid_url(\\'http://www.exampledotcom\\') == False\\\\\", \\\\\"assert not is_valid_url(\\'http://example..com\\') == False\\\\\"] }\"'}"