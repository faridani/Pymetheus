{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Harmonious Chords\\\", \\\"description\\\": \\\"In music theory, a chord progression is a series of chords played in a specific order. A harmonious chord progression is one where each chord is part of a valid harmony, i.e., the notes in each chord are related to the notes in previous and next chords by rules of harmony.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef is_harmonious(chord_progression: list) -> bool:\\\\n```\\\\n\\\\n#### Input\\\\n- `chord_progression` (list): A list of chord names, where each chord name is a string in the format 'X-major' or 'X-minor', where X is a letter from A to G.\\\\n\\\\n#### Output\\\\n- Returns `True` if the given chord progression is harmonious, and `False` otherwise.\\\\n\\\", \\\"code\\\": \\\"\\\\nimport re\\\\n\\\\ndef is_harmonious(chord_progression: list) -> bool:\\\\n    # Define valid harmony rules\\\\n    major_to_major = {'A': ['B', 'C#', 'E'], 'C': ['D', 'F#', 'G'], 'D': ['E', 'F#', 'A'], 'E': ['F#', 'G', 'B'], 'F': ['G', 'A', 'C'], 'G': ['A', 'B', 'D']}\\\\n    minor_to_minor = {'A': ['Bb', 'Db', 'Eb'], 'C': ['Db', 'F', 'Ab'], 'D': ['Eb', 'Gb', 'Bb'], 'E': ['F', 'Ab', 'C'], 'F': ['G', 'Bb', 'D'], 'G': ['Ab', 'C', 'E']}\\\\n    major_to_minor = {'A': ['Bbmaj7', 'Dbmaj7', 'Em7'], 'C': ['Dbmaj7', 'Fmaj7', 'Am7'], 'D': ['Ebmaj7', 'Fmaj7', 'Bbmaj7'], 'E': ['Fmaj7', 'Abmaj7', 'Cmaj7'], 'F': ['Gmaj7', 'Bbmaj7', 'Em7'], 'G': ['Abmaj7', 'Am7', 'Dm7']}\\\\n    \\\\n    # Check if the chord progression is harmonious\\\\n    for i in range(len(chord_progression) - 1):\\\\n        if re.match(r'^[A-G]-(major|minor)$', chord_progression[i]):\\\\n            if re.match(r'^[A-G]-(major|minor)$', chord_progression[i + 1]):\\\\n                # Check major-to-major or minor-to-minor harmony\\\\n                if (chord_progression[i][0].upper() in major_to_major and chord_progression[i + 1][0].upper() in major_to_major[chord_progression[i][0].upper()] or \\\\n                    chord_progression[i][0].upper() in minor_to_minor and chord_progression[i + 1][0].upper() in minor_to_minor[chord_progression[i][0].upper()]):\\\\n                    continue\\\\n                # Check major-to-minor harmony\\\\n                elif (chord_progression[i][0].upper() in major_to_major and chord_progression[i + 1][0].upper() in minor_to_minor[chord_progression[i][0].upper()] or \\\\n                      chord_progression[i][0].upper() in major_to_minor and re.match(r'^[A-G]-(minor)$', chord_progression[i + 1])):\\\\n                    continue\\\\n                else:\\\\n                    return False\\\\n    return True\\\", \\\"tests\\\": [\\\"assert is_harmonious(['A-major', 'C-major']) == True\\\", \\\"assert is_harmonious(['D-minor', 'E-minor']) == True\\\", \\\"assert is_harmonious(['F-major', 'G-minor']) == False\\\", \\\"assert is_harmonious(['A-minor', 'Bb-major']) == True\\\"] }\""
}