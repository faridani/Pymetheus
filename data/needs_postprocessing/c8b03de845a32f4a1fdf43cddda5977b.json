"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Detection (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `is_anagram` that checks if two given strings are anagrams of each other. Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef is_anagram(s1: str, s2: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s1`, `s2` (str): Two strings that may contain letters (uppercase or lowercase), numbers, spaces and punctuation.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"import string, collections\\\\\\\\n\\\\\\\\ndef is_anagram(s1: str, s2: str) -> bool:\\\\\\\\n    # Remove non-alphanumeric characters and convert to lowercase\\\\\\\\n    s1 = \\'\\'.join([char for char in s1 if char in string.ascii_letters + string.digits]).lower()\\\\\\\\n    s2 = \\'\\'.join([char for char in s2 if char in string.ascii_letters + string.digits]).lower()\\\\\\\\n    \\\\\\\\n    # Ensure both strings are of the same length\\\\\\\\n    if len(s1) != len(s2):\\\\\\\\n        return False\\\\\\\\n    \\\\\\\\n    # Create a dictionary to count the frequency of each character in s1\\\\\\\\n    freq_dict = collections.Counter(s1)\\\\\\\\n    \\\\\\\\n    # If any character in s2 doesn\\'t match the frequency dict, then they are not anagrams\\\\\\\\n    for char in s2:\\\\\\\\n        if char not in freq_dict or freq_dict[char] == 0:\\\\\\\\n            return False\\\\\\\\n        freq_dict[char] -= 1\\\\\\\\n    \\\\\\\\n    # If all characters have been checked and their frequencies match, then they are anagrams\\\\\\\\n    return True\\\\\", \\\\\"tests\\\\\": [\\\\\"assert is_anagram(\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert is_anagram(\\\\\\\\\\\\\"actinium\\\\\\\\\\\\\", \\\\\\\\\\\\\"magnesium\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert is_anagram(\\\\\\\\\\\\\"hello\\\\\\\\\\\\\", \\\\\\\\\\\\\"world\\\\\\\\\\\\\") == False\\\\\", \\\\\"assert is_anagram(\\\\\\\\\\\\\"A man, a plan, a canal: Panama\\\\\\\\\\\\\", \\\\\\\\\\\\\"amanaplanacanalpanama\\\\\\\\\\\\\") == True\\\\\"] }\"'}"