{
    "model": "command-r7b:latest",
    "response": "\"{ \\\"title\\\": \\\"Title: Maximum Product Subarray (Hard)\\\", \\\"description\\\": \\\"Given an integer array `nums`, find the maximum product of any subsequence of `nums`. A subsequence can be empty.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef max_product_subarray(nums: List[int]) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `nums` (List[int]): An array of integers that may contain negative numbers, zero, and positive numbers.\\\\n\\\\n#### Output\\\\n- Returns the maximum product of any subsequence of `nums`.\\\\n\\\", \\\"code\\\": \\\"from typing import List\\\\nimport random\\\\n\\\\ndef max_product_subarray(nums: List[int]) -> int:\\\\n    if not nums:\\\\n        return 0\\\\n\\\\n    # Initialize variables for maximum and minimum product ending at the current position\\\\n    max_ending_here = min_ending_here = result = nums[0]\\\\n\\\\n    for num in nums[1:]:\\\\n        # If the current number is negative, swap max_ending_here and min_ending_here\\\\n        if num < 0:\\\\n            temp = max_ending_here\\\\n            max_ending_here = min_ending_here\\\\n            min_ending_here = temp\\\\n\\\\n        # Update max_ending_here and min_ending_here\\\\n        max_ending_here = max(num, max_ending_here * num)\\\\n        min_ending_here = min(num, min_ending_here * num)\\\\n\\\\n        # Update the result if necessary\\\\n        result = max(result, max_ending_here)\\\\n\\\\n    return result\\\\n\\\", \\\"tests\\\": [\\\"assert max_product_subarray([2, 3, -2, 4]) == 6\\\", \\\"assert max_product_subarray([-2, 0, -1]) == 0\\\", \\\"assert max_product_subarray([5, -3, 2, 3, -1, 0, 2]) == 360\\\", \\\"assert max_product_subarray(random.choices([-10000, -9876, 1234], k=10)) >= min(random.choices([-10000, -9876, 1234], k=10))\\\"] }\""
}