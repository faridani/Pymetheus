"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Finder (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_anagrams` that finds all anagrams of a given word or phrase. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(word: str) -> List[str]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `word` (str): A string that contains only letters (no numbers or punctuation).\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of all anagrams of the input word.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from itertools import permutations\\\\\\\\n\\\\\\\\ndef find_anagrams(word: str) -> List[str]:\\\\\\\\n    # Ensure lowercase and remove duplicates\\\\\\\\n    word = \\'\\'.join(sorted(word.lower())).replace(\\' \\', \\'\\')\\\\\\\\n    anagrams = [\\'\\'.join(p) for p in permutations(list(word), len(word)) if sorted(p) == list(word)]\\\\\\\\n    return [\\' \\'.join(anagram) for anagram in set(anagrams)]\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams(\\'listen\\') == [\\'enlist\\', \\'silent\\']\\\\\", \\\\\"assert find_anagrams(\\'programming\\') == [\\'grommep\\', \\'grammar\\', \\'marking\\', \\'marginp\\', \\'namepr\\', \\'rgingam\\', \\'margipn\\']\\\\\"] }\"'}"