"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Word Ladder\\\\\", \\\\\"description\\\\\": \\\\\"Given two words `beginWord` and `endWord`, and a dictionary `wordList` containing a list of valid English words, find the length of the shortest transformation sequence from `beginWord` to `endWord`.  \\\\\\\\n\\\\\\\\nEach transformation consists of changing exactly one letter in the previous word.\\\\\\\\n\\\\\\\\nAll intermediate words must be valid English words found in `wordList` (including `beginWord` and `endWord`).\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef ladder_length(beginWord: str, endWord: str, wordList: list[str]) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `beginWord` (str): The starting word.\\\\\\\\n- `endWord` (str): The target word.\\\\\\\\n- `wordList` (list[str]): A list of valid English words.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the length of the shortest transformation sequence from `beginWord` to `endWord`. If no such sequence exists, return 0.\\\\\", \\\\\"code\\\\\": \\\\\"from collections import deque\\\\\\\\ndef ladder_length(beginWord: str, endWord: str, wordList: list[str]) -> int:\\\\\\\\n    if endWord not in wordList: \\\\\\\\n        return 0\\\\\\\\n    wordList = set(wordList)\\\\\\\\n    queue = deque([(beginWord, 1)])\\\\\\\\n    while queue:\\\\\\\\n        word, length = queue.popleft()\\\\\\\\n        if word == endWord:\\\\\\\\n            return length\\\\\\\\n        for i in range(len(word)):\\\\\\\\n            for char in \\'abcdefghijklmnopqrstuvwxyz\\':\\\\\\\\n                new_word = word[:i] + char + word[i+1:]\\\\\\\\n                if new_word in wordList:\\\\\\\\n                    queue.append((new_word, length + 1))\\\\\\\\n                    wordList.remove(new_word)\\\\\\\\n    return 0\\\\\", \\\\\"tests\\\\\": [\\\\\"assert ladder_length(\\'hit\\', \\'cog\\', [\\'hot\\', \\'dot\\', \\'dog\\', \\'lot\\', \\'log\\', \\'cog\\']) == 5\\\\\", \\\\\"assert ladder_length(\\'hit\\', \\'cog\\', [\\'hot\\', \\'dot\\', \\'dog\\', \\'lot\\', \\'log\\']) == 0\\\\\"] }\"'}"