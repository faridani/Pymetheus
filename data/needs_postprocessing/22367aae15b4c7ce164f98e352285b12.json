{
    "model": "gemma2:27b",
    "response": "{\"title\": \"Hard: Matrix Spiral Traversal\", \"description\": \"Given an integer matrix `matrix` of size `m x n`, return a list containing all the elements of the matrix in spiral order.\\n\\n#### Function Signature\\n```python\\ndef spiral_order(matrix: list[list[int]]) -> list[int]:\\n```\\n\\n#### Input\\n- `matrix` (list[list[int]]): A 2D integer array representing the matrix.\\n\\n#### Output\\n- Returns a list containing all the elements of the matrix in spiral order.\\n\\n#### Constraints\\n- `m == matrix.length`\\n- `n == matrix[i].length`\\n- `1 <= m, n <= 10`\\n- `-100 <= matrix[i][j] <= 100`\", \"code\": \"def spiral_order(matrix: list[list[int]]) -> list[int]:\\n    m, n = len(matrix), len(matrix[0])\\n    top, bottom, left, right = 0, m - 1, 0, n - 1\\n    result = []\\n    while top <= bottom and left <= right:\\n        # Traverse right\\n        for i in range(left, right + 1):\\n            result.append(matrix[top][i])\\n        top += 1\\n        # Traverse down\\n        for i in range(top, bottom + 1):\\n            result.append(matrix[i][right])\\n        right -= 1\\n        if top <= bottom and left <= right:\\n            # Traverse left\\n            for i in range(right, left - 1, -1):\\n                result.append(matrix[bottom][i])\\n            bottom -= 1\\n            # Traverse up\\n            for i in range(bottom, top - 1, -1):\\n                result.append(matrix[i][left])\\n            left += 1\\n    return result\", \"tests\": [\"assert spiral_order([[1,2,3],[4,5,6],[7,8,9]]) == [1,2,3,6,9,8,7,4,5]\", \"assert spiral_order([[1,2,3,4\"], \"1,2,3,4,8,12,11,10,9,5,6,7]\": \"\"}"
}