{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Maximum Sum of Subarray with Constraints\\\", \\\"description\\\": \\\"Given an array of integers, find the maximum sum of a subarray that does not contain more than `k` consecutive elements. If no such subarray exists, return 0.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef max_sum_subarray(nums: list[int], k: int) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `nums` (list[int]): A list of integers.\\\\n- `k` (int): The maximum number of consecutive elements allowed in the subarray.\\\\n\\\\n#### Output\\\\n- Returns the maximum sum of a subarray that does not contain more than `k` consecutive elements. If no such subarray exists, return 0.\\\\n\\\", \\\"code\\\": \\\"\\\\ndef max_sum_subarray(nums: list[int], k: int) -> int:\\\\n    n = len(nums)\\\\n    prefix_sum = [0] * (n + 1)\\\\n    for i in range(n):\\\\n        prefix_sum[i + 1] = prefix_sum[i] + nums[i]\\\\n    \\\\n    max_sum = float('-inf')\\\\n    for i in range(k, n - k + 2):\\\\n        max_sum = max(max_sum, prefix_sum[i + k] - prefix_sum[i - k])\\\\n    \\\\n    return max_sum if max_sum > 0 else 0\\\\n\\\", \\\"tests\\\": [\\\"assert max_sum_subarray([1, 2, 3, 4, 5], 2) == 9\\\", \\\"assert max_sum_subarray([-1, 2, -3, 4, 5], 3) == 7\\\", \\\"assert max_sum_subarray([-10, 0, 20, 30, 40], 1) == 50\\\"] }\""
}