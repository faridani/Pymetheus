{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Minimum Window Substring\\\", \\\"description\\\": \\\"Given two strings `s1` and `s2`, write a function `min_window_substring` that finds the minimum window substring of `s1` that contains all characters in `s2`. If no such window exists, return an empty string.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef min_window_substring(s1: str, s2: str) -> str:\\\\n```\\\\n\\\\n#### Input\\\\n- `s1` (str): The main string to search for the substring.\\\\n- `s2` (str): The target string containing all characters to find in `s1`.\\\\n\\\\n#### Output\\\\n- Returns a minimum window substring of `s1` that contains all characters in `s2`, or an empty string if no such window exists.\\\\n\\\", \\\"code\\\": \\\"from collections import Counter\\\\n\\\\ndef min_window_substring(s1: str, s2: str) -> str:\\\\n    # Count the frequency of each character in both strings\\\\n    s1_count = Counter(s1)\\\\n    s2_count = Counter(s2)\\\\n\\\\n    for i in range(len(s1) - len(s2) + 1):\\\\n        if all(s1_count[c] >= s2_count[c] for c in set(s2)):\\\\n            # Found a window, update the minimum window substring\\\\n            min_window = s1[i:i+len(s2)]\\\\n            return min_window\\\\n    # No window found, return an empty string\\\\n    return ''\\\", \\\"tests\\\": [\\\"assert min_window_substring('ADOBECODEBANC', 'ABC') == 'BANC'\\\", \\\"assert min_window_substring('aefgabcefghij', 'abc') == 'abc'\\\", \\\"assert min_window_substring('hello', 'world') == ''\\\"] }\""
}