"{'model': 'qwen2:7b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Highly Composite Number Finder\\\\\", \\\\\"description\\\\\": \\\\\"A highly composite number (HCN) is defined as a positive integer with more divisors than any smaller positive integer. Write a function `find_hcn` that finds the smallest HCN greater than or equal to a given non-negative integer n.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_hcn(n: int) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `n` (int): A non-negative integer (0 <= n <= 1e9).\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the smallest highly composite number greater than or equal to n.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from math import sqrt\\\\\\\\ndef find_hcn(n: int) -> int:\\\\\\\\n    def is_prime(x):\\\\\\\\n        if x < 2:\\\\\\\\n            return False\\\\\\\\n        for i in range(2, int(sqrt(x)) + 1):\\\\\\\\n            if x % i == 0:\\\\\\\\n                return False\\\\\\\\n        return True\\\\\\\\ndef prime_factors(n):\\\\\\\\n    factors = []\\\\\\\\n    while n % 2 == 0:\\\\\\\\n        factors.append(2)\\\\\\\\n        n //= 2\\\\\\\\n    for i in range(3, int(sqrt(n)) + 1, 2):\\\\\\\\n        while n % i == 0:\\\\\\\\n            factors.append(i)\\\\\\\\n            n //= i\\\\\\\\n    if n > 2:\\\\\\\\n        factors.append(n)\\\\\\\\n    return factors\\\\\\\\ndef hcn_number(x: int) -> int:\\\\\\\\n    p = []\\\\\\\\n    c = x\\\\\\\\n    for k in range(1, len(prime_factors(x)) + 1):\\\\\\\\n        q = list(set(prime_factors(x)) - set(p))[:k]\\\\\\\\n        for a in reversed(q):\\\\\\\\n            c *= a\\\\\\\\n        p.append(a)\\\\\\\\n    return c\\\\\\\\ndef next_power_of_2(x: int) -> int:\\\\\\\\n    if x == 0:\\\\\\\\n        return 1\\\\\\\\n    p = 1\\\\\\\\n    while p < x:\\\\\\\\n        p <<= 1\\\\\\\\n    return p\\\\\\\\ndef find_hcn(n):\\\\\\\\n    if n <= 6:\\\\\\\\n        return n\\\\\\\\n    max_prime_factor = int(sqrt(n)) + 1\\\\\\\\n    primes = [i for i in range(2, max_prime_factor) if is_prime(i)]\\\\\\\\n    if not primes:\\\\\\\\n        return next_power_of_2(n)\\\\\\\\n    a = primes[-1]\\\\\\\\n    p = []\\\\\\\\n    while n % (a ** len(p)) == 0:\\\\\\\\n        p.append(a)\\\\\\\\n        n //= a\\\\\\\\n    if n != 1:\\\\\\\\n        return max(hcn_number(a ** i) for i in range(1, len(p) + 1)) * hcn_number(n)\\\\\\\\n    else:\\\\\\\\n        x = next_power_of_2(n - sum(a ** i for i in range(len(p))) + 1)\\\\\\\\n        for i in reversed(primes):\\\\\\\\n            if x % i == 0:\\\\\\\\n                return i ** len(p) * x\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_hcn(39) == 40\\\\\", \\\\\"assert find_hcn(2580) == 3672\\\\\", \\\\\"assert find_hcn(12) == 12\\\\\", \\\\\"assert find_hcn(0) == 1\\\\\", \\\\\"assert find_hcn(1e9) == 127035954683\\\\\"] }\"'}"