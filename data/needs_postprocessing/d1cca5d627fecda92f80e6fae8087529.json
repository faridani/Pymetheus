"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Checker (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Given two strings, determine if they are anagrams of each other. Anagrams are words or phrases that contain the same letters, but possibly different cases and in a different order. Write a function `is_anagram` that checks if two given strings are anagrams.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef is_anagram(s1: str, s2: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s1` (str): A string that may contain letters, numbers, and punctuation.\\\\\\\\n- `s2` (str): Another string that may contain letters, numbers, and punctuation.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the two input strings are anagrams, `False` otherwise.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"import collections\\\\\\\\ndef is_anagram(s1: str, s2: str) -> bool:\\\\\\\\n    # Remove non-alphabetic characters\\\\\\\\n    s1 = \\'\\'.join(char for char in s1 if char.isalpha()).lower()\\\\\\\\ns2 = \\'\\'.join(char for char in s2 if char.isalpha()).lower()\\\\\\\\n    # Count the frequency of each character\\\\\\\\n    count1 = collections.Counter(s1)\\\\\\\\n    count2 = collections.Counter(s2)\\\\\\\\n    \\\\\\\\n    # Check if both counts have the same total and if all characters appear in one or the other\\\\\\\\n    return len(count1) == len(count2) and set(count1).issubset(count2) and set(count2).issubset(count1)\\\\\\\\n\\\\\", \\\\\"tests\\\\\": [\\\\\"assert is_anagram(\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert is_anagram(\\\\\\\\\\\\\"hello\\\\\\\\\\\\\", \\\\\\\\\\\\\"olleh\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert is_anagram(\\\\\\\\\\\\\"anagram\\\\\\\\\\\\\", \\\\\\\\\\\\\"nagaram\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert is_anagram(\\\\\\\\\\\\\"test\\\\\\\\\\\\\", \\\\\\\\\\\\\"tesT\\\\\\\\\\\\\") == False\\\\\"] }\"'}"