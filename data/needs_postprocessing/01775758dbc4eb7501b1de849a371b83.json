{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Maximum Sum of Non-Adjacent Elements\\\", \\\"description\\\": \\\"Given a list of integers, find the maximum sum that can be obtained by selecting some elements from the list such that no two adjacent elements are selected.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef max_sum(arr: list[int)) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `arr` (list[int]): A list of integers.\\\\n\\\\n#### Output\\\\n- Returns the maximum sum that can be obtained by selecting some non-adjacent elements from the input list.\\\", \\\"code\\\": \\\"def max_sum(arr: list[int)) -> int:\\\\n    if len(arr) <= 2:\\\\n        return max(0, max(arr))\\\\n    dp = [0]*len(arr)\\\\n    dp[0] = arr[0]\\\\n    dp[1] = max(arr[0], arr[1])\\\\n    for i in range(2, len(arr)):\\\\n        dp[i] = max(dp[i-1], dp[i-2]+arr[i])\\\\n    return dp[-1]\\\\n\\\", \\\"tests\\\": [\\\"assert max_sum([2,7,9,3,1]) == 12\\\", \\\"assert max_sum([10,20,30,40]) == 50\\\", \\\"assert max_sum([1,2,4,5]) == 6\\\"] }\""
}