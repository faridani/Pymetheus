"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Detector (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a function `is_anagram` that checks if two given strings are anagrams.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef is_anagram(s1: str, s2: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s1`, `s2` (str): Two strings that may contain letters, numbers, spaces and punctuation.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"import string\\\\\\\\ndef is_anagram(s1: str, s2: str) -> bool:\\\\\\\\n    # Remove non-alphanumeric characters and convert to lowercase\\\\\\\\ns1 = \\'\\'.join(char for char in s1.lower() if char in string.ascii_letters + string.digits)\\\\\\\\ns2 = \\'\\'.join(char for char in s2.lower() if char in string.ascii_letters + string.digits)\\\\\\\\n\\\\\\\\n    # If the lengths are not equal, they cannot be anagrams\\\\\\\\n    if len(s1) != len(s2): return False\\\\\\\\n\\\\\\\\n    # Sort and compare the characters\\\\\\\\n    return sorted(s1) == sorted(s2)\\\\\", \\\\\"tests\\\\\": [\\\\\"assert is_anagram(\\'listen\\', \\'silent\\') == True\\\\\", \\\\\"assert is_anagram(\\'hello\\', \\'world\\') == False\\\\\", \\\\\"assert is_anagram(\\'Madam\\', \\'m\\'adam\\') == True\\\\\", \\\\\"assert is_anagram(\\'A man, a plan, a canal: Panama\\', \\'amanaplanacanalpanama\\') == True\\\\\"] }\"'}"