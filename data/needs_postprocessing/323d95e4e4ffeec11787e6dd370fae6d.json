{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Hard: Number of Islands\\\", \\\"description\\\": \\\"Given a 2D binary matrix containing 0s and 1s, where each 1 represents an island. An island is a group of 1s connected horizontally or vertically. Write a function `num_islands` that returns the number of islands in the given matrix.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef num_islands(matrix: list[list[int]]) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `matrix` (list[list[int]]): A 2D binary matrix, where each cell contains either a 0 or a 1.\\\\n\\\\n#### Output\\\\n- Returns the number of islands in the input matrix.\\\\n\\\", \\\"code\\\": \\\"def num_islands(matrix: list[list[int]]) -> int:\\\\n    if not matrix:\\\\n        return 0\\\\n    count = 0\\\\n    for i in range(len(matrix)):\\\\n        for j in range(len(matrix[0])):\\\\n            if matrix[i][j] == 1:\\\\n                dfs(matrix, i, j)\\\\n                count += 1\\\\n    return count\\\\n\\\\ndef dfs(matrix: list[list[int]], i: int, j: int):\\\\n    if i < 0 or i >= len(matrix) or j < 0 or j >= len(matrix[0]) or matrix[i][j] != 1:\\\\n        return\\\\n    matrix[i][j] = 0\\\\n    dfs(matrix, i - 1, j)\\\\n    dfs(matrix, i + 1, j)\\\\n    dfs(matrix, i, j - 1)\\\\n    dfs(matrix, i, j + 1)\\\\n\\\", \\\"tests\\\": [\\\"assert num_islands([['0', '0', '#'], ['1', '1', '#'], ['0', '0', '#']]) == 1\\\", \\\"assert num_islands([['1', '1', '1', '1', '0'], ['1', '1', '0', '0', '0'], ['1', '0', '0', '0', '0'], ['1', '0', '0', '0', '0'], ['1', '1', '1', '0', '0']]) == 1\\\", \\\"assert num_islands([['1'], ['1'], ['1']]) == 1\\\", \\\"assert num_islands([]) == 0\\\", \\\"assert num_islands([['0']]) == 0\\\"] }\""
}