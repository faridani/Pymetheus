"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Finder (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_anagrams` that finds all anagrams of a given string within a list of strings. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, usually using all the original letters exactly once.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(word: str, words: List[str]) -> List[str]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `word` (str): A string to find anagrams of.\\\\\\\\n- `words` (List[str]): A list of strings. Each string may contain letters, numbers, spaces, and punctuation.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of strings that are anagrams of the input `word`. The output list should not include the input `word` itself.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def find_anagrams(word: str, words: List[str]) -> List[str]:\\\\\\\\n    # Create a dictionary to store the frequency of each letter in the input word\\\\\\\\n    freq = {} \\\\\\\\n    for char in word:\\\\\\\\n        if char in freq:\\\\\\\\n            freq[char] += 1\\\\\\\\n        else:\\\\\\\\n            freq[char] = 1\\\\\\\\n    # Initialize an empty list to store the found anagrams\\\\\\\\n    anagrams = []\\\\\\\\n    \\\\\\\\n    # Iterate through each word in the input list\\\\\\\\n    for word_candidate in words:\\\\\\\\n        # Check if the number of occurrences of each letter in the candidate word matches the frequency of letters in the input word\\\\\\\\n        freq_candidate = {} \\\\\\\\n        for char in word_candidate:\\\\\\\\n            if char in freq_candidate:\\\\\\\\n                freq_candidate[char] += 1\\\\\\\\n            else:\\\\\\\\n                freq_candidate[char] = 1\\\\\\\\n        if freq == freq_candidate and word != word_candidate:\\\\\\\\n            anagrams.append(word_candidate)\\\\\\\\n    return anagrams\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams(\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", [\\\\\\\\`listen\\\\\\\\`, \\\\\\\\`enlists\\\\\\\\`, \\\\\\\\`silent\\\\\\\\`, \\\\\\\\`teaspon\\\\\\\\\\']) == [\\\\\\\\`enlists\\\\\\\\`, \\\\\\\\`silent\\\\\\\\`]\\\\\", \\\\\"assert find_anagrams(\\\\\\\\\\\\\"racecar\\\\\\\\\\\\\", [\\\\\\\\`racecar\\\\\\\\`, \\\\\\\\`carcarer\\\\\\\\`, \\\\\\\\`mom\\\\\\\\\\']) == [\\\\\\\\`carcarer\\\\\\\\`]\\\\\"] }\"'}"