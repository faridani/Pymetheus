{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Maximum Sum of Non-Adjacent Elements (Hard)\\\", \\\"description\\\": \\\"Given a list of non-negative integers, return the maximum sum of non-adjacent elements. For example, if the input is [2, 7, 9, 3, 1], the output should be 12, which is the sum of 2 and 9 (non-adjacent). The problem can be reduced to a dynamic programming problem.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef max_sum_of_non_adjacent_elements(arr: list[int]) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `arr` (list[int]): A list of non-negative integers.\\\\n\\\\n#### Output\\\\n- Returns the maximum sum of non-adjacent elements in the input array.\\\", \\\"code\\\": \\\"def max_sum_of_non_adjacent_elements(arr: list[int]) -> int:\\\\n    if len(arr) <= 2:\\\\n        return max(0, max(arr))\\\\n    incl = arr[0]\\\\n    excl = 0\\\\n    for i in range(1, len(arr)):\\\\n        new_excl = max(incl, excl)\\\\n        incl = arr[i] + excl\\\\n        excl = new_excl\\\\n    return max(incl, excl)\\\", \\\"tests\\\": [\\\"assert max_sum_of_non_adjacent_elements([2, 7, 9, 3, 1]) == 12\\\", \\\"assert max_sum_of_non_adjacent_elements([5, 5, 5, 5]) == 15\\\", \\\"assert max_sum_of_non_adjacent_elements([]) == 0\\\"] }\""
}