"{'model': 'gemma2:27b-instruct-q5_K_S', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Medium: Longest Substring Without Repeating Characters\\\\\", \\\\\"description\\\\\": \\\\\"Given a string `s`, find the length of the **longest substring** without repeating characters.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef length_of_longest_substring(s: str) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s` (str): A string containing only lowercase English letters.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the length of the longest substring without repeating characters.\\\\\\\\n\\\\\\\\n**Example:** \\\\\\\\nInput: s = \\\\\\\\\\\\\"abcabcbb\\\\\\\\\\\\\"\\\\\\\\nOutput: 3\\\\\\\\nExplanation: The answer is \\\\\\\\\\\\\"abc\\\\\\\\\\\\\", with the length of 3. \\\\\", \\\\\"code\\\\\": \\\\\"def length_of_longest_substring(s: str) -> int:\\\\\\\\n    char_set = set()\\\\\\\\n    l = 0\\\\\\\\n    max_len = 0\\\\\\\\n    for r in range(len(s)):\\\\\\\\n        while s[r] in char_set:\\\\\\\\n            char_set.remove(s[l])\\\\\\\\n            l += 1\\\\\\\\n        char_set.add(s[r])\\\\\\\\n        max_len = max(max_len, r - l + 1)\\\\\\\\n    return max_len\\\\\", \\\\\"tests\\\\\": [\\\\\"assert length_of_longest_substring(\\\\\\\\\\\\\"abcabcbb\\\\\\\\\\\\\") == 3\\\\\", \\\\\"assert length_of_longest_substring(\\\\\\\\\\\\\"bbbbb\\\\\\\\\\\\\") == 1\\\\\", \\\\\"assert length_of_longest_substring(\\\\\\\\\\\\\"pwwkew\\\\\\\\\\\\\") == 3\\\\\", \\\\\"assert length_of_longest_substring(\\'\\') == 0\\\\\"] }\"'}"