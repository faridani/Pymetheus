"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"\\'Anagram Detector (Medium)\\'\\\\\", \\\\\"description\\\\\": \\\\\"An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of words to check for anagrams.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a dictionary where each key is a word and the corresponding value is a list of all its anagrams.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n    # Sort words alphabetically\\\\\\\\n    sorted_words = sorted(words)\\\\\\\\n    \\\\\\\\n    # Create a dictionary to store anagram groups\\\\\\\\n    anagrams = {}  \\\\\\\\n    current_anagram = \\'\\'\\\\\\\\n    \\\\\\\\n    for word in sorted_words:\\\\\\\\n        # If the current word does not form part of any anagram group\\\\\\\\n        if current_anagram != word:\\\\\\\\n            # If there is a non-empty current anagram, add it to the dictionary\\\\\\\\n            if current_anagram:\\\\\\\\n                anagrams[current_anagram] = sorted(anagrams.get(current_anagram, []))\\\\\\\\n            \\\\\\\\n            # The current word becomes the new anagram\\\\\\\\n            current_anagram = \\'\\'.join(sorted(word))\\\\\\\\n        else:\\\\\\\\n            # Add the current word to the current anagram\\\\\\\\n            current_anagram += word\\\\\\\\n    \\\\\\\\n    # Add the last anagram (if any) to the dictionary\\\\\\\\n    if current_anagram:\\\\\\\\n        anagrams[current_anagram] = sorted(anagrams.get(current_anagram, []))\\\\\\\\n    \\\\\\\\n    return anagrams\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"enlist\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\", \\\\\\\\\\\\\"invest\\\\\\\\\\\\\", \\\\\\\\\\\\\"example\\\\\\\\\\\\\"]) == {\\\\\\\\n          \\\\\\\\\\\\\"enlist\\\\\\\\\\\\\": [\\\\\\\\\\\\\"listen\\\\\\\\\\\\\"],\\\\\\\\n          \\\\\\\\\\\\\"silent\\\\\\\\\\\\\": [\\\\\\\\\\\\\"listen\\\\\\\\\\\\\"],\\\\\\\\n          \\\\\\\\\\\\\"invest\\\\\\\\\\\\\": [],\\\\\\\\n          \\\\\\\\\\\\\"example\\\\\\\\\\\\\": []\\\\\\\\n      }\\\\\", \\\\\"assert find_anagrams([\\\\\\\\\\\\\"abcd\\\\\\\\\\\\\", \\\\\\\\\\\\\"dcba\\\\\\\\\\\\\", \\\\\\\\\\\\\"bacd\\\\\\\\\\\\\"]) == {\\\\\\\\n          \\\\\\\\\\\\\"abcd\\\\\\\\\\\\\": [\\\\\\\\\\\\\"dcba\\\\\\\\\\\\\"],\\\\\\\\n          \\\\\\\\\\\\\"dcba\\\\\\\\\\\\\": [\\\\\\\\\\\\\"abcd\\\\\\\\\\\\\"]\\\\\\\\n      }\\\\\", \\\\\"assert find_anagrams([\\\\\\\\\\\\\"python\\\\\\\\\\\\\", \\\\\\\\\\\\\"typhon\\\\\\\\\\\\\", \\\\\\\\\\\\\"phyton\\\\\\\\\\\\\"]) == {\\\\\\\\n          \\\\\\\\\\\\\"pytho n\\\\\\\\\\\\\": [\\\\\\\\\\\\\"python\\\\\\\\\\\\\", \\\\\\\\\\\\\"typhon\\\\\\\\\\\\\", \\\\\\\\\\\\\"phyton\\\\\\\\\\\\\"],\\\\\\\\n          \\\\\\\\\\\\\"on\\\\\\\\\\\\\": []\\\\\\\\n      }\\\\\"] }\"'}"