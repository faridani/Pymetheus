"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"\\'Anagram Finder (Hard)\\'\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_anagrams` that takes a list of strings and returns another list containing the pairs of strings that are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: List[str]) -> List[List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of strings containing only lowercase letters.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list, each element of which is also a list. Each inner list contains pairs of strings that are anagrams of each other.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def find_anagrams(words: List[str]) -> List[List[str]]:\\\\\\\\n    # Sort the words and create a dictionary where the key is the sorted word and the value is the original word\\\\\\\\n    word_dict = {sorted(word): word for word in words}\\\\\\\\n    \\\\\\\\n    # Create an empty list to store the results\\\\\\\\n    results = []\\\\\\\\n    \\\\\\\\n    # Iterate through each sorted word and check if it exists in the dictionary as a key\\\\\\\\n    for sorted_word in word_dict.keys():\\\\\\\\n        # If it does, add it and its corresponding value (the original anagram) to the results list\\\\\\\\n        if sorted_word in word_dict:\\\\\\\\n            results.append([word_dict[sorted_word], sorted_word])\\\\\\\\n    \\\\\\\\n    # Return the results\\\\\\\\n    return results\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\", \\\\\\\\\\\\\"enlist\\\\\\\\\\\\\"]) == [[\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"enlist\\\\\\\\\\\\\"], [\\\\\\\\\\\\\"silent\\\\\\\\\\\\\"]]\\\\\", \\\\\"assert find_anagrams([\\\\\\\\\\\\\"rate\\\\\\\\\\\\\", \\\\\\\\\\\\\"earth\\\\\\\\\\\\\", \\\\\\\\\\\\\"heart\\\\\\\\\\\\\"]) == [[\\\\\\\\\\\\\"earth\\\\\\\\\\\\\", \\\\\\\\\\\\\"heart\\\\\\\\\\\\\"], [\\\\\\\\\\\\\"rate\\\\\\\\\\\\\"]]\\\\\", \\\\\"assert find_anagrams([\\\\\\\\\\\\\"apple\\\\\\\\\\\\\", \\\\\\\\\\\\\"apples\\\\\\\\\\\\\"]) == [[\\\\\\\\\\\\\"apple\\\\\\\\\\\\\", \\\\\\\\\\\\\"apples\\\\\\\\\\\\\"]]\\\\\"] }\"'}"