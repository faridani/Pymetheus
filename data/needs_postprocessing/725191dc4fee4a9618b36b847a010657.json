"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Huffman Coding Implementation\\\\\", \\\\\"description\\\\\": \\\\\"Implement a Huffman coding algorithm in Python. The function should take a string as input and return a tuple containing two elements:\\\\\\\\n\\\\\\\\n1.  A dictionary representing the Huffman code for each unique character in the input string.\\\\\\\\n2.  The encoded string (a binary representation of the input string using the generated Huffman codes).\\\\\\\\n\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef huffman_coding(text: str) -> tuple:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `text` (str): The input string to be encoded.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a tuple containing:\\\\\\\\n    1.  A dictionary mapping characters to their Huffman codes.\\\\\\\\n    2.  The encoded binary string representation of the input text.\\\\\", \\\\\"code\\\\\": \\\\\"import heapq\\\\\\\\nfrom collections import Counter\\\\\\\\n\\\\\\\\ndef huffman_coding(text: str) -> tuple:\\\\\\\\n    if not text:\\\\\\\\n        return {}, \\'\\'\\\\\\\\n\\\\\\\\n    frequencies = Counter(text)\\\\\\\\n    heap = [[freq, char, None, None] for char, freq in frequencies.items()]\\\\\\\\n    heapq.heapify(heap)\\\\\\\\n\\\\\\\\n    while len(heap) > 1:\\\\\\\\n        left = heapq.heappop(heap)\\\\\\\\n        right = heapq.heappop(heap)\\\\\\\\n        parent = [left[0] + right[0], None, left, right]\\\\\\\\n        heapq.heappush(heap, parent)\\\\\\\\n\\\\\\\\n    codes = {}\\\\\\\\n    def traverse_tree(node, current_code):\\\\\\\\n        if node is None:\\\\\\\\n            return\\\\\\\\n        if node[1] is not None:\\\\\\\\n            codes[node[1]] = current_code\\\\\\\\n        traverse_tree(node[2], current_code + \\'0\\')\\\\\\\\n        traverse_tree(node[3], current_code + \\'1\\')\\\\\\\\n    traverse_tree(heapq.heappop(heap)[2], \\'\\')\\\\\\\\n\\\\\\\\n    encoded_text = \\'\\'.join([codes[char] for char in text])\\\\\\\\n\\\\\\\\n    return codes, encoded_text\\\\\", \\\\\"tests\\\\\": [\\\\\"\\'assert huffman_coding(\\'\\') == ({}, \\'\\')\\'\\\\\", \\\\\"\\'assert huffman_coding(\\'AAAA\\') == ({\\'A\\': \\'0\\'}, \\'0000\\')\\'\\\\\", \\\\\"\\'assert huffman_coding(\\'AABBBB\\') == ({\\'A\\': \\'0\\', \\'B\\': \\'1\\'}, \\'011111\\')\\'\\\\\"] }\"'}"