{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Medium: Prime Factorization\\\", \\\"description\\\": \\\"Given a positive integer `n`, write a function `prime_factors` that returns a list of its prime factors. The prime factors should be sorted in ascending order.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef prime_factors(n: int) -> list:\\\\n```\\\\n\\\\n#### Input\\\\n- `n` (int): A positive integer to find the prime factors for.\\\\n\\\\n#### Output\\\\n- Returns a list of prime factors of the input number, sorted in ascending order.\\\\n\\\", \\\"code\\\": \\\"def prime_factors(n: int) -> list:\\\\n    def is_prime(num: int) -> bool:\\\\n        if num < 2:\\\\n            return False\\\\n        for i in range(2, int(num**0.5) + 1):\\\\n            if num % i == 0:\\\\n                return False\\\\n        return True\\\\n    factors = []\\\\n    i = 2\\\\n    while n > 1:\\\\n        if is_prime(i) and n % i == 0:\\\\n            factors.append(i)\\\\n            n //= i\\\\n        else:\\\\n            i += 1\\\\n    return factors\\\", \\\"tests\\\": [\\\"assert prime_factors(12) == [2, 2, 3]\\\", \\\"assert prime_factors(37) == [37]\\\", \\\"assert prime_factors(100) == [2, 2, 5, 5]\\\", \\\"assert prime_factors(999) == [3, 3, 3, 37]\\\"] }\""
}