"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"\\'Anagram Finder (Hard)\\'\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_anagrams` that takes a list of words as input and returns a dictionary where the keys are words and the values are lists of anagrams for each word.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of strings containing words separated by spaces.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a dictionary where the keys are unique words in the input list and the values are lists of anagrams for each key word.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from collections import Counter, defaultdict\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n    # Count the frequency of each character in each word\\\\\\\\n    count = defaultdict(int)\\\\\\\\n    for word in words:\\\\\\\\n        count.update(Counter(word))\\\\\\\\n    \\\\\\\\n    # Create a dictionary with anagrams as values\\\\\\\\n    anagrams = {} \\\\\\\\n    for word in words:\\\\\\\\n        sorted_word = sorted(word)\\\\\\\\n        anagram = \\'\\'.join(sorted_word)\\\\\\\\n        if anagram not in anagrams.keys():\\\\\\\\n            anagrams[anagram] = []\\\\\\\\n        anagrams[anagram].append(word)\\\\\\\\n    \\\\\\\\n    # Filter out empty values (no anagrams found for the word)\\\\\\\\n    filtered_anagrams = {key: value for key, value in anagrams.items() if value}\\\\\\\\n    \\\\\\\\n    return filtered_anagrams\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\'listen\\', \\'silent\\', \\'enlist\\', \\'education\\']) == {\\'listen\\': [\\'listen\\'], \\'silent\\': [\\'silent\\'], \\'enlist\\': [\\'enlist\\'], \\'education\\': [\\'education\\']}\\\\\", \\\\\"assert find_anagrams([\\'hello\\', \\'world\\', \\'holloW\\', \\' dlrow\\']) == {\\'hello\\': [\\'hello\\'], \\'world\\': [\\'world\\'], \\'holloW\\': [\\'holloW\\'], \\'dlrow\\': [\\'dlrow\\']}\\\\\"] }\"'}"