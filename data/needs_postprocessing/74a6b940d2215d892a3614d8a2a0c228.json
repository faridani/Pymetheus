{
    "model": "codegeex4:9b",
    "response": "\"{ \\\"title\\\": \\\"Hard: Longest Palindromic Subsequence\\\", \\\"description\\\": \\\"Given a string, find the length of its longest palindromic subsequence. A palindrome is a sequence that reads the same forward and backward. Your task is to determine the maximum length of such a sequence in the given string.\\\\n\\\\n#### Function Signature:\\\\n```python\\\\ndef longest_palindrome_subseq(s: str) -> int:\\\\n```\\\\n\\\\n#### Input:\\\\n- `s` (str): A string containing lowercase English letters (a-z).\\\\n\\\\n#### Output:\\\\n- Returns an integer representing the length of the longest palindromic subsequence.\\\\n\\\\n#### Constraints:\\\\n- 1 \\u2264 |s| \\u2264 1000, where |s| denotes the length of the string `s`.\\\\n\\\\n#### Example:\\\\nFor the input `s = 'bbbab'`, the function should return 4 as the longest palindromic subsequence is `'bbbb'` or `'bbab'` or `'bbbb'`.\\\", \\\"code\\\": \\\"def longest_palindrome_subseq(s: str) -> int:\\\\n    n = len(s)\\\\n    dp = [[0] * (n+1) for _ in range(n+1)]\\\\n\\\\n    for i in range(1, n+1):\\\\n        dp[i][i] = 1\\\\n\\\\n    for cl in range(2, n+1):\\\\n        for i in range(1, n-cl+2):\\\\n            j = i + cl - 1\\\\n            if s[i-1] == s[j-1]:\\\\n                dp[i][j] = 2 + dp[i+1][j-1]\\\\n            else:\\\\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\\\\n\\\\n    return dp[1][n]\\\", \\\"tests\\\": [\\\"assert longest_palindrome_subseq(\\\\\\\"bbbab\\\\\\\") == 4\\\", \\\"assert longest_palindrome_subseq(\\\\\\\"abcde\\\\\\\") == 1\\\", \\\"assert longest_palindrome_subseq(\\\\\\\"aab\\\\\\\") == 2\\\", \\\"assert longest_palindrome_subseq(\\\\\\\"a\\\\\\\") == 1\\\"] }\""
}