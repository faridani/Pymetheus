{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Maximum Sum of Divisible Subarrays\\\", \\\"description\\\": \\\"A contiguous subarray of a given array is called divisible if the sum of its elements is divisible by its length. Write a function `max_sum_divisible` that returns the maximum sum of all divisible subarrays of a given array.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef max_sum_divisible(arr: list[int]) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `arr` (list[int]): A list of integers.\\\\n\\\\n#### Output\\\\n- Returns the maximum sum of all divisible subarrays of the input array.\\\\n\\\", \\\"code\\\": \\\"\\\\ndef max_sum_divisible(arr: list[int]) -> int:\\\\n    n = len(arr)\\\\n    prefix_sum = [0] * (n + 1)\\\\n    for i in range(n):\\\\n        prefix_sum[i + 1] = prefix_sum[i] + arr[i]\\\\n    \\\\n    max_sum = 0\\\\n    for i in range(n):\\\\n        for j in range(i, n):\\\\n            subarray_sum = prefix_sum[j + 1] - prefix_sum[i]\\\\n            if (subarray_sum // (j - i + 1)) * (j - i + 1) == subarray_sum:\\\\n                max_sum = max(max_sum, subarray_sum)\\\\n    \\\\n    return max_sum\\\", \\\"tests\\\": [\\\"assert max_sum_divisible([3, 2, 5, 4]) == 9\\\", \\\"assert max_sum_divisible([-1, 0, 1, -1]) == 0\\\", \\\"assert max_sum_divisible([1, 2, 3, 4, 5]) == 15\\\"] }\""
}