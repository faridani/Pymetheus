"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"\\\\\\\\\\\\\"Anagram Detector (Hard)\\\\\\\\\\\\\"\\\\\", \\\\\"description\\\\\": \\\\\"Given two strings, determine if they are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of another word or phrase, usually using all the original letters exactly once.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef are_anagrams(s1: str, s2: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s1` (str): A string containing only lowercase letters.\\\\\\\\n- `s2` (str): A string containing only lowercase letters.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the two input strings are anagrams, `False` otherwise.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def are_anagrams(s1: str, s2: str) -> bool:\\\\\\\\n    # Ensure both strings have the same length\\\\\\\\n    if len(s1) != len(s2):\\\\\\\\n        return False\\\\\\\\n    # Create frequency maps for each string and compare\\\\\\\\n    freq_map1 = {}  # or dict() in Python3.7+\\\\\\\\n    freq_map2 = {}  # or defaultdict(int) in Python3.7+\\\\\\\\n    for char in s1:\\\\\\\\n        if char not in freq_map1:\\\\\\\\n            freq_map1[char] = 1\\\\\\\\n        else:\\\\\\\\n            freq_map1[char] += 1\\\\\\\\n    for char in s2:\\\\\\\\n        if char not in freq_map2:\\\\\\\\n            freq_map2[char] = 1\\\\\\\\n        else:\\\\\\\\n            freq_map2[char] += 1\\\\\\\\n    # Compare frequency maps\\\\\\\\n    for key, value in freq_map1.items():\\\\\\\\n        if key not in freq_map2 or freq_map2[key] != value:\\\\\\\\n            return False\\\\\\\\n    # If we\\'ve made it this far, the strings are anagrams\\\\\\\\n    return True\\\\\", \\\\\"tests\\\\\": [\\\\\"assert are_anagrams(\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert are_anagrams(\\\\\\\\\\\\\"hello\\\\\\\\\\\\\", \\\\\\\\\\\\\"world\\\\\\\\\\\\\") == False\\\\\", \\\\\"assert are_anagrams(\\\\\\\\\\\\\"eat\\\\\\\\\\\\\", \\\\\\\\\\\\\"tea\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert are_anagrams(\\\\\\\\\\\\\"racecar\\\\\\\\\\\\\", \\\\\\\\\\\\\"carrace\\\\\\\\\\\\\") == True\\\\\"] }\"'}"