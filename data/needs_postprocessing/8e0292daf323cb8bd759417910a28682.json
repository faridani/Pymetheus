"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Detector (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_anagrams` that given a list of strings, finds all pairs of strings that are anagrams of each other.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(word_list: List[str]) -> List[List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `word_list` (List[str]): A list of strings that may contain letters, numbers, spaces, and punctuation.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of lists, where each inner list contains two strings that are anagrams of each other.\\\\\\\\n\\\\\\\\nFor example if the input is `[\\'listen\\', \\'silent\\', \\'enlist\\', \\'education\\']`, the output should be `[[\\'listen\\', \\'silent\\'], [\\'enlist\\', \\'listened\\']]`. Note that order of pairs does not matter, and self-anagrams are also allowed.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def find_anagrams(word_list: List[str]) -> List[List[str]]:\\\\\\\\n    # Create a dictionary to count characters for each word\\\\\\\\n    word_dict = {word: Counter(char for char in word) for word in word_list}\\\\\\\\n    \\\\\\\\n    # Find pairs of words with the same character counts\\\\\\\\n    anagrams = set()\\\\\\\\n    for word1, word2 in combinations(word_list, 2):\\\\\\\\n        if word_dict[word1] == word_dict[word2]:\\\\\\\\n            anagrams.add((word1, word2)) \\\\\\\\n    \\\\\\\\n    # Convert the list of pairs to a list of lists and return it\\\\\\\\n    return list(anagrams)\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\'listen\\', \\'silent\\', \\'enlist\\', \\'education\\']) == [[\\'listen\\', \\'silent\\'], [\\'enlist\\', \\'listened\\']]\\\\\", \\\\\"assert find_anagrams([\\'cars\\', \\'for\\', \\'potatoes\\', \\'racers\\', \\'action\\']) == [[\\'cars\\', \\'racers\\'], [\\'for\\', \\'orcf\\']]\\\\\"] }\"'}"