{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Medium: Counting Islands\\\", \\\"description\\\": \\\"Given a 2D array `grid` of size `m x n`, where each cell contains either '0' or '1', and an integer `k`, write a function `count_islands` that returns the number of islands with exactly `k` cells.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef count_islands(grid: list[list[str]], k: int) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `grid` (list[list[str]]): A 2D array of size `m x n`, where each cell contains either '0' or '1'.\\\\n- `k` (int): An integer representing the number of cells an island should have.\\\\n\\\\n#### Output\\\\n- Returns the number of islands with exactly `k` cells.\\\", \\\"code\\\": \\\"from typing import List\\\\n\\\\ndef count_islands(grid: List[List[str]], k: int) -> int:\\\\n    def dfs(i, j):\\\\n        if 0 <= i < len(grid) and 0 <= j < len(grid[0]) and grid[i][j] == '1':\\\\n            grid[i][j] = '2'\\\\n            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\\\\n                dfs(i + dx, j + dy)\\\\n\\\\n    count = 0\\\\n    for i in range(len(grid)):\\\\n        for j in range(len(grid[0])):\\\\n            if grid[i][j] == '1':\\\\n                dfs(i, j)\\\\n                if sum(row.count('2') for row in grid) == k:\\\\n                    count += 1\\\\n\\\\n    return count\\\", \\\"tests\\\": [\\\"assert count_islands([['1','1','1'],['1','0','0'],['1','1','1']], 3) == 1\\\", \\\"assert count_islands([['1','1','1'],['1','0','0'],['1','1','1']], 4) == 0\\\", \\\"assert count_islands([['1'], ['1', '1'], ['1']], 2) == 1\\\", \\\"assert count_islands([['0'], ['1', '1'], ['0']], 2) == 1\\\"] }\""
}