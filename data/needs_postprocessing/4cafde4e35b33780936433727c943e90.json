"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Subtree Summation\\\\\", \\\\\"description\\\\\": \\\\\"You are given the root of a binary tree where each node has an integer value. Write a function `subtree_sum` that takes the root of the tree and a target node value as input, and returns the sum of all nodes in the subtree rooted at the target node.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef subtree_sum(root, target_value) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `root` (TreeNode): The root of a binary tree.\\\\\\\\n- `target_value`: An integer representing the value of the target node.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns an integer representing the sum of all nodes in the subtree rooted at the target node. Return 0 if the target node is not found.\\\\\", \\\\\"code\\\\\": \\\\\"class TreeNode:\\\\\\\\n    def __init__(self, val=0, left=None, right=None):\\\\\\\\n        self.val = val\\\\\\\\n        self.left = left\\\\\\\\n        self.right = right\\\\\\\\n\\\\\\\\ndef subtree_sum(root, target_value) -> int:\\\\\\\\n    if not root:\\\\\\\\n        return 0\\\\\\\\n\\\\\\\\n    def dfs(node):\\\\\\\\n        if not node:\\\\\\\\n            return 0\\\\\\\\n        if node.val == target_value:\\\\\\\\n            return node.val + dfs(node.left) + dfs(node.right)\\\\\\\\n        else:\\\\\\\\n            return dfs(node.left) + dfs(node.right)\\\\\\\\n    return dfs(root)\\\\\", \\\\\"tests\\\\\": [\\\\\"root = TreeNode(5, TreeNode(3), TreeNode(8))\\\\\\\\n root.left.left = TreeNode(1)\\\\\\\\n root.left.right = TreeNode(4)\\\\\\\\n assert subtree_sum(root, 3) == 8\\\\\", \\\\\"root = TreeNode(10, TreeNode(7, TreeNode(2), TreeNode(6)), TreeNode(15))\\\\\\\\n assert subtree_sum(root, 10) == 32\\\\\", \\\\\"root = TreeNode(1)\\\\\\\\n assert subtree_sum(root, 1) == 1\\\\\", \\\\\"assert subtree_sum(None, 1) == 0\\\\\"] }\"'}"