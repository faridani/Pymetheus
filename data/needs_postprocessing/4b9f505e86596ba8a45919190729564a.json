{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Easy: Prime Factorization\\\", \\\"description\\\": \\\"Write a function `prime_factors` that takes an integer `n` as input and returns a list of its prime factors. For example, the prime factors of 12 are `[2, 2, 3]`, because `2 * 2 * 3 = 12`. If the input number is not divisible by any primes up to the square root of the number, consider it as a prime itself.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef prime_factors(n: int) -> list:\\\\n```\\\\n\\\\n#### Input\\\\n- `n` (int): An integer that may be divisible by multiple prime factors.\\\\n\\\\n#### Output\\\\n- Returns a list of integers representing the prime factors of the input number.\\\", \\\"code\\\": \\\"import math\\\\n\\\\ndef prime_factors(n: int) -> list:\\\\n    factors = []\\\\n    i = 2\\\\n    while n > 1:\\\\n        if n % i == 0:\\\\n            factors.append(i)\\\\n            n //= i\\\\n        else:\\\\n            i += 1\\\\n            if i * i > n:\\\\n                factors.append(n)\\\\n                break\\\\n    return factors\\\\n\\\", \\\"tests\\\": [\\\"assert prime_factors(12) == [2, 2, 3]\\\", \\\"assert prime_factors(25) == [5, 5]\\\", \\\"assert prime_factors(37) == [37]\\\", \\\"assert prime_factors(48) == [2, 2, 2, 2, 3]\\\"] }\""
}