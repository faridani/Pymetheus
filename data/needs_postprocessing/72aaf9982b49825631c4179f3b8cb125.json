{
    "model": "llama3:latest",
    "response": "{\"title\": \"Minimum Window Substring\", \"description\": \"Write a function `min_window_substring` that takes two strings, `s1` and `s2`, as input. The function should return the minimum window substring of `s1` that contains all characters from `s2`. If no such substring exists, it should return an empty string.\\n\\n#### Function Signature\\n```python\\ndef min_window_substring(s1: str, s2: str) -> str:\\n```\\n\\n#### Input\\n- `s1` (str): The main string to search for the minimum window substring.\\n- `s2` (str): The target string that contains all characters from `s2`.\\n\\n#### Output\\n- Returns the minimum window substring of `s1` that contains all characters from `s2`, or an empty string if no such substring exists.\", \"code\": \"\\nfrom collections import defaultdict\\n\\ndef min_window_substring(s1: str, s2: str) -> str:\\n    if not s1 or not s2:\\n        return \", \"s2\": \"dict_s2[char] += 1\\n\\n    required_chars = len(dict_s2)\\n\\n    left, right = 0, 0\\n    formed_chars = 0\\n\\n    window_counts = defaultdict(int)\\n\\n    min_len = float('inf')\\n    min_window =\", \"len(s1)\": \"character = s1[right]\\n        window_counts[character] += 1\\n\\n        if character in dict_s2 and window_counts[character] == dict_s2[character]:\\n            formed_chars += 1\\n\\n        while left <= right and formed_chars == required_chars:\\n            character = s1[left]\\n\\n            if right - left + 1 < min_len:\\n                min_len = right - left + 1\\n                min_window = s1[left:right + 1]\\n\\n            window_counts[character] -= 1\\n            if character in dict_s2 and window_counts[character] < dict_s2[character]:\\n                formed_chars -= 1\\n\\n            left += 1\\n\\n        right += 1\\n\\n    return min_window\", \"tests\": [\"assert min_window_substring(\\\"ADOBECODEBANC\\\", \\\"ABC\\\") == 'BANC'\", \"assert min_window_substring(\\\"hello\\\", \\\"lo\\\") == 'lo'\", \"assert min_window_substring(\", \", \\\"abc\\\") == ''\"]}"
}