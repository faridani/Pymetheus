{
    "model": "llama3:latest",
    "response": "{\"title\": \"Minimum Window Substring\", \"description\": \"Given two strings `s1` and `s2`, find the minimum window substring of `s1` that contains all characters of `s2`. If there are multiple such windows, return the one with the smallest length.\\n\\n#### Function Signature\\n```python\\ndef min_window_substring(s1: str, s2: str) -> str:\\n```\\n\\n#### Input\\n- `s1` (str): The string to search for the minimum window substring.\\n- `s2` (str): The string that must be contained in the minimum window substring.\\n\\n#### Output\\n- Returns the minimum window substring of `s1` that contains all characters of `s2`. If no such window is found, returns an empty string.\", \"code\": \"\\nfrom collections import defaultdict\\n\\ndef min_window_substring(s1: str, s2: str) -> str:\\n    if not s1 or not s2:\\n        return ''\\n\\n    d = defaultdict(int)\\n    for char in s2:\\n        d[char] += 1\\n\\n    required_chars = len(d)\\n\\n    left, right = 0, 0\\n    formed_chars = 0\\n\\n    window_counts = defaultdict(int)\\n\\n    min_len = float('inf')\\n    min_window = ''\\n\\n    while right < len(s1):\\n        character = s1[right]\\n        window_counts[character] += 1\\n\\n        if character in d and window_counts[character] == d[character]:\\n            formed_chars += 1\\n\\n        while left <= right and formed_chars == required_chars:\\n            character = s1[left]\\n\\n            if right - left + 1 < min_len:\\n                min_len = right - left + 1\\n                min_window = s1[left:right + 1]\\n\\n            window_counts[character] -= 1\\n            if character in d and window_counts[character] < d[character]:\\n                formed_chars -= 1\\n\\n            left += 1\\n\\n        right += 1\\n\\n    return min_window\", \"tests\": [\"assert min_window_substring(\\\"abcdebfghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\\\", \\\"abcdefghijklmnopqrstuvwxyz\\\") == 'abcdefghijklmnopqrstuvwxyz'\", \"assert min_window_substring(\", \"Hello, World!\", \"oid\", \"oid\", \"assert min_window_substring(\", \"Hello, World!\", \"worl\", \"world\", \"assert min_window_substring(\", \", \", \") == ''\"]}"
}