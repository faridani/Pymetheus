{
    "model": "gemma2:27b",
    "response": "\"{ \\\"title\\\": \\\"Medium - String Compression\\\", \\\"description\\\": \\\"Given an input string consisting of lowercase letters, write a function `compress_string` that compresses the string by replacing consecutive occurrences of the same character with the character followed by its count. For example, 'aaabbbbccc' would be compressed to 'a3b4c3'. If the compressed string is not shorter than the original string, return the original string.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef compress_string(s: str) -> str:\\\\n```\\\\n\\\\n#### Input\\\\n- `s` (str): A string consisting of lowercase letters.\\\\n\\\\n#### Output\\\\n- Returns the compressed string if it is shorter than the original string, otherwise returns the original string.\\\", \\\"code\\\": \\\"def compress_string(s: str) -> str:\\\\n    if len(s) == 0:\\\\n        return s\\\\n    compressed = ''\\\\n    count = 1\\\\n    prev_char = s[0]\\\\n    for i in range(1, len(s)):\\\\n        if s[i] == prev_char:\\\\n            count += 1\\\\n        else:\\\\n            compressed += prev_char + (str(count) if count > 1 else '')\\\\n            prev_char = s[i]\\\\n            count = 1\\\\n    compressed += prev_char + (str(count) if count > 1 else '')\\\\n    return compressed if len(compressed) < len(s) else s\\\", \\\"tests\\\": [\\\"assert compress_string('aaabbbbccc') == 'a3b4c3'\\\", \\\"assert compress_string('aabbcc') == 'aabbcc'\\\", \\\"assert compress_string('') == ''\\\", \\\"assert compress_string('aaaaaaa') == 'a7'\\\"] }\""
}