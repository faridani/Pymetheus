"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Detector (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"An anagram is a word or phrase formed by rearranging the letters of another word or phrase, typically using all the original letters exactly once. Write a function `find_anagrams` that finds all the anagrams within a list of words.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of strings containing words that may contain letters, numbers, spaces, and punctuation.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a dictionary where keys are anagrams and values are lists of the corresponding original words.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from collections import Counter\\\\\\\\n\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n    # Create a counter for each word to count the frequency of characters\\\\\\\\n    word_counters = {word: Counter(word) for word in words}\\\\\\\\n    \\\\\\\\n    # Combine all the counters into one large counter\\\\\\\\n    total_counter = sum(word_counters.values(), Counter())\\\\\\\\n    \\\\\\\\n    # Create an empty dictionary to store the results\\\\\\\\n    anagrams = {}\\\\\\\\n    \\\\\\\\n    # Iterate over the total counter and find anagrams\\\\\\\\n    for anagram, count in total_counter.items():\\\\\\\\n        if count > 1:\\\\\\\\n            anagram_list = anagrams.get(anagram, [])\\\\\\\\n            anagram_list.append((words[i] for i, (word, counter) in enumerate(word_counters) if all(counter[letter] == anagram for letter in anagram)))\\\\\\\\n            anagrams[anagram] = anagram_list\\\\\\\\n    \\\\\\\\n    # Convert the anagram dictionary values to sets to remove duplicates\\\\\\\\n    for key, value in anagrams.items():\\\\\\\\n        anagrams[key] = set(value)\\\\\\\\n    \\\\\\\\n    return anagrams\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\'listen\\', \\'silent\\', \\'enlist\\']) == {\\'enlist\\': [\\'listen\\', \\'silent\\'], \\'silent\\': [\\'listen\\', \\'enlist\\'], \\'listen\\': [\\'enlist\\', \\'silent\\']}\\\\\", \\\\\"assert find_anagrams([\\'python\\', \\'typhon\\', \\'hotpot\\', \\'topsho\\']) == {\\'h\\': [\\'hotpot\\', \\'typhon\\', \\'topsho\\'], \\'t\\': [\\'hotpot\\', \\'typhon\\', \\'topsho\\'], \\'p\\': [\\'python\\', \\'topsho\\'], \\'y\\': [\\'typhon\\'], \\'o\\': [\\'topsho\\'], \\'n\\': [\\'topsho\\'], \\'s\\': [\\'topsho\\']}\\\\\", \\\\\"assert find_anagrams([\\'apple\\', \\'apples\\', \\'app\\', \\'appeal\\']) == {\\'p\\': [\\'apple\\', \\'apples\\', \\'app\\'], \\'e\\': [\\'apple\\', \\'apples\\', \\'app\\', \\'appeal\\'], \\'a\\': [\\'apple\\', \\'apples\\', \\'app\\', \\'appeal\\'], \\'l\\': [\\'apple\\', \\'apples\\', \\'app\\'], \\'l\\': [\\'apple\\', \\'apples\\', \\'app\\']}\\\\\", \\\\\"assert find_anagrams([\\'hello\\', \\'olleh\\']) == {\\'l\\': [\\'hello\\', \\'olleh\\'], \\'o\\': [\\'hello\\', \\'olleh\\'], \\'h\\': [\\'hello\\', \\'olleh\\'], \\'e\\': [\\'hello\\', \\'olleh\\']}\\\\\"] }\"'}"