"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"\\'Anagram Finder (Hard)\\'\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_anagrams` that takes a list of strings as input and returns all pairs of strings that are anagrams of each other.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: List[str]) -> List[List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of strings containing only lowercase letters.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of lists, where each inner list contains two strings that are anagrams of each other.\\\\\\\\n\\\\\\\\n#### Hint:\\\\\\\\nFirst sort the characters in each string in alphabetical order and then compare the sorted strings.\\\\\", \\\\\"code\\\\\": \\\\\"def find_anagrams(words: List[str]) -> List[List[str]]:\\\\\\\\n    # Create a dictionary to store sorted words as keys and their original words as values\\\\\\\\n    sorted_words = {sorted(word): word for word in words}\\\\\\\\n    \\\\\\\\n    # Initialize an empty list to store the results\\\\\\\\n    results = []\\\\\\\\n    \\\\\\\\n    # Iterate through all pairs of words in the dictionary\\\\\\\\n    for word1 in sorted_words:\\\\\\\\n        for word2 in sorted_words:\\\\\\\\n            if word1 != word2 and sorted(word1) == sorted(word2):\\\\\\\\n                results.append([sorted_words[word1], sorted_words[word2]])\\\\\\\\n    \\\\\\\\n    return results\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\'listen\\', \\'silent\\', \\'enlist\\']) == [[\\'listen\\', \\'enlist\\'], [\\'silent\\']]\\\\\", \\\\\"assert find_anagrams([\\'cat\\', \\'act\\', \\'tac\\', \\'atc\\']) == [[\\'act\\', \\'tac\\', \\'atc\\'], [\\'cat\\']]\\\\\", \\\\\"assert find_anagrams([\\'dog\\', \\'god\\']) == []\\\\\"] }\"'}"