"{'model': 'llama3.1:8b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Maximal Square\\\\\", \\\\\"description\\\\\": \\\\\"Given a 2D binary matrix filled with zeros and ones, find the largest square that can be formed by choosing cells from this matrix. The size of the square will not exceed the size of the given matrix.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef maximal_square(matrix: List[List[str]]) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `matrix` (List[List[str]]): A 2D binary matrix filled with zeros and ones.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the side length of the maximal square that can be formed by choosing cells from this matrix.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from typing import List\\\\\\\\n\\\\\\\\ndef maximal_square(matrix: List[List[str]]) -> int:\\\\\\\\n    if not matrix or not all(len(row) == len(matrix[0]) for row in matrix):\\\\\\\\n        return 0\\\\\\\\n\\\\\\\\n    rows = len(matrix)\\\\\\\\n    cols = len(matrix[0])\\\\\\\\n\\\\\\\\n    dp = [[0] * cols for _ in range(rows)]\\\\\\\\n\\\\\\\\n    max_side = 0\\\\\\\\n\\\\\\\\n    for i in range(rows):\\\\\\\\n        for j in range(cols):\\\\\\\\n            if matrix[i][j] == \\'1\\':\\\\\\\\n                dp[i][j] = 1\\\\\\\\n                if i > 0 and j > 0:\\\\\\\\n                    dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\\\\\\\\n                max_side = max(max_side, dp[i][j])\\\\\\\\n\\\\\\\\n    return max_side\\\\\\\\n\\\\\", \\\\\"tests\\\\\": [\\\\\"assert maximal_square([[\\\\\\\\\\\\\"0\\\\\\\\\\\\\",\\\\\\\\\\\\\"0\\\\\\\\\\\\\",\\\\\\\\\\\\\"0\\\\\\\\\\\\\"],[\\\\\\\\\\\\\"0\\\\\\\\\\\\\",\\\\\\\\\\\\\"0\\\\\\\\\\\\\",\\\\\\\\\\\\\"0\\\\\\\\\\\\\"],[\\\\\\\\\\\\\"0\\\\\\\\\\\\\",\\\\\\\\\\\\\"0\\\\\\\\\\\\\",\\\\\\\\\\\\\"0\\\\\\\\\\\\\"]]) == 0\\\\\", \\\\\"assert maximal_square([[\\\\\\\\\\\\\"0\\\\\\\\\\\\\",\\\\\\\\\\\\\"1\\\\\\\\\\\\\",\\\\\\\\\\\\\"1\\\\\\\\\\\\\"],[\\\\\\\\\\\\\"1\\\\\\\\\\\\\",\\\\\\\\\\\\\"1\\\\\\\\\\\\\",\\\\\\\\\\\\\"1\\\\\\\\\\\\\"],[\\\\\\\\\\\\\"1\\\\\\\\\\\\\",\\\\\\\\\\\\\"1\\\\\\\\\\\\\",\\\\\\\\\\\\\"0\\\\\\\\\\\\\"]]) == 4\\\\\", \\\\\"assert maximal_square([[\\\\\\\\\\\\\"1\\\\\\\\\\\\\",\\\\\\\\\\\\\"1\\\\\\\\\\\\\",\\\\\\\\\\\\\"1\\\\\\\\\\\\\"],[\\\\\\\\\\\\\"1\\\\\\\\\\\\\",\\\\\\\\\\\\\"1\\\\\\\\\\\\\",\\\\\\\\\\\\\"1\\\\\\\\\\\\\"],[\\\\\\\\\\\\\"1\\\\\\\\\\\\\",\\\\\\\\\\\\\"1\\\\\\\\\\\\\",\\\\\\\\\\\\\"1\\\\\\\\\\\\\"]]) == 9\\\\\"] }\"'}"