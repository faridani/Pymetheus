{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Maximum Sum of Subarray with at most K Swaps\\\", \\\"description\\\": \\\"Given an array of integers and a positive integer k, find the maximum sum of a subarray that can be obtained by performing at most k swaps.\\\\n\\\\nA swap consists in replacing two adjacent elements. If no such subarray exists, return 0.\\\\n\\\\n#### Function Signature\\\\n\\\\n```python\\\\ndef max_sum_subarray(arr: list[int), k: int) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n\\\\n- `arr` (list[int)): A list of integers.\\\\n- `k` (int): The maximum number of swaps allowed.\\\\n\\\\n#### Output\\\\n\\\\n- Returns the maximum sum of a subarray that can be obtained by performing at most k swaps, or 0 if no such subarray exists.\\\", \\\"code\\\": \\\"\\\\nimport heapq\\\\n\\\\ndef max_sum_subarray(arr: list[int), k: int) -> int:\\\\n    n = len(arr)\\\\n    max_heap = []\\\\n    for i in range(n):\\\\n        heapq.heappush(max_heap, (-arr[i], i))\\\\n    \\\\n    swaps = 0\\\\n    sum = 0\\\\n    left = 0\\\\n    \\\\n    while max_heap:\\\\n        right = -1\\\\n        while right < n-1 and max_heap:\\\\n            right += 1\\\\n            if -max_heap[0][0] + arr[right] > 0:\\\\n                temp = heapq.heappop(max_heap)\\\\n                if -temp[0] != arr[left]:\\\\n                    sum -= temp[0]\\\\n                left += 1\\\\n                if swaps < k:\\\\n                    max_heap.append((-arr[right], right))\\\\n                else:\\\\n                    break\\\\n            else:\\\\n                break\\\\n        \\\\n        if right < n-1 and swaps >= k:\\\\n            return 0\\\\n        \\\\n        if left == n:\\\\n            return sum\\\\n        \\\\n    return -sum\\\\n\\\\n\\\", \\\"tests\\\": [\\\"assert max_sum_subarray([10,2,7,8,5], 3) == 18\\\", \\\"assert max_sum_subarray([-1,-2,4,5,-6], 2) == 9\\\", \\\"assert max_sum_subarray([-1,-1,-1], 0) == 0\\\", \\\"assert max_sum_subarray([1,1,1], 0) == 3\\\"] }\""
}