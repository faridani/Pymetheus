"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Roman Numeral Conversion (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `convert_to_roman` that converts an integer between 1 and 3999 to its equivalent Roman numeral representation. \\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef convert_to_roman(number: int) -> str:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `number` (int): An integer between 1 and 3999 inclusive.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a string representing the equivalent Roman numeral of the given number.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def convert_to_roman(number: int) -> str:\\\\\\\\n    roman = {\\'I\\': 1, \\'IV\\': 4, \\'V\\': 5, \\'IX\\': 9, \\'X\\': 10, \\'XL\\': 40, \\'L\\': 50, \\'XC\\': 90, \\'C\\': 100, \\'CD\\': 400, \\'D\\': 500, \\'CM\\': 900, \\'M\\': 1000}\\\\\\\\n    # Edge cases\\\\\\\\n    if number == 0: return \\'\\'\\\\\\\\n    if number < 1 or number > 3999: raise ValueError(\\'Number must be between 1 and 3999 inclusive.\\') \\\\\\\\n    # Initialize result string\\\\\\\\n    result = \\'\\'\\\\\\\\n    # Iterate through thousands, hundreds, tens, and units\\\\\\\\n    for i in range(4): number, hundred, ten, unit = divmod(number, 1000), divmod(hundred, 100), divmod(ten, 10), number % 10\\\\\\\\n    # Add the appropriate Roman numerals based on the digit values\\\\\\\\n    if hundred: result += roman[f\\'{hundred * 100}\\'] * hundred\\\\\\\\n    if ten and hundred < 4: result += roman[f\\'{ten * 10}\\']\\\\\\\\n    if unit: result += roman[f\\'{unit}\\']\\\\\\\\n    return result\\\\\", \\\\\"tests\\\\\": [\\\\\"assert convert_to_roman(3) == \\'III\\'\\\\\", \\\\\"assert convert_to_roman(4) == \\'IV\\'\\\\\", \\\\\"assert convert_to_roman(9) == \\'IX\\'\\\\\", \\\\\"assert convert_to_roman(58) == \\'LVIII\\'\\\\\", \\\\\"assert convert_to_roman(1994) == \\'MCMXCIV\\'\\\\\"] }\"'}"