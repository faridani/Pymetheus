"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Maximum Subarray Sum with Rotation\\\\\", \\\\\"description\\\\\": \\\\\"Given an array of integers, find the maximum sum of a contiguous subarray after performing at most one rotation on the array. A rotation shifts all elements to the right by one position, with the last element wrapping around to the beginning.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef max_rotated_subarray_sum(nums: list[int]) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `nums` (list[int]): An array of integers.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the maximum sum of a contiguous subarray after at most one rotation.\\\\\\\\n\\\\\\\\n#### Constraints\\\\\\\\n- 1 <= len(nums) <= 10^5\\\\\\\\n- -10^4 <= nums[i] <= 10^4\\\\\\\\n\\\\\\\\n\\\\\\\\n#### Hints\\\\\\\\nConsider how the Kadane\\'s algorithm for finding the maximum subarray sum can be modified to handle rotations.\\\\\", \\\\\"code\\\\\": \\\\\"def max_rotated_subarray_sum(nums: list[int]) -> int:\\\\\\\\n    n = len(nums)\\\\\\\\n    max_so_far = nums[0]\\\\\\\\n    curr_max = nums[0]\\\\\\\\n\\\\\\\\n    for i in range(1, n):\\\\\\\\n        curr_max = max(nums[i], curr_max + nums[i])\\\\\\\\n        max_so_far = max(max_so_far, curr_max)\\\\\\\\n\\\\\\\\n    rotated_max = nums[-1]\\\\\\\\n    curr_sum = nums[-1]\\\\\\\\n\\\\\\\\n\\\\\\\\n    for i in range(n - 2, -1, -1):\\\\\\\\n        curr_sum = curr_sum + nums[i]\\\\\\\\n        rotated_max = max(rotated_max, curr_sum)\\\\\\\\n\\\\\\\\n    return max(max_so_far, rotated_max)\\\\\", \\\\\"tests\\\\\": [\\\\\"assert max_rotated_subarray_sum([1, 2, -3, 4]) == 6\\\\\", \\\\\"assert max_rotated_subarray_sum([-2, -1, 3, 4]) == 7\\\\\", \\\\\"assert max_rotated_subarray_sum([1, -2, 0, 3]) == 3\\\\\", \\\\\"assert max_rotated_subarray_sum([-1, -2, -3, -4]) == -1\\\\\"] }\"'}"