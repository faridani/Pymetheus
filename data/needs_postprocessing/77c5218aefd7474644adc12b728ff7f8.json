{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Hard: Number of Islands\\\", \\\"description\\\": \\\"Given an m x n binary matrix grid where 0 represents land and 1 represents water, return the number of islands. An island is a group of connected 0 cells that are not surrounded by water (1). For example, consider the following input:\\\\n\\\\n```\\\\n[\\\\n    ['1','1','1','1','0'],\\\\n    ['1','1','0','1','0'],\\\\n    ['1','1','1','1','1'],\\\\n    ['0','0','0','0','0']\\\\n]\\\\n```\\\\n\\\\nIn this case, there are two islands (the top left one and the bottom right one).\\\\n\\\\n#### Function Signature\\\\n\\\\n```python\\\\ndef num_islands(grid: list) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n\\\\n- `grid` (list): A 2D binary matrix where each cell is either 0 (land) or 1 (water)\\\\n\\\\n#### Output\\\\n\\\\n- Returns the number of islands in the input grid\\\\n\\\\n\\\", \\\"code\\\": \\\"\\\\nimport copy\\\\n\\\\ndef num_islands(grid: list) -> int:\\\\n    if not grid:\\\\n        return 0\\\\n    \\\\n    count = 0\\\\n    for i in range(len(grid)):\\\\n        for j in range(len(grid[0])):\\\\n            if grid[i][j] == '0':\\\\n                dfs(grid, i, j)\\\\n    \\\\n    for i in range(len(grid)):\\\\n        for j in range(len(grid[0])):\\\\n            if grid[i][j] == '1':\\\\n                return 0\\\\n    \\\\n    return count\\\\n\\\\ndef dfs(grid: list, i: int, j: int) -> None:\\\\n    if i<0 or i>=len(grid) or j<0 or j>=len(grid[0]) or grid[i][j] != '0':\\\\n        return\\\\n    grid[i][j] = '#'\\\\n    dfs(grid, i-1, j)\\\\n    dfs(grid, i+1, j)\\\\n    dfs(grid, i, j-1)\\\\n    dfs(grid, i, j+1)\\\\n\\\\n\\\", \\\"tests\\\": [\\\"assert num_islands([['0','1'],['1','0']]) == 1\\\", \\\"assert num_islands([['1','1','1','1','0'], ['1','1','0','1','0'], ['1','1','1','1','1'], ['0','0','0','0','0']]) == 2\\\", \\\"assert num_islands([]) == 0\\\", \\\"assert num_islands([[]]) == 0\\\"] }\""
}