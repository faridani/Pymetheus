"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Text Justification\\\\\", \\\\\"description\\\\\": \\\\\"Given a list of words and a maximum width, format the text such that each line has exactly the specified width. Extra spaces should be distributed evenly between words on a line, with remaining spaces (if any) distributed from left to right.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef full_justify(words: list[str], max_width: int) -> list[str]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (list[str]): A list of words.\\\\\\\\n- `max_width` (int): The maximum width of each line.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of strings, where each string represents a justified line of text.\\\\\", \\\\\"code\\\\\": \\\\\"def full_justify(words: list[str], max_width: int) -> list[str]:\\\\\\\\n    result = []\\\\\\\\n    current_line = []\\\\\\\\n    current_width = 0\\\\\\\\n\\\\\\\\n    for word in words:\\\\\\\\n        if current_width + len(word) + len(current_line) > max_width:\\\\\\\\n            # Add spaces to the current line\\\\\\\\n            spaces_to_add = max_width - current_width\\\\\\\\n            if len(current_line) == 1:\\\\\\\\n                current_line[0] += \\' \\' * spaces_to_add\\\\\\\\n            else:\\\\\\\\n                spaces_between_words = spaces_to_add // (len(current_line) - 1)\\\\\\\\n                extra_spaces = spaces_to_add % (len(current_line) - 1)\\\\\\\\n                for i in range(len(current_line) - 1):\\\\\\\\n                    current_line[i] += \\' \\' * spaces_between_words\\\\\\\\n                    if extra_spaces > 0:\\\\\\\\n                        current_line[i] += \\' \\'\\\\\\\\n                        extra_spaces -= 1\\\\\\\\n            result.append(\\'\\'.join(current_line))\\\\\\\\n            current_line = [word]\\\\\\\\n            current_width = len(word)\\\\\\\\n        else:\\\\\\\\n            current_line.append(word)\\\\\\\\n            current_width += len(word)\\\\\\\\n\\\\\\\\n    # Last line should be left-justified\\\\\\\\n    last_line = \\' \\'.join(current_line)\\\\\\\\n    result.append(last_line + \\' \\' * (max_width - len(last_line)))\\\\\\\\n\\\\\\\\n    return result\\\\\", \\\\\"tests\\\\\": [\\\\\"assert full_justify([\\\\\\\\\\\\\"This\\\\\\\\\\\\\", \\\\\\\\\\\\\"is\\\\\\\\\\\\\", \\\\\\\\\\\\\"an\\\\\\\\\\\\\", \\\\\\\\\\\\\"example\\\\\\\\\\\\\", \\\\\\\\\\\\\"of\\\\\\\\\\\\\", \\\\\\\\\\\\\"text\\\\\\\\\\\\\", \\\\\\\\\\\\\"justification.\\\\\\\\\\\\\"], 16) == [\\\\\\\\\\\\\"This    is    an\\\\\\\\\\\\\", \\\\\\\\\\\\\"example  of text\\\\\\\\\\\\\", \\\\\\\\\\\\\"justification.  \\\\\\\\\\\\\"]\\\\\", \\\\\"assert full_justify([\\\\\\\\\\\\\"What\\\\\\\\\\\\\",\\\\\\\\\\\\\"must\\\\\\\\\\\\\",\\\\\\\\\\\\\"be\\\\\\\\\\\\\",\\\\\\\\\\\\\"acknowledgment\\\\\\\\\\\\\",\\\\\\\\\\\\\"shall\\\\\\\\\\\\\",\\\\\\\\\\\\\"be\\\\\\\\\\\\\"], 16) == [\\\\\\\\\\\\\"What   must   be\\\\\\\\\\\\\", \\\\\\\\\\\\\"acknowledgment  \\\\\\\\\\\\\", \\\\\\\\\\\\\"shall be      \\\\\\\\\\\\\"]\\\\\", \\\\\"assert full_justify([\\\\\\\\\\\\\"Science\\\\\\\\\\\\\",\\\\\\\\\\\\\"is\\\\\\\\\\\\\",\\\\\\\\\\\\\"what\\\\\\\\\\\\\",\\\\\\\\\\\\\"we\\\\\\\\\\\\\",\\\\\\\\\\\\\"understand\\\\\\\\\\\\\",\\\\\\\\\\\\\"well\\\\\\\\\\\\\",\\\\\\\\\\\\\"enough\\\\\\\\\\\\\",\\\\\\\\\\\\\"to\\\\\\\\\\\\\",\\\\\\\\\\\\\"explain\\\\\\\\\\\\\", \\\\\\\\\\\\\"to\\\\\\\\\\\\\",\\\\\\\\\\\\\"a\\\\\\\\\\\\\",\\\\\\\\\\\\\"computer.\\\\\\\\\\\\\", \\\\\\\\\\\\\"Art\\\\\\\\\\\\\",\\\\\\\\\\\\\"is\\\\\\\\\\\\\",\\\\\\\\\\\\\"everything\\\\\\\\\\\\\",\\\\\\\\\\\\\"else\\\\\\\\\\\\\",\\\\\\\\\\\\\"we\\\\\\\\\\\\\",\\\\\\\\\\\\\"do\\\\\\\\\\\\\"], 20) == [\\\\\\\\\\\\\"Science  is  what we\\\\\\\\\\\\\", \\\\\\\\\\\\\"understand      well\\\\\\\\\\\\\", \\\\\\\\\\\\\"enough  to explain to\\\\\\\\\\\\\", \\\\\\\\\\\\\"a  computer.  Art is\\\\\\\\\\\\\", \\\\\\\\\\\\\"everything else we do\\\\\\\\\\\\\"]\\\\\"] }\"'}"