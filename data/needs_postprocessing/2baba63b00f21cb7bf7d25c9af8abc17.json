{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Hard: Maximum Sum of Non-Adjacent Elements\\\", \\\"description\\\": \\\"Given a list of integers, find the maximum sum that can be obtained by selecting exactly one element from each pair of adjacent elements. For example, if we have the list [1, 2, 3, 4], the maximum sum is 6 (from taking 1, 3, and 4). If the list is empty or has only one element, return that element.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef max_sum_non_adjacent(arr: list[int)) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `arr` (list[int]): A list of integers.\\\\n\\\\n#### Output\\\\n- Returns the maximum sum that can be obtained by selecting exactly one element from each pair of adjacent elements.\\\", \\\"code\\\": \\\"\\\\ndef max_sum_non_adjacent(arr: list[int)) -> int:\\\\n    if len(arr) <= 1:\\\\n        return arr[0] if arr else 0\\\\n\\\\n    dp = [0] * len(arr)\\\\n    dp[0] = arr[0]\\\\n    dp[1] = max(arr[0], arr[1])\\\\n\\\\n    for i in range(2, len(arr)):\\\\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i])\\\\n\\\\n    return dp[-1]\\\\n\\\", \\\"tests\\\": [\\\"assert max_sum_non_adjacent([2, 7, 9, 3, 5]) == 18\\\", \\\"assert max_sum_non_adjacent([]) == 0\\\", \\\"assert max_sum_non_adjacent([1]) == 1\\\", \\\"assert max_sum_non_adjacent([1, 2]) == 2\\\"] }\""
}