"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"\\'Palindromes with Special Characters (Hard)\\'\\\\\", \\\\\"description\\\\\": \\\\\"Create a function `is_palindrome` that checks if a given string, which may contain letters, numbers, spaces, punctuation, and special characters like emojis, is a palindrome. The function should ignore case sensitivity, punctuation, and non-printable characters.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef is_palindrome(s: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s` (str): A string that may contain letters, numbers, spaces, punctuation, and special characters like emojis.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the input string is a palindrome, `False` otherwise.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"import re\\\\\\\\ndef is_palindrome(s: str) -> bool:\\\\\\\\n    # Remove non-printable characters and convert to lowercase\\\\\\\\n    s = re.sub(\\'[^\\\\\\\\\\\\\\\\p{Print}]\\', \\'\\', s).lower()\\\\\\\\n    # Remove punctuation and split the string into words\\\\\\\\n    s = \\' \\'.join([word for word in s.split() if word != \\']).join(re.findall(\\'b(\\\\\\\\w+)b\\', s))\\\\\\\\n    # Check if the list of words reads the same forwards and backwards\\\\\\\\n    return s == s[::-1]\\\\\", \\\\\"tests\\\\\": [\\\\\"assert is_palindrome(\\'A man, a plan, a canal: Panama\\') == True\\\\\", \\\\\"assert is_palindrome(\\'racecar\\') == True\\\\\", \\\\\"assert is_palindrome(\\'hello\\') == False\\\\\", \\\\\"assert is_palindrome(\\'No \\\\\\\\\\'x\\\\\\\\\\' in Nixon\\') == True\\\\\", \\\\\"assert is_palindrome(\\'\\\\ud83d\\\\udc36\\\\ud83c\\\\udf1e\\\\ud83c\\\\udf1c\\\\ud83d\\\\udc3a\\') == True\\\\\"] }\"'}"