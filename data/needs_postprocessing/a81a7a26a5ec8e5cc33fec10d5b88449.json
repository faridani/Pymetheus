"{'model': 'mistral:latest', 'response': '{\"title\": \"\\'Stack Balancing (Medium)\\'\", \"description\": \"\\\\\"Given a string representing the expression to be evaluated, check if the parentheses are balanced. The expression can contain only \\'(\\', \\')\\', \\'+\\', \\'-\\', \\'*\\', \\'/\\' and integers between 0 and 9.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef is_balanced(expression: str) -> bool:\\\\n```\\\\n\\\\n#### Input\\\\n- `expression` (str): A string containing the expression to be evaluated.\\\\n\\\\n#### Output\\\\n- Returns `True` if the parentheses in the input expression are balanced, `False` otherwise.\\\\n\\\\\",\\\\n    \\\\\"code\\\\\": \\\\\"import re\\\\ndef is_balanced(expression: str) -> bool:\\\\n    # Remove any non-numeric or operator characters from the expression\\\\n    expression = re.sub(\\'[^0-9()+/*]\\', \", \"\": \"n        if char == \\'(\\':\\\\n            stack.append(char)\\\\n        elif char == \\')\\':\\\\n            if not stack or stack.pop() != \\'(\\':\\\\n                return False\\\\n    # If there are any remaining opening parentheses in the stack, the expression is unbalanced\\\\n    return len(stack) == 0\", \"tests\": [\"assert is_balanced(\\'(1+1)\\') == True\", \"assert is_balanced(\\'((1+(2*3))+(4*(5+6)))\\') == True\", \"assert is_balanced(\\'(1+(2*3))\\') == False\", \"assert is_balanced(\\'(1+(2*(3))\\')) == False\"]}'}"