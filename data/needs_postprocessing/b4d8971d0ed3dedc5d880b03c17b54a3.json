"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Detector (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"An anagram is a word or phrase formed by rearranging the letters of another, such as the classic example \\'listen\\' and \\'silent\\'. Write a function `is_anagram` that checks if two given strings are anagrams of each other.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef is_anagram(s1: str, s2: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s1`, `s2` (str): Two strings that may contain letters, numbers, spaces and punctuation.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def is_anagram(s1: str, s2: str) -> bool:\\\\\\\\n    # Remove non-alphabetic characters and convert to lowercase\\\\\\\\n    s1 = \\'\\'.join([char for char in s1 if char.isalpha()]).lower()\\\\\\\\n    s2 = \\'\\'.join([char for char in s2 if char.isalpha()]).lower()\\\\\\\\n    # Check if the sorted characters of both strings are the same\\\\\\\\n    return sorted(s1) == sorted(s2)\\\\\", \\\\\"tests\\\\\": [\\\\\"assert is_anagram(\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert is_anagram(\\\\\\\\\\\\\"hello\\\\\\\\\\\\\", \\\\\\\\\\\\\"olleh\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert is_anagram(\\\\\\\\\\\\\"racecar\\\\\\\\\\\\\", \\\\\\\\\\\\\"carrace\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert is_anagram(\\\\\\\\\\\\\"No \\'x\\' in Nixon\\\\\\\\\\\\\", \\\\\\\\\\\\\"in xsi gnirrom siht, x\\\\\\\\\\' of snipxe\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert is_anagram(\\\\\\\\\\\\\"apple\\\\\\\\\\\\\", \\\\\\\\\\\\\"apples\\\\\\\\\\\\\") == False\\\\\", \\\\\"assert is_anagram(\\\\\\\\\\\\\"banana\\\\\\\\\\\\\", \\\\\\\\\\\\\"orangutan\\\\\\\\\\\\\") == False\\\\\"] }\"'}"