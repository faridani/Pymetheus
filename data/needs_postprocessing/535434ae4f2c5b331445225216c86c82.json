{
    "model": "llama3:latest",
    "response": "{\"title\": \"Maximal Increasing Subsequence\", \"description\": \"Write a function `max_increasing_subsequence` that takes as input an integer array and returns the length of the longest increasing subsequence.\\n\\n#### Function Signature\\n```python\\ndef max_increasing_subsequence(arr: list[int]) -> int:\\n```\\n\\n#### Input\\n- `arr` (list[int]): A non-empty list of integers.\\n\\n#### Output\\n- Returns an integer representing the length of the longest increasing subsequence.\", \"code\": \"\", \"\\nimport heapq\\n\\ndef max_increasing_subsequence(arr: list[int]) -> int:\\n    if not arr:\\n        raise ValueError(\": \"nput array cannot be empty\", \"n)\": \"while heap and heap[0][0] < arr[i]:\\n            _, idx = heapq.heappop(heap)\\n            dp[idx] = max(dp[idx], dp[i - 1] + 1)\\n\\n        heapq.heappush(heap, (arr[i], i))\\n\\n    return max(dp)\", \", \": \"ests\", \"assert max_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 6\": \"assert max_increasing_subsequence([0, 1, 0, 3, 2, 5]) == 6\", \"assert max_increasing_subsequence([15, 13, 12, 11, 10]) == 4\": \"\"}"
}