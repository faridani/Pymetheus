"{'model': 'qwen2:7b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard - Prime Factorization\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `prime_factors(n: int) -> List[int]` that takes an integer \\\\\\\\( n \\\\\\\\) and returns a list of its prime factors, sorted in non-decreasing order. If the input is less than 2, return an empty list.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef prime_factors(n: int) -> List[int]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `n` (int): An integer \\\\\\\\( n \\\\\\\\), where \\\\\\\\( 1 < n \\\\\\\\leq 10^{18} \\\\\\\\).\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of integers, each representing a prime factor of \\\\\\\\( n \\\\\\\\) in non-decreasing order. The length of the list is the number of distinct prime factors of \\\\\\\\( n \\\\\\\\).\\\\\", \\\\\"code\\\\\": \\\\\"from typing import List\\\\\\\\ndef prime_factors(n: int) -> List[int]:    if n < 2:        return []\\\\\\\\n    factors = []\\\\\\\\n    # Divide by all primes less than sqrt(n)\\\\\\\\n    for i in range(2, int(n**0.5) + 1):\\\\\\\\n        while n % i == 0:\\\\\\\\n            factors.append(i)\\\\\\\\n            n //= i\\\\\\\\n    if n > 1:  # If there\\'s a prime factor greater than sqrt(n)\\\\\\\\n        factors.append(n)\\\\\\\\n    return sorted(list(set(factors)))[::-1]\\\\\", \\\\\"tests\\\\\": [\\\\\"assert prime_factors(12) == [2, 3]\\\\\", \\\\\"assert prime_factors(75) == [3, 5]\\\\\", \\\\\"assert prime_factors(100) == [2, 5]\\\\\", \\\\\"assert prime_factors(19) == [19]\\\\\", \\\\\"assert prime_factors(60) == [2, 3, 5]\\\\\"] }\"'}"