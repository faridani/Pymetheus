"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard - Text Justification\\\\\", \\\\\"description\\\\\": \\\\\"Given an array of words and a width <i>maxWidth</i>, format the text such that each line has exactly <i>maxWidth</i> characters and is fully (left and right) justified.\\\\\\\\n\\\\\\\\nYou should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces `\\' \\'` when necessary so that each line has exactly <i>maxWidth</i> characters.\\\\\\\\nExtra spaces between words should be distributed as evenly as possible. If the number of spaces required is not divisible by the number of gaps between words, the extra spaces should be distributed from left to right (left-justified).\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef full_justify(words: list[str], maxWidth: int) -> list[str]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (list[str]): A list of words.\\\\\\\\n- `maxWidth` (int): The desired width of each line.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of strings, where each string represents a fully justified line.\\\\\", \\\\\"code\\\\\": \\\\\"def full_justify(words: list[str], maxWidth: int) -> list[str]:\\\\\\\\n    result = []\\\\\\\\n    current_line = []\\\\\\\\n    current_width = 0\\\\\\\\n\\\\\\\\n    for word in words:\\\\\\\\n        if current_width + len(word) + len(current_line) > maxWidth:\\\\\\\\n            # Justify the current line\\\\\\\\n            spaces = maxWidth - current_width\\\\\\\\n            if len(current_line) == 1:\\\\\\\\n                current_line[0] += \\' \\' * spaces  # Single word, left-justify\\\\\\\\n            else:\\\\\\\\n                gaps = len(current_line) - 1\\\\\\\\n                spaces_per_gap = spaces // gaps\\\\\\\\n                extra_spaces = spaces % gaps\\\\\\\\n                for i in range(gaps):\\\\\\\\n                    current_line[i] += \\' \\' * (spaces_per_gap + (1 if i < extra_spaces else 0))\\\\\\\\n            result.append(\\'\\'.join(current_line))\\\\\\\\n            current_line = [word]\\\\\\\\n            current_width = len(word)\\\\\\\\n        else:\\\\\\\\n            current_line.append(word)\\\\\\\\n            current_width += len(word)\\\\\\\\n\\\\\\\\n    # Justify the last line (left-justified)\\\\\\\\n    last_line = \\' \\'.join(current_line)\\\\\\\\n    last_line += \\' \\' * (maxWidth - len(last_line))\\\\\\\\n    result.append(last_line)\\\\\\\\n\\\\\\\\n    return result\\\\\", \\\\\"tests\\\\\": [\\\\\"assert full_justify([\\\\\\\\\\\\\"This\\\\\\\\\\\\\", \\\\\\\\\\\\\"is\\\\\\\\\\\\\", \\\\\\\\\\\\\"an\\\\\\\\\\\\\", \\\\\\\\\\\\\"example\\\\\\\\\\\\\", \\\\\\\\\\\\\"of\\\\\\\\\\\\\", \\\\\\\\\\\\\"text\\\\\\\\\\\\\", \\\\\\\\\\\\\"justification.\\\\\\\\\\\\\"], 16) == [\\\\\\\\\\\\\"This    is    an\\\\\\\\\\\\\", \\\\\\\\\\\\\"example  of text\\\\\\\\\\\\\", \\\\\\\\\\\\\"justification.  \\\\\\\\\\\\\"]\\\\\", \\\\\"assert full_justify([\\\\\\\\\\\\\"What\\\\\\\\\\\\\",\\\\\\\\\\\\\"must\\\\\\\\\\\\\",\\\\\\\\\\\\\"be\\\\\\\\\\\\\",\\\\\\\\\\\\\"acknowledgment\\\\\\\\\\\\\",\\\\\\\\\\\\\"shall\\\\\\\\\\\\\",\\\\\\\\\\\\\"be\\\\\\\\\\\\\"], 16) == [\\\\\\\\\\\\\"What   must   be\\\\\\\\\\\\\", \\\\\\\\\\\\\"acknowledgment  \\\\\\\\\\\\\", \\\\\\\\\\\\\"shall be        \\\\\\\\\\\\\"]\\\\\", \\\\\"assert full_justify([\\\\\\\\\\\\\"Science\\\\\\\\\\\\\",\\\\\\\\\\\\\"is\\\\\\\\\\\\\",\\\\\\\\\\\\\"what\\\\\\\\\\\\\",\\\\\\\\\\\\\"we\\\\\\\\\\\\\",\\\\\\\\\\\\\"understand\\\\\\\\\\\\\",\\\\\\\\\\\\\"well\\\\\\\\\\\\\",\\\\\\\\\\\\\"enough\\\\\\\\\\\\\",\\\\\\\\\\\\\"to\\\\\\\\\\\\\",\\\\\\\\\\\\\"explain\\\\\\\\\\\\\",\\\\\\\\\\\\\"to\\\\\\\\\\\\\",\\\\\\\\\\\\\"a\\\\\\\\\\\\\",\\\\\\\\\\\\\"computer.\\\\\\\\\\\\\",], 20)==[\\\\\\\\\\\\\"Science  is  what we\\\\\\\\\\\\\", \\\\\\\\\\\\\"understand      well\\\\\\\\\\\\\", \\\\\\\\\\\\\"enough to explain to\\\\\\\\\\\\\", \\\\\\\\\\\\\"a computer.       \\\\\\\\\\\\\"]\\\\\"] }\"'}"