{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Hard: Maximum Sum of Alternating Subarrays\\\", \\\"description\\\": \\\"Given an array `arr` of integers, find the maximum sum of alternating subarrays. A subarray is a contiguous portion of the array. The sum is calculated by adding up all elements in the subarray. If the length of the subarray is even, add the first element to the sum and then alternate between adding the next element and subtracting it from the sum. For example, given the array `[1, 2, -3, 4, 5]`, the maximum sum of alternating subarrays would be `9` because you can take the subarray `[1, 2]` (sum: `1 + 2 = 3`) and then take the subarray `[4, 5]` (sum: `4 + 5 = 9`). Write a function `max_sum_alt_subarrays` that finds the maximum sum of alternating subarrays.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef max_sum_alt_subarrays(arr: list[int)) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `arr` (list[int]): A list of integers.\\\\n\\\\n#### Output\\\\n- Returns the maximum sum of alternating subarrays.\\\", \\\"code\\\": \\\"def max_sum_alt_subarrays(arr: list[int)) -> int:\\\\n    n = len(arr)\\\\n    dp = [0] * (n + 1)\\\\n    for i in range(1, n + 1):\\\\n        if i % 2 == 1:\\\\n            dp[i] = max(dp[i - 1], arr[i - 1])\\\\n        else:\\\\n            dp[i] = max(dp[i - 1], arr[i - 1] + (dp[i - 2] if i > 1 else 0))\\\\n    return dp[-1]\\\\n\\\", \\\"tests\\\": [\\\"assert max_sum_alt_subarrays([1, 2, -3, 4, 5]) == 9\\\", \\\"assert max_sum_alt_subarrays([-1, 0, 1, -2, 3]) == 2\\\", \\\"assert max_sum_alt_subarrays([10, 20, 30]) == 60\\\"] }\""
}