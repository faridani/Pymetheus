"{'model': 'gemma2:27b', 'response': '{\"title\": \"Hard - Alien Dictionary\", \"description\": \"You have been given a list of alien words. Each word is composed of lowercase letters. Your task is to determine the alphabetical order of these letters based on the given list of words.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef alien_dictionary(words: list[str]) -> str:\\\\n```\\\\n\\\\n#### Input\\\\nA list of strings representing alien words.\\\\n\\\\n#### Output\\\\nA string representing the alphabetical order of the letters. If there is no valid order, return an empty string.\\\\n\\\\n#### Constraints \\\\n* 1 <= len(words) <= 10^5\\\\n* 1 <= len(words[i]) <= 20\", \"code\": \"from collections import defaultdict\\\\n\\\\ndef alien_dictionary(words: list[str]) -> str:\\\\n    adj_list = defaultdict(set)\\\\n    in_degree = {c: 0 for word in words for c in word}\\\\n\\\\n    for i in range(len(words) - 1):\\\\n        word1, word2 = words[i], words[i + 1]\\\\n        for j in range(min(len(word1), len(word2))):\\\\n            if word1[j] != word2[j]:\\\\n                if word2[j] not in adj_list[word1[j]]:\\\\n                    adj_list[word1[j]].add(word2[j])\\\\n                    in_degree[word2[j]] += 1\\\\n                break\\\\n        else:\\\\n            if len(word1) > len(word2):\\\\n                return \\'\\'\\\\n\\\\n    queue = [c for c in in_degree if in_degree[c] == 0]\\\\n    result = []\\\\n    while queue:\\\\n        c = queue.pop(0)\\\\n        result.append(c)\\\\n        for neighbor in adj_list[c]:\\\\n            in_degree[neighbor] -= 1\\\\n            if in_degree[neighbor] == 0:\\\\n                queue.append(neighbor)\\\\n\\\\n    return \\'\\'.join(result) if len(result) == len(in_degree) else \\'\\' \", \"tests\": [\"assert alien_dictionary([\\\\\"wrt\\\\\",\\\\\"wrf\\\\\",\\\\\"er\\\\\",\\\\\"ett\\\\\",\\\\\"rftt\\\\\"]) == \\\\\"wertf\\\\\"\", \"assert alien_dictionary([\\\\\"z\\\\\",\\\\\"x\\\\\",\"], \"zx\\\\\"\": \"assert alien_dictionary([\\\\\"z\\\\\",\\\\\"x\\\\\",\\\\\"z\\\\\"]) == \\'\\'\", \"assert alien_dictionary([\\\\\"abc\\\\\",\\\\\"ab\\\\\"] ) == \\'\\'\": \"\"}'}"