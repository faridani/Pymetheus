"{'model': 'qwen2:7b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Tautology Check\\\\\", \\\\\"description\\\\\": \\\\\"A tautology is a statement that is always true, regardless of the truth values of its components. Write a function `is_tautology` that checks if a given logical expression is a tautology.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef is_tautology(expression: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `expression` (str): A string containing only the characters \\'T\\', \\'F\\', \\'(\\', \\')\\', \\'AND\\', \\'OR\\', \\'NOT\\' and spaces. The expression represents a logical formula in propositional calculus.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the input expression is always true, `False` otherwise.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"import re\\\\\\\\n\\\\\\\\ndef tautology_simplification(expression):    # Remove parentheses and split by \\'AND\\' and \\'OR\\' operations\\\\\\\\n    simplified_expression = re.split(r\\'(?<=[^A-Z]) AND | OR | NOT \\', expression)\\\\\\\\n\\\\\\\\n    def simplify(simplified_str):\\\\\\\\        if simplified_str.startswith(\\'NOT \\'):            return str(1 - eval(simplify(simplified_str[5:]))).replace(\\'.\\', \\'\\')        elif simplified_str == \\'T\\':            return \\'1\\'        elif simplified_str == \\'F\\':            return \\'0\\'\\\\\\\\n        else:\\\\\\\\            return simplified_str\\\\\\\\n    simplified_expression = [\\' \\'.join(map(simplify, s.split())) for s in simplified_expression]\\\\\\\\n\\\\\\\\n    def evaluate(expression):\\\\\\\\        if any(c not in \\'TFTN\\' for c in expression):            return None        result = eval(\\'\\'.join([\\'T\\' if c == \\'T\\' else \\'F\\' for c in expression]), {}, {})\\\\\\\\n        return str(result).replace(\\'.\\', \\'\\')\\\\\\\\n\\\\\\\\n    final_result = \\'\\'.join(map(evaluate, simplified_expression))\\\\\\\\n    return final_result\\\\\\\\n\\\\\\\\ndef is_tautology(expression: str) -> bool:\\\\\\\\n    # Simplify the logical expression\\\\\\\\n    simplified_expression = tautology_simplification(expression)\\\\\\\\n    # If \\'T\\' remains after simplification, then it\\'s a tautology\\\\\\\\n    return \\'1\\' in simplified_expression\\\\\", \\\\\"tests\\\\\": [\\\\\"assert is_tautology(\\\\\\\\\\\\\"(T AND T) OR (F AND F)\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert is_tautology(\\\\\\\\\\\\\"NOT (T AND F)\\\\\\\\\\\\\") == False\\\\\", \\\\\"assert is_tautology(\\\\\\\\\\\\\"(T OR NOT F) AND (F OR NOT T)\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert is_tautology(\\\\\\\\\\\\\"((T AND T) OR (F AND F)) AND ((T OR T) AND (F OR F))\\\\\\\\\\\\\") == False\\\\\"] }\"'}"