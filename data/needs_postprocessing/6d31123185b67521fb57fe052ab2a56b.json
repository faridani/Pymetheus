"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard:  Word Ladder\\\\\", \\\\\"description\\\\\": \\\\\"Given two words, beginWord and endWord, and a dictionary wordList of words, find the length of the shortest transformation sequence from beginWord to endWord, such that:\\\\\\\\n\\\\\\\\n- Only one letter can be changed at a time.\\\\\\\\n- Each transformed word must exist in the given wordList. \\\\\\\\nReturn the length of the shortest transformation sequence, or 0 if no such transformation sequence exists.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef ladderLength(beginWord: str, endWord: str, wordList: list[str]) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `beginWord` (str): The starting word.\\\\\\\\n- `endWord` (str): The target word.\\\\\\\\n- `wordList` (list[str]): A list of words representing the dictionary.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the length of the shortest transformation sequence. If no such sequence exists, return 0.\\\\\", \\\\\"code\\\\\": \\\\\"from collections import deque\\\\\\\\n\\\\\\\\ndef ladderLength(beginWord: str, endWord: str, wordList: list[str]) -> int:\\\\\\\\n    if endWord not in wordList:\\\\\\\\n        return 0\\\\\\\\n    \\\\\\\\n    wordList = set(wordList)\\\\\\\\n    queue = deque([(beginWord, 1)])\\\\\\\\n    visited = {beginWord}\\\\\\\\n    \\\\\\\\n    while queue:\\\\\\\\n        current_word, level = queue.popleft()\\\\\\\\n        if current_word == endWord:\\\\\\\\n            return level\\\\\\\\n        \\\\\\\\n        for i in range(len(current_word)):\\\\\\\\n            for char in \\'abcdefghijklmnopqrstuvwxyz\\':\\\\\\\\n                new_word = current_word[:i] + char + current_word[i+1:]\\\\\\\\n                if new_word in wordList and new_word not in visited:\\\\\\\\n                    queue.append((new_word, level + 1))\\\\\\\\n                    visited.add(new_word)\\\\\\\\n    return 0\\\\\", \\\\\"tests\\\\\": [\\\\\"assert ladderLength(\\\\\\\\\\\\\"hit\\\\\\\\\\\\\", \\\\\\\\\\\\\"cog\\\\\\\\\\\\\", [\\\\\\\\\\\\\"hot\\\\\\\\\\\\\",\\\\\\\\\\\\\"dot\\\\\\\\\\\\\",\\\\\\\\\\\\\"dog\\\\\\\\\\\\\",\\\\\\\\\\\\\"lot\\\\\\\\\\\\\",\\\\\\\\\\\\\"log\\\\\\\\\\\\\",\\\\\\\\\\\\\"cog\\\\\\\\\\\\\"]) == 5\\\\\", \\\\\"assert ladderLength(\\\\\\\\\\\\\"hit\\\\\\\\\\\\\", \\\\\\\\\\\\\"cog\\\\\\\\\\\\\", [\\\\\\\\\\\\\"hot\\\\\\\\\\\\\",\\\\\\\\\\\\\"dot\\\\\\\\\\\\\",\\\\\\\\\\\\\"dog\\\\\\\\\\\\\",\\\\\\\\\\\\\"lot\\\\\\\\\\\\\",\\\\\\\\\\\\\"log\\\\\\\\\\\\\"]) == 0\\\\\"] }\"'}"