"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Detector (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_anagrams(words: List[str]) -> Dict[str, List[str]]` that finds and returns all anagram pairs within the given list of words.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list containing multiple strings with alphabetic characters only.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a dictionary where each key is an anagram and its corresponding values are the anagram pairs found in the input list.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from collections import Counter\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n    # Create a counter for each word\\\\\\\\n    counters = {word: Counter(word) for word in words}\\\\\\\\n    \\\\\\\\n    # Find anagram pairs and add to the result dictionary\\\\\\\\n    result = {}\\\\\\\\n    for counter in counters.values():\\\\\\\\n        anagram = \\'\\'.join(sorted(counter.elements()))\\\\\\\\n        if anagram in result:\\\\\\\\n            result[anagram].append(words[counters[anagram].index(counter)])\\\\\\\\n        else:\\\\\\\\n            result[anagram] = [words[counters[anagram].index(counter)]]\\\\\\\\n    \\\\\\\\n    # Return the result dictionary\\\\\\\\n    return result\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\'cat\\', \\'act\\', \\'tac\\', \\'dog\\', \\'god\\']) == {\\'atc\\': [\\'cat\\', \\'act\\'], \\'adog\\': [\\'dog\\'], \\'agod\\': [\\'god\\']}\\\\\", \\\\\"assert find_anagrams([\\'alpha\\', \\'aloha\\', \\'lamp\\', \\'palm\\', \\'maple\\', \\'apple\\']) == {\\'alphapamplae\\': [\\'alpha\\', \\'apple\\'], \\'hlamlam\\': [\\'lamp\\'], \\'aa\\': [\\'aloha\\']}\\\\\"] }\"'}"