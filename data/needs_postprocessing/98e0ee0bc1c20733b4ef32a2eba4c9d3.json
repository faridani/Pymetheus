"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Matrix Pathfinding\\\\\", \\\\\"description\\\\\": \\\\\"You are given a square matrix of integers representing a grid. Some cells contain obstacles (represented by the integer -1). Your task is to find the shortest path from the top-left cell (0, 0) to the bottom-right cell (n-1, n-1), where \\'n\\' is the size of the matrix. You can only move horizontally or vertically.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef shortest_path(matrix: list[list[int]]) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `matrix` (list[list[int]]): A square matrix representing the grid. -1 represents an obstacle, 0 represents a free cell.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the length of the shortest path from the top-left to the bottom-right cell. If no path exists, return -1.\\\\\", \\\\\"code\\\\\": \\\\\"from collections import deque\\\\\\\\n\\\\\\\\ndef shortest_path(matrix: list[list[int]]) -> int:\\\\\\\\n    n = len(matrix)\\\\\\\\n    if matrix[0][0] == -1 or matrix[n-1][n-1] == -1:\\\\\\\\n        return -1\\\\\\\\n\\\\\\\\n    queue = deque([(0, 0, 0)])  # (row, col, path_length)\\\\\\\\n    visited = set([(0, 0)])\\\\\\\\n\\\\\\\\n    while queue:\\\\\\\\n        row, col, path_length = queue.popleft()\\\\\\\\n        if row == n - 1 and col == n - 1:\\\\\\\\n            return path_length\\\\\\\\n\\\\\\\\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\\\\\\\\n            new_row = row + dr\\\\\\\\n            new_col = col + dc\\\\\\\\n            if 0 <= new_row < n and 0 <= new_col < n and matrix[new_row][new_col] != -1 and (new_row, new_col) not in visited:\\\\\\\\n                queue.append((new_row, new_col, path_length + 1))\\\\\\\\n                visited.add((new_row, new_col))\\\\\\\\n\\\\\\\\n    return -1 \\\\\", \\\\\"tests\\\\\": [\\\\\"assert shortest_path([[0, 0, 0], [0, -1, 0], [0, 0, 0]]) == 4\\\\\", \\\\\"assert shortest_path([[0, -1, 0], [0, 0, 0], [0, 0, 0]]) == 5\\\\\", \\\\\"assert shortest_path([[0, 0, -1], [0, 0, 0], [0, 0, 0]]) == -1\\\\\"] }\"'}"