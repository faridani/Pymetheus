{
    "model": "llama3:latest",
    "response": "{\"title\": \"Minimum Window Substring\", \"description\": \"Given two strings `s` and `t`, find the minimum window that contains all characters from `t`. If there are multiple windows with the same length, return any of them.\\n\\n#### Function Signature\\n```python\\ndef min_window(s: str, t: str) -> str:\\n```\\n\\n#### Input\\n- `s` (str): A string containing characters that may be in `t`.\\n- `t` (str): The target string to search for within `s`.\\n\\n\\n\\n#### Output\\n- Returns the minimum window substring of `s` that contains all characters from `t`, or an empty string if no such window exists.\", \"code\": \"from collections import Counter\\n\\ndef min_window(s: str, t: str) -> str:\\n    if not t or not s:\\n        return \", \"\\n\\n    for right in range(len(s)):\\n        while found_chars < required_chars and left <= right:\\n            if all([s[i] == t[j] for i, j in zip(range(left, right + 1), range(len(t)))]):\\n                return s[left:right + 1]\\n            char = s[right]\\n            if dict_t[char]:\\n                dict_t[char] -= 1\\n                if not dict_t[char]:\\n                    found_chars += 1\\n\\n        while left <= right and found_chars == required_chars:\\n            char = s[left]\\n            if dict_t[char]:\\n                dict_t[char] += 1\\n                if dict_t[char]:\\n                    found_chars -= 1\\n            if all([s[i] == t[j] for i, j in zip(range(left, right + 1), range(len(t)))]) and right - left + 1 < min_length:\\n                min_length = right - left + 1\\n                min_window = s[left:right + 1]\\n\\n            left += 1\\n\\n    return min_window\": \"tests\\\": [\\\"assert min_window(\\\"ab\\\" * 7 + \\\"c\\\" * 2, \\\"a\\\") == \\\"bbaaaa\\\", \\\"assert min_window(\\\"ADOBECODEBANC\", \"ABC\": \"ABC\\\"\", \"assert min_window(\": \"bc\", \"d\": \"\\\"\"}"
}