"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Minimum Removals for Alternating Subsequence\\\\\", \\\\\"description\\\\\": \\\\\"Given a string `s` consisting of lowercase letters, find the minimum number of characters that need to be removed from `s` to obtain a subsequence where no two adjacent characters are the same.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n\\\\\\\\n```python\\\\\\\\ndef min_removals(s: str) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s` (str): A string consisting of lowercase letters.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the minimum number of removals required to obtain an alternating subsequence.\\\\\", \\\\\"code\\\\\": \\\\\"def min_removals(s: str) -> int:\\\\\\\\n    n = len(s)\\\\\\\\n    dp = [1] * n\\\\\\\\n    for i in range(1, n):\\\\\\\\n        if s[i] != s[i - 1]:\\\\\\\\n            dp[i] = dp[i - 1] + 1\\\\\\\\n        else:\\\\\\\\n            dp[i] = 1  # Reset the subsequence count\\\\\\\\n    return n - max(dp)\\\\\", \\\\\"tests\\\\\": [\\\\\"assert min_removals(\\\\\\\\\\\\\"aaabbb\\\\\\\\\\\\\") == 4\\\\\", \\\\\"assert min_removals(\\\\\\\\\\\\\"abab\\\\\\\\\\\\\") == 0\\\\\", \\\\\"assert min_removals(\\\\\\\\\\\\\"aaaa\\\\\\\\\\\\\") == 3\\\\\", \\\\\"assert min_removals(\\\\\\\\\\\\\"aabbaabb\\\\\\\\\\\\\") == 2\\\\\"] }\"'}"