"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Checker (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a function `is_anagram` that checks if two given strings are anagrams of each other.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef is_anagram(s1: str, s2: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s1`, `s2` (str): Two strings that may contain letters, numbers, spaces, and punctuation.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"import collections\\\\\\\\n\\\\\\\\ndef is_anagram(s1: str, s2: str) -> bool:\\\\\\\\n    # Remove non-alphabetic characters and convert to lowercase\\\\\\\\n    s1 = \\'\\'.join(char for char in s1 if char.isalpha()).lower()\\\\\\\\n    s2 = \\'\\'.join(char for char in s2 if char.isalpha()).lower()\\\\\\\\n    \\\\\\\\n    # If the strings have different lengths, they cannot be anagrams\\\\\\\\n    if len(s1) != len(s2):\\\\\\\\n        return False\\\\\\\\n    \\\\\\\\n    # Count the frequency of each character in both strings using a dictionary\\\\\\\\n    char_count = collections.Counter(s1)\\\\\\\\n    for char in s2:\\\\\\\\n        if char not in char_count or char_count[char] == 0:\\\\\\\\n            return False\\\\\\\\n        char_count[char] -= 1\\\\\\\\n    \\\\\\\\n    # If all characters have been accounted for, the strings are anagrams\\\\\\\\n    return True\\\\\", \\\\\"tests\\\\\": [\\\\\"assert is_anagram(\\'listen\\', \\'silent\\') == True\\\\\", \\\\\"assert is_anagram(\\'hello\\', \\'olleh\\') == True\\\\\", \\\\\"assert is_anagram(\\'racecar\\', \\'carrace\\') == True\\\\\", \\\\\"assert is_anagram(\\'test\\', \\'tset\\') == False\\\\\"] }\"'}"