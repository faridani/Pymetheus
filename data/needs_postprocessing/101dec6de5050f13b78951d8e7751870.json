"{'model': 'qwen2:7b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Eulerian Path\\\\\", \\\\\"description\\\\\": \\\\\"An Eulerian path in a graph traverses every edge exactly once. A directed graph contains an Eulerian path if and only if it has at most two vertices with odd degree.\\\\\\\\n\\\\\\\\nGiven a directed graph represented by its adjacency matrix, write a function `eulerian_path` that returns the existence of such an Eulerian path along with its sequence. The adjacency matrix is a symmetric square matrix where rows and columns represent nodes, and entries indicate whether there is a direct edge from one node to another (1 for edge presence, 0 otherwise).\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef eulerian_path(graph: List[List[int]]) -> Tuple[bool, List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `graph`: A list of lists representing the adjacency matrix of the directed graph. \\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a tuple containing:\\\\\\\\n    - The first element being a boolean value indicating if an Eulerian path exists.\\\\\\\\n    - The second element is the sequence of nodes forming the Eulerian path.\\\\\\\\n\\\\\\\\n#### Constraints and Hints\\\\\\\\n- The graph will have at most 10 vertices.\\\\\\\\n- Each row and column will have up to 4 non-zero entries since we\\'re assuming edges are bidirectional for simplicity.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from typing import List, Tuple\\\\\\\\n\\\\\\\\ndef eulerian_path(graph: List[List[int]]) -> Tuple[bool, List[str]]:\\\\\\\\n    n = len(graph)\\\\\\\\n    degrees = [sum(row) for row in graph]\\\\\\\\n    if sum(degrees) % 2 == 1 or min(degrees) < 0 or max(degrees) > 2:\\\\\\\\n        return (False, [])\\\\\\\\n    start_node = None\\\\\\\\n    end_node = None\\\\\\\\n    for node, degree in enumerate(degrees):\\\\\\\\n        if degree &gt; 1 and not start_node:\\\\\\\\n            start_node = node\\\\\\\\n        elif degree == 0 and end_node is None:\\\\\\\\n            end_node = node\\\\\\\\n        elif (start_node is not None) and (end_node is not None):\\\\\", \\\\\"tests\\\\\": [\\\\\"assert eulerian_path([[0, 1, 0], [1, 0, 0], [0, 0, 0]]) == ((True, [\\'A\\', \\'B\\'])\\\\\", \\\\\"assert eulerian_path([[0, 1, 0], [0, 0, 1], [1, 0, 0]]) == ((False, [])\\\\\", \\\\\"assert eulerian_path([[1, 0, 1], [0, 1, 0], [1, 0, 1]]) == ((True, [\\'A\\', \\'B\\', \\'C\\'])\\\\\", \\\\\"assert eulerian_path([[0, 1], [1, 0]]) == ((False, [])\\\\\"] }\"'}"