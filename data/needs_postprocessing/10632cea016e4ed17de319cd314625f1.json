"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard:  Binary Tree Minimum Depth\\\\\", \\\\\"description\\\\\": \\\\\"Given a binary tree, find its minimum depth. The minimum depth is defined as the number of nodes along the shortest path from the root node down to the nearest leaf node.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef minDepth(root: TreeNode) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `root` (TreeNode): The root node of the binary tree.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the minimum depth of the binary tree.\\\\\", \\\\\"code\\\\\": \\\\\"class TreeNode:\\\\\\\\n    def __init__(self, val=0, left=None, right=None):\\\\\\\\n        self.val = val\\\\\\\\n        self.left = left\\\\\\\\n        self.right = right\\\\\\\\n \\\\\\\\ndef minDepth(root: TreeNode) -> int:\\\\\\\\n    if root is None:\\\\\\\\n        return 0\\\\\\\\n    if root.left is None and root.right is None:\\\\\\\\n        return 1\\\\\\\\n    if root.left is None:\\\\\\\\n        return minDepth(root.right) + 1\\\\\\\\n    if root.right is None:\\\\\\\\n        return minDepth(root.left) + 1\\\\\\\\n    return min(minDepth(root.left), minDepth(root.right)) + 1\\\\\", \\\\\"tests\\\\\": [\\\\\"root = TreeNode(3)\\\\\\\\nroot.left = TreeNode(9)\\\\\\\\nroot.right = TreeNode(20)\\\\\\\\nroot.right.left = TreeNode(15)\\\\\\\\nroot.right.right = TreeNode(7)\\\\\\\\nasert minDepth(root) == 2\\\\\", \\\\\"root = TreeNode(2)\\\\\\\\nroot.right = TreeNode(3)\\\\\\\\nroot.right.left = TreeNode(4)\\\\\\\\nroot.right.left.right = TreeNode(5)\\\\\\\\nasert minDepth(root) == 3\\\\\"] }\"'}"