{
    "model": "llama3:latest",
    "response": "{\"title\": \"Medium: Maximal Rectangle\", \"descritpion\": \"Given a 2D binary matrix (0s and 1s) where each row represents a histogram bar, find the maximum area of rectangle that can be inscribed within this bar chart. The input matrix is guaranteed to have at least one row.\\n\\n#### Function Signature\\n```python\\ndef max_rectangle_area(matrix: list[list[int]]) -> int:\\n```\\n\\n#### Input\\n- `matrix` (list[list[int]]): A 2D binary matrix where each element is either 0 or 1, representing a histogram bar.\\n\\n#### Output\\n- Returns the maximum area of rectangle that can be inscribed within this bar chart.\", \"code\": \"from typing import List\\n\\ndef max_rectangle_area(matrix: List[List[int]]) -> int:\\n    if not matrix:\\n        return 0\\n    rows, cols = len(matrix), len(matrix[0])\\n    heights = [0] * cols\\n    area_max = 0\\n    for row in range(rows):\\n        for col in range(cols):\\n            heights[col] = heights[col] + 1 if matrix[row][col] else 0\\n        stack = []\\n        index = 0\\n        max_area = 0\\n        while index < cols:\\n            if not stack or heights[index] >= heights[stack[-1]]:\\n                stack.append(index)\\n                index += 1\\n            else:\\n                top = stack.pop()\\n                width = index if not stack else index - stack[-1] - 1\\n                max_area = max(max_area, width * heights[top])\\n        while stack:\\n            top = stack.pop()\\n            width = index if not stack else cols - stack[-1] - 1\\n            max_area = max(max_area, width * heights[top])\\n        area_max = max(area_max, max_area)\\n    return area_max\", \"tests\": [\"assert max_rectangle_area([[0, 1, 1], [1, 1, 1], [1, 0, 0]]) == 6\", \"assert max_rectangle_area([[0, 0, 0], [1, 1, 1], [1, 0, 0]]) == 2\", \"assert max_rectangle_area([]) == 0\"]}"
}