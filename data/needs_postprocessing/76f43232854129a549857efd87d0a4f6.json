{
    "model": "llama3:latest",
    "response": "{\"title\": \"Evaluating the Expression\", \"description\": \"Write a function that evaluates a given mathematical expression. The expression will be a string of digits, operators (+, -, *, /), and parentheses. The function should return the result of the evaluation.\\n\\n#### Function Signature\\n```python\\ndef evaluate(expression: str) -> int:\\n```\\n\\n#### Input\\n- `expression` (str): A mathematical expression as a string that may contain digits, operators (+, -, *, /), and parentheses.\\n\\n#### Output\\n- Returns the integer result of evaluating the input expression.\\n\\nFor example, if you call `evaluate(\\\"1 + 2 * 3\\\")`, it should return `7`.\\n\\nFor another example, if you call `evaluate(\\\"(1 + 2) * 3\\\")`, it should also return `7`.\\n\\nThe division operator `/` will always result in an integer. For instance, calling `evaluate(\\\"10 / 2\\\")` will return `5`, not `5.0`.\\n\\nDo not use built-in Python functions like eval().\", \"code\": \"\\nimport re\\n\\ndef evaluate(expression: str) -> int:\\n    try:\\n        # Use regular expression to find all numbers in the expression\\n        numbers = list(map(int, re.findall(r'\\\\d+', expression)))\\n\\n        if len(numbers) != 2:\\n            raise Exception('Invalid number of operands')\\n\\n        num1, num2 = numbers\\n\\n        operator = re.search(r'[+\\\\-*/]', expression).group()\\n\\n        # Perform operation based on the operator\\n        if operator == '+':\\n            return num1 + num2\\n        elif operator == '-':\\n            return num1 - num2\\n        elif operator == '*':\\n            return num1 * num2\\n        elif operator == '/':\\n            return num1 // num2  # Integer division\\n\\n    except Exception as e:\\n        raise ValueError(f\", \"expression\": {\"str(e)}\": \"\", \"tests\": [\"assert evaluate('1 + 2') == 3\", \"assert evaluate('10 / 2') == 5\", \"assert evaluate('1 * 2') == 2\", \"assert evaluate('(1 + 2) * 3') == 9\"]}}"
}