"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"\\\\\\\\\\\\\"Anagram Detector (Hard)\\\\\\\\\\\\\"\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_anagrams` that takes a list of strings and returns another list containing the pairs of strings that are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: List[str]) -> List[List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of strings where each string contains only lowercase letters.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of lists. Each inner list contains two strings that are anagrams of each other.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def find_anagrams(words: List[str]) -> List[List[str]]:\\\\\\\\n    # Sort the words and create a dictionary to store sorted words\\\\\\\\n    word_dict = {sorted(word): word for word in words}\\\\\\\\n    \\\\\\\\n    # Create an empty list to store anagram pairs\\\\\\\\n    anagrams = []\\\\\\\\n    \\\\\\\\n    # Iterate through each sorted word in the dictionary\\\\\\\\n    for sorted_word, original_word in word_dict.items():\\\\\\\\n        # If the current sorted word is not equal to itself (to avoid self-pairing)\\\\\\\\n        if sorted_word != sorted_word:\\\\\\\\n            # Split the sorted word into a tuple and sort it again\\\\\\\\n            sorted_tuple = tuple(sorted(sorted_word))\\\\\\\\n            \\\\\\\\n            # If there\\'s another word in the dictionary with the same sorted version\\\\\\\\n            if sorted_tuple in word_dict:\\\\\\\\n                # Add the pair to the anagrams list\\\\\\\\n                anagrams.append([original_word, word_dict[sorted_tuple]]) \\\\\\\\n    return anagrams\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\", \\\\\\\\\\\\\"enlist\\\\\\\\\\\\\", \\\\\\\\\\\\\"education\\\\\\\\\\\\\"]) == [[\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"enlist\\\\\\\\\\\\\"], [\\\\\\\\\\\\\"silent\\\\\\\\\\\\\", \\\\\\\\\\\\\"education\\\\\\\\\\\\\"]]\\\\\", \\\\\"assert find_anagrams([\\\\\\\\\\\\\"cat\\\\\\\\\\\\\", \\\\\\\\\\\\\"act\\\\\\\\\\\\\", \\\\\\\\\\\\\"tac\\\\\\\\\\\\\"]) == [[\\\\\\\\\\\\\"cat\\\\\\\\\\\\\", \\\\\\\\\\\\\"act\\\\\\\\\\\\\"], [\\\\\\\\\\\\\"cat\\\\\\\\\\\\\", \\\\\\\\\\\\\"tac\\\\\\\\\\\\\"]]\\\\\", \\\\\"assert find_anagrams([\\\\\\\\\\\\\"love\\\\\\\\\\\\\", \\\\\\\\\\\\\"heaven\\\\\\\\\\\\\"]) == []\\\\\"] }\"'}"