"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"\\'Radix Sort\\' - A Medium Level Problem\\\\\", \\\\\"description\\\\\": \\\\\"Radix sort is a non-comparative sorting algorithm based on number system properties, specifically the digit counting technique. Write a function `radix_sort` that takes an array of integers and sorts it using the radix sort algorithm.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef radix_sort(arr: List[int]) -> List[int]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `arr` (List[int]): A list of non-negative integers.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a sorted list of integers in ascending order.\\\\\\\\n\\\\\\\\nHint: Use the maximum number of digits for all numbers to optimize the sorting process. If the numbers have different lengths, pad them with leading zeros so that they all have the same length.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def radix_sort(arr):\\\\\\\\n    # Find the maximum number of digits in the array\\\\\\\\n    max_digits = len(str(max(arr))) + 1\\\\\\\\n    exponent = 1\\\\\\\\n    while exponent <= max_digits:\\\\\\\\n        bucket = [[] for _ in range(10)]\\\\\\\\n        for num in arr:\\\\\\\\n            digit = (num // exponent) % 10\\\\\\\\n            bucket[digit].append(num)\\\\\\\\n        i = 0\\\\\\\\n        for j in range(10):\\\\\\\\n            if bucket[j]:\\\\\\\\n                while bucket[j]:\\\\\\\\n                    arr[i] = bucket[j].pop()\\\\\\\\n                    i += 1\\\\\\\\n        exponent *= 10\\\\\\\\n    return arr\\\\\", \\\\\"tests\\\\\": [\\\\\"assert radix_sort([23, 456, 12, 789]) == [12, 23, 456, 789]\\\\\", \\\\\"assert radix_sort([10, 9, 88, 777, 606, 5555]) == [10, 5555, 606, 88, 777, 9]\\\\\", \\\\\"assert radix_sort([]) == []\\\\\", \\\\\"assert radix_sort([-123]) == [-123]\\\\\"] }\"'}"