{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Easy: Evenly Distributed Integers\\\", \\\"description\\\": \\\"Write a function `evenly_distributed` that takes an integer `n` and returns the number of ways to distribute `n` evenly among `k` integers, where each integer can take on any value from 0 to `m`. The order of distribution does not matter.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef evenly_distributed(n: int, k: int, m: int) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `n` (int): A positive integer that represents the total number to be distributed.\\\\n- `k` (int): A positive integer that represents the number of integers to distribute among.\\\\n- `m` (int): A non-negative integer that represents the maximum value each integer can take on.\\\\n\\\\n#### Output\\\\n- Returns the number of ways to distribute `n` evenly among `k` integers, where each integer can take on any value from 0 to `m`. The order of distribution does not matter.\\\", \\\"code\\\": \\\"def evenly_distributed(n: int, k: int, m: int) -> int:\\\\n    # Calculate the maximum and minimum possible values for each integer\\\\n    max_val = min(m, n // k)\\\\n    min_val = 0\\\\n\\\\n    # Initialize the count of ways to distribute `n` among `k` integers\\\\n    count = 0\\\\n\\\\n    # Iterate over all possible values for the first integer\\\\n    for i in range(min_val, max_val + 1):\\\\n        # Calculate the remaining value after distributing `i`\\\\n        remaining = n - i * k\\\\n\\\\n        # If the remaining value is divisible by `k`, add to the count\\\\n        if remaining % k == 0:\\\\n            count += 1\\\\n\\\\n    return count\\\", \\\"tests\\\": [\\\"assert evenly_distributed(6, 2, 3) == 4\\\", \\\"assert evenly_distributed(10, 5, 4) == 7\\\", \\\"assert evenly_distributed(15, 3, 5) == 12\\\", \\\"assert evenly_distributed(20, 4, 8) == 14\\\"] }\""
}