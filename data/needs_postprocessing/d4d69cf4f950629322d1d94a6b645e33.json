{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Hard: Counting Inversions\\\", \\\"description\\\": \\\"An inversion in an array of integers is a pair of elements that are in the wrong order. Write a function `count_inversions` that takes a list of integers and returns the number of inversions in the list.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef count_invisions(arr: list[int)) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `arr` (list[int]): A list of integers.\\\\n\\\\n#### Output\\\\n- Returns the number of inversions in the input list.\\\\n\\\", \\\"code\\\": \\\"import bisect\\\\n\\\\ndef count_inversions(arr: list[int]) -> int:\\\\n    n = len(arr)\\\\n    sorted_arr = [0] * n\\\\n    for num in arr:\\\\n        i = 0\\\\n        while i < n and bisect.bisect(sorted_arr, num) > i:\\\\n            i += 1\\\\n        j = i\\\\n        while j < n and (j == n or sorted_arr[j - 1] <= num):\\\\n            sorted_arr.insert(j, num)\\\\n            j += 1\\\\n    inversions = sum(range(i + 1))\\\\n    return inversions\\\\n\\\", \\\"tests\\\": [\\\"assert count_inversions([2, 3, 8, 7, 4]) == 5\\\", \\\"assert count_inversions([5, 1, 3, 9, 7, 6, 4, 2, 8]) == 13\\\"] }\""
}