"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Finder (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_anagrams(words: List[str]) -> Dict[str, List[str]]` that takes a list of words and returns a dictionary where each key is a word and the corresponding value is a list of all the words in the input that are anagrams of the given key.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of strings containing only lowercase letters with no punctuation or spaces.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a dictionary where each key is a word in the input and the corresponding value is a list of all the words in the input that are anagrams of the given key.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from collections import Counter, defaultdict\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n    # Create a counter for each word and its frequency\\\\\\\\n    counter = Counter(words)\\\\\\\\n    \\\\\\\\n    # Initialize an empty dictionary to store the results\\\\\\\\n    result = defaultdict(list)\\\\\\\\n\\\\\\\\n    # Iterate through the words in the input\\\\\\\\n    for word in words:\\\\\\\\n        # Get the frequency of each character in the current word\\\\\\\\n        frequencies = counter[word]\\\\\\\\n\\\\\\\\n        # Create a sorted list of characters and their frequencies\\\\\\\\n        sorted_frequencies = sorted(list(zip(string.ascii_lowercase, frequencies.items())))\\\\\\\\n\\\\\\\\n        # Get the word corresponding to this frequency distribution\\\\\\\\n        anagram_word = \\'\\'.join([char[0] for char in sorted_frequencies])\\\\\\\\n\\\\\\\\n        # Add the current word to the list of anagrams for the found anagram word\\\\\\\\n        result[anagram_word].append(word)\\\\\\\\n    \\\\\\\\n    # Return the final dictionary\\\\\\\\n    return dict(result)\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"enlist\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\", \\\\\\\\\\\\\"program\\\\\\\\\\\\\"]) == {\\\\\\\\\\\\\"enlist\\\\\\\\\\\\\": [\\\\\\\\\\\\\"enlist\\\\\\\\\\\\\", \\\\\\\\\\\\\"listen\\\\\\\\\\\\\"], \\\\\\\\\\\\\"silent\\\\\\\\\\\\\": [\\\\\\\\\\\\\"silent\\\\\\\\\\\\\"], \\\\\\\\\\\\\"program\\\\\\\\\\\\\": []}\\\\\", \\\\\"assert find_anagrams([\\\\\\\\\\\\\"hello\\\\\\\\\\\\\", \\\\\\\\\\\\\"olleh\\\\\\\\\\\\\", \\\\\\\\\\\\\"world\\\\\\\\\\\\\", \\\\\\\\\\\\\"dlrow\\\\\\\\\\\\\"]) == {\\\\\\\\\\\\\"hello\\\\\\\\\\\\\": [\\\\\\\\\\\\\"olleh\\\\\\\\\\\\\"], \\\\\\\\\\\\\"world\\\\\\\\\\\\\": [\\\\\\\\\\\\\"dlrow\\\\\\\\\\\\\"]}\\\\\"] }\"'}"