"{'model': 'mistral:latest', 'response': '{\"title\": \"\\'Anagram Detector (Hard)\\'\", \"description\": \"\\\\\"An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a function `find_anagrams` that finds all the anagrams for a given word within a larger text.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef find_anagrams(word: str, text: str) -> List[str]:\\\\n```\\\\n\\\\n#### Input\\\\n- `word` (str): The word to find anagrams of within the text.\\\\n- `text` (str): A larger text containing multiple words that may contain letters, numbers, spaces, and punctuation.\\\\n\\\\n#### Output\\\\n- Returns a list of strings, each string being a word within the given text that is an anagram of the input word.\\\\n\\\\n#### Constraints\\\\nThe function should be case insensitive, i.e., it should consider \\'Anagram\\' and \\'anagram\\' as the same word.\\\\n\\\\\",\\\\n    \\\\\"code\\\\\": \\\\\"import collections\\\\ndef find_anagrams(word: str, text: str) -> List[str]:\\\\n    # Normalize the input by converting to lowercase and removing non-alphabetic characters\\\\n    word = \", \"text_words\": \"n        # Normalize the current word and count its characters\\\\n        text_word = \\'\\'.join(char for char in text_word.lower() if char.isalpha())\\\\n        word_count = collections.Counter(word)\\\\n        text_count = collections.Counter(text_word)\\\\n        # Check if the counts of characters match\\\\n        if word_count == text_count:\\\\n            anagrams.append(text_word)\\\\n    return anagrams\", \"tests\": [\"assert find_anagrams(\\'listen\\', \\'No one instructed us.\\' ) == [\\'silent\\']\", \"assert find_anagrams(\\'act\\', \\'world action t tac\\') == [\\'tac\\', \\'cat\\', \\'act\\']\", \"assert find_anagrams(\\'apple\\', \\'I ate apples every other day\\') == []\"]}'}"