{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Minimum Window Substring\\\", \\\"description\\\": \\\"Write a function `min_window_substring` that takes two strings, `s1` and `s2`, as input. The function should return the minimum window substring in `s1` that contains all characters of `s2`. If no such window exists, return an empty string.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef min_window_substring(s1: str, s2: str) -> str:\\\\n```\\\\n\\\\n#### Input\\\\n- `s1` (str): The main string to search for the minimum window substring.\\\\n- `s2` (str): The string containing characters that must be present in the minimum window substring.\\\\n\\\\n#### Output\\\\n- Returns the minimum window substring in `s1` that contains all characters of `s2`. If no such window exists, returns an empty string.\\\", \\\"code\\\": \\\"\\\\nfrom collections import Counter\\\\n\\\\ndef min_window_substring(s1: str, s2: str) -> str:\\\\n    if not s2 or not s1:\\\\n        return ''\\\\n\\\\n    dict_s2 = Counter(s2)\\\\n    required_chars = len(dict_s2)\\\\n\\\\n    left, right = 0, 0\\\\n    formed_chars = 0\\\\n\\\\n    window_counts = {}\\\\n\\\\n    while right < len(s1):\\\\n        character = s1[right]\\\\n        window_counts[character] = window_counts.get(character, 0) + 1\\\\n\\\\n        if character in dict_s2 and window_counts[character] == dict_s2[character]:\\\\n            formed_chars += 1\\\\n\\\\n        while left <= right and formed_chars == required_chars:\\\\n            character = s1[left]\\\\n            if right - left + 1 < len(s2):\\\\n                return ''\\\\n            window_counts[character] -= 1\\\\n            if character in dict_s2 and window_counts[character] < dict_s2[character]:\\\\n                formed_chars -= 1\\\\n            left += 1\\\\n\\\\n        right += 1\\\\n\\\\n    return s1[left:right+1]\\\\n\\\", \\\"tests\\\": [\\\"assert min_window_substring('ADOBECODEBANC', 'ABC') == 'BANC'\\\", \\\"assert min_window_substring('hello', 'll') == 'll'\\\", \\\"assert min_window_substring('abcxyz', '') == ''\\\"] }\""
}