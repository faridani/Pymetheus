{
    "model": "llama3:latest",
    "response": "{\"title\": \"Easy: Maximum Sum of Subarrays\", \"description\": \"Given an array of integers, write a function `max_sum_subarray` that finds the maximum sum of all possible subarrays. For example, if the input is `[1, -2, 3, 10, -4, 7, 2]`, the function should return `29`, which is the maximum sum of the subarray `[1, 3, 10, 7]`. If there are multiple subarrays with the same maximum sum, you can return any one of them.\\n\\n#### Function Signature\\n```\\ndef max_sum_subarray(arr: list[int)) -> int:\\n```\", \"code\": \"def max_sum_subarray(arr: list[int)) -> int:\\n    if not arr:\\n        return 0\\n    max_sum = float('-inf')\\n    current_sum = 0\\n    for num in arr:\\n        current_sum += num\\n        if current_sum > max_sum:\\n            max_sum = current_sum\\n        elif current_sum < 0:\\n            current_sum = 0\\n    return max_sum\", \"tests\": [\"assert max_sum_subarray([1, -2, 3, 10, -4, 7, 2]) == 29\", \"assert max_sum_subarray([-2, 1, -7, 15, 0, 9]) == 23\"]}"
}