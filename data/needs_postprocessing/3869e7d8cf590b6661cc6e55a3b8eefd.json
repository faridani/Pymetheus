{
    "model": "llama3:latest",
    "response": "{\"title\": \"Finding Islands\", \"description\": \"An island in a given grid is defined as a connected group of one or more cells that is entirely surrounded by other cells. You are given an integer grid size n, and a 2D grid represented as a list of lists of integers, where 0 represents land and 1 represents water.\\n\\n#### Function Signature\\n```python\\ndef find_islands(grid: list[list[int]]) -> int:\\n```\\n\\n#### Input\\n- `grid` (list[list[int]]): A 2D grid represented as a list of lists of integers, where 0 represents land and 1 represents water.\\n- `n` (int): The integer grid size.\\n\\n#### Output\\n- Returns the number of islands in the given grid.\", \"code\": \"\", \"import copy\\n\\ndef find_islands(grid: list[list[int]]) -> int:\\n    if not grid or not grid[0]:\\n        return 0\\n    \\n    n = len(grid)\\n    m = len(grid[0])\\n    \\n    def dfs(i: int, j: int) -> None:\\n        if i < 0 or i >= n or j < 0 or j >= m or grid[i][j] == 1:\\n            return\\n        \\n        grid[i][j] = 1\\n        for dx in [-1, 0, 1]:\\n            for dy in [-1, 0, 1]:\\n                if abs(dx) + abs(dy) != 1:\\n                    continue\\n                \\n                ni, nj = i + dx, j + dy\\n                if 0 <= ni < n and 0 <= nj < m and grid[ni][nj] == 0:\\n                    dfs(ni, nj)\\n    \\n    islands = 0\\n    for i in range(n):\\n        for j in range(m):\\n            if grid[i][j] == 0:\\n                dfs(i, j)\\n                islands += 1\\n    \\n    return islands - (grid[0][0] == 0)\": \"tests\\\": [\\\"assert find_islands([[0, 0], [0, 0]]) == 1\", \"assert find_islands([[0, 0, 0], [0, 1, 0], [0, 0, 0]]) == 2\": \"assert find_islands([[0, 0, 0, 0], [0, 1, 1, 0], [0, 0, 0, 0], [0, 0, 0, 0]]) == 3\"}"
}