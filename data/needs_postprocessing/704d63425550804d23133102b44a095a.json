"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Flatten Nested Dictionary\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `flatten_dict` that takes a nested dictionary as input and returns a flattened dictionary. The keys of the flattened dictionary should be formed by joining the keys of each level in the nested dictionary with a period (.) separator.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef flatten_dict(nested_dict: dict) -> dict:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `nested_dict` (dict): A dictionary that may contain other dictionaries as values.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a flattened dictionary where the keys are formed by joining the keys of each level with a period (.) separator.\\\\\", \\\\\"code\\\\\": \\\\\"def flatten_dict(nested_dict: dict) -> dict:\\\\\\\\n    flattened = {}\\\\\\\\n\\\\\\\\n    def _flatten(d, key_prefix=None):\\\\\\\\n        for key, value in d.items():\\\\\\\\n            if isinstance(value, dict):\\\\\\\\n                _flatten(value, f\\'{key_prefix}.{key}\\' if key_prefix else key)\\\\\\\\n            else:\\\\\\\\n                flattened[f\\'{key_prefix}.{key}\\' if key_prefix else key] = value\\\\\\\\n    _flatten(nested_dict)\\\\\\\\n    return flattened\\\\\", \\\\\"tests\\\\\": [\\\\\"assert flatten_dict({\\'a\\': 1, \\'b\\': {\\'c\\': 2, \\'d\\': {\\'e\\': 3}}}) == {\\'a\\': 1, \\'b.c\\': 2, \\'b.d.e\\': 3}\\\\\", \\\\\"assert flatten_dict({\\'x\\': {\\'y\\': 4}, \\'z\\': 5}) == {\\'x.y\\': 4, \\'z\\': 5}\\\\\", \\\\\"assert flatten_dict({\\'a\\': 1, \\'b\\': 2, \\'c\\': {\\'d\\': 3}}) == {\\'a\\': 1, \\'b\\': 2, \\'c.d\\': 3}\\\\\"] }\"'}"