{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Maximum Sum of Distinct Subarrays\\\", \\\"description\\\": \\\"A subarray of an array `arr` is a contiguous segment of the array, such as `[1, 2, 3]`. In this problem, we want to find the maximum sum of distinct subarrays. For example, given the array `[5, -4, -7, 10, -8, -3]`, the maximum sum of distinct subarrays is `25` (from the subarrays `[5, -4, -7]` and `[10, -8, -3]`). Write a function that takes an integer array `arr` as input and returns the maximum sum of distinct subarrays.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef max_sum_distinct_subarrays(arr: list[int)) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `arr` (list<int>): A list of integers.\\\\n\\\\n#### Output\\\\n- Returns an integer representing the maximum sum of distinct subarrays.\\\\n\\\", \\\"code\\\": \\\"def max_sum_distinct_subarrays(arr: list[int)) -> int:\\\\n    if not arr:\\\\n        return 0\\\\n    n = len(arr)\\\\n    prefix_sum = [0] * (n + 1)\\\\n    for i in range(n):\\\\n        prefix_sum[i + 1] = prefix_sum[i] + arr[i]\\\\n    max_sum = float('-inf')\\\\n    for start in range(n):\\\\n        for end in range(start, n):\\\\n            subarray_sum = prefix_sum[end + 1] - prefix_sum[start]\\\\n            if not set(arr[start:end+1]):\\\\n                max_sum = max(max_sum, subarray_sum)\\\\n    return max_sum\\\\n\\\", \\\"tests\\\": [\\\"assert max_sum_distinct_subarrays([5, -4, -7, 10, -8, -3]) == 25\\\", \\\"assert max_sum_distinct_subarrays([]) == 0\\\", \\\"assert max_sum_distinct_subarrays([-1, 2, -3, 4, -5, 6]) == 15\\\"] }\""
}