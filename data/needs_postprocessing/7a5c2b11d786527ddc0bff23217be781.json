"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"\\'Is it a Pangram or Not?\\' (Medium)\\\\\", \\\\\"description\\\\\": \\\\\"A pangram is a sentence that uses every letter of the alphabet at least once. Write a function `is_pangram` that checks if a given string is a pangraph.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef is_pangram(s: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s` (str): A string of alphabetic characters with no spaces or punctuation.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the input string is a pangraph, `False` otherwise.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"import string\\\\\\\\n\\\\\\\\ndef is_pangram(s: str) -> bool:\\\\\\\\n    # Check that the length of the string is equal to the length of the alphabet\\\\\\\\n    if len(s) != len(string.ascii_lowercase):\\\\\\\\n        return False\\\\\\\\n    \\\\\\\\n    # Create a dictionary to count each letter in the string\\\\\\\\n    alphabet = {}\\\\\\\\n    for char in s:\\\\\\\\n        if char in alphabet:\\\\\\\\n            alphabet[char] += 1\\\\\\\\n        else:\\\\\\\\n            alphabet[char] = 1\\\\\\\\n    \\\\\\\\n    # Check that all counts are equal to 1 except for the space character if present\\\\\\\\n    if \\' \\' in alphabet and any(count > 1 for count in alphabet.values()):\\\\\\\\n        return False\\\\\\\\n    else:\\\\\\\\n        return True\\\\\", \\\\\"tests\\\\\": [\\\\\"assert is_pangram(\\\\\\\\\\\\\"the quick brown fox jumps over the lazy dog\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert is_pangram(\\\\\\\\\\\\\"A man, a plan, a canal: Panama\\\\\\\\\\\\\") == False\\\\\", \\\\\"assert is_pangram(\\\\\\\\\\\\\"Try Harder Next Time\\\\\\\\\\\\\") == False\\\\\", \\\\\"assert is_pangram(\\\\\\\\\\\\\"The zebra ate my nana\\'s bacon\\\\\\\\\\\\\") == False\\\\\"] }\"'}"