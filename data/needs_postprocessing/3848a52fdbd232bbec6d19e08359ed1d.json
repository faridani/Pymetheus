"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Detector (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_anagrams(words: List[str]) -> Dict[str, List[str]]` that returns a dictionary where each key is an anagram (a word or phrase formed by rearranging the letters of a different word or phrases, usually with all the original letters accounted for) and its value is a list of words that share the same anagram.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of words containing only lowercase letters.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a dictionary where each key is an anagram and its value is a list of words that share the same anagram.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"import collections\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n    # Convert all words to lowercase\\\\\\\\n    words = [word.lower() for word in words]\\\\\\\\n    \\\\\\\\n    # Create an empty dictionary to store the anagrams\\\\\\\\n    anagram_dict = {}\\\\\\\\n    \\\\\\\\n    # Iterate through each word\\\\\\\\n    for word in words:\\\\\\\\n        # Sort the letters of the word and join them into a key\\\\\\\\n        sorted_word = \\'\\'.join(sorted(word))\\\\\\\\n        \\\\\\\\n        # If the sorted word is not already a key, add it to the dictionary with an empty list as its value\\\\\\\\n        if sorted_word not in anagram_dict:\\\\\\\\n            anagram_dict[sorted_word] = []\\\\\\\\n        \\\\\\\\n        # Add the original word to the list of values for the corresponding sorted word key\\\\\\\\n        anagram_dict[sorted_word].append(word)\\\\\\\\n    \\\\\\\\n    return anagram_dict\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\'listen\\', \\'silent\\', \\'enlist\\']) == {\\' listen\\': [\\'listen\\', \\'silent\\'], \\' silent\\': [\\'silent\\'], \\' enlist\\': [\\'enlist\\']}\\\\\", \\\\\"assert find_anagrams([\\'apple\\', \\'apples\\', \\'app\\', \\'apop\\', \\'peel\\', \\'leap\\']) == {\\' apple\\': [\\'apple\\', \\'apples\\'], \\' app\\': [\\'app\\'], \\' apop\\': [\\'apop\\'], \\' peel\\': [\\'peel\\'], \\' leap\\': [\\'leap\\']}\\\\\", \\\\\"assert find_anagrams([\\'dog\\', \\'god\\', \\'dod\\']) == {\\' god\\': [\\'god\\', \\'dog\\'], \\' dod\\': [\\'dod\\']}\\\\\"] }\"'}"