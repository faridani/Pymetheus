{
    "model": "llama3:latest",
    "response": "{\"title\": \"Maximum Area of a Histogram\", \"description\": \"Given an array of integers `heights` representing the heights of bars in a histogram, write a function `max_area_histogram` that returns the maximum area that can be enclosed by two bars. The area is calculated as the product of the height and width of the rectangle.\\n\\n#### Function Signature\\n```python\\ndef max_area_histogram(heights: list[int)) -> int:\\n```\\n\\n#### Input\\n- `heights` (list[int]): A list of integers representing the heights of bars in a histogram.\\n\\n#### Output\\n- Returns the maximum area that can be enclosed by two bars.\", \"code\": \"def max_area_histogram(heights: list[int)) -> int:\\n    stack = []\\n    max_area = 0\\n    index = 0\\n    while index < len(heights):\\n        if not stack or heights[index] >= heights[stack[-1]]:\\n            stack.append(index)\\n            index += 1\\n        else:\\n            top_of_stack = stack.pop()\\n            width = index if not stack else index - stack[-1] - 1\\n            max_area = max(max_area, heights[top_of_stack] * width)\\n    while stack:\\n        top_of_stack = stack.pop()\\n        width = index if not stack else len(heights) - stack[-1] - 1\\n        max_area = max(max_area, heights[top_of_stack] * width)\\n    return max_area\", \"tests\": [\"assert max_area_histogram([2,1,5,6,2,3]) == 9\", \"assert max_area_histogram([1,8,6,2,5,4,3,1]) == 20\", \"assert max_area_histogram([1,1,1,1]) == 1\", \"assert max_area_histogram([]) == 0\"]}"
}