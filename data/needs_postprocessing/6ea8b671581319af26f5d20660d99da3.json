{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Sum of Digits in a Binary Tree\\\", \\\"description\\\": \\\"Given a binary tree where each node has an integer value, write a function `sum_of_digits` that returns the sum of the digits of all nodes at each level. If a level contains only one node with no children (i.e., it is a leaf), its digit sum is included in the total sum.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef sum_of_digits(root: Optional[Node]) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `root` (Optional[Node]): The root of the binary tree. Each node has an integer value and may have zero or two children (i.e., left child, right child).\\\\n\\\\n#### Output\\\\n- Returns the sum of the digits of all nodes at each level in the binary tree.\\\\n\\\\nNote that you can assume that the input tree is not empty.\\\", \\\"code\\\": \\\"\\\\nclass Node:\\\\n    def __init__(self, val: int):\\\\n        self.val = val\\\\n        self.left = None\\\\n        self.right = None\\\\n\\\\ndef sum_of_digits(root: Optional[Node]) -> int:\\\\n    if root is None:\\\\n        return 0\\\\n\\\\n    queue = [(root, 1)]\\\\n    total_sum = 0\\\\n\\\\n    while queue:\\\\n        node, level = queue.pop(0)\\\\n        total_sum += node.val % 10\\\\n        if node.left:\\\\n            queue.append((node.left, level + 1))\\\\n        if node.right:\\\\n            queue.append((node.right, level + 1))\\\\n\\\\n    return total_sum\\\", \\\"tests\\\": [\\\"assert sum_of_digits(Node(4, Node(2), None)) == 6\\\", \\\"assert sum_of_digits(None) == 0\\\", \\\"assert sum_of_digits(Node(5)) == 5\\\", \\\"assert sum_of_digits(Node(3, Node(1), Node(2))) == 6\\\"] }\""
}