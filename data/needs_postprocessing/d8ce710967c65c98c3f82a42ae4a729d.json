{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Maximum Island Size\\\", \\\"description\\\": \\\"Given a grid of 1s and 0s, where 1 represents land and 0 represents water, write a function `max_island_size` that finds the size of the largest island in the grid.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef max_island_size(grid: list[list[int]]) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `grid` (list[list[int]]): A 2D list representing the grid, where each element is either 0 or 1.\\\\n\\\\n#### Output\\\\n- Returns the size of the largest island in the grid.\\\\n\\\", \\\"code\\\": \\\"from typing import List\\\\n\\\\ndef max_island_size(grid: List[List[int]]) -> int:\\\\n    if not grid:\\\\n        return 0\\\\n\\\\n    max_size = 0\\\\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\\\\n\\\\n    def dfs(i: int, j: int) -> int:\\\\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == 0:\\\\n            return 0\\\\n\\\\n        size = 1\\\\n        grid[i][j] = 0\\\\n\\\\n        for direction in directions:\\\\n            new_i, new_j = i + direction[0], j + direction[1]\\\\n            size += dfs(new_i, new_j)\\\\n\\\\n        return size\\\\n\\\\n    for i in range(len(grid)):\\\\n        for j in range(len(grid[0])):\\\\n            if grid[i][j] == 1:\\\\n                max_size = max(max_size, dfs(i, j))\\\\n\\\\n    return max_size\\\", \\\"tests\\\": [\\\"assert max_island_size([[]]) == 0\\\", \\\"assert max_island_size([[1]]) == 1\\\", \\\"assert max_island_size([[0, 1], [0, 0]]) == 1\\\", \\\"assert max_island_size([[1, 1], [0, 1]]) == 2\\\"] }\""
}