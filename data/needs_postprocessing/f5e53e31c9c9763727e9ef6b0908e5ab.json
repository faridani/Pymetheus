"{'model': 'gemma2:27b-instruct-q5_K_S', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Medium: Word Ladder\\\\\", \\\\\"description\\\\\": \\\\\"A word ladder is a sequence of words where each word differs from the previous word by only one letter. Given two words, start and end, write a function `word_ladder` that returns the shortest possible word ladder between them.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef word_ladder(start: str, end: str) -> list[str]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `start` (str): The starting word in the ladder. \\\\\\\\n- `end` (str): The ending word in the ladder.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of strings representing the shortest word ladder from `start` to `end`. If no ladder exists, return an empty list.\\\\\\\\n\\\\\\\\n\\\\\\\\n**Constraints**: All words are lowercase and have the same length. The input dictionary will contain all valid English words with the same length as the start and end words.\\\\\", \\\\\"code\\\\\": \\\\\"def word_ladder(start: str, end: str) -> list[str]:\\\\\\\\n    from collections import deque\\\\\\\\n    if len(start) != len(end): \\\\\\\\n        return []\\\\\\\\n\\\\\\\\n    word_list = {\\\\\\\\\\\\\"hot\\\\\\\\\\\\\", \\\\\\\\\\\\\"dot\\\\\\\\\\\\\", \\\\\\\\\\\\\"dog\\\\\\\\\\\\\", \\\\\\\\\\\\\"lot\\\\\\\\\\\\\", \\\\\\\\\\\\\"log\\\\\\\\\\\\\", \\\\\\\\\\\\\"cog\\\\\\\\\\\\\"}\\\\\\\\n    queue = deque([(start, [start])])\\\\\\\\n\\\\\\\\n    while queue:\\\\\\\\n        current_word, path = queue.popleft()\\\\\\\\n        if current_word == end:\\\\\\\\n            return path\\\\\\\\n        for i in range(len(current_word)):\\\\\\\\n            for char in \\'abcdefghijklmnopqrstuvwxyz\\':\\\\\\\\n                new_word = current_word[:i] + char + current_word[i+1:]\\\\\\\\n                if new_word in word_list and new_word not in path:\\\\\\\\n                    queue.append((new_word, path + [new_word]))\\\\\\\\n    return []\\\\\", \\\\\"tests\\\\\": [\\\\\"assert word_ladder(\\'hot\\', \\'cog\\') == [\\'hot\\', \\'dot\\', \\'dog\\', \\'cog\\']\\\\\", \\\\\"assert word_ladder(\\'hit\\', \\'cog\\') == []\\\\\"] }\"'}"