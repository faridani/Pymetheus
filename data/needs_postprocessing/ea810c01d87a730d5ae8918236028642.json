{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Elegant Expressions\\\", \\\"description\\\": \\\"Write a function `evaluate_expression` that evaluates an arithmetic expression given as a string. The expression can contain variables, numbers, and the four basic arithmetic operations (+, -, *, /). Variables are denoted by uppercase letters (A-Z), and their values should be taken from a dictionary. For example, if `variables = {'A': 1, 'B': 2}` then the expression `'A + B'` evaluates to `3`. If an expression contains invalid variables or operations, return `None`.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef evaluate_expression(expression: str, variables: dict) -> (int | None):\\\\n```\\\\n\\\\n#### Input\\\\n- `expression` (str): An arithmetic expression given as a string.\\\\n- `variables` (dict): A dictionary where keys are uppercase letters and values are integers.\\\\n\\\\n#### Output\\\\n- Returns the result of evaluating the expression if it is valid, otherwise returns `None`.\\\\n\\\\n\\\", \\\"code\\\": \\\"\\\\ndef evaluate_expression(expression: str, variables: dict) -> int | None:\\\\n    try:\\\\n        # Split the expression into operands and operators\\\\n        parts = []\\\\n        current_part = ''\\\\n        for char in expression:\\\\n            if char.isspace():\\\\n                if current_part:\\\\n                    parts.append(current_part)\\\\n                    current_part = ''\\\\n            elif char.isalpha() and current_part:\\\\n                current_part += char\\\\n            else:\\\\n                if current_part:\\\\n                    parts.append(current_part)\\\\n                    current_part = ''\\\\n                current_part += char\\\\n\\\\n        if current_part:\\\\n            parts.append(current_part)\\\\n\\\\n        # Evaluate the expression\\\\n        value = float(parts[0])\\\\n        for i in range(1, len(parts)):\\\\n            op = parts[i]\\\\n            next_value = variables.get(op.upper())\\\\n            if next_value is None:\\\\n                return None\\\\n            if op == '+':\\\\n                value += next_value\\\\n            elif op == '-':\\\\n                value -= next_value\\\\n            elif op == '*':\\\\n                value *= next_value\\\\n            else:\\\\n                value /= next_value\\\\n\\\\n        return int(value)\\\\n\\\\n    except (ValueError, ZeroDivisionError):\\\\n        return None\\\", \\\"tests\\\": [\\\"assert evaluate_expression('A + B', {'A': 1, 'B': 2}) == 3\\\", \\\"assert evaluate_expression('10 / A', {'A': 2}) == 5.0\\\", \\\"assert evaluate_expression('A * B - 2', {'A': 3, 'B': 4}) == 10\\\", \\\"assert evaluate_expression('A + B C', {}) is None\\\", \\\"assert evaluate_expression('10 + 20 / A', {'A': 1}) is None\\\"] }\""
}