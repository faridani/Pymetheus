"{'model': 'gemma2:27b-instruct-q5_K_S', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Circular Queue Implementation\\\\\", \\\\\"description\\\\\": \\\\\"Design and implement a circular queue data structure. A circular queue is a linear data structure that uses a single fixed-size array to store elements. The key feature of a circular queue is that when the rear pointer reaches the end of the array, it wraps around to the beginning.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\nclass CircularQueue:\\\\\\\\n    def __init__(self, capacity: int):\\\\\\\\n        pass\\\\\\\\n\\\\\\\\n    def enqueue(self, data: int) -> None:\\\\\\\\n        pass\\\\\\\\n\\\\\\\\n    def dequeue(self) -> int:\\\\\\\\n        pass\\\\\\\\n\\\\\\\\n    def is_full(self) -> bool:\\\\\\\\n        pass\\\\\\\\n\\\\\\\\n    def is_empty(self) -> bool:\\\\\\\\n        pass\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input Format\\\\\\\\n- `capacity`: The maximum number of elements the queue can hold.\\\\\\\\n- `data`: The integer data to be enqueued.\\\\\\\\n\\\\\\\\n#### Output Format\\\\\\\\n- `enqueue()`: None. Modifies the queue in place.\\\\\\\\n- `dequeue()`: The dequeued element, or -1 if the queue is empty.\\\\\\\\n- `is_full()`: True if the queue is full, False otherwise.\\\\\\\\n- `is_empty()`: True if the queue is empty, False otherwise.\\\\\", \\\\\"code\\\\\": \\\\\"class CircularQueue:\\\\\\\\n    def __init__(self, capacity: int):\\\\\\\\n        self.queue = [None] * capacity\\\\\\\\n        self.front = self.rear = -1\\\\\\\\n        self.capacity = capacity\\\\\\\\n\\\\\\\\n    def enqueue(self, data: int) -> None:\\\\\\\\n        if (self.rear + 1) % self.capacity == self.front:\\\\\\\\n            print(\\\\\\\\\\\\\"Queue is Full\\\\\\\\\\\\\")\\\\\\\\n            return\\\\\\\\n        if self.front == -1:\\\\\\\\n            self.front = self.rear = 0\\\\\\\\n        else:\\\\\\\\n            self.rear = (self.rear + 1) % self.capacity\\\\\\\\n        self.queue[self.rear] = data\\\\\\\\n\\\\\\\\n    def dequeue(self) -> int:\\\\\\\\n        if self.front == -1:\\\\\\\\n            print(\\\\\\\\\\\\\"Queue is Empty\\\\\\\\\\\\\")\\\\\\\\n            return -1\\\\\\\\n        data = self.queue[self.front]\\\\\\\\n        if self.front == self.rear:\\\\\\\\n            self.front = self.rear = -1\\\\\\\\n        else:\\\\\\\\n            self.front = (self.front + 1) % self.capacity\\\\\\\\n        return data\\\\\\\\n\\\\\\\\n    def is_full(self) -> bool:\\\\\\\\n        return (self.rear + 1) % self.capacity == self.front\\\\\\\\n\\\\\\\\n    def is_empty(self) -> bool:\\\\\\\\n        return self.front == -1\\\\\", \\\\\"tests\\\\\": [\\\\\"q = CircularQueue(5)\\\\\\\\nq.enqueue(1)\\\\\\\\nq.enqueue(2)\\\\\\\\nq.enqueue(3)\\\\\\\\nassert q.dequeue() == 1\\\\\\\\nassert q.is_empty() == False\\\\\", \\\\\"q = CircularQueue(3)\\\\\\\\nq.enqueue(1)\\\\\\\\nq.enqueue(2)\\\\\\\\nq.enqueue(3)\\\\\\\\nq.dequeue()\\\\\\\\nq.enqueue(4)\\\\\\\\nassert q.queue == [2, 3, 4]\\\\\", \\\\\"q = CircularQueue(5)\\\\\\\\nassert q.is_full() == False\\\\\\\\nq.enqueue(1)\\\\\\\\nq.enqueue(2)\\\\\\\\nq.enqueue(3)\\\\\\\\nq.enqueue(4)\\\\\\\\nq.enqueue(5)\\\\\\\\nassert q.is_full() == True\\\\\"] }\"'}"