{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Sieve of Eratosthenes\\\", \\\"description\\\": \\\"The Sieve of Eratosthenes is an ancient algorithm for finding all primes smaller than a given number n. It is based on the idea that every prime number greater than 2 can be written in the form 6k + 1 or 6k - 1, for some integer k.\\\\n\\\\nWrite a function `sieve_of_eratosthenes` that returns a list of all prime numbers up to and including n. The function should use the Sieve of Eratosthenes algorithm.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef sieve_of_eratosthenes(n: int) -> list:\\\\n```\\\\n\\\\n#### Input\\\\n- `n` (int): A positive integer.\\\\n\\\\n#### Output\\\\n- Returns a list of all prime numbers up to and including n.\\\\n\\\", \\\"code\\\": \\\"import math\\\\n\\\\ndef sieve_of_eratosthenes(n: int) -> list:\\\\n    if n < 2:\\\\n        return []\\\\n    sieve = [True] * (n + 1)\\\\n    sieve[0] = sieve[1] = False\\\\n    for i in range(2, math.isqrt(n) + 1):\\\\n        if sieve[i]:\\\\n            for j in range(i ** 2, n + 1, i):\\\\n                sieve[j] = False\\\\n    return [p for p in range(2, n + 1) if sieve[p]]\\\\n\\\", \\\"tests\\\": [\\\"assert sorted(sieve_of_eratosthenes(10)) == [2, 3, 5, 7]\\\", \\\"assert len(sieve_of_eratosthenes(1000)) == 168\\\", \\\"assert set(sieve_of_eratosthenes(50)) == {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47}\\\", \\\"assert sieve_of_eratosthenes(-1) == []\\\"] }\""
}