"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"\\\\\\\\\\\\\"Is it an Anagram?\\\\\\\\\\\\\" (Easy)\\\\\", \\\\\"description\\\\\": \\\\\"An anagram is a word or phrase that is formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a function `is_anagram` that checks if two given strings are anagrams.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef is_anagram(s1: str, s2: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s1`, `s2` (str): Two strings that may contain letters, numbers, spaces and punctuation.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the input strings are anagrams of each other, `False` otherwise.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"import collections\\\\\\\\ndef is_anagram(s1: str, s2: str) -> bool:\\\\\\\\n    # Remove non-alphabetic characters and convert to lowercase\\\\\\\\ns1 = \\'\\'.join(char for char in s1 if char.isalpha()).lower()\\\\\\\\ns2 = \\'\\'.join(char for char in s2 if char.isalpha()).lower()\\\\\\\\n\\\\\\\\n    # Count the frequency of each character in both strings\\\\\\\\ncounts1 = collections.Counter(s1)\\\\\\\\ncounts2 = collections.Counter(s2)\\\\\\\\n\\\\\\\\n    # Check if the counts of characters in both strings are equal\\\\\\\\nreturn counts1 == counts2\\\\\", \\\\\"tests\\\\\": [\\\\\"assert is_anagram(\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert is_anagram(\\\\\\\\\\\\\"hello\\\\\\\\\\\\\", \\\\\\\\\\\\\"world\\\\\\\\\\\\\") == False\\\\\", \\\\\"assert is_anagram(\\\\\\\\\\\\\"Anagram\\\\\\\\\\\\\", \\\\\\\\\\\\\"nag aaman\\\\\\\\\\\\\") == True\\\\\"] }\"'}"