"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard:  Sum of Digits Raised to Powers\\\\\", \\\\\"description\\\\\": \\\\\"A number is said to be a Smith Number if the sum of its digits is equal to the sum of the digits of its prime factorization. For example, 4: \\\\\\\\n* The digits of 4 sum to 4.\\\\\\\\n\\\\\\\\n* Its prime factorization is 2^2. The digits of 2^2 (which is 4) also sum to 4.\\\\\\\\n\\\\\\\\nWrite a function `is_smith_number(n)` that determines if a given positive integer n is a Smith number.\\\\\\\\n\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n\\\\\\\\n```python\\\\\\\\ndef is_smith_number(n: int) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `n` (int): A positive integer.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the input integer is a Smith number, `False` otherwise.\\\\\", \\\\\"code\\\\\": \\\\\"def is_smith_number(n: int) -> bool:\\\\\\\\n    def sum_digits(num):\\\\\\\\n        return sum(int(digit) for digit in str(num))\\\\\\\\n\\\\\\\\n    if n <= 1:  # 1 and numbers less than 1 are not Smith numbers\\\\\\\\n        return False\\\\\\\\n\\\\\\\\n    prime_factors = []\\\\\\\\n    i = 2\\\\\\\\n    while i * i <= n:\\\\\\\\n        if n % i == 0:\\\\\\\\n            prime_factors.append(i)\\\\\\\\n            n //= i\\\\\\\\n        else:\\\\\\\\n            i += 1\\\\\\\\n    if n > 1:  # If n is a prime number itself, add it to the list\\\\\\\\n        prime_factors.append(n)\\\\\\\\n\\\\\\\\n    sum_of_digits_prime_factors = sum(sum_digits(factor) for factor in prime_factors)\\\\\\\\n\\\\\\\\n    return sum_digits(n) == sum_of_digits_prime_factors\\\\\\\\n\\\\\", \\\\\"tests\\\\\": [\\\\\"assert is_smith_number(4) == True\\\\\", \\\\\"assert is_smith_number(22) == True\\\\\", \\\\\"assert is_smith_number(666) == True\\\\\", \\\\\"assert is_smith_number(13) == False\\\\\"] }\"'}"