"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"\\'Anagram Finder (Hard)\\'\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_anagrams` that takes a list of words as input and finds all anagrams within the list.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of strings containing words with only lowercase letters.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a dictionary where each key is an anagram and the value is a list of all its anagrams in the input list.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from collections import Counter\\\\\\\\n\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n    # Create a counter for each word to count its characters\\\\\\\\n    word_count = {word: Counter(word) for word in words}\\\\\\\\n    \\\\\\\\n    # Iterate through each counter and find anagrams\\\\\\\\n    anagrams = {\\\\\\\\n        \\'\\'.join(sorted(char for char, count in anagram.items() if count > 1)): [] for anagram in word_count.values()\\\\\\\\n    }\\\\\\\\n    \\\\\\\\n    # For each word, if it has characters that are not unique, add it to the corresponding anagram\\'s list\\\\\\\\n    for word, counter in word_count.items():\\\\\\\\n        for anagram, anagram_counter in anagrams.items():\\\\\\\\n            for char, count in zip(anagram, anagram_counter):\\\\\\\\n                if char != \\'\\':\\\\\\\\n                    if counter[char] > 1 or counter[char] != anagram_counter[char]:\\\\\\\\n                        break\\\\\\\\n                if not break:\\\\\\\\n                    anagrams[anagram].append(word)\\\\\\\\n    return anagrams\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\'listen\\', \\'silent\\', \\'enlist\\']) == {\\'enlisted\\': [\\'listen\\', \\'enlist\\'], \\'listen\\': [], \\'silent\\': []}\\\\\", \\\\\"assert find_anagrams([\\'madam\\', \\'madam\\', \\'hello\\', \\'world\\', \\'AMADAMA\\', \\'world\\']) == {\\'madam\\': [\\'madam\\', \\'AMADAMA\\'], \\'hello\\': [], \\'world\\': [\\'world\\']}\\\\\"] }\"'}"