"{'model': 'gemma2:27b-instruct-q5_K_S', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard - Minimum Swaps to Sort an Array\\\\\", \\\\\"description\\\\\": \\\\\"Given an array of n distinct integers, find the minimum number of swaps required to sort the array in ascending order. You are allowed to swap any two elements of the array.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef min_swaps(arr: list[int]) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `arr` (list[int]): A list of n distinct integers.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the minimum number of swaps required to sort the array in ascending order.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def min_swaps(arr: list[int]) -> int:\\\\\\\\n    n = len(arr)\\\\\\\\n    \\\\\\\\n    # Create a dictionary to store the original indices of elements\\\\\\\\n    original_index = {element: index for index, element in enumerate(arr)}\\\\\\\\n    \\\\\\\\n    # Sort the array\\\\\\\\n    arr.sort()\\\\\\\\n    \\\\\\\\n    # Initialize swap count\\\\\\\\n    swaps = 0\\\\\\\\n    \\\\\\\\n    for i in range(n):\\\\\\\\n        # If an element is not at its correct sorted position\\\\\\\\n        if arr[i] != arr[original_index[arr[i]]]:\\\\\\\\n            # Find the index where the element should be\\\\\\\\n            correct_index = original_index[arr[i]]\\\\\\\\n            \\\\\\\\n            # Swap the elements and update swap count\\\\\\\\n            arr[i], arr[correct_index] = arr[correct_index], arr[i]\\\\\\\\n            original_index[arr[i]], original_index[arr[correct_index]] = original_index[arr[correct_index]], original_index[arr[i]]\\\\\\\\n            swaps += 1\\\\\\\\n    \\\\\\\\n    return swaps\\\\\", \\\\\"tests\\\\\": [\\\\\"assert min_swaps([7, 1, 3, 2, 4, 5, 6]) == 5\\\\\", \\\\\"assert min_swaps([1, 2, 3, 4, 5]) == 0\\\\\", \\\\\"assert min_swaps([3, 1, 2]) == 2\\\\\"] }\"'}"