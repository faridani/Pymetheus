{
    "model": "llama3:latest",
    "response": "{\"title\": \"Easy: Maximum Sum of Alternating Subarrays\", \"description\": \"Given an array of integers, find the maximum sum of alternating subarrays. A subarray is a contiguous sequence of elements within the original array. The alternating means that if we consider two consecutive elements in the same subarray, their signs (positive or negative) should be different.\\n\\n#### Function Signature\\n```python\\ndef max_alternating_sum(arr: list[int)) -> int:\\n```\\n\\n#### Input\\n- `arr` (list[int]): A list of integers that may contain both positive and negative numbers.\\n\\n#### Output\\n- Returns the maximum sum of alternating subarrays.\", \"code\": \"def max_alternating_sum(arr: list[int)) -> int:\\n    n = len(arr)\\n    incl = excl = 0\\n    for i in range(n):\\n        new_excl = max(incl, excl)\\n        incl = excl + arr[i]\\n        excl = new_excl\\n    return max(incl, excl)\", \"tests\": [\"assert max_alternating_sum([3, -2, 4, -1, -5, 3]) == 6\", \"assert max_alternating_sum([-1, 2, 3, 10, -12, 3, 21, -25]) == 33\", \"assert max_alternating_sum([10, -20, -30, -40, 50, -60, -70, 80]) == 110\"]}"
}