{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Permutation Checker\\\", \\\"description\\\": \\\"Given a string `s` and an integer `k`, write a function that checks if the string has exactly `k` distinct permutations. A permutation is considered distinct if it does not contain any duplicate characters.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef has_k_distinct_permutations(s: str, k: int) -> bool:\\\\n```\\\\n\\\\n#### Input\\\\n- `s` (str): The input string that may contain letters, numbers, and special characters.\\\\n- `k` (int): The number of distinct permutations expected in the string.\\\\n\\\\n#### Output\\\\n- Returns `True` if the string has exactly `k` distinct permutations, `False` otherwise.\\\", \\\"code\\\": \\\"\\\\nimport math\\\\ndef has_k_distinct_permutations(s: str, k: int) -> bool:\\\\n    # Convert the string to a set of unique characters\\\\n    char_set = set(s)\\\\n    \\\\n    # Calculate the total number of permutations using the formula n! / (n-r)!\\\\n    total_permutations = math.factorial(len(char_set))\\\\n    \\\\n    for r in range(1, len(char_set) + 1):\\\\n        total_permutations //= math.factorial(r)\\\\n    \\\\n    # Check if the total number of permutations is equal to k\\\\n    return total_permutations == k\\\\n\\\\n\\\", \\\"tests\\\": [\\\"assert has_k_distinct_permutations('abc', 3) == True\\\", \\\"assert has_k_distinct_permutations('aabbc', 2) == False\\\", \\\"assert has_k_distinct_permutations('abcd', 4) == True\\\", \\\"assert has_k_distinct_permutations('', 0) == True\\\"] }\""
}