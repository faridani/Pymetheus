{
    "model": "gemma2:27b-instruct-q5_K_S",
    "response": "\"{ \\\"title\\\": \\\"Hard: Anagram Groups\\\", \\\"description\\\": \\\"An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.  Write a function `group_anagrams` that takes a list of words as input and returns a list of lists, where each sublist contains words that are anagrams of each other.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef group_anagrams(words: list[str]) -> list[list[str]]:\\\\n```\\\\n\\\\n#### Input\\\\n- `words` (list[str]): A list of strings representing the words to be grouped.\\\\n\\\\n#### Output\\\\n- Returns a list of lists, where each sublist contains anagrams.\\\", \\\"code\\\": \\\"def group_anagrams(words: list[str]) -> list[list[str]]:\\\\n    anagram_groups = {}\\\\n    for word in words:\\\\n        sorted_word = ''.join(sorted(word))\\\\n        if sorted_word in anagram_groups:\\\\n            anagram_groups[sorted_word].append(word)\\\\n        else:\\\\n            anagram_groups[sorted_word] = [word]\\\\n    return list(anagram_groups.values())\\\\n\\\", \\\"tests\\\": [\\\"assert group_anagrams(['eat', 'tea', 'tan', 'ate', 'nat', 'bat']) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']] \\\", \\\"assert group_anagrams(['']) == [['']]\\\", \\\"assert group_anagrams(['a', 'b', 'c']) == [['a'], ['b'], ['c']]\\\"] }\""
}