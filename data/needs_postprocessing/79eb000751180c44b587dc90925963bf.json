"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Labyrinth Explorer\\\\\", \\\\\"description\\\\\": \\\\\"You are given a 2D grid representing a labyrinth. Each cell in the grid can be either an empty space (\\'.\\'), a wall (\\'#\\'), or the starting point (\\'S\\'). Your task is to find the shortest path from the starting point to any exit (represented by \\'E\\') in the labyrinth.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_shortest_path(labyrinth: list[list[str]]) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `labyrinth` (list[list[str]]): A 2D list representing the labyrinth. Each element is a string representing a cell.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns an integer representing the length of the shortest path from the starting point to any exit. If there is no valid path, return -1.\\\\\", \\\\\"code\\\\\": \\\\\"from collections import deque\\\\\\\\n\\\\\\\\ndef find_shortest_path(labyrinth: list[list[str]]) -> int:\\\\\\\\n    rows = len(labyrinth)\\\\\\\\n    cols = len(labyrinth[0])\\\\\\\\n    start_row, start_col = 0, 0\\\\\\\\n    for i in range(rows):\\\\\\\\n        for j in range(cols):\\\\\\\\n            if labyrinth[i][j] == \\'S\\':\\\\\\\\n                start_row, start_col = i, j\\\\\\\\n                break\\\\\\\\n\\\\\\\\n    queue = deque([(start_row, start_col, 0)])\\\\\\\\n    visited = set([(start_row, start_col)])\\\\\\\\n\\\\\\\\n    while queue:\\\\\\\\n        row, col, path_length = queue.popleft()\\\\\\\\n        if labyrinth[row][col] == \\'E\\':\\\\\\\\n            return path_length\\\\\\\\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\\\\\\\\n            new_row = row + dr\\\\\\\\n            new_col = col + dc\\\\\\\\n            if 0 <= new_row < rows and 0 <= new_col < cols and labyrinth[new_row][new_col] != \\'#\\' and (new_row, new_col) not in visited:\\\\\\\\n                queue.append((new_row, new_col, path_length + 1))\\\\\\\\n                visited.add((new_row, new_col))\\\\\\\\n    return -1\\\\\\\\n\\\\\", \\\\\"tests\\\\\": [\\\\\"\\\\\\\\nassert find_shortest_path([[\\\\\\\\\\'.\\\\\\\\\\', \\\\\\\\\\'S\\\\\\\\\\', \\\\\\\\\\'.\\\\\\\\\\'],\\\\\\\\n [\\\\\\\\\\'.\\\\\\\\\\', \\\\\\\\\\'#\\\\\\\\\\', \\\\\\\\\\'E\\\\\\\\\\'],\\\\\\\\n [\\\\\\\\\\'.\\\\\\\\\\', \\\\\\\\\\'.\\\\\\\\\\', \\\\\\\\\\'.\\\\\\\\\\' ]]) == 2\\\\\\\\n\\\\\", \\\\\"\\\\\\\\nassert find_shortest_path([[\\\\\\\\\\'#\\\\\\\\\\', \\\\\\\\\\'#\\\\\\\\\\', \\\\\\\\\\'S\\\\\\\\\\', \\\\\\\\\\'#\\\\\\\\\\', \\\\\\\\\\'#\\\\\\\\\\'],\\\\\\\\n [\\\\\\\\\\'.\\\\\\\\\\', \\'.\\', \\'.\\', \\'.\\', \\'.\\'],\\\\\\\\n [\\\\\\\\\\'#\\\\\\\\\\', \\'#\\', \\'E\\', \\'#\\', \\'#\\']]) == 4\\\\\\\\n\\\\\"] }\"'}"