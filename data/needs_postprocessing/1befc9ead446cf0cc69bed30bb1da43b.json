{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Easy: Maximum Sum of Non-Adjacent Elements\\\", \\\"description\\\": \\\"Given an array of integers, find the maximum sum of non-adjacent elements. For example, if the input is [2, 7, 9, 3, 1], the output should be 12 (2 + 9 + 1), because these are the only three elements that do not share a common edge.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef max_sum_non_adjacent(arr: list[int)) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `arr` (list[int]): A list of integers.\\\\n\\\\n#### Output\\\\n- Returns an integer representing the maximum sum of non-adjacent elements in the input array.\\\\n\\\", \\\"code\\\": \\\"\\\\nimport functools\\\\n\\\\ndef max_sum_non_adjacent(arr: list[int)) -> int:\\\\n    # Base case\\\\n    if len(arr) <= 2:\\\\n        return max(arr)\\\\n\\\\n    # Recursive function to calculate the maximum sum\\\\n    def recursive_max_sum(i, prev):\\\\n        if i >= len(arr):\\\\n            return 0\\\\n        take = arr[i] + (prev if i > 1 else 0)\\\\n        skip = recursive_max_sum(i + 1, prev)\\\\n        return max(take, skip)\\\\n\\\\n    # Call the recursive function and return the result\\\\n    return recursive_max_sum(0, -arr[0])\\\\n\\\\n\\\", \\\"tests\\\": [\\\"assert max_sum_non_adjacent([2, 7, 9, 3, 1]) == 12\\\", \\\"assert max_sum_non_adjacent([-2, 1, -5, 4]) == 6\\\", \\\"assert max_sum_non_adjacent([1, 2, 3, 10, 8]) == 11\\\"] }\""
}