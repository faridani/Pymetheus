"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Detector (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `is_anagram` that checks if two given strings are anagrams of each other. Two words or phrases are anagrams of each other if the letters in one can be rearranged to form the other.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef is_anagram(s1: str, s2: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s1`, `s2` (str): Two strings that may contain letters and spaces only.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the input strings are anagrams of each other, `False` otherwise.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def count_chars(s: str) -> dict:\\\\\\\\n    char_count = {\\'a\\': 0, \\'b\\': 0, \\'c\\': 0, ..., \\'z\\': 0}\\\\\\\\n    for char in s:\\\\\\\\n        if char not in char_count:\\\\\\\\n            continue\\\\\\\\n        char_count[char] += 1\\\\\\\\n    return char_count\\\\\\\\n\\\\\\\\ndef is_anagram(s1: str, s2: str) -> bool:\\\\\\\\n    if len(s1) != len(s2):\\\\\\\\n        return False\\\\\\\\n    char_count1 = count_chars(s1)\\\\\\\\n    char_count2 = count_chars(s2)\\\\\\\\n    for key in char_count1.keys():\\\\\\\\n        if char_count1[key] != char_count2[key]:\\\\\\\\n            return False\\\\\\\\n    return True\\\\\", \\\\\"tests\\\\\": [\\\\\"assert is_anagram(\\'listen\\', \\'silent\\') == True\\\\\", \\\\\"assert is_anagram(\\'hello\\', \\'world\\') == False\\\\\", \\\\\"assert is_anagram(\\'cats\\', \\'acts\\') == True\\\\\", \\\\\"assert is_anagram(\\'Anagram\\', \\'nag a ram\\') == True\\\\\"] }\"'}"