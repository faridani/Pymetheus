"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Finder (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_anagrams(words: list[str]) -> dict` that takes a list of words and returns a dictionary where the keys are words and the values are lists of all anagrams for each key. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: list[str]) -> dict:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (list[str]): A list of words with no duplicate words.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a dictionary where the keys are anagram words and the values are lists of all their anagrams.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from collections import Counter, defaultdict\\\\\\\\ndef find_anagrams(words: list[str]) -> dict:\\\\\\\\n    # Create a counter for each word\\\\\\\\n    word_count = defaultdict(Counter)\\\\\\\\n    # Iterate over the words\\\\\\\\n    for word in words:\\\\\\\\n        # Increment the count of each character in the current word\\\\\\\\n        word_count[word].update(list(word))\\\\\\\\n    \\\\\\\\n    # Create an empty dictionary to store the anagrams\\\\\\\\n    anagrams = {}\\\\\\\\n    \\\\\\\\n    # Iterate over the counts of all words\\\\\\\\n    for count in word_count.values():\\\\\\\\n        # If there\\'s only one of each character in the current count\\\\\\\\n        if len(count) == 1 for char, count in count.items():\\\\\\\\n            # Add the current word as a key and its value as a list containing itself\\\\\\\\n            anagrams[word] = [word]\\\\\\\\n            continue\\\\\\\\n        \\\\\\\\n        # Find all words with the same number of characters and similar character counts\\\\\\\\n        candidates = [word for word in words if len(word) == sum(count.values()) and word_count[word].items() == count.items()]\\\\\\\\n        \\\\\\\\n        # If there are any candidate words\\\\\\\\n        if candidates:\\\\\\\\n            # Add the current word to the anagrams dictionary with its anagrams as values\\\\\\\\n            for candidate in candidates:\\\\\\\\n                anagrams[candidate] = anagrams.get(candidate, []) + [word]\\\\\\\\n    \\\\\\\\n    return anagrams\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\'listen\\', \\'silent\\', \\'enlist\\']) == {\\'enlist\\': [\\'enlist\\'], \\'silent\\': [\\'listen\\', \\'silent\\'], \\'listen\\': [\\'listen\\']}\\\\\", \\\\\"assert find_anagrams([\\'racecar\\', \\'level\\', \\'deviled\\', \\'deified\\', \\'vedged\\', \\'ledevid\\', \\'cared\\']) == {\\'cared\\': [\\'cared\\'], \\'deviled\\': [\\'deviled\\', \\'vedged\\', \\'ledevid\\'], \\'deified\\': [\\'deified\\'], \\'level\\': [], \\'racecar\\': [\\'racecar\\']}\\\\\", \\\\\"assert find_anagrams([\\'hello\\', \\'world\\']) == {\\'hello\\': [\\'hello\\'], \\'world\\': []}\\\\\"] }\"'}"