{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Easy: Counting Inversions\\\", \\\"description\\\": \\\"In the world of computer science, an inversion occurs when two elements in a sequence are in reverse order. For example, in the sequence `[4, 2, 1]`, there is one inversion because `2` and `1` are in reverse order. Write a function that takes a list of integers as input and returns the number of inversions in the list.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef count_inversions(arr: list[int)) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `arr` (list[int]): A list of integers, where each integer is within the range 0 to N (N being the length of the array).\\\\n\\\\n#### Output\\\\n- Returns the number of inversions in the input list.\\\\n\\\", \\\"code\\\": \\\"def count_inversions(arr: list[int)) -> int:\\\\n    if len(arr) <= 1:\\\\n        return 0\\\\n    left_half = arr[:len(arr)//2]\\\\n    right_half = arr[len(arr)//2:]\\\\n    left_inversions = count_inversions(left_half)\\\\n    right_inversions = count_inversions(right_half)\\\\n    merged_inversions = merge_and_count(left_half, right_half)\\\\n    return left_inversions + right_inversions + merged_inversions\\\\n\\\\ndef merge_and_count(left: list[int), right: list[int)) -> int:\\\\n    i = j = inversion_count = 0\\\\n    result = []\\\\n    while i < len(left) and j < len(right):\\\\n        if left[i] <= right[j]:\\\\n            result.append(left[i])\\\\n            i += 1\\\\n        else:\\\\n            result.append(right[j])\\\\n            j += 1;\\\\n            inversion_count += len(left) - i\\\\n    result.extend(left[i:])\\\\n    result.extend(right[j:])\\\\n    return inversion_count\\\", \\\"tests\\\": [\\\"assert count_inversions([2, 3, 8, 7, 6]) == 5\\\", \\\"assert count_inversions([1, 20, 10, 4, 7, 9]) == 6\\\", \\\"assert count_inversions([]) == 0\\\"] }\""
}