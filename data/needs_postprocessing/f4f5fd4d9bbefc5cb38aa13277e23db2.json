"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard:  Minimum Swaps for Sorted Array\\\\\", \\\\\"description\\\\\": \\\\\"You are given an array of integers. You can swap any two adjacent elements in the array. Write a function `min_swaps` that returns the minimum number of swaps required to sort the array in ascending order.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef min_swaps(arr: list[int]) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `arr` (list[int]): A list of integers. \\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns an integer representing the minimum number of swaps required to sort the array.\\\\\\\\n\\\\\\\\n#### Constraints\\\\\\\\n- 1 <= len(arr) <= 10^5\\\\\\\\n- 1 <= arr[i] <= 10^9\\\\\\\\n\\\\\\\\n#### Hints\\\\\\\\n- Consider using a cycle detection algorithm to efficiently count the number of swaps needed.\\\\\", \\\\\"code\\\\\": \\\\\"def min_swaps(arr: list[int]) -> int:\\\\\\\\n    n = len(arr)\\\\\\\\n    visited = [False] * n\\\\\\\\n    cycle_count = 0\\\\\\\\n\\\\\\\\n    for i in range(n):\\\\\\\\n        if not visited[i]:\\\\\\\\n            j = i\\\\\\\\n            cycle_length = 0\\\\\\\\n            while not visited[j]:\\\\\\\\n                visited[j] = True\\\\\\\\n                j = arr.index(min(arr[j:]))  # Find the minimum element in the remaining unsorted part\\\\\\\\n                cycle_length += 1\\\\\\\\n            cycle_count += cycle_length - 1  \\\\\\\\n    return cycle_count\\\\\", \\\\\"tests\\\\\": [\\\\\"assert min_swaps([7, 1, 3, 2, 4, 5, 6]) == 5\\\\\", \\\\\"assert min_swaps([1, 2, 3, 4, 5]) == 0\\\\\", \\\\\"assert min_swaps([4, 3, 2, 1]) == 3\\\\\"] }\"'}"