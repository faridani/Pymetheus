"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Detection (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a function `is_anagram` that checks if two given strings are anagrams of each other.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef is_anagram(s1: str, s2: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s1`, `s2` (str): Two strings that may contain letters (uppercase and lowercase), numbers, spaces, and punctuation.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"import collections\\\\\\\\ndef is_anagram(s1: str, s2: str) -> bool:\\\\\\\\n    # Remove non-alphabetic characters and convert to lowercase\\\\\\\\n    s1 = \\'\\'.join(char for char in s1 if char.isalpha()).lower()\\\\\\\\n    s2 = \\'\\'.join(char for char in s2 if char.isalpha()).lower()\\\\\\\\n    \\\\\\\\n    # Count the frequency of each character in both strings\\\\\\\\n    freq_s1 = collections.Counter(s1)\\\\\\\\nn    freq_s2 = collections.Counter(s2)\\\\\\\\n    \\\\\\\\n    # Check if the frequencies are equal for both strings\\\\\\\\n    return freq_s1 == freq_s2\\\\\", \\\\\"tests\\\\\": [\\\\\"assert is_anagram(\\'listen\\', \\'silent\\') == True\\\\\", \\\\\"assert is_anagram(\\'hello\\', \\'olleh\\') == True\\\\\", \\\\\"assert is_anagram(\\'apple\\', \\'apples\\') == False\\\\\", \\\\\"assert is_anagram(\\'A man, a plan, a canal, Panama\\', \\'amanaplanacanalpanam\\') == True\\\\\"] }\"'}"