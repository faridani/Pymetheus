{
    "model": "llama3:latest",
    "response": "{\"title\": \"Minimum Window Substring (Hard)\", \"description\": \"Given two strings `s` and `t`, find the minimum window in `s` that contains all characters of `t`. If no such window exists, return an empty string.\\n\\n#### Function Signature\\n```python\\ndef min_window_substring(s: str, t: str) -> str:\\n```\\n\\n#### Input\\n- `s` (str): The source string that may contain multiple occurrences of characters from `t`. \\n- `t` (str): The target string that contains the characters we are looking for in `s`. \\n\\n#### Output\\n- Returns the minimum window substring in `s` that contains all characters of `t`, or an empty string if no such window exists.\", \"code\": \"\", \"\\nimport collections\\n\\ndef min_window_substring(s: str, t: str) -> str:\\n    if not t:\\n        return \": \"t_count = collections.Counter(t)\\n    required_chars = len(t_count)\\n\\n    left = 0\\n    min_len = float('inf')\\n    min_window =\", \"range(len(s))\": \"if s[right] in t_count:\\n            t_count[s[right]] -= 1\\n            if t_count[s[right]] == 0:\\n                formed_chars += 1\\n\\n        while left <= right and formed_chars == required_chars:\\n            if right - left + 1 < min_len:\\n                min_len = right - left + 1\\n                min_window = s[left:right + 1]\\n\\n            if s[left] in t_count:\\n                t_count[s[left]] += 1\\n                if t_count[s[left]] > 0:\\n                    formed_chars -= 1\\n\\n            left += 1\\n\\n    return min_window\", \",\": \"ssert min_window_substring(\", \"assert min_window_substring(\": \"AABNLCCTAERKSEWPTOLEEALCRCICREOIAEAUOLSSAKREALA\", \"ABC\": \" \\\",\\n\\\"assert min_window_substring(\\\" \\\"AAAA\\\" , \\\"B\\\") == \", \"BANC\": \"BN\\\") == 'BN' \\\",\\n\\\"assert min_window_substring(\\\" \"}"
}