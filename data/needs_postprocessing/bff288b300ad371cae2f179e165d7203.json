"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Detection (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a function `is_anagram` that checks if two given strings are anagrams.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef is_anagram(s1: str, s2: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s1`, `s2` (str): Two strings that may contain letters, numbers, spaces and punctuation.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.\\\\\\\\n\\\\\\\\n#### Constraints\\\\\\\\n- The length of the strings is always less than or equal to 100 characters.\\\\\\\\n- The two strings only contain letters, numbers, spaces and punctuation. No special characters are allowed.\\\\\", \\\\\"code\\\\\": \\\\\"import string\\\\\\\\ndef is_anagram(s1: str, s2: str) -> bool:\\\\\\\\n    # Remove non-alphanumeric characters\\\\\\\\n    s1 = \\'\\'.join(char for char in s1 if char in string.ascii_letters + string.digits)\\\\\\\\ns2 = \\'\\'.join(char for char in s2 if char in string.ascii_letters + string.digits)\\\\\\\\n    # Sort the characters\\\\\\\\ns1_sorted = sorted(s1)\\\\\\\\ns2_sorted = sorted(s2)\\\\\\\\n    # Check if the sorted strings are equal\\\\\\\\n    return s1_sorted == s2_sorted\\\\\", \\\\\"tests\\\\\": [\\\\\"assert is_anagram(\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert is_anagram(\\\\\\\\\\\\\"hello\\\\\\\\\\\\\", \\\\\\\\\\\\\"world\\\\\\\\\\\\\") == False\\\\\", \\\\\"assert is_anagram(\\\\\\\\\\\\\"Tarantula\\\\\\\\\\\\\", \\\\\\\\\\\\\"Ataluntrat\\\\\\\\\\\\\") == True\\\\\"] }\"'}"