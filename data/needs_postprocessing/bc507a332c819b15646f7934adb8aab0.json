"{'model': 'llama3.1:8b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Easy - Number of Islands\\\\\", \\\\\"description\\\\\": \\\\\"Given an integer matrix where each row and column forms a valid binary number, find the total number of islands.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef count_islands(matrix: list[list[int]]) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `matrix` (list[list[int]]): A 2D list of integers representing binary numbers in each row and column.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the total number of islands found in the input matrix.\\\\\", \\\\\"code\\\\\": \\\\\"def count_islands(matrix: list[list[int]]) -> int:\\\\\\\\n    if not matrix:\\\\\\\\n        return 0\\\\\\\\n\\\\\\\\n    rows, cols = len(matrix), len(matrix[0])\\\\\\\\n\\\\\\\\n    def dfs(r: int, c: int) -> None:\\\\\\\\n        if r < 0 or r >= rows or c < 0 or c >= cols or matrix[r][c] == -1:\\\\\\\\n            return\\\\\\\\n\\\\\\\\n        matrix[r][c] = -1\\\\\\\\n\\\\\\\\n        dfs(r-1, c)\\\\\\\\n        dfs(r+1, c)\\\\\\\\n        dfs(r, c-1)\\\\\\\\n        dfs(r, c+1)\\\\\\\\n\\\\\\\\n    count = 0\\\\\\\\n\\\\\\\\n    for r in range(rows):\\\\\\\\n        for c in range(cols):\\\\\\\\n            if matrix[r][c] == 1:\\\\\\\\n                dfs(r, c)\\\\\\\\n                count += 1\\\\\\\\n\\\\\\\\n    return count\\\\\", \\\\\"tests\\\\\": [\\\\\"assert count_islands([[1,1,1],[1,1,0],[0,0,1]]) == 3\\\\\", \\\\\"assert count_islands([[], []]) == 0\\\\\", \\\\\"assert count_islands([]) == 0\\\\\"] }\"'}"