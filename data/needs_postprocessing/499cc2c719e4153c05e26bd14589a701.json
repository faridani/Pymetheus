"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Detector (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Given two strings, determine if they are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of another, usually with all the original letters in the same alphabet and only one unique letter per word. Write a function `are_anagrams` that takes two strings as input and returns True if they are anagrams of each other, False otherwise.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef are_anagrams(s1: str, s2: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s1`, `s2` (str): Two strings of length greater than 0.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns True if the input strings are anagrams of each other, False otherwise.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"import collections\\\\\\\\ndef are_anagrams(s1: str, s2: str) -> bool:\\\\\\\\n    # Ensure both strings have the same length\\\\\\\\n    if len(s1) != len(s2):\\\\\\\\n        return False\\\\\\\\n    \\\\\\\\n    # Count the occurrence of each character in both strings\\\\\\\\n    char_counts = collections.Counter(s1) == collections.Counter(s2)\\\\\\\\n    \\\\\\\\n    # If all characters have the same count in both strings, they are anagrams\\\\\\\\n    return char_counts\\\\\", \\\\\"tests\\\\\": [\\\\\"assert are_anagrams(\\'listen\\', \\'silent\\') == True\\\\\", \\\\\"assert are_anagrams(\\'hello\\', \\'world\\') == False\\\\\", \\\\\"assert are_anagrams(\\'act\\', \\'tac\\') == True\\\\\", \\\\\"assert are_anagrams(\\'welcome\\', \\'mellowce\\'[::-1]) == True\\\\\"] }\"'}"