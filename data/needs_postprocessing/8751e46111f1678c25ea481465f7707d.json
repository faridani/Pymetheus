{
    "model": "llama3:latest",
    "response": "{\"title\": \"Hard: Maximum Path Sum in a Triangle\", \"description\": \"Given a triangle represented as an n x 3 matrix, where the top of the triangle is the first element and each row has three elements. Write a function `max_path_sum` that returns the maximum path sum from the top to any point in the bottom of the triangle.\\n\\n#### Function Signature\\n```python\\ndef max_path_sum(triangle: list[list[int]]) -> int:\\n```\\n\\n#### Input\\n- `triangle` (list[list[int]]): A 2D list representing the triangle, where each inner list has three elements.\\n\\n#### Output\\n- Returns the maximum path sum from the top to any point in the bottom of the triangle.\", \"code\": \"\\nimport math\\n\\ndef max_path_sum(triangle: list[list[int]]) -> int:\\n    n = len(triangle)\\n    dp = [[0] * 3 for _ in range(n)]\\n    \\n    # Initialize the first row\\n    dp[0][0], dp[0][1], dp[0][2] = triangle[0]\\n    \\n    # Fill up the dynamic programming table\\n    for i in range(1, n):\\n        for j in range(3):\\n            if j == 0:\\n                dp[i][j] = dp[i-1][j] + triangle[i][j]\\n            elif j == 2:\\n                dp[i][j] = dp[i-1][j-1] + triangle[i][j]\\n            else:\\n                dp[i][j] = max(dp[i-1][j-1], dp[i-1][j]) + triangle[i][j]\\n    \\n    # Return the maximum path sum\\n    return max(max(row) for row in dp)\", \"tests\": [\"assert max_path_sum([[2]]), (1) == 2,\", \"assert max_path_sum([[-1, 3, -1], [3, 4, 5]]) == 6,\", \"assert max_path_sum([[-10, 9, 20], [8, 16, 7], [12, 14, 15]]) == 24,\", \"assert max_path_sum([[5], [5, 6], [3, 4, 5]]) == 7,\"]}"
}