{
    "model": "llama3:latest",
    "response": "{\"title\": \"Coin Change\", \"description\": \"A cashier has a set of coins that can be used to make change for any amount of money. The cash register only allows for whole numbers of coins to be dispensed, and no coin is worth more than one dollar. Write a function `min_coins` that calculates the minimum number of coins needed to make a given amount of change.\\n\\n#### Function Signature\\n```python\\ndef min_coins(n: int) -> list:\\n```\\n\\n#### Input\\n- `n` (int): The amount of change in cents.\\n\\n#### Output\\n- Returns a list of coin denominations and their counts that adds up to the input amount. For example, if the minimum number of coins is 3 quarters and 1 nickel, the output would be `[3, 'quarter'], [1, 'nickel']`.\", \"code\": \"def min_coins(n: int) -> list:\\n    denominations = [25, 10, 5, 1]  # quarter, dime, nickel, penny\\n    coins = {}\\n    for denomination in denominations:\\n        count = n // denomination\\n        if count > 0:\\n            coins[denomination] = count\\n            n %= denomination\\n    return [[coin, 'quarter' if coin == 25 else 'dime' if coin == 10 else 'nickel' if coin == 5 else 'penny' for coin in sorted(coins.keys())], [count for denomination, count in coins.items()]]\", \"tests\": [\"assert min_coins(37) == [[3, 'quarter'], [1, 'dime'], [2, 'penny']]\", \"assert min_coins(99) == [[3, 'quarter'], [9, 'nickel']]\", \"assert min_coins(100) == [[4, 'quarter']]\", \"assert min_coins(50) == [[2, 'quarter'], [0, 'dime'], [0, 'nickel'], [0, 'penny']]\"]}"
}