"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Flatten Binary Tree to Linked List\\\\\", \\\\\"description\\\\\": \\\\\"Given a binary tree, flatten it into a linked list. The order should be from root to leaf, and the flattened list should follow the right-child pointer.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef flatten_binary_tree(root):\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `root`: The root node of a binary tree.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- None (Modifies the original tree in place).\\\\\\\\n\\\\\\\\n#### Constraints\\\\\\\\n\\\\\\\\n- The number of nodes in the tree is in the range [0, 2000].\\\\\\\\n- -100 <= Node.val <= 100\\\\\\\\n\\\\\\\\n\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"class TreeNode:\\\\\\\\n    def __init__(self, val=0, left=None, right=None):\\\\\\\\n        self.val = val\\\\\\\\n        self.left = left\\\\\\\\n        self.right = right\\\\\\\\n\\\\\\\\ndef flatten_binary_tree(root):\\\\\\\\n    if not root:\\\\\\\\n        return\\\\\\\\n    node = root\\\\\\\\n    while node:\\\\\\\\n        if node.left:\\\\\\\\n            rightmost = node.left\\\\\\\\n            while rightmost.right:\\\\\\\\n                rightmost = rightmost.right\\\\\\\\n            rightmost.right = node.right\\\\\\\\n            node.right = node.left\\\\\\\\n            node.left = None\\\\\\\\n        node = node.right\\\\\", \\\\\"tests\\\\\": [\\\\\"tree = TreeNode(1)\\\\\\\\ntree.left = TreeNode(2)\\\\\\\\ntree.right = TreeNode(5)\\\\\\\\ntree.left.left = TreeNode(3)\\\\\\\\ntree.left.right = TreeNode(4)\\\\\\\\ntree.right.right = TreeNode(6)\\\\\\\\nflatten_binary_tree(tree)\\\\\\\\nassert tree.val == 1\\\\\\\\nassert tree.right.val == 2\\\\\\\\nassert tree.right.right.val == 3\\\\\\\\nassert tree.right.right.right.val == 4\\\\\\\\nassert tree.right.right.right.right.val == 5\\\\\\\\nassert tree.right.right.right.right.right.val == 6\\\\\", \\\\\"tree = TreeNode(1)\\\\\\\\ntree.left = TreeNode(2)\\\\\\\\nflatten_binary_tree(tree)\\\\\\\\nassert tree.val == 1\\\\\\\\nassert tree.right.val == 2\\\\\"] }\"'}"