{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Easy: Find the Largest Island\\\", \\\"description\\\": \\\"A grid-based problem. Given a 2D array representing a map, find the size of the largest island.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef largest_island(grid: list) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `grid` (list): A 2D list of 0s and 1s where 1 represents land and 0 represents water. The grid may contain islands.\\\\n\\\\n#### Output\\\\n- Returns the size of the largest island in the grid.\\\", \\\"code\\\": \\\"def largest_island(grid: list) -> int:\\\\n    if not grid or not grid[0]:\\\\n        return 0\\\\n    max_size = 0\\\\n    def dfs(i, j):\\\\n        if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or grid[i][j] == 0:\\\\n            return 0\\\\n        grid[i][j] = 0\\\\n        return 1 + dfs(i-1, j) + dfs(i+1, j) + dfs(i, j-1) + dfs(i, j+1)\\\\n    for i in range(len(grid)):\\\\n        for j in range(len(grid[0])):\\\\n            if grid[i][j] == 1:\\\\n                size = dfs(i, j)\\\\n                max_size = max(max_size, size)\\\\n    return max_size\\\", \\\"tests\\\": [\\\"assert largest_island([[0,0,1,0,0],[1,0,1,0,0],[0,0,1,0,0],[0,0,0,1,1]]) == 4\\\", \\\"assert largest_island([[1,0,1],[0,1,0],[1,0,1]]) == 4\\\", \\\"assert largest_island([[0,0,0],[0,0,0],[0,0,0]]) == 0\\\", \\\"assert largest_island([[1,1,1,1,1],[1,1,0,1,1],[1,1,1,1,1]]) == 9\\\"] }\""
}