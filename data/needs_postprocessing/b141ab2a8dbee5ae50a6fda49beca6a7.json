"{'model': 'mistral:latest', 'response': '{\"title\": \"\\'Anagram Detector (Hard)\\'\", \"description\": \"Write a function `find_anagrams` that takes a list of words as input and returns a dictionary containing the anagrams grouped together. Anagrams are words that contain the same letters but in a different order.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef find_anagrams(word_list: List[str]) -> Dict[str, List[str]]:\\\\n```\\\\n\\\\n#### Input\\\\n- `word_list` (List[str]): A list of strings containing words to be checked for anagrams.\\\\n\\\\n#### Output\\\\n- Returns a dictionary where the keys are unique sorted anagrams and the values are lists of words that form the anagram group.\\\\n\\\\n**Hint:** Use a `collections.Counter` object to count the frequency of each letter in a word, then sort the counter items by value (descending order) and convert it back to a string. Compare these strings to check for anagrams.\", \"code\": \"import collections\\\\n\\\\ndef find_anagrams(word_list: List[str]) -> Dict[str, List[str]]:\\\\n    word_counter = {word: collections.Counter(word) for word in word_list}\\\\n    sorted_anagrams = {\\\\n        \\'\\'.join(sorted(c for c, freq in anagram.items())): [word for word, anagram in word_counter.items() if sorted(anagram.items()) == sorted(anagram.items(), reverse=True)]\\\\n        for anagram in set(word_counter.values())}\\\\n    return {k: v for k, v in sorted(sorted_anagrams.items(), key=lambda item: len(item[0]))}\", \"tests\": [\"assert find_anagrams([\\\\\"listen\\\\\", \\\\\"silent\\\\\", \\\\\"enlist\\\\\"]) == {\\\\\"silent\\\\\", \\\\\"enlist\\\\\" : [\\\\\"listen\\\\\", \\\\\"silent\\\\\"], \\\\\"listen\\\\\" : [\\\\\"listen\\\\\"]}\", \"assert find_anagrams([\\\\\"python\\\\\", \\\\\"typohnyc\\\\\", \\\\\"htopy\\\\\", \\\\\"ophy\\\\\", \\\\\"pythn\\\\\"]) == {\\\\\"photon\\\\\" : [\\\\\"python\\\\\", \\\\\"pythn\\\\\"], \\\\\"typo\\\\\" : [\\\\\"typohnyc\\\\\", \\\\\"ophy\\\\\"], \\\\\"cthpoy\\\\\" : [\\\\\"htopy\\\\\"]}\", \"assert find_anagrams([\\\\\"apple\\\\\", \\\\\"apples\\\\\", \\\\\"appel\\\\\", \\\\\"pear\\\\\"]) == {\\\\\"pple\\\\\" : [\\\\\"apple\\\\\", \\\\\"appel\\\\\", \\\\\"apples\\\\\"], \\\\\"ear\\\\\" : [\\\\\"pear\\\\\"]}\"]}'}"