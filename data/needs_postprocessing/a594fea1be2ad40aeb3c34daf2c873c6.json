"{'model': 'qwen2:7b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Prime Digit Permutation\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `prime_permutation` that checks if two numbers are permutations of each other where both numbers contain only prime digits (2, 3, 5, and 7). The prime permutation check should return `True` if the digits in one number can be rearranged to form the other number and all digits in both numbers are prime. For example, 237 and 723 are considered permutations of each other.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef prime_permutation(num1: int, num2: int) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `num1` (int): First number with only prime digits\\\\\\\\n- `num2` (int): Second number with only prime digits\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if both numbers contain the same unique set of prime digits, False otherwise.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"import math\\\\\\\\ndef is_prime_digit(n: int) -> bool:\\\\\\\\n    return n in [2, 3, 5, 7]\\\\\\\\n\\\\\\\\ndef prime_permutation(num1: int, num2: int) -> bool:\\\\\\\\n    set_num1 = set(str(abs(num1)) if num1 >= 0 else str(-num1)\\\\\\\\n    set_num2 = set(str(abs(num2)) if num2 >= 0 else str(-num2))\\\\\\\\n\\\\\\\\n    return len(set_num1 & set_num2) == len(set_num1) and all(is_prime_digit(digit) for digit in set_num1)\\\\\\\\n\\\\\", \\\\\"tests\\\\\": [\\\\\"assert prime_permutation(237, 723)\\\\\", \\\\\"assert prime_permutation(35, 53)\\\\\", \\\\\"assert not prime_permutation(46, -64)\\\\\", \\\\\"assert not prime_permutation(-789, 897)\\\\\", \\\\\"assert prime_permutation(222, 222)\\\\\"] }\"'}"