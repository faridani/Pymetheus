{
    "model": "codestral:22b",
    "response": "\"{ \\\"title\\\": \\\"Hard: Maximum Sum Subarray Problem\\\", \\\"description\\\": \\\"Given an array of integers, find the contiguous subarray that has the maximum sum. Write a function `max_subarray_sum` that takes in an array of integers and returns the maximum sum of any contiguous subarray.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef max_subarray_sum(nums: List[int]) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `nums` (List[int]): A list of integers.\\\\n\\\\n#### Output\\\\n- Returns the maximum sum of any contiguous subarray in the input list.\\\", \\\"code\\\": \\\"from typing import List\\\\n\\\\ndef max_subarray_sum(nums: List[int]) -> int:\\\\n    if not nums:\\\\n        return 0\\\\n    max_so_far = current_max = nums[0]\\\\n    for num in nums[1:]:\\\\n        current_max = max(num, current_max + num)\\\\n        max_so_far = max(max_so_far, current_max)\\\\n    return max_so_far\\\", \\\"tests\\\": [\\\"assert max_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6\\\", \\\"assert max_subarray_sum([1]) == 1\\\", \\\"assert max_subarray_sum([0]) == 0\\\", \\\"assert max_subarray_sum([-1, -2, -3, -4]) == -1\\\"] }\""
}