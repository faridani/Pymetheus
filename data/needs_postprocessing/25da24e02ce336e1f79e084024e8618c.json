"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Fractal Tree Generator\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `generate_fractal_tree` that generates ASCII art representation of a fractal tree. The tree should have a specified depth and branch angle.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef generate_fractal_tree(depth: int, branch_angle: float = 25) -> str:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `depth` (int): The recursion depth of the tree. Higher depth leads to a more complex tree.\\\\\\\\n- `branch_angle` (float): The angle between branches in degrees. Defaults to 25 degrees.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a string containing the ASCII art representation of the fractal tree.\\\\\", \\\\\"code\\\\\": \\\\\"def generate_fractal_tree(depth: int, branch_angle: float = 25) -> str:\\\\\\\\n    def _generate_branch(x: int, y: int, angle: float, length: int, chars: list[str]):\\\\\\\\n        if depth == 0:\\\\\\\\n            return\\\\\\\\n\\\\\\\\n        x2 = int(x + length * math.cos(math.radians(angle)))\\\\\\\\n        y2 = int(y + length * math.sin(math.radians(angle)))\\\\\\\\n        chars.append((x, y))\\\\\\\\n        chars.append((x2, y2))\\\\\\\\n\\\\\\\\n        _generate_branch(x2, y2, angle - branch_angle, length * 0.7, chars)\\\\\\\\n        _generate_branch(x2, y2, angle + branch_angle, length * 0.7, chars)\\\\\\\\n\\\\\\\\n    chars = []\\\\\\\\n    _generate_branch(50, 10, -90, 30, chars)\\\\\\\\n    max_x = max([c[0] for c in chars])\\\\\\\\n    max_y = max([c[1] for c in chars])\\\\\\\\n\\\\\\\\n    tree_str = [[\\' \\' for _ in range(max_x + 1)] for _ in range(max_y + 1)]\\\\\\\\n    for x, y in chars:\\\\\\\\n        tree_str[y][x] = \\'*\\'\\\\\\\\n\\\\\\\\n    return \\'\\\\\\\\\\\\\\\\n\\'.join([\\'\\'.join(row) for row in tree_str])\\\\\", \\\\\"tests\\\\\": [\\\\\"\\\\\\\\nassert len(generate_fractal_tree(depth=3).split(\\'\\\\\\\\\\\\\\\\n\\')) == 16, \\'Tree height should be correct\\'\\\\\", \\\\\"\\\\\\\\nassert \\'*\\' in generate_fractal_tree(depth=2), \\'Tree should contain asterisks\\'\\\\\", \\\\\"\\\\\\\\nassert generate_fractal_tree(depth=0) == \\'\\\\\\\\\\\\\\\\n\\'.join([\\'\\' for _ in range(11)]), \\'Empty tree with depth 0 should return empty string\\']\\\\\"] }\"'}"