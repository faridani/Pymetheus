"{'model': 'gemma2:27b', 'response': '{\"title\": \"Hard: Alien Dictionary\", \"description\": \"You are given a list of words representing an alien language\\'s dictionary. The letters in each word are unique and represent distinct characters in the alien alphabet. Your task is to determine the alphabetical order of these characters based on the dictionary\\'s word ordering.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef alien_dictionary(words: list[str]) -> str:\\\\n```\\\\n\\\\n#### Input\\\\n- `words` (list[str]): A list of words representing the alien language\\'s dictionary.\\\\n\\\\n#### Output\\\\n- Returns a string representing the alphabetical order of the alien characters, or an empty string if a valid order cannot be determined.\\\\n\\\\n\\\\n#### Constraints\\\\n- The input list will contain at least two words.\\\\n- Each word in the list will consist of lowercase letters only.\\\\n\\\\n- All letters in the dictionary are unique.\\\\n\\\\n\\\\n#### Hints\\\\n\\\\n* Consider using topological sorting to determine the order of characters.\\\\n* Build a graph representing dependencies between characters based on their positions in consecutive words.\", \"code\": \"from collections import defaultdict\\\\n\\\\ndef alien_dictionary(words: list[str]) -> str:\\\\n    # Create an adjacency list to represent character dependencies.\\\\n    adj_list = defaultdict(set)\\\\n    in_degree = {c: 0 for word in words for c in word}\\\\n\\\\n    # Build the graph by comparing adjacent words\\\\n    for i in range(len(words) - 1):\\\\n        word1, word2 = words[i], words[i + 1]\\\\n        min_len = min(len(word1), len(word2))\\\\n        for j in range(min_len):\\\\n            if word1[j] != word2[j]:\\\\n                if word2[j] not in adj_list[word1[j]]:\\\\n                    adj_list[word1[j]].add(word2[j])\\\\n                    in_degree[word2[j]] += 1\\\\n                break\\\\n        # Handle cases where one word is a prefix of another (invalid order)\\\\n        if len(word1) > len(word2) and word1[:len(word2)] == word2:\\\\n            return \\'\\'\\\\n\\\\n    # Perform topological sort using Kahn\\'s algorithm\\\\n    queue = [c for c in in_degree if in_degree[c] == 0]\\\\n    result = []\\\\n    while queue:\\\\n        c = queue.pop(0)\\\\n        result.append(c)\\\\n        for neighbor in adj_list[c]:\\\\n            in_degree[neighbor] -= 1\\\\n            if in_degree[neighbor] == 0:\\\\n                queue.append(neighbor)\\\\n\\\\n    return \\'\\'.join(result) if len(result) == len(in_degree) else \\'\\'\", \"tests\": [\"assert alien_dictionary([\\\\\"wrt\\\\\",\\\\\"wrf\\\\\",\\\\\"er\\\\\",\\\\\"ett\\\\\",\\\\\"rftt\\\\\"]) == \\'wertf\\'\", \"assert alien_dictionary([\\\\\"z\\\\\",\\\\\"x\\\\\",\\\\\"z\\\\\"]) == \\'\\'\", \"assert alien_dictionary([\\\\\"abc\\\\\",\\\\\"ab\\\\\",\\\\\"a\\\\\"]) == \\'cab\\']\"]}'}"