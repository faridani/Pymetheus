"{'model': 'gemma2:27b', 'response': '{\"title\": \"Hard: Text Justification\", \"description\": \"Given an array of words and a desired text width, return a formatted string where the words are aligned to the left and right margins. Words should be evenly spaced within each line, with any remaining space distributed from left to right.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef full_justify(words: list[str], max_width: int) -> str:\\\\n```\\\\n\\\\n#### Input\\\\n- `words` (list[str]): A list of words to be justified.\\\\n- `max_width` (int): The desired width of each line in characters.\\\\n\\\\n#### Output\\\\n- Returns a string containing the formatted text, with each line justified according to the rules above.\", \"code\": \"def full_justify(words: list[str], max_width: int) -> str:\\\\n    result = []\\\\n    current_line = []\\\\n    current_width = 0\\\\n\\\\n    for word in words:\\\\n        if current_width + len(word) + len(current_line) > max_width:\\\\n            # Line is full, justify it\\\\n            spaces_to_add = max_width - current_width\\\\n            if len(current_line) == 1:\\\\n                current_line[0] += \\' \\' * spaces_to_add  # Single word line\\\\n            else:\\\\n                gaps = len(current_line) - 1\\\\n                spaces_per_gap = spaces_to_add // gaps\\\\n                extra_spaces = spaces_to_add % gaps\\\\n                for i in range(gaps):\\\\n                    current_line[i] += \\' \\' * (spaces_per_gap + (1 if i < extra_spaces else 0))\\\\n            result.append(\\'\\'.join(current_line))\\\\n            current_line = [word]\\\\n            current_width = len(word)\\\\n        else:\\\\n            current_line.append(word)\\\\n            current_width += len(word)\\\\n\\\\n    # Last line, left justified\\\\n    last_line = \\' \\'.join(current_line)\\\\n    result.append(last_line + \\' \\' * (max_width - len(last_line)))\\\\n    return \\'\\\\\\\\n\\'.join(result)\", \"tests\": [\"assert full_justify([\\'This\\', \\'is\\', \\'an\\', \\'example\\', \\'of\\', \\'text\\', \\'justification.\\'], 16) == \\'This    is    an\\\\\\\\nexample  of text\\\\\\\\njustification.  \\'\", \"assert full_justify([\\'What\\',\\'must\\',\\'be\\',\\'acknowledgment\\',\\'shall\\',\\'be\\'], 16) == \\\\\\\\\\\\\"What  must  be\\\\\\\\naknowledgment  \\\\\\\\nshall be      \\\\\\\\\\\\\", \\'assert full_justify([\\'Science\", \"is\", \"what\", \"we\", \"understand\", \"well\", \"enough\", \"to\", \"explain\", \"to\", \"a\", \"computer.\", \"Art\", \"is\", \"everything\", \"else\", \"we\", \"do\"], \"Science  is  what we\\\\\\\\nunderstand      well\\\\\\\\nenough to explain to\\\\\\\\na computer.  Art is\\\\\\\\neverything else we\\\\\\\\ndo              \\\\\"\": \"\"}'}"