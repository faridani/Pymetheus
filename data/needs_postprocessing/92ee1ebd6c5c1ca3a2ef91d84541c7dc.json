"{'model': 'gemma2:27b-instruct-q5_K_S', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard - Longest Increasing Path in a Matrix\\\\\", \\\\\"description\\\\\": \\\\\"Given an m x n integers matrix mat, find the length of the longest increasing path in mat.\\\\\\\\n\\\\\\\\nAn increasing path is defined as: starting at any cell in the matrix and moving to adjacent cells (horizontally or vertically), **not diagonally**, such that each subsequent cell has a strictly greater value than the previous one.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef longest_increasing_path(mat: list[list[int]]) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `mat` (list[list[int]]): A 2D list of integers representing the matrix.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the length of the longest increasing path in the matrix.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def longest_increasing_path(mat: list[list[int]]) -> int:\\\\\\\\n    rows, cols = len(mat), len(mat[0])\\\\\\\\n    dp = [[-1 for _ in range(cols)] for _ in range(rows)]\\\\\\\\n\\\\\\\\n    def dfs(row, col):\\\\\\\\n        if dp[row][col] != -1:\\\\\\\\n            return dp[row][col]\\\\\\\\n\\\\\\\\n        max_length = 1\\\\\\\\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\\\\\\\\n        for dr, dc in directions:\\\\\\\\n            new_row, new_col = row + dr, col + dc\\\\\\\\n            if 0 <= new_row < rows and 0 <= new_col < cols and mat[new_row][new_col] > mat[row][col]:\\\\\\\\n                max_length = max(max_length, 1 + dfs(new_row, new_col))\\\\\\\\n        dp[row][col] = max_length\\\\\\\\n        return max_length\\\\\\\\n\\\\\\\\n    longest_path = 0\\\\\\\\n    for i in range(rows):\\\\\\\\n        for j in range(cols):\\\\\\\\n            longest_path = max(longest_path, dfs(i, j))\\\\\\\\n\\\\\\\\n    return longest_path\\\\\", \\\\\"tests\\\\\": [\\\\\"assert longest_increasing_path([[9,9,4],[6,6,8],[2,1,1]]) == 4\\\\\", \\\\\"assert longest_increasing_path([[3,4,5],[3,2,6],[2,2,1]]) == 4\\\\\", \\\\\"assert longest_increasing_path([[1]]) == 1\\\\\"] }\"'}"