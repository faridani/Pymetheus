{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Hard: Find the Shortest Path\\\", \\\"description\\\": \\\"#### Problem\\\\nYou are given a grid of characters, where each cell can be either empty ('.') or contain one of four types of obstacles: walls ('\\\\''), rocks ('R'), rivers ('L'), and islands ('I'). The goal is to find the shortest path from the top-left corner to the bottom-right corner.\\\\n\\\\nThe path should not intersect with any obstacles. If there are multiple shortest paths, return any one of them.\\\\n\\\\n#### Function Signature\\\\n```\\\\ndef find_shortest_path(grid: list[list[str]]) -> str:\\\\n```\\\\n\\\\n#### Input\\\\n- `grid` (list[list[str]]): A 2D grid of characters, where each cell is either empty ('.') or contains one of four types of obstacles: walls ('\\\\''), rocks ('R'), rivers ('L'), and islands ('I').\\\\n\\\\n#### Output\\\\n- Returns the shortest path from the top-left corner to the bottom-right corner as a string. The path should not intersect with any obstacles. If there are multiple shortest paths, return any one of them.\\\\n\\\", \\\"code\\\": \\\"from collections import deque\\\\n\\\\ndef find_shortest_path(grid: list[list[str]]) -> str:\\\\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\\\\n    queue = deque([(0, 0, [])])\\\\n    visited = set((0, 0))\\\\n\\\\n    while queue:\\\\n        x, y, path = queue.popleft()\\\\n        if x == len(grid) - 1 and y == len(grid[0]) - 1:\\\\n            return ''.join(path)\\\\n\\\\n        for dx, dy in directions:\\\\n            nx, ny = x + dx, y + dy\\\\n            if (0 <= nx < len(grid)) and (0 <= ny < len(grid[0])) and ((nx, ny) not in visited) and (grid[nx][ny] != '\\\\'') and (grid[nx][ny] != 'R') and (grid[nx][ny] != 'L') and (grid[nx][ny] != 'I'):\\\\n                queue.append((nx, ny, path + [grid[x][y]]))\\\\n                visited.add((nx, ny))\\\\n\\\\n    return ''\\\", \\\"tests\\\": [\\\"assert find_shortest_path([['.', '.', '.'], ['R', '.', '.'], ['L', '.', '.']]) == '....'\\\", \\\"assert find_shortest_path([['I', '.', '.'], ['.', 'R', '.'], ['.', '.', 'L']]) == '..R..L'\\\", \\\"assert find_shortest_path([['.', '#', '#'], ['#', '#', '#'], ['#', '#', 'L']]) == ''\\\"] }\""
}