{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"The Meeting Rooms Problem\\\", \\\"description\\\": \\\"You are given a list of meeting durations and the start times of meetings that have already started. Write a function `available_rooms` that determines how many rooms you would need to accommodate all the meetings.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef available_rooms(meetings: List[Tuple[int, int]]) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `meetings` (List[Tuple[int, int]]): A list of tuples, where each tuple contains the start time and duration of a meeting. The start times are given in minutes, and the durations are also given in minutes.\\\\n\\\\n#### Output\\\\n- Returns the minimum number of rooms needed to accommodate all meetings without any conflicts.\\\\n\\\", \\\"code\\\": \\\"\\\\nimport heapq\\\\n\\\\ndef available_rooms(meetings):\\\\n    # Sort the meetings by their start times\\\\n    meetings.sort(key=lambda x: x[0])\\\\n    \\\\n    # Initialize a priority queue with the end time of each meeting\\\\n    pq = [(meeting[0] + meeting[1], i) for i, meeting in enumerate(meetings)]\\\\n    heapq.heapify(pq)\\\\n    \\\\n    # Initialize the number of rooms needed\\\\n    rooms = 1\\\\n    \\\\n    # Initialize the current earliest end time\\\\n    earliest_end_time = pq[0][0]\\\\n    \\\\n    # Iterate over the meetings\\\\n    while pq:\\\\n        # Get the end time and index of the meeting with the earliest end time\\\\n        end_time, i = heapq.heappop(pq)\\\\n        \\\\n        # If this meeting starts after the current earliest end time, update the rooms needed\\\\n        if meetings[i][0] >= earliest_end_time:\\\\n            rooms += 1\\\\n            earliest_end_time = end_time\\\\n        # Otherwise, update the earliest end time\\\\n        else:\\\\n            earliest_end_time = end_time\\\\n        \\\\n    return rooms\\\\n\\\\n\\\", \\\"tests\\\": [\\\"assert available_rooms([(0, 10), (5, 15), (15, 20)]) == 2\\\", \\\"assert available_rooms([(1, 3), (2, 4), (6, 8), (9, 11)]) == 2\\\", \\\"assert available_rooms([(1, 3), (2, 4), (7, 10), (12, 15)]) == 2\\\"] }\""
}