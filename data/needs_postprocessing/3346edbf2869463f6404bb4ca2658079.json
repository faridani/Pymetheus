"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Word Ladder\\\\\", \\\\\"description\\\\\": \\\\\"Given two words, `beginWord` and `endWord`, and a dictionary of valid English words, `wordList`. Find the length of the shortest transformation sequence from `beginWord` to `endWord` such that:\\\\\\\\n\\\\\\\\n- Only one letter can be changed at a time.\\\\\\\\n- Each transformed word must exist in the given `wordList`.\\\\\\\\n\\\\\\\\n\\\\\\\\nReturn 0 if there is no such transformation sequence.\\\\\\\\nAll words have the same length.\\\\\\\\nAll words consist only of lowercase English letters.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef ladderLength(beginWord: str, endWord: str, wordList: list[str]) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `beginWord` (str): The starting word. \\\\\\\\n- `endWord` (str): The target word.\\\\\\\\n- `wordList` (list[str]): A list of valid English words.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the length of the shortest transformation sequence, or 0 if no such sequence exists.\\\\\", \\\\\"code\\\\\": \\\\\"from collections import deque\\\\\\\\n\\\\\\\\ndef ladderLength(beginWord: str, endWord: str, wordList: list[str]) -> int:\\\\\\\\n    if endWord not in wordList:\\\\\\\\n        return 0\\\\\\\\n    wordSet = set(wordList)\\\\\\\\n    queue = deque([(beginWord, 1)]) # (word, length)\\\\\\\\n    visited = {beginWord}\\\\\\\\n    while queue:\\\\\\\\n        word, length = queue.popleft()\\\\\\\\n        if word == endWord:\\\\\\\\n            return length\\\\\\\\n        for i in range(len(word)):\\\\\\\\n            for char in \\'abcdefghijklmnopqrstuvwxyz\\':\\\\\\\\n                newWord = word[:i] + char + word[i+1:]\\\\\\\\n                if newWord in wordSet and newWord not in visited:\\\\\\\\n                    queue.append((newWord, length + 1))\\\\\\\\n                    visited.add(newWord)\\\\\\\\n    return 0\\\\\", \\\\\"tests\\\\\": [\\\\\"\\'assert ladderLength(\\\\\\\\\\\\\"hit\\\\\\\\\\\\\", \\\\\\\\\\\\\"cog\\\\\\\\\\\\\", [\\\\\\\\\\\\\"hot\\\\\\\\\\\\\",\\\\\\\\\\\\\"dot\\\\\\\\\\\\\",\\\\\\\\\\\\\"dog\\\\\\\\\\\\\",\\\\\\\\\\\\\"lot\\\\\\\\\\\\\",\\\\\\\\\\\\\"log\\\\\\\\\\\\\",\\\\\\\\\\\\\"cog\\\\\\\\\\\\\"]) == 5\\'\\\\\", \\\\\"\\'assert ladderLength(\\\\\\\\\\\\\"hit\\\\\\\\\\\\\", \\\\\\\\\\\\\"cog\\\\\\\\\\\\\", [\\\\\\\\\\\\\"hot\\\\\\\\\\\\\",\\\\\\\\\\\\\"dot\\\\\\\\\\\\\",\\\\\\\\\\\\\"dog\\\\\\\\\\\\\",\\\\\\\\\\\\\"lot\\\\\\\\\\\\\",\\\\\\\\\\\\\"log\\\\\\\\\\\\\"]) == 0\\'\\\\\"] }\"'}"