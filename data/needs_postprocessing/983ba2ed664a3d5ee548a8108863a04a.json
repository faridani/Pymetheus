"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Finder (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_anagrams(words: List[str]) -> Dict[str, List[str]]` that finds all the anagrams of the given words. Anagram is a word or phrase that contains the same letters as another word or phrase in the exact same order.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of strings containing words to be checked for anagrams.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a dictionary where the keys are the sorted versions of the anagrams and the values are the original anagram words.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from collections import Counter, sorted\\\\\\\\n\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n    # Count each letter in each word\\\\\\\\n    count_dict = {word: Counter(sorted(word)) for word in words}\\\\\\\\n    \\\\\\\\n    # Find anagrams and store them in a dictionary\\\\\\\\n    result = {\\\\\\\\n        sorted(\\'\\'.join(v)): [k for k in count_dict if all(count_dict[k][key] == count for key in v)]\\\\\\\\n        for v in count_dict.values()\\\\\\\\n    }\\\\\\\\n    return result\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\'cat\\', \\'act\\', \\'tac\\', \\'dog\\', \\'god\\']) == {\\'catact\\': [\\'cat\\', \\'act\\'], \\'atcod\\': [\\'tac\\', \\'dog\\', \\'god\\']}\\\\\", \\\\\"assert find_anagrams([\\'listen\\', \\'silent\\', \\'enlist\\']) == {\\'enistls\\': [\\'listen\\', \\'silent\\'], \\'nisteil\\': [\\'enlist\\']}\\\\\"] }\"'}"