{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Hard: Perimeter of Irregular Polygons\\\", \\\"description\\\": \\\"A polygon is a 2D shape with at least three sides. In this problem, we'll focus on irregular polygons, which are those that do not have all sides of equal length.\\\\n\\\\n#### Problem Statement\\\\nWrite a function `polygon_perimeter` that calculates the perimeter of an irregular polygon given its vertices as coordinates. The vertices will be provided in order, and the first vertex is assumed to be the same as the last vertex (to form a closed shape).\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef polygon_perimeter(vertices: list[tuple[float, float]]) -> float:\\\\n```\\\\n\\\\n#### Input\\\\n- `vertices` (list of tuples): A list of 2D coordinates representing the vertices of the polygon.\\\\nEach vertex is represented as a tuple containing its x-coordinate and y-coordinate.\\\\n\\\\n#### Output\\\\n- Returns the perimeter of the irregular polygon, calculated using the sum of all side lengths.\\\\n\\\", \\\"code\\\": \\\"import math\\\\n\\\\ndef polygon_perimeter(vertices: list[tuple[float, float]]) -> float:\\\\n    # Calculate the number of sides in the polygon\\\\n    num_sides = len(vertices)\\\\n\\\\n    # Initialize the perimeter to zero\\\\n    perimeter = 0.0\\\\n\\\\n    # Iterate over each side of the polygon\\\\n    for i in range(num_sides):\\\\n        # Get the coordinates of the current vertex and the next one\\\\n        v1 = vertices[i]\\\\n        v2 = vertices[(i + 1) % num_sides]\\\\n\\\\n        # Calculate the Euclidean distance between the two vertices (the length of this side)\\\\n        side_length = math.sqrt((v2[0] - v1[0]) ** 2 + (v2[1] - v1[1]) ** 2)\\\\n\\\\n        # Add the side length to the perimeter\\\\n        perimeter += side_length\\\\n\\\\n    # Return the calculated perimeter\\\\n    return perimeter\\\", \\\"tests\\\": [\\\"assert polygon_perimeter([(0, 0), (3, 0), (4.5, 2), (1.5, 2)]) == 9.5\\\", \\\"assert polygon_perimeter([(1, 1), (-1, 1), (-1, -1), (1, -1)]) == 8.0\\\", \\\"assert polygon_perimeter([(0, 0), (3, 4), (6, 4), (6, 0), (3, 0)]) == 18.0\\\"] }\""
}