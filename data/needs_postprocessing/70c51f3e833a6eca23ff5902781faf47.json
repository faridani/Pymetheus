"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Detection (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"An anagram is a word or phrase that consists of the same letters as another word or phrase, but arranged differently. Write a function `find_anagrams` that takes in a list of words and returns all pairs of words in the list that are anagrams of each other.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: List[str]) -> List[List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of strings containing words to check for anagrams.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of pairs of strings, where each pair contains two words that are anagrams of each other.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from collections import Counter\\\\\\\\n\\\\\\\\ndef find_anagrams(words: List[str]) -> List[List[str]]:\\\\\\\\n    # Count the frequency of each letter in each word\\\\\\\\n    word_counts = [Counter(word) for word in words]\\\\\\\\n    # Find pairs of words with the same frequency count for each letter\\\\\\\\n    anagram_pairs = []\\\\\\\\n    for i, counts in enumerate(word_counts):\\\\\\\\n        for j in range(i + 1, len(words)):\\\\\\\\n            if counts == word_counts[j]:\\\\\\\\n                anagram_pairs.append([words[i], words[j]])\\\\\\\\n    return anagram_pairs\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\'listen\\', \\'silent\\', \\'enlist\\', \\'education\\']) == [[\\'listen\\', \\'enlist\\'], [\\'silent\\', \\'education\\']]\\\\\", \\\\\"assert find_anagrams([\\'anagram\\', \\'nag a ram\\']) == [[\\'anagram\\', \\'nag a ram\\']]\\\\\"] }\"'}"