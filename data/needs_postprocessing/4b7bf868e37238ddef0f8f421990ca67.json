"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Prime Factorization (Easy)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function called `prime_factorization` that takes a non-negative integer `n` as an argument and returns a list of prime numbers that are factors of `n`. The order of the elements in the returned list should be in ascending order.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef prime_factorization(n: int) -> List[int]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `n` (int): A non-negative integer.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of prime numbers that are factors of the input integer, in ascending order.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def prime_factorization(n: int) -> List[int]:\\\\\\\\n    if n <= 1: return []\\\\\\\\n    i = 2\\\\\\\\n    factors = []\\\\\\\\n    while i * i <= n:\\\\\\\\n        if n % i == 0:\\\\\\\\n            n //= i\\\\\\\\n            factors.append(i)\\\\\\\\n        i += 1\\\\\\\\n    if n > 1: factors.append(n)\\\\\\\\n    return sorted(factors)\\\\\", \\\\\"tests\\\\\": [\\\\\"assert prime_factorization(1) == []\\\\\", \\\\\"assert prime_factorization(2) == [2]\\\\\", \\\\\"assert prime_factorization(4) == [2, 2]\\\\\", \\\\\"assert prime_factorization(6) == [2, 3]\\\\\", \\\\\"assert prime_factorization(7) == [7]\\\\\", \\\\\"assert prime_factorization(18) == [2, 3, 3, 5]\\\\\"] }\"'}"