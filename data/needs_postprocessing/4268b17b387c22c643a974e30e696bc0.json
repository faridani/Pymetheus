"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Word Ladder\\\\\", \\\\\"description\\\\\": \\\\\"Given two words `beginWord` and `endWord`, and a dictionary `wordList` containing many words, find the length of the shortest transformation sequence from `beginWord` to `endWord`.\\\\\\\\n\\\\\\\\nOne letter can be changed at a time. Each transformed word must exist in the word list.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef ladderLength(beginWord: str, endWord: str, wordList: list[str]) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `beginWord` (str): The starting word.\\\\\\\\n- `endWord` (str): The target word.\\\\\\\\n- `wordList` (list[str]): A list of valid words.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the length of the shortest transformation sequence. If no such sequence exists, return 0.\\\\\", \\\\\"code\\\\\": \\\\\"from collections import deque\\\\\\\\n\\\\\\\\ndef ladderLength(beginWord: str, endWord: str, wordList: list[str]) -> int:\\\\\\\\n    if endWord not in wordList: return 0\\\\\\\\n    neighbors = {}\\\\\\\\n    for word in wordList:\\\\\\\\n        for i in range(len(word)):\\\\\\\\n            pattern = word[:i] + \\'*\\' + word[i+1:]\\\\\\\\n            if pattern not in neighbors:\\\\\\\\n                neighbors[pattern] = []\\\\\\\\n            neighbors[pattern].append(word)\\\\\\\\n    visited = set([beginWord])\\\\\\\\n    queue = deque([(beginWord, 1)])\\\\\\\\n    while queue:\\\\\\\\n        current_word, level = queue.popleft()\\\\\\\\n        for i in range(len(current_word)):\\\\\\\\n            pattern = current_word[:i] + \\'*\\' + current_word[i+1:]\\\\\\\\n            for neighbor in neighbors.get(pattern, []):\\\\\\\\n                if neighbor == endWord:\\\\\\\\n                    return level + 1\\\\\\\\n                if neighbor not in visited:\\\\\\\\n                    visited.add(neighbor)\\\\\\\\n                    queue.append((neighbor, level + 1))\\\\\\\\n    return 0\\\\\", \\\\\"tests\\\\\": [\\\\\"assert ladderLength(\\\\\\\\\\\\\"hit\\\\\\\\\\\\\",\\\\\\\\\\\\\"cog\\\\\\\\\\\\\", [\\\\\\\\\\\\\"hot\\\\\\\\\\\\\",\\\\\\\\\\\\\"dot\\\\\\\\\\\\\",\\\\\\\\\\\\\"dog\\\\\\\\\\\\\",\\\\\\\\\\\\\"lot\\\\\\\\\\\\\",\\\\\\\\\\\\\"log\\\\\\\\\\\\\",\\\\\\\\\\\\\"cog\\\\\\\\\\\\\"]) == 5\\\\\", \\\\\"assert ladderLength(\\\\\\\\\\\\\"hit\\\\\\\\\\\\\",\\\\\\\\\\\\\"cog\\\\\\\\\\\\\", [\\\\\\\\\\\\\"hot\\\\\\\\\\\\\",\\\\\\\\\\\\\"dot\\\\\\\\\\\\\",\\\\\\\\\\\\\"dog\\\\\\\\\\\\\",\\\\\\\\\\\\\"lot\\\\\\\\\\\\\",\\\\\\\\\\\\\"log\\\\\\\\\\\\\"]) == 0\\\\\"] }\"'}"