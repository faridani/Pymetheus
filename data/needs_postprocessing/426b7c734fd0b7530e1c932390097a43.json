"{'model': 'qwen2:7b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Prime Number Sieve\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `prime_sieve` that implements the Sieve of Eratosthenes algorithm to find all prime numbers up to a given limit. The Sieve of Eratosthenes is an ancient algorithm used to find all primes smaller than or equal to a specified integer \\\\\\\\( n \\\\\\\\). This function should take in two parameters: `n`, which represents the upper limit, and `m` (optional) that indicates whether only primes less than `m` should be returned. If `m` is not provided, it returns all prime numbers up to `n`.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef prime_sieve(n: int, m: Optional[int] = None) -> List[bool]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `n`: An integer representing the upper limit of finding primes (`1 <= n <= 5 * 10^6`).\\\\\\\\n- `m`: An optional integer indicating the maximum value for prime numbers to be returned (`2 <= m <= n`, if provided).\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list where each element represents whether the index (starting from 0) is a prime number or not.\\\\\\\\n\\\\\\\\n#### Constraints and Hints\\\\\\\\n- Use an efficient algorithm that works well with large values of `n`.\\\\\\\\n- Consider using bit manipulation techniques to optimize space usage for large limits.\\\\\", \\\\\"code\\\\\": \\\\\"from typing import List, Optional\\\\\\\\n\\\\\\\\ndef prime_sieve(n: int, m: Optional[int] = None) -> List[bool]:\\\\\\\\n    is_prime = [True] * (n + 1)\\\\\\\\n    is_prime[0], is_prime[1] = False, False\\\\\\\\n\\\\\\\\n    for i in range(2, int(n ** 0.5) + 1):\\\\\\\\n        if is_prime[i]:\\\\\\\\n            for j in range(i*i, n+1, i):\\\\\\\\n                is_prime[j] = False\\\\\\\\n\\\\\\\\n    if m is None:\\\\\\\\n        return [is_prime[i] for i in range(min(m, n)+1)]\\\\\\\\n    else:\\\\\\\\n        return [is_prime[i] for i in range(m)]\\\\\", \\\\\"tests\\\\\": [\\\\\"assert prime_sieve(10) == [False, False, True, True, False, True, False, True, False, False]\\\\\", \\\\\"assert prime_sieve(20, 10) == [False, False, True, True, False, True, False, True, False, False, False, False, True, False, True, False, False, False, True, False]\\\\\", \\\\\"assert prime_sieve(50, None) == [False, False, True, True, False, True, False, True, False, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True]\\\\\", \\\\\"assert prime_sieve(100) == [False, False, True, True, False, True, False, True, False, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, False, True, False, True, False, False, False, True, False, True, False, False, False, True]\\\\\"] }\"'}"