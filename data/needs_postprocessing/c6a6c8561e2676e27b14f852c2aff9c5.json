"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Labyrinth Escape\\\\\", \\\\\"description\\\\\": \\\\\"You are trapped inside a labyrinth represented as a 2D grid. The labyrinth walls are denoted by \\'#\\' and open paths are denoted by \\'.\\'. You start at the top-left corner (0, 0) and your goal is to reach the bottom-right corner. Write a function `escape_labyrinth` that takes the labyrinth grid as input and returns the shortest path from start to finish. If there\\'s no escape route, return an empty list.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef escape_labyrinth(grid: list[list[str]]) -> list[tuple[int, int]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `grid` (list[list[str]]): A 2D grid representing the labyrinth. Each element is either \\'#\\' for a wall or \\'.\\' for an open path.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of tuples, where each tuple represents the coordinates (row, column) of a step in the shortest path from (0, 0) to the bottom-right corner. If no escape route exists, return an empty list.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def escape_labyrinth(grid: list[list[str]]) -> list[tuple[int, int]]:\\\\\\\\n    rows = len(grid)\\\\\\\\n    cols = len(grid[0])\\\\\\\\n    start = (0, 0)\\\\\\\\n    end = (rows - 1, cols - 1)\\\\\\\\n\\\\\\\\n    def is_valid(row, col):\\\\\\\\n        return 0 <= row < rows and 0 <= col < cols and grid[row][col] == \\'.\\'\\\\\\\\n\\\\\\\\n    queue = [(start, [start])]\\\\\\\\n    visited = set([start])\\\\\\\\n\\\\\\\\n    while queue:\\\\\\\\n        (row, col), path = queue.pop(0)\\\\\\\\n        if (row, col) == end:\\\\\\\\n            return path\\\\\\\\n\\\\\\\\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\\\\\\\\n            new_row = row + dr\\\\\\\\n            new_col = col + dc\\\\\\\\n            if is_valid(new_row, new_col) and (new_row, new_col) not in visited:\\\\\\\\n                queue.append(((new_row, new_col), path + [(new_row, new_col)]))\\\\\\\\n                visited.add((new_row, new_col))\\\\\\\\n\\\\\\\\n    return []\\\\\", \\\\\"tests\\\\\": [\\\\\"grid = [[\\\\\\\\\\\\\\\\\\\\\".\\\\\\\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\\\\\\\".\\\\\\\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\\\\\\\"], [\\\\\\\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\\\\\\\".\\\\\\\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\\\\\\\"], [\\\\\\\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\\\\\\\".\\\\\\\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\\\\\\\".\\\\\\\\\\\\\\\\\\\\\"]]\\\\\\\\nassert escape_labyrinth(grid) == [(0, 0), (1, 0), (2, 0), (2, 1), (2, 2)]\\\\\", \\\\\"grid = [[\\\\\\\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\\\\\\\"], [\\\\\\\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\\\\\\\".\\\\\\\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\\\\\\\"], [\\\\\\\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\\\\\\\"]]\\\\\\\\nassert escape_labyrinth(grid) == []\\\\\", \\\\\"grid = [[\\\\\\\\\\\\\\\\\\\\\".\\\\\\\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\\\\\\\".\\\\\\\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\\\\\\\".\\\\\\\\\\\\\\\\\\\\\"], [\\\\\\\\\\\\\\\\\\\\\".\\\\\\\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\\\\\\\".\\\\\\\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\\\\\\\".\\\\\\\\\\\\\\\\\\\\\"], [\\\\\\\\\\\\\\\\\\\\\".\\\\\\\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\\\\\\\".\\\\\\\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\\\\\\\".\\\\\\\\\\\\\\\\\\\\\"]]\\\\\\\\nassert escape_labyrinth(grid) == [(0, 0), (0, 1), (0, 2), (1, 2), (2, 2)]\\\\\"] }\"'}"