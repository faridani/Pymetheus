{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Hard: Maximal Rectangle\\\", \\\"description\\\": \\\"Given a 2D binary matrix `matrix` where each value is either `0` or `1`, find the maximum area of a rectangle that can be obtained by placing the rectangle within the given binary matrix.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef maximal_rectangle(matrix: list[list[int]]) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `matrix` (list[list[int]]): A 2D binary matrix where each value is either `0` or `1`.\\\\n\\\\n#### Output\\\\n- Returns the maximum area of a rectangle that can be obtained by placing the rectangle within the given binary matrix.\\\\n\\\\n\\\", \\\"code\\\": \\\"\\\\nimport collections\\\\n\\\\ndef maximal_rectangle(matrix: list[list[int]]) -> int:\\\\n    if not matrix:\\\\n        return 0\\\\n    \\\\n    m, n = len(matrix), len(matrix[0])\\\\n    height = [0] * n\\\\n    max_area = 0\\\\n    \\\\n    for row in matrix:\\\\n        stack = []\\\\n        for i in range(n):\\\\n            if row[i]:\\\\n                height[i] += 1\\\\n            else:\\\\n                while stack and row[stack[-1]] == 0:\\\\n                    h = height[stack.pop()]\\\\n                    w = i if not stack else i - stack[-1] - 1\\\\n                    max_area = max(max_area, h * w)\\\\n        while stack:\\\\n            h = height[stack.pop()]\\\\n            w = n if not stack else n - stack[-1] - 1\\\\n            max_area = max(max_area, h * w)\\\\n    \\\\n    return max_area\\\\n\\\\n\\\", \\\"tests\\\": [\\\"assert maximal_rectangle([['0'], ['0']]) == 0\\\", \\\"assert maximal_rectangle([['1', '0'], ['1', '0']]) == 2\\\", \\\"assert maximal_rectangle([['1', '1', '1'], ['1', '0', '1'], ['1', '1', '1']]) == 6\\\"] }\""
}