{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Easy: Minimum Window Substring\\\", \\\"description\\\": \\\"Write a function `min_window_substring` that takes two strings, `s` and `t`, as input. It should return the minimum window substring of `s` that contains all characters from `t`. If there are multiple such substrings with the same minimum length, it should return the first one encountered.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef min_window_substring(s: str, t: str) -> str:\\\\n```\\\\n\\\\n#### Input\\\\n- `s` (str): The string to search for a window substring.\\\\n- `t` (str): The target string that must be contained in the window substring.\\\\n\\\\n#### Output\\\\n- Returns the minimum window substring of `s` that contains all characters from `t`. If no such substring exists, it returns an empty string.\\\\n\\\", \\\"code\\\": \\\"def min_window_substring(s: str, t: str) -> str:\\\\n    if not s or not t:\\\\n        return ''\\\\n    if len(t) > len(s):\\\\n        return ''\\\\n    required_chars = set(t)\\\\n    left, right = 0, 0\\\\n    min_len = float('inf')\\\\n    min_window = ''\\\\n    while right < len(s):\\\\n        window = s[left:right+1]\\\\n        if set(window).issuperset(required_chars):\\\\n            if right - left + 1 < min_len:\\\\n                min_len = right - left + 1\\\\n                min_window = window\\\\n            left += 1\\\\n            while left <= right and set(s[left:right+1]).issuperset(required_chars):\\\\n                left += 1\\\\n        else:\\\\n            right += 1\\\\n    return min_window\\\", \\\"tests\\\": [\\\"assert min_window_substring('ADOBECODEBANC', 'ABC') == 'BANC'\\\", \\\"assert min_window_substring('', '') == ''\\\", \\\"assert min_window_substring('a', 'b') == ''\\\", \\\"assert min_window_substring('abc', 'ab') == 'ab'\\\"] }\""
}