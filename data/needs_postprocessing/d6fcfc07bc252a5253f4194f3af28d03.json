{
    "model": "gemma2:27b",
    "response": "\"{ \\\"title\\\": \\\"Hard:  Circular Prime Identifier\\\", \\\"description\\\": \\\"A circular prime is a prime number that remains prime when its digits are rotated cyclically. For example, 197 is a circular prime because 197, 971, and 719 are all prime numbers. \\\\n\\\\nWrite a function `is_circular_prime` that takes an integer `n` as input and returns `True` if `n` is a circular prime, `False` otherwise.\\\\n\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef is_circular_prime(n: int) -> bool:\\\\n```\\\\n\\\\n#### Input\\\\n-  `n` (int): A positive integer.\\\\n\\\\n#### Output\\\\n - Returns `True` if `n` is a circular prime, `False` otherwise.\\\", \\\"code\\\": \\\"def is_prime(num: int) -> bool:\\\\n    \\\\\\\"\\\\\\\"\\\\\\\"\\\\n    Checks if a number is prime.\\\\n    \\\\\\\"\\\\\\\"\\\\\\\"\\\\n    if num <= 1:\\\\n        return False\\\\n    for i in range(2, int(num**0.5) + 1):\\\\n        if num % i == 0:\\\\n            return False\\\\n    return True\\\\n\\\\ndef is_circular_prime(n: int) -> bool:\\\\n    \\\\\\\"\\\\\\\"\\\\\\\"\\\\n    Checks if a number is a circular prime.\\\\n    \\\\\\\"\\\\\\\"\\\\\\\"\\\\n    if not is_prime(n):\\\\n        return False\\\\n    str_n = str(n)\\\\n    for i in range(len(str_n)):\\\\n        rotated_str = str_n[i:] + str_n[:i]\\\\n        if not is_prime(int(rotated_str)):\\\\n            return False\\\\n    return True\\\", \\\"tests\\\": [\\\"assert is_circular_prime(197) == True\\\", \\\"assert is_circular_prime(357) == False\\\"] }\""
}