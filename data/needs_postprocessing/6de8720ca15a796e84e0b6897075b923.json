{
    "model": "llama3:latest",
    "response": "{\"title\": \"Elevator Simulation\", \"description\": \"Imagine you are designing an elevator system for a 10-story building. You have to make sure that the elevator always goes up or down one floor at a time, and it cannot stop on any floor except the ground floor (0th floor) and the highest floor (9th floor). Write a function `elevator_simulation` that simulates the elevator's movement.\\n\\n#### Function Signature\\n```python\\ndef elevator_simulation(floors: list[int], start_floor: int, end_floor: int) -> str:\\n```\\n\\n#### Input\\n- `floors` (list<int>): A list of integers representing the floors in the building. The list is ordered from 0th floor to 9th floor.\\n- `start_floor` (int): An integer representing the starting floor of the elevator's movement.\\n- `end_floor` (int): An integer representing the ending floor of the elevator's movement.\\n\\n#### Output\\n- Returns a string describing the elevator's movement from the start floor to the end floor. The string should contain 'Up' if the elevator is moving up, and 'Down' if it's moving down.\", \"code\": \"\\ndef elevator_simulation(floors: list[int], start_floor: int, end_floor: int) -> str:\\n    direction = 'Up' if end_floor > start_floor else 'Down'\\n    movement = ''\\n    \\n    while start_floor != end_floor:\\n        movement += f'Moving {direction} from floor {start_floor} to floor {min(start_floor + 1, end_floor)}...\\n'\\n        start_floor += 1 if direction == 'Up' else -1\\n    \\n    return f'Elevator arrived at floor {end_floor}. {'It stopped.' if start_floor == end_floor else 'Keep moving.'}\\n{movement}'\", \"tests\": [\"assert elevator_simulation([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 0, 5) == \\\"Elevator arrived at floor 5. Keep moving.\\nMoving Up from floor 0 to floor 1...\\nMoving Up from floor 1 to floor 2...\\nMoving Up from floor 2 to floor 3...\\nMoving Up from floor 3 to floor 4...\\nMoving Up from floor 4 to floor 5...\\\"\", \"assert elevator_simulation([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 5, 0) == \\\"Elevator arrived at floor 0. It stopped.\\nMoving Down from floor 5 to floor 4...\\nMoving Down from floor 4 to floor 3...\\nMoving Down from floor 3 to floor 2...\\nMoving Down from floor 2 to floor 1...\\nMoving Down from floor 1 to floor 0...\\\"\", \"assert elevator_simulation([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 0, 0) == \\\"Elevator arrived at floor 0. It stopped.\\n\\\"\", \"assert elevator_simulation([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 1, 2) == \\\"Elevator arrived at floor 2. Keep moving.\\nMoving Up from floor 1 to floor 2...\\\"\"]}"
}