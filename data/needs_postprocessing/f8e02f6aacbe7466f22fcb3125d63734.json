{
    "model": "llama3:latest",
    "response": "{\"title\": \"Minimum Window Substring\", \"description\": \"Given two strings s1 and s2, return the minimum window in s1 which contains all the characters in s2. If there is no such window in s1 that covers all characters in s2, return an empty string `\\\"\\\"`. The minimum window has to be at least as long as the length of s2.\\n\\n#### Function Signature\\n```python\\ndef min_window(s: str, t: str) -> str:\\n```\\n\\n#### Input\\n- `s` (str): A source string that may contain any characters.\\n- `t` (str): A target string that contains the characters to be found in `s`.\\n\\n#### Output\\n- Returns a substring of `s` that is at least as long as `t` and contains all characters in `t`. If no such window exists, returns an empty string `\\\"\\\"`.\", \"code\": \"from collections import Counter\\n\\ndef min_window(s: str, t: str) -> str:\\n    if not t or not s:\\n        return \\\"\\\"\\n    t_count = Counter(t)\\n    required_chars = len(t_count)\\n    left, right = 0, 0\\n    formed_chars = 0\\n    window_counts = Counter()\\n    min_len = float('inf')\\n    min_window = \\\"\\\"\\n    while right < len(s):\\n        character = s[right]\\n        window_counts[character] += 1\\n        if character in t_count and window_counts[character] == t_count[character]: \\n            formed_chars += 1\\n        while left <= right and formed_chars == required_chars:\\n            character = s[left]\\n            if right - left + 1 < min_len:\\n                min_len = right - left + 1\\n                min_window = s[left:right + 1]\\n            window_counts[character] -= 1\\n            if character in t_count and window_counts[character] < t_count[character]:\\n                formed_chars -= 1\\n            left += 1\\n        right += 1\\n    return min_window\", \"tests\": [\"assert min_window(\\\"abc\\\", \\\"b\\\") == \\\"b\\\"\", \"assert min_window(\\\"abcd\\\", \\\"cd\\\") == \\\"cd\\\"\", \"assert min_window(\", \", \\\"d\\\") == \\\"\\\"\", \"assert min_window(\\\"d\\\", \", \") == \\\"\\\"\"]}"
}