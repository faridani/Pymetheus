{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Hard: Maximum Average Subarray\\\", \\\"description\\\": \\\"Given an array of integers and an integer k, find the maximum average subarray sum. A subarray is a contiguous part of the array.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef max_average_subarray_sum(arr: list[int], k: int) -> float:\\\\n```\\\\n\\\\n#### Input\\\\n- `arr` (list[int]): An array of integers.\\\\n- `k` (int): The size of the subarrays.\\\\n\\\\n#### Output\\\\n- Returns the maximum average sum of all possible subarrays of size k.\\\", \\\"code\\\": \\\"def max_average_subarray_sum(arr: list[int], k: int) -> float:\\\\n    n = len(arr)\\\\n    prefix_sum = [0] * (n + 1)\\\\n    for i in range(n):\\\\n        prefix_sum[i + 1] = prefix_sum[i] + arr[i]\\\\n\\\\n    max_sum = float('-inf')\\\\n    for i in range(k - 1, n):\\\\n        window_sum = prefix_sum[i + 1] - prefix_sum[i - k + 1]\\\\n        max_sum = max(max_sum, window_sum)\\\\n    return max_sum / k if k != 0 else 0.0\\\\n\\\", \\\"tests\\\": [\\\"assert round(abs(max_average_subarray_sum([-7, 2, 5, 10], 3))) == 12.333333333333332\\\", \\\"assert round(max_average_subarray_sum([1, -4, 3, 2], 2)) == 0.5\\\", \\\"assert max_average_subarray_sum([1, 2, 3, 4, 5], 1) == 3.0\\\"] }\""
}