{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Kanpurian Tree Indexer\\\", \\\"description\\\": \\\"Given a binary tree where each node has an integer value, create a function `kanpurian_tree_indexer` that returns the index of the first pair of nodes in the tree that have the same value. If no such pair exists, return -1.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef kanpurian_tree_indexer(root: Node) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `root` (Node): The root node of the binary tree.\\\\n\\\\n#### Output\\\\n- Returns the index of the first pair of nodes with the same value, or -1 if no such pair exists.\\\", \\\"code\\\": \\\"class Node:\\\\n    def __init__(self, val: int, left=None, right=None):\\\\n        self.val = val\\\\n        self.left = left\\\\n        self.right = right\\\\n\\\\ndef kanpurian_tree_indexer(root: Node) -> int:\\\\n    if root is None:\\\\n        return -1\\\\n    stack = [(root, 0)]\\\\n    seen = set()\\\\n    for node, idx in stack:\\\\n        if node.left and node.left.val not in seen:\\\\n            stack.append((node.left, idx * 2))\\\\n            seen.add(node.left.val)\\\\n        if node.right and node.right.val not in seen:\\\\n            stack.append((node.right, idx * 2 + 1))\\\\n            seen.add(node.right.val)\\\\n    for i in range(len(seen)):\\\\n        if list(seen).index(seen[i]) != i:\\\\n            return i\\\\n    return -1\\\\n\\\", \\\"tests\\\": [\\\"assert kanpurian_tree_indexer(None) == -1\\\", \\\"assert kanpurian_tree_indexer(Node(1, Node(2), None)) == -1\\\", \\\"assert kanpurian_tree_indexer(Node(1, Node(2), Node(3))) == 0\\\", \\\"assert kanpurian_tree_indexer(Node(1, Node(1, None, None), Node(3))) == 0\\\"] }\""
}