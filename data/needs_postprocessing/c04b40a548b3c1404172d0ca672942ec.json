"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard:  Binary Search Tree Validator\\\\\", \\\\\"description\\\\\": \\\\\"A binary search tree (BST) is a hierarchical data structure where each node has a value and two children, left and right. The left subtree contains nodes with values less than the parent node\\'s value, and the right subtree contains nodes with values greater than the parent node\\'s value. Write a function `is_valid_bst` that takes the root of a binary tree as input and returns `True` if it is a valid BST, and `False` otherwise.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef is_valid_bst(root: TreeNode) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `root` (TreeNode): The root node of the binary tree. Each node has attributes `val` (the node\\'s value), `left` (the left child node), and `right` (the right child node).\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the input binary tree is a valid BST, `False` otherwise.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"\\\\\\\\nclass TreeNode:\\\\\\\\n    def __init__(self, val=0, left=None, right=None):\\\\\\\\n        self.val = val\\\\\\\\n        self.left = left\\\\\\\\n        self.right = right\\\\\\\\n\\\\\\\\ndef is_valid_bst(root: TreeNode) -> bool:\\\\\\\\n    def validate(node, lower_bound, upper_bound):\\\\\\\\n        if not node:\\\\\\\\n            return True\\\\\\\\n        if node.val <= lower_bound or node.val >= upper_bound:\\\\\\\\n            return False\\\\\\\\n        return (validate(node.left, lower_bound, node.val) and\\\\\\\\n                validate(node.right, node.val, upper_bound))\\\\\\\\n    return validate(root, float(\\'-inf\\'), float(\\'inf\\'))\\\\\\\\n\\\\\", \\\\\"tests\\\\\": [\\\\\"# Test Case 1: Valid BST\\\\\\\\ntree1 = TreeNode(2)\\\\\\\\ntree1.left = TreeNode(1)\\\\\\\\ntree1.right = TreeNode(3)\\\\\\\\nassert is_valid_bst(tree1) == True\\\\\\\\n\\\\\\\\n# Test Case 2: Invalid BST (Right child smaller than parent)\\\\\\\\ntree2 = TreeNode(5)\\\\\\\\ntree2.left = TreeNode(1)\\\\\\\\ntree2.right = TreeNode(4)\\\\\\\\nassert is_valid_bst(tree2) == False\\\\\\\\n\\\\\\\\n\\\\\\\\n# Test Case 3: Invalid BST (Left child larger than parent)\\\\\\\\ntree3 = TreeNode(2)\\\\\\\\ntree3.left = TreeNode(3)\\\\\\\\ntree3.right = TreeNode(1)\\\\\\\\nassert is_valid_bst(tree3) == False\\\\\\\\n\\\\\"] }\"'}"