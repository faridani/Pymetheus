{
    "model": "codestral:22b",
    "response": "\"{ \\\"title\\\": \\\"[Hard] Word Search II\\\", \\\"description\\\": \\\"Given a 2D board and a list of words from the dictionary, find all words in the board.\\\\n\\\\nEach word must be constructed from letters of sequentially adjacent cells, where 'adjacent' cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef findWords(board: List[List[str]], words: List[str]) -> List[str]:\\\\n```\\\\n\\\\n#### Input\\\\n- `board` (List[List[str]]): A list of lists where each character is a lowercase English letter.\\\\n- `words` (List[str]): A list of strings that may contain letters from the board.\\\\n\\\\n#### Output\\\\n- Returns a list of all words in the dictionary that can be found on the board. The output should be sorted lexicographically.\\\\n\\\", \\\"code\\\": \\\"from collections import defaultdict\\\\ndirection = [(0, 1), (0, -1), (1, 0), (-1, 0)]\\\\ndef findWords(board: List[List[str]], words: List[str]) -> List[str]:\\\\n    trie = defaultdict()\\\\n    for word in words:\\\\n        node = trie\\\\n        for letter in word:\\\\n            if letter not in node:\\\\n                node[letter] = defaultdict()\\\\n            node = node[letter]\\\\n        node['#'] = word\\\\n    def search(i, j, parent):\\\\n        letter = board[i][j]\\\\n        currentNode = parent[letter]\\\\n        matchWord = currentNode.pop('#', False)\\\\n        if matchWord:\\\\n            result.add(matchWord)\\\\n        board[i][j] = '$'\\\\n        for dx, dy in direction:\\\\n            x, y = i + dx, j + dy\\\\n            if 0 <= x < m and 0 <= y < n and board[x][y] != '$' and board[x][y] in currentNode:\\\\n                search(x, y, currentNode)\\\\n        board[i][j] = letter\\\\n        if not currentNode:\\\\n            parent.pop(letter)\\\\n    m, n = len(board), len(board[0])\\\\n    result = set()\\\\n    for i in range(m):\\\\n        for j in range(n):\\\\n            if board[i][j] in trie:\\\\n                search(i, j, trie)\\\\n    return sorted(list(result))\\\\n\\\", \\\"tests\\\": [\\\"assert findWords([[\\\\\\\"o\\\\\\\",\\\\\\\"a\\\\\\\",\\\\\\\"a\\\\\\\",\\\\\\\"n\\\\\\\"],[\\\\\\\"e\\\\\\\",\\\\\\\"t\\\\\\\",\\\\\\\"a\\\\\\\",\\\\\\\"e\\\\\\\"],[\\\\\\\"i\\\\\\\",\\\\\\\"h\\\\\\\",\\\\\\\"k\\\\\\\",\\\\\\\"r\\\\\\\"],[\\\\\\\"i\\\\\\\",\\\\\\\"f\\\\\\\",\\\\\\\"l\\\\\\\",\\\\\\\"v\\\\\\\"]], [\\\\\\\"oath\\\\\\\",\\\\\\\"pea\\\\\\\",\\\\\\\"eat\\\\\\\",\\\\\\\"rain\\\\\\\"]) == [\\\\\\\"eat\\\\\\\",\\\\\\\"oath\\\\\\\"]\\\", \\\"assert findWords([[\\\\\\\"a\\\\\\\",\\\\\\\"b\\\\\\\"],[\\\\\\\"c\\\\\\\",\\\\\\\"d\\\\\\\"]], [\\\\\\\"abcb\\\\\\\"]) == []\\\"] }\""
}