{
    "model": "llama3:latest",
    "response": "{\"title\": \"Minimum Window Substring\", \"description\": \"Given two strings `s1` and `s2`, write a function `min_window_substring` that returns the minimum window substring of `s1` that contains all characters from `s2`. If no such substring exists, return an empty string. The function should consider only lowercase letters.\\n\\n#### Function Signature\\n```\\ndef min_window_substring(s1: str, s2: str) -> str:\\n```\\n\\n#### Input\\n- `s1` (str): A string that may contain any characters.\\n- `s2` (str): A string that contains only lowercase letters.\\n\\n#### Output\\n- Returns the minimum window substring of `s1` that contains all characters from `s2`. If no such substring exists, return an empty string.\", \"code\": \"\\nimport collections\\n\\ndef min_window_substring(s1: str, s2: str) -> str:\\n    if not s2 or not s1:\\n        return ''\\n\\n    dict_s2 = collections.Counter(s2)\\n    required_chars = len(dict_s2)\\n\\n    left, right = 0, 0\\n    formed_chars = 0\\n\\n    window_counts = {}\\n\\n    min_len = float('inf')\\n    min_window = ''\\n\\n    while right < len(s1):\\n        character = s1[right]\\n        window_counts[character] = window_counts.get(character, 0) + 1\\n\\n        if character in dict_s2 and window_counts[character] == dict_s2[character]:\\n            formed_chars += 1\\n\\n        while left <= right and formed_chars == required_chars:\\n            character = s1[left]\\n            if right - left + 1 < min_len:\\n                min_len = right - left + 1\\n                min_window = s1[left:right + 1]\\n\\n            window_counts[character] -= 1\\n            if character in dict_s2 and window_counts[character] < dict_s2[character]:\\n                formed_chars -= 1\\n\\n            left += 1\\n\\n        right += 1\\n\\n    return min_window\", \"tests\": [\"assert min_window_substring('ADOBECODEBANC', 'ABC') == 'BANC'\", \"assert min_window_substring('', 'A') == ''\", \"assert min_window_substring('A', 'AA') == '',\", \"assert min_window_substring('hello', 'lo') == 'lo'\"]}"
}