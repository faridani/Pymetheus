{
    "model": "llama3:latest",
    "response": "{\"title\": \"Hard: Maximum Sum of Subarray with Pruning\", \"description\": \"#### Problem\\nYou are given a binary tree where each node has an integer value. Write a function `max_sum_subarray_pruned` that returns the maximum sum of any subarray (contiguous sequence of nodes) in the tree, where the sum is calculated by multiplying all the node values together.\\n\\n#### Constraints\\n- The tree may have cycles.\\n- Node values are integers.\\n- You can prune some nodes from the tree to get a valid subarray. A subarray is considered valid if it contains no cycles (i.e., no node with an edge back to its parent).\\n\\n#### Function Signature\\n```python\\ndef max_sum_subarray_pruned(root: 'TreeNode') -> int:\\n```\\n\\n#### Input\\n- `root` (TreeNode): The root of the binary tree.\\n\\n#### Output\\n- Returns the maximum sum of any valid subarray in the tree.\", \"code\": \"\", \"\\nclass TreeNode:\\n    def __init__(self, val=0, left=None, right=None):\\n        self.val = val\\n        self.left = left\\n        self.right = right\\n\\ndef max_sum_subarray_pruned(root: 'TreeNode') -> int:\\n    max_sum = 0\\n\\n    def dfs(node):\\n        nonlocal max_sum\\n        if node is None:\\n            return 1\\n        curr_sum = 1\\n        stack = [(node, curr_sum)]\\n        while stack:\\n            node, curr_sum = stack.pop()\\n            max_sum = max(max_sum, curr_sum)\\n            if node.left:\\n                stack.append((node.left, curr_sum * node.left.val))\\n            if node.right:\\n                stack.append((node.right, curr_sum * node.right.val))\\n        return 1\\n\\n    dfs(root)\\n    return max_sum\": \"\", \"tests\": [\"assert max_sum_subarray_pruned(TreeNode(5,None,None)) == 0\", \"assert max_sum_subarray_pruned(TreeNode(3,TreeNode(2,None,None),TreeNode(-1,None,None))) == 6\", \"assert max_sum_subarray_pruned(TreeNode(10, TreeNode(7, TreeNode(4, None, None), TreeNode(9, None, None)), TreeNode(11, None, TreeNode(12, None, None))))) == 240\"]}"
}