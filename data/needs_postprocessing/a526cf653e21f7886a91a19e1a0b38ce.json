"{'model': 'qwen2:7b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Unique Binary Search Trees II\\\\\", \\\\\"description\\\\\": \\\\\"\\\\\\\\nA binary search tree (BST) is a binary tree where for every node, all elements in its left subtree are less than the node\\'s value and all elements in its right subtree are greater. Given an integer n, return all possible unique BSTs that store values 1 to n.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef generate_trees(n: int) -> List[TreeNode]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `n` (int): A non-negative integer representing the number of nodes in the tree.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of all possible unique BSTs for that number of nodes, with each BST represented by a TreeNode object. \\\\\\\\n\\\\\\\\nThe TreeNode class should have three attributes: val to store the node\\'s value as an integer, left to store its left child (another TreeNode), and right to store its right child.\\\\\\\\n\\\\\\\\n**Example**\\\\\\\\n- Input: `n = 3`\\\\\\\\n- Output: `[ [1, null, 2, null, 3], [3, 2, null, 1], [3, null, 1, null, 2] ]` (All possible unique binary search trees with three nodes)\\\\\\\\n\\\\\\\\n**Constraints**\\\\\\\\n- The number of nodes is in the range [0, n].\\\\\\\\n\\\\\\\\n**Hints**\\\\\\\\n- Think about all permutations of numbers and their combinations.\\\\\\\\n- You might need to use recursion for tree generation.\\\\\", \\\\\"code\\\\\": \\\\\"from typing import List, Optional\\\\\\\\n\\\\\\\\nclass TreeNode:\\\\\\\\n    def __init__(self, val=0, left=None, right=None):\\\\\\\\n        self.val = val\\\\\\\\n        self.left = left\\\\\\\\n        self.right = right\\\\\\\\n\\\\\\\\n\\\\\\\\ndef generate_trees(n: int) -> List[Optional[\\'TreeNode\\']]:// Write your code here\\\\\\\\n\\\\\", \\\\\"tests\\\\\": [\\\\\"assert len(generate_trees(1)) == 1\\\\\", \\\\\"assert set([node.val for node in generate_trees(2)]) == {3, 4, 5}\\\\\", \\\\\"assert all(node.left is None or node.left.val < node.val and node.right is None or node.right.val > node.val for node in generate_trees(3))\\\\\"] }\"'}"