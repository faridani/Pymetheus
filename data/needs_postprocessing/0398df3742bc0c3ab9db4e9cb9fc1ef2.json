{
    "model": "llama3:latest",
    "response": "{\"title\": \"Easy: Word Search\", \"description\": \"Write a function `find_words` that takes a 2D list of characters and a set of target words as input, and returns the indices of all occurrences of those target words in the grid.\\n\\n#### Function Signature\\n```python\\ndef find_words(grid: list[list[str]], words: set[str]) -> dict:\\n```\\n\\n#### Input\\n- `grid` (list[list[str]]): A 2D list of characters, where each character is either a letter or a space.\\n- `words` (set[str]): A set of target words to find in the grid.\\n\\n#### Output\\n- Returns a dictionary where each key is a target word and its corresponding value is a list of tuples containing the row and column indices of all occurrences of that word in the grid.\", \"code\": \"\\nimport re\\n\\ndef find_words(grid: list[list[str]], words: set[str]) -> dict:\\n    def find_word(word: str) -> list[tuple]:\\n        found_indices = []\\n        for i, row in enumerate(grid):\\n            for j, char in enumerate(row):\\n                if ''.join(char for char in grid[i][j:j+len(word)]).lower() == word.lower():\\n                    found_indices.append((i, j))\\n        return found_indices\\n\\n    result = {word: find_word(word) for word in words}\\n    return result\", \"tests\": [\"assert len(find_words([['a', 'b'], ['c', 'd']], {'abc', 'def'})) == 2 and all(len(x) == 4 or x[1] - x[0] > 0 for x in find_words([['a', 'b'], ['c', 'd']], {'abc', 'def'}).values())\", \"assert len(find_words([['h', 'e', 'l', 'o'], ['w', 'o', 'r', 'l', 'd']]), {'hello', 'world'})) == 2 and all(len(x) > 0 for x in find_words([['h', 'e', 'l', 'o'], ['w', 'o', 'r', 'l', 'd']], {'hello', 'world'}).values())\", \"assert len(find_words([['a', 'b', 'c']]*10, {'abc'})) == 1 and find_words([['a', 'b', 'c']]*10, {'abc'}) == {'abc': [(0, 2)]}\", \"assert len(find_words([], {'word'})) == 0\"]}"
}