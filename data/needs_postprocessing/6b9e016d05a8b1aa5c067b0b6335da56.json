{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Finding Duplicate Islands\\\", \\\"description\\\": \\\"A geography teacher has a map with multiple islands. He wants to find the number of duplicate islands that appear on different maps. The input is a list of 2D lists, where each inner list represents an island. Write a function `find_duplicate_islands` that takes a list of 2D lists as input and returns the total count of duplicate islands.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef find_duplicate_islands(islands: List[List[int]]) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `islands` (List[List[int]]): A list of 2D lists, where each inner list represents an island. Each element in the inner list is either 0 (water) or 1 (land).\\\\n\\\\n#### Output\\\\n- Returns the total count of duplicate islands.\\\\n\\\", \\\"code\\\": \\\"from typing import List\\\\n\\\\ndef find_duplicate_islands(islands: List[List[int]]) -> int:\\\\n    # Initialize a set to store unique island configurations\\\\n    unique_islands = set()\\\\n    # Initialize a variable to store the count of duplicate islands\\\\n    duplicate_count = 0\\\\n\\\\n    for island in islands:\\\\n        # Convert the island configuration to a tuple and add it to the set\\\\n        unique_islands.add(tuple(island))\\\\n\\\\n    # Iterate over the set of unique islands\\\\n    for island in unique_islands:\\\\n        # Count the number of occurrences of each unique island in the input list\\\\n        count = islands.count(list(island))\\\\n        # If an island appears more than once, increment the duplicate count\\\\n        if count > 1:\\\\n            duplicate_count += 1\\\\n\\\\n    return duplicate_count\\\", \\\"tests\\\": [\\\"assert find_duplicate_islands([[0, 0, 1], [0, 1, 1], [1, 1, 1]]) == 2\\\", \\\"assert find_duplicate_islands([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) == 3\\\", \\\"assert find_duplicate_islands([[0, 1], [1, 0], [0, 1], [1, 0]]) == 2\\\"] }\""
}