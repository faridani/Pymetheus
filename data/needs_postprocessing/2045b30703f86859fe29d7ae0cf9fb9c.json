"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"\\'Mad Libs Parser\\' (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"In the popular game of Mad Libs, players fill out a blank story with words from different parts of speech. Write a function `parse_madlib` that takes in a sentence and returns a dictionary where each key is the type of word to fill in (e.g., \\'noun\\', \\'verb\\', \\'adjective\\'), and the value is a list of all instances of that word type in the sentence.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef parse_madlib(sentence: str) -> dict:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `sentence` (str): A string containing multiple words, some of which will be placeholders for different parts of speech.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a dictionary where each key is the type of word to fill in (e.g., \\'noun\\', \\'verb\\'), and the value is a list of all instances of that word type in the sentence.\\\\\\\\n\\\\\\\\n#### Constraints and hints:\\\\\\\\n- The placeholders for different parts of speech will be surrounded by square brackets, e.g. \\'[noun]\\'.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def parse_madlib(sentence: str) -> dict:\\\\\\\\n    # Initialize an empty dictionary to store the filled words\\\\\\\\n    result = {\\\\\\\\n        \\'noun\\': [],\\\\\\\\n        \\'verb\\': [],\\\\\\\\n        \\'adjective\\': [],\\\\\\\\n        \\'adverb\\': []\\\\\\\\n    }\\\\\\\\n    \\\\\\\\n    # Loop through each word in the sentence\\\\\\\\n    for word in sentence.split():\\\\\\\\n        # Check if the word starts and ends with square brackets\\\\\\\\n        if word[0] == \\'[\\' and word[-1] == \\']\\':\\\\\\\\n            # Determine the type of the placeholder based on its first character\\\\\\\\n            key = word[1] + \\'s\\' if word[1].isupper() else word[1:2] + \\'s\\'\\\\\\\\n            \\\\\\\\n            # Add the placeholder to the corresponding list in the result dictionary\\\\\\\\n            result[key].append(word[1:-1])\\\\\\\\n    \\\\\\\\n    # Return the filled dictionary\\\\\\\\n    return result\\\\\", \\\\\"tests\\\\\": [\\\\\"assert parse_madlib(\\'The quick brown [adjective] fox jumps over the lazy [adverb] dog.\\') == {\\'adjective\\': [\\'brown\\'], \\'adverb\\': [\\'lazy\\']}\\\\\", \\\\\"assert parse_madlib(\\'The brave knight [noun] up [verb] the hill and found a [noun].\\') == {\\'noun\\': [\\'knight\\', \\'hill\\', \\'treasure\\'], \\'verb\\': [\\'up\\']}\\\\\"] }\"'}"