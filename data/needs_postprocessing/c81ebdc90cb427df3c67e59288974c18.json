{
    "model": "codestral:22b",
    "response": "\"{ \\\"title\\\": \\\"Hard: Word Ladder\\\", \\\"description\\\": \\\"Given two words (beginWord and endWord), and a dictionary's word list, find the length of shortest transformation sequence from beginWord to endWord such that:\\\\n\\\\n1. Only one letter can be changed at a time.\\\\n2. Each transformed word must exist in the word list. Note that beginWord is not a transformed word.\\\\n\\\\nYou need to return the length of the shortest transformation sequence, or 0 if no such sequence exists.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef ladderLength(beginWord: str, endWord: str, wordList: List[str]) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `beginWord` (str): The initial word.\\\\n- `endWord` (str): The target word.\\\\n- `wordList` (List[str]): A list of words that can be used in the transformation.\\\\n\\\\n#### Output\\\\n- Returns the length of the shortest transformation sequence, or 0 if no such sequence exists.\\\\n\\\", \\\"code\\\": \\\"from collections import deque\\\\ndef ladderLength(beginWord: str, endWord: str, wordList: List[str]) -> int:\\\\n    if endWord not in wordList: return 0\\\\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\\\\n    wordSet = set(wordList)\\\\n    queue = deque([(beginWord, 1)])\\\\n    while queue:\\\\n        word, length = queue.popleft()\\\\n        for i in range(len(word)):\\\\n            for c in alphabet:\\\\n                next_word = word[:i] + c + word[i+1:]\\\\n                if next_word == endWord: return length + 1\\\\n                if next_word in wordSet:\\\\n                    queue.append((next_word, length + 1))\\\\n                    wordSet.remove(next_word)\\\\n    return 0\\\\n\\\", \\\"tests\\\": [\\\"assert ladderLength(\\\\\\\"hit\\\\\\\", \\\\\\\"cog\\\\\\\", [\\\\\\\"hot\\\\\\\",\\\\\\\"dot\\\\\\\",\\\\\\\"dog\\\\\\\",\\\\\\\"lot\\\\\\\",\\\\\\\"log\\\\\\\",\\\\\\\"cog\\\\\\\"]) == 5\\\", \\\"assert ladderLength(\\\\\\\"hit\\\\\\\", \\\\\\\"cog\\\\\\\", [\\\\\\\"hot\\\\\\\",\\\\\\\"dot\\\\\\\",\\\\\\\"dog\\\\\\\",\\\\\\\"lot\\\\\\\",\\\\\\\"log\\\\\\\"]) == 0\\\"] }\""
}