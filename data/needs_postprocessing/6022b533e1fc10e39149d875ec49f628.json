"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard - Find All Valid IP Addresses\\\\\", \\\\\"description\\\\\": \\\\\"Given a string of digits, find all possible valid IP addresses that can be formed. A valid IP address consists of four integers separated by dots (.), each integer being between 0 and 255 (inclusive). Integers cannot have leading zeros except for the number 0 itself.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef restore_ip_addresses(s: str) -> list[str]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s` (str): A string of digits.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of all possible valid IP addresses that can be formed from the input string. \\\\\", \\\\\"code\\\\\": \\\\\"def restore_ip_addresses(s: str) -> list[str]:\\\\\\\\n    result = []\\\\\\\\n    \\\\\\\\n    def backtrack(i, dots, current_ip):\\\\\\\\n        if dots == 4 and i == len(s):\\\\\\\\n            result.append(\\'.\\'.join(current_ip))\\\\\\\\n            return\\\\\\\\n\\\\\\\\n        if dots > 4 or i == len(s):\\\\\\\\n            return\\\\\\\\n\\\\\\\\n        for j in range(i + 1, min(i + 4, len(s) + 1)):\\\\\\\\n            segment = s[i:j]\\\\\\\\n            if (segment[0] == \\'0\\' and len(segment) > 1) or int(segment) > 255:\\\\\\\\n                continue\\\\\\\\n            current_ip.append(segment)\\\\\\\\n            backtrack(j, dots + 1, current_ip)\\\\\\\\n            current_ip.pop()\\\\\\\\n\\\\\\\\n    backtrack(0, 0, [])\\\\\\\\n    return result\\\\\\\\n\\\\\", \\\\\"tests\\\\\": [\\\\\"assert sorted(restore_ip_addresses(\\\\\\\\\\\\\"25525511135\\\\\\\\\\\\\")) == sorted([\\\\\\\\\\\\\"255.255.11.135\\\\\\\\\\\\\", \\\\\\\\\\\\\"255.255.111.35\\\\\\\\\\\\\"])\\\\\", \\\\\"assert sorted(restore_ip_addresses(\\\\\\\\\\\\\"0000\\\\\\\\\\\\\")) == sorted([\\\\\\\\\\\\\"0.0.0.0\\\\\\\\\\\\\"])\\\\\", \\\\\"assert restore_ip_addresses(\\\\\\\\\\\\\"1111\\\\\\\\\\\\\") == [\\\\\\\\\\\\\"1.1.1.1\\\\\\\\\\\\\"]\\\\\", \\\\\"assert restore_ip_addresses(\\\\\\\\\\\\\"010010\\\\\\\\\\\\\") == [\\\\\\\\\\\\\"0.10.0.10\\\\\\\\\\\\\", \\\\\\\\\\\\\"0.100.1.0\\\\\\\\\\\\\"]\\\\\"] }\"'}"