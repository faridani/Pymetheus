"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard - Balanced Brackets\\\\\", \\\\\"description\\\\\": \\\\\"Given a string consisting of brackets (\\\\\\\\\\\\\"(\\\\\\\\\\\\\", \\\\\\\\\\\\\")\\\\\\\\\\\\\", \\\\\\\\\\\\\"[\\\\\\\\\\\\\", \\\\\\\\\\\\\"]\\\\\\\\\\\\\", \\\\\\\\\\\\\"{\\\\\\\\\\\\\", \\\\\\\\\\\\\"}\\\\\\\\\\\\\"), determine if the input string has balanced brackets. A string has balanced brackets if:\\\\\\\\n\\\\\\\\n1. All opening brackets have corresponding closing brackets of the same type.\\\\\\\\n2. The brackets are properly nested (e.g., \\\\\\\\\\\\\"([{}])\\\\\\\\\\\\\" is balanced, but \\\\\\\\\\\\\"([)]\\\\\\\\\\\\\" or \\\\\\\\\\\\\"({[}]\\\\\\\\\\\\\" are not).\\\\\\\\n\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef has_balanced_brackets(s: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s` (str): A string consisting of the following characters: \\\\\\\\\\\\\"(\\\\\\\\\\\\\", \\\\\\\\\\\\\")\\\\\\\\\\\\\", \\\\\\\\\\\\\"[\\\\\\\\\\\\\", \\\\\\\\\\\\\"]\\\\\\\\\\\\\", \\\\\\\\\\\\\"{\\\\\\\\\\\\\", \\\\\\\\\\\\\"}\\\\\\\\\\\\\". \\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the input string has balanced brackets, `False` otherwise.\\\\\", \\\\\"code\\\\\": \\\\\"def has_balanced_brackets(s: str) -> bool:\\\\\\\\n    stack = []\\\\\\\\n    bracket_pairs = {\\')\\': \\'(\\', \\']\\': \\'[\\', \\'}\\': \\'{\\'}\\\\\\\\n\\\\\\\\n    for char in s:\\\\\\\\n        if char in bracket_pairs.values():  # Opening Bracket\\\\\\\\n            stack.append(char)\\\\\\\\n        elif char in bracket_pairs.keys(): # Closing Bracket\\\\\\\\n            if not stack or stack.pop() != bracket_pairs[char]:\\\\\\\\n                return False\\\\\\\\n    return len(stack) == 0 \\\\\", \\\\\"tests\\\\\": [\\\\\"assert has_balanced_brackets(\\\\\\\\\\\\\"()\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert has_balanced_brackets(\\\\\\\\\\\\\"[]{}\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert has_balanced_brackets(\\\\\\\\\\\\\"([{}])\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert has_balanced_brackets(\\\\\\\\\\\\\"[()]\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert has_balanced_brackets(\\\\\\\\\\\\\"((())))\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert has_balanced_brackets(\\\\\\\\\\\\\"({[}]\\\\\\\\\\\\\") == False\\\\\", \\\\\"assert has_balanced_brackets(\\\\\\\\\\\\\"([)]\\\\\\\\\\\\\") == False\\\\\", \\\\\"assert has_balanced_brackets(\\\\\\\\\\\\\"{[]}\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert has_balanced_brackets(\\\\\\\\\\\\\"{{[[(())]]}}\\\\\\\\\\\\\") == True\\\\\"] }\"'}"