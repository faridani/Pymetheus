{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Hard: Validating Sudoku\\\", \\\"description\\\": \\\"Write a function `is_valid_sudoku` that checks if a given 9x9 grid of integers is valid. A sudoku puzzle is considered valid if it satisfies the following conditions:\\\\n\\\\n- Each row, column, and 3x3 sub-grid contains each number from 1 to 9 exactly once.\\\\n- No two adjacent cells can contain the same number.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef is_valid_sudoku(grid: list) -> bool:\\\\n```\\\\n\\\\n#### Input\\\\n- `grid` (list): A 9x9 grid of integers, where each integer represents a cell in the sudoku puzzle. The grid may contain zeros to represent empty cells.\\\\n\\\\n#### Output\\\\n- Returns `True` if the input grid is valid, `False` otherwise.\\\\n\\\", \\\"code\\\": \\\"def is_valid_sudoku(grid: list) -> bool:\\\\n    # Check rows and columns for validity\\\\n    for i in range(9):\\\\n        row = [cell for cell in grid[i] if cell != 0]\\\\n        col = [grid[j][i] for j in range(9) if grid[j][i] != 0]\\\\n        if len(row) != 9 or len(set(row)) != 9:\\\\n            return False\\\\n        if len(col) != 9 or len(set(col)) != 9:\\\\n            return False\\\\n    # Check sub-grids for validity\\\\n    for i in range(3):\\\\n        for j in range(3):\\\\n            sub_grid = [grid[i*3+k][j*3+m] for k in range(3) for m in range(3)]\\\\n            if len([cell for cell in sub_grid if cell != 0]) != 9 or len(set(sub_grid)) != 9:\\\\n                return False\\\\n    # Check adjacent cells for validity\\\\n    for i in range(9):\\\\n        for j in range(9):\\\\n            if grid[i][j] != 0 and (i % 3 == 1 and j % 3 in [0, 2]) or (i % 3 in [0, 2] and j % 3 in [0, 2]):\\\\n                if any(grid[k][l] == grid[i][j] for k in range(max(0, i-1), min(i+2, 9)) for l in range(max(0, j-1), min(j+2, 9))):\\\\n                    return False\\\\n    return True\\\", \\\"tests\\\": [\\\"assert is_valid_sudoku([[5,3,4,6,7,8,9,1,2],[6,7,8,9,1,2,3,4,5],[2,1,9,8,4,3,5,6,7],[8,5,9,7,6,3,4,2,1],[4,2,6,3,1,5,7,9,8],[1,4,3,9,7,6,2,8,5],[3,5,7,8,2,4,9,1,6],[9,6,1,5,3,7,4,2,8],[7,8,2,4,9,1,6,3,5]] == True\\\", \\\"assert is_valid_sudoku([[1,2,3],[4,5,6],[7,8,0]]) == False\\\", \\\"assert is_valid_sudoku([[5,3,4,6,7,8,9,1,2],[6,7,8,9,1,2,3,4,5],[2,1,9,8,4,3,5,6,7],[8,5,9,7,6,3,4,2,1],[4,2,6,3,1,5,7,9,8],[1,4,3,9,7,6,2,8,5],[3,5,7,8,2,4,9,1,6],[9,6,1,5,3,7,4,2,8],[7,8,2,4,9,1,6,3,5]]) == True\\\"] }\""
}