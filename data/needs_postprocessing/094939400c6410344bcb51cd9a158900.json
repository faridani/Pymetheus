"{'model': 'mistral:latest', 'response': '{\"title\": \"\\'Anagram Detector (Hard)\\'\", \"description\": \"An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a function `is_anagram` that checks if two given strings are anagrams.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef is_anagram(s1: str, s2: str) -> bool:\\\\n```\\\\n\\\\n#### Input\\\\n- `s1`, `s2` (str): Two strings that may contain letters (case insensitive). They can have spaces and punctuation.\\\\n\\\\n#### Output\\\\n- Returns `True` if the two input strings are anagrams, `False` otherwise.\", \"code\": \"import string\\\\ndef is_anagram(s1: str, s2: str) -> bool:\\\\n    # Remove non-alphabetic characters and convert to lowercase\\\\ns1 = \\'\\'.join(char for char in s1 if char in string.ascii_letters)\\\\ns1 = s1.lower()\\\\ns2 = \\'\\'.join(char for char in s2 if char in string.ascii_letters)\\\\ns2 = s2.lower()\\\\n\\\\n    # Check if both strings have the same length and sorted letters are equal\\\\nreturn len(s1) == len(s2) and sorted(s1) == sorted(s2)\", \"tests\": [\"assert is_anagram(\\\\\"listen\\\\\", \\\\\"silent\\\\\") == True\", \"assert is_anagram(\\\\\"python\\\\\", \\\\\"typhon\\\\\") == False\", \"assert is_anagram(\\\\\"A man, a plan, a canal, Panama\\\\\", \\\\\"amanaplanacanalpanama\\\\\") == True\", \"assert is_anagram(\\\\\"No \\'x\\' in Nixon\\\\\", \\\\\"Check this out: xisc+niptnx\\\\\") == True\"]}'}"