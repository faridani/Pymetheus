"{'model': 'llama3:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Sudoku Solver\\\\\", \\\\\"description\\\\\": \\\\\"Sudoku is a 9x9 grid filled with numbers from 1 to 9, where some cells are already filled and others are blank. A valid Sudoku configuration must have exactly one solution. Write a function `solve_sudoku` that takes a partially filled-in Sudoku grid as input and returns the solution if it exists, or None if no solution exists.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef solve_sudoku(grid: list[list[int]]) -> list[list[int]] | None:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `grid` (list[list[int]]): A 9x9 grid where some cells contain numbers from 1 to 9, and others are blank (represented by the value 0).\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a 9x9 grid representing the unique solution if one exists. If no solution exists, returns None.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"import copy\\\\\\\\n\\\\\\\\ndef solve_sudoku(grid: list[list[int]]) -> list[list[int]] | None:\\\\\\\\n    def is_valid(board: list[list[int]], row: int, col: int, num: int) -> bool:\\\\\\\\n        for x in range(9):\\\\\\\\n            if board[row][x] == num:\\\\\\\\n                return False\\\\\\\\n        for x in range(9):\\\\\\\\n            if board[x][col] == num:\\\\\\\\n                return False\\\\\\\\n        start_row = row - row % 3\\\\\\\\n        start_col = col - col % 3\\\\\\\\n        for i in range(3):\\\\\\\\n            for j in range(3):\\\\\\\\n                if board[i + start_row][j + start_col] == num:\\\\\\\\n                    return False\\\\\\\\n        return True\\\\\\\\n    def solve(board: list[list[int]]) -> bool:\\\\\\\\n        for i in range(9):\\\\\\\\n            for j in range(9):\\\\\\\\n                if board[i][j] == 0:\\\\\\\\n                    for num in range(1, 10):\\\\\\\\n                        if is_valid(board, i, j, num):\\\\\\\\n                            board[i][j] = num\\\\\\\\n                            if solve(board):\\\\\\\\n                                return True\\\\\\\\n                            board[i][j] = 0\\\\\\\\n                    return False\\\\\\\\n        return True\\\\\\\\n    def solve_sudoku(grid: list[list[int]]) -> list[list[int]] | None:\\\\\\\\n        if not solve(copy.deepcopy(grid)):\\\\\\\\n            return None\\\\\\\\n        return grid\\\\\\\\n\\\\\", \\\\\"tests\\\\\": [\\\\\"assert solve_sudoku([[], [], [], [], [5, 3], [], [], [], []]) == [[5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 8, 9, 1, 2, 3, 4, 5], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [5, 3, 2, 1, 4, 6, 9, 7, 8], [2, 8, 4, 7, 9, 1, 3, 6, 5]]\\\\\", \\\\\"assert solve_sudoku([[0 for _ in range(9)] for _ in range(9)]) == None\\\\\", \\\\\"assert solve_sudoku([[0 for _ in range(9)] for _ in range(9)][:4] + [[5, 3], [], [], []]) == [[5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 8, 9, 1, 2, 3, 4, 5], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [5, 3, 2, 1, 4, 6, 9, 7, 8], [2, 8, 4, 7, 9, 1, 3, 6, 5]]\\\\\", \\\\\"assert solve_sudoku([[0 for _ in range(9)] for _ in range(9)][:3] + [[5, 3], [], []]) == None\\\\\"] }\"'}"