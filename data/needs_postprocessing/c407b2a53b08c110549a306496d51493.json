{
    "model": "llama3:latest",
    "response": "{\"title\": \"Maximum Sum of Distinct Subarrays\", \"description\": \"Given an array of integers, find the maximum sum that can be obtained by selecting at most two distinct subarrays from it. Each subarray must contain at least one element. Note that each element can only be part of one subarray.\\n\\n#### Function Signature\\n```python\\ndef max_sum_of_distinct_subarrays(arr: list[int]) -> int:\\n```\\n\\n#### Input\\n- `arr` (list[int]): A list of integers.\\n\\n#### Output\\n- Returns the maximum sum that can be obtained by selecting at most two distinct subarrays from the input array.\", \"code\": \"\", \"\\nimport heapq\\n\\ndef max_sum_of_distinct_subarrays(arr: list[int]) -> int:\\n    # Sort the array in descending order\\n    arr.sort(reverse=True)\\n\\n    # Initialize a heap with negative values to simulate a priority queue\\n    heap = [-num for num in arr]\\n\\n    # Initialize the maximum sum and the sums of the first two subarrays\\n    max_sum = 0\\n    sums = [0, 0]\\n\\n    # Pop elements from the heap until it's empty or we have the desired number of subarrays\\n    while len(heap) > 1:\\n        # Extract the largest two negative values (i.e., the smallest numbers in the array)\\n        a = -heapq.heappop(heap)\\n        b = -heapq.heappop(heap)\\n\\n        # Update the maximum sum and the sums of the first two subarrays\\n        max_sum += a + b\\n        sums[0] = a\\n        sums[1] = b\\n\\n    # Return the maximum sum\\n    return max_sum\": \", \\n'tests': [\\\"assert max_sum_of_distinct_subarrays([10, 20, 30]) == 60\\\", \\\"assert max_sum_of_distinct_subarrays([-1, -2, -3, -4, -5]) == 0\\\", \\\"assert max_sum_of_distinct_subarrays([1, 2, 3, 4, 5]) == 15\\\"]\"}"
}