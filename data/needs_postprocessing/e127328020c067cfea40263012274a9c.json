"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Finder (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_anagrams(words: List[str]) -> Dict[str, List[str]]` that takes a list of words and returns a dictionary where each key is a word and the value is a list of its anagrams.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of strings that only contain lowercase alphabetic characters.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a dictionary where each key is a word and the value is a list of its anagrams.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from collections import Counter, defaultdict\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n    # Create a counter for each word to count its characters\\\\\\\\n    anagram_count = defaultdict(Counter)\\\\\\\\n\\\\\\\\n    # Iterate through the list of words and update the counter for each word\\\\\\\\n    for word in words:\\\\\\\\n        anagram_count[word].update(list(word))\\\\\\\\n\\\\\\\\n    # Iterate through the counters, if two counters have the same total count then they are anagrams\\\\\\\\n    result = {} \\\\\\\\n    for key, value in anagram_count.items():\\\\\\\\n        total = sum(value.values())\\\\\\\\n        # If the total count is 0, it means we have found all anagrams for this word and can move on to the next one\\\\\\\\n        if total == 0:\\\\\\\\n            continue\\\\\\\\n        # Find words that have the same total count and are not the current word itself\\\\\\\\n        for key2, value2 in anagram_count.items():\\\\\\\\n            if key != key2 and sum(value2.values()) == total and dict(value) == dict(value2):\\\\\\\\n                result.setdefault(key, []).append(key2)\\\\\\\\n    return result\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\", \\\\\\\\\\\\\"enlist\\\\\\\\\\\\\"]) == {\\\\\\\\\\\\\"listen\\\\\\\\\\\\\": [\\\\\\\\\\\\\"enlist\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\"], \\\\\\\\\\\\\"silent\\\\\\\\\\\\\": [], \\\\\\\\\\\\\"enlist\\\\\\\\\\\\\": []}\\\\\", \\\\\"assert find_anagrams([\\\\\\\\\\\\\"rat\\\\\\\\\\\\\", \\\\\\\\\\\\\"car\\\\\\\\\\\\\", \\\\\\\\\\\\\"tarc\\\\\\\\\\\\\", \\\\\\\\\\\\\"art\\\\\\\\\\\\\"]) == {\\\\\\\\\\\\\"rat\\\\\\\\\\\\\": [\\\\\\\\\\\\\"tarc\\\\\\\\\\\\\", \\\\\\\\\\\\\"art\\\\\\\\\\\\\"], \\\\\\\\\\\\\"car\\\\\\\\\\\\\": [], \\\\\\\\\\\\\"tarc\\\\\\\\\\\\\": [\\\\\\\\\\\\\"rat\\\\\\\\\\\\\"], \\\\\\\\\\\\\"art\\\\\\\\\\\\\": [\\\\\\\\\\\\\"rat\\\\\\\\\\\\\"]}\\\\\", \\\\\"assert find_anagrams([\\\\\\\\\\\\\"hello\\\\\\\\\\\\\", \\\\\\\\\\\\\"olleh\\\\\\\\\\\\\", \\\\\\\\\\\\\"world\\\\\\\\\\\\\", \\\\\\\\\\\\\"dlrow\\\\\\\\\\\\\"]) == {\\\\\\\\\\\\\"hello\\\\\\\\\\\\\": [\\\\\\\\\\\\\"olleh\\\\\\\\\\\\\"], \\\\\\\\\\\\\"world\\\\\\\\\\\\\": [\\\\\\\\\\\\\"dlrow\\\\\\\\\\\\\"], \\\\\\\\\\\\\"dlrow\\\\\\\\\\\\\": [\\\\\\\\\\\\\"world\\\\\\\\\\\\\"]}\\\\\"] }\"'}"