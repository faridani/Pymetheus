{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Easy: Maximum Sum Subarray\\\", \\\"description\\\": \\\"Given an array of integers, find the maximum sum of a subarray (a contiguous part of the array). For example, for the array [1, -2, 3, 10, -4, 7, 2], the maximum sum of a subarray is 18 (which can be obtained by taking the subarray [10, -4, 7, 2]).\\\\n\\\\n#### Function Signature\\\\n```\\\\ndef max_sum_subarray(arr: list[int)) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `arr` (list[int]): A list of integers.\\\\n\\\\n#### Output\\\\n- Returns the maximum sum of a subarray.\\\", \\\"code\\\": \\\"def max_sum_subarray(arr: list[int)) -> int:\\\\n    if not arr:\\\\n        return 0\\\\n    max_sum = current_sum = arr[0]\\\\n    for num in arr[1:]:\\\\n        current_sum = max(num, current_sum + num)\\\\n        max_sum = max(max_sum, current_sum)\\\\n    return max_sum\\\", \\\"tests\\\": [\\\"assert max_sum_subarray([1, -2, 3, 10, -4, 7, 2]) == 18\\\", \\\"assert max_sum_subarray([-2, 1, -7, 15, 0, 9, 5, 8]) == 24\\\"] }\""
}