{
    "model": "gemma2:27b-instruct-q5_K_S",
    "response": "\"{ \\\"title\\\": \\\"Hard: Longest Subarray with K Distinct Elements\\\", \\\"description\\\": \\\"Given an array of integers `nums` and an integer `k`, find the length of the longest subarray containing at most `k` distinct elements.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef longest_subarray_with_k_distinct(nums: list[int], k: int) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `nums`: A list of integers. \\\\n- `k`: An integer representing the maximum number of distinct elements allowed in the subarray.\\\\n\\\\n#### Output\\\\n- Returns the length of the longest subarray containing at most `k` distinct elements. Return 0 if no such subarray exists.\\\", \\\"code\\\": \\\"def longest_subarray_with_k_distinct(nums: list[int], k: int) -> int:\\\\n    if k == 0:\\\\n        return 0\\\\n    start = 0\\\\n    max_length = 0\\\\n    char_counts = {}\\\\n    for end in range(len(nums)):\\\\n        char_counts[nums[end]] = char_counts.get(nums[end], 0) + 1\\\\n        while len(char_counts) > k:\\\\n            char_counts[nums[start]] -= 1\\\\n            if char_counts[nums[start]] == 0:\\\\n                del char_counts[nums[start]]\\\\n            start += 1\\\\n        max_length = max(max_length, end - start + 1)\\\\n    return max_length\\\", \\\"tests\\\": [\\\"assert longest_subarray_with_k_distinct([1,2,3,4,5], 3) == 3\\\", \\\"assert longest_subarray_with_k_distinct([1,1,1,2,3], 2) == 4\\\", \\\"assert longest_subarray_with_k_distinct([1,2,1,2,3], 2) == 4\\\", \\\"assert longest_subarray_with_k_distinct([], 0) == 0\\\", \\\"assert longest_subarray_with_k_distinct([1,2,3], 0) == 0\\\"] }\""
}