"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard:  Matrix Pathfinding\\\\\", \\\\\"description\\\\\": \\\\\"You are given a 2D matrix representing a grid. Each cell in the matrix can be either 0 (representing an empty cell) or 1 (representing an obstacle). Your task is to write a function `find_shortest_path` that determines the shortest path from the top-left corner (0, 0) to the bottom-right corner (m - 1, n - 1) of the matrix. You can only move one cell at a time in four directions: up, down, left, and right. If no path exists, return -1.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_shortest_path(matrix: list[list[int]]) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `matrix` (list[list[int]]): A 2D matrix representing the grid. The matrix will have at least one row and one column.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns an integer representing the length of the shortest path from the top-left corner to the bottom-right corner. If no path exists, returns -1.\\\\\", \\\\\"code\\\\\": \\\\\"from collections import deque\\\\\\\\n\\\\\\\\ndef find_shortest_path(matrix: list[list[int]]) -> int:\\\\\\\\n    m = len(matrix)\\\\\\\\n    n = len(matrix[0])\\\\\\\\n    if matrix[0][0] == 1 or matrix[m - 1][n - 1] == 1:\\\\\\\\n        return -1\\\\\\\\n\\\\\\\\n    queue = deque([(0, 0, 0)])  # (row, col, path_length)\\\\\\\\n    visited = set([(0, 0)])\\\\\\\\n\\\\\\\\n    while queue:\\\\\\\\n        row, col, path_length = queue.popleft()\\\\\\\\n        if row == m - 1 and col == n - 1:\\\\\\\\n            return path_length\\\\\\\\n\\\\\\\\n        for dr, dc in [(0, 1), (1, 0), (-1, 0), (0, -1)]:\\\\\\\\n            new_row = row + dr\\\\\\\\n            new_col = col + dc\\\\\\\\n            if (0 <= new_row < m and 0 <= new_col < n and \\\\\\\\n                matrix[new_row][new_col] == 0 and \\\\\\\\n                (new_row, new_col) not in visited):\\\\\\\\n                queue.append((new_row, new_col, path_length + 1))\\\\\\\\n                visited.add((new_row, new_col))\\\\\\\\n    return -1\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_shortest_path([[0, 0, 0],[0, 1, 0],[0, 0, 0]]) == 4\\\\\", \\\\\"assert find_shortest_path([[0, 1, 0],[0, 1, 0],[0, 0, 0]]) == -1\\\\\", \\\\\"assert find_shortest_path([[0, 0, 0],[1, 1, 0],[0, 0, 0]]) == 5\\\\\"] }\"'}"