{
    "model": "llama3:latest",
    "response": "{\"title\": \"Hard: Minimum Window Substring\", \"description\": \"Given two strings `s1` and `s2`, write a function that finds the minimum window substring in `s1` that contains all characters of `s2`. The function should return the minimum window substring. If no such substring exists, it returns an empty string.\\n\\n#### Function Signature\\n```python\\ndef min_window_substring(s1: str, s2: str) -> str:\\n```\\n\\n#### Input\\n- `s1` (str): The main string to search for the minimum window substring.\\n- `s2` (str): The string containing all characters that must be present in the minimum window substring.\\n\\n#### Output\\n- Returns the minimum window substring in `s1` that contains all characters of `s2`. If no such substring exists, it returns an empty string.\", \"code\": \"\", \"\\nfrom collections import defaultdict\\n\\ndef min_window_substring(s1: str, s2: str) -> str:\\n    if not s2 or len(s1) < len(s2):\\n        return \": \"s1_chars = defaultdict(int)\\n    for char in s1:\\n        s1_chars[char] += 1\\n\\n    required_chars = defaultdict(int)\\n    for char in s2:\\n        required_chars[char] += 1\\n\\n    left, right = 0, 0\\n    min_len = float('inf')\\n    min_window =\", \"len(s1)\": \"if all(s1_chars[char] >= required_chars[char] for char in required_chars):\\n            while left <= right:\\n                if right - left + 1 < min_len:\\n                    min_len = right - left + 1\\n                    min_window = s1[left:right+1]\\n                s1_chars[s1[left]] -= 1\\n                left += 1\\n\\n        right += 1\\n\\n    return min_window\", \",\": \"ests\", \"assert min_window_substring(\": \"a\\\") == ''\\\"]\", \"b\": \"b\", \"ABC\": \"BANC\", \"lo\": \"lo\"}"
}