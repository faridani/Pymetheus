"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Detector (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `are_anagrams(str1, str2)` that checks if two given strings are anagrams of each other.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef are_anagrams(str1: str, str2: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `str1`, `str2` (str): Two strings that may contain letters and numbers but no spaces or punctuation.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the two input strings are anagrams of each other, `False` otherwise.\\\\\\\\n\\\\\\\\n**Hint:** An anagram is a word or phrase formed by rearranging the letters of another word or phrase, typically using all the original letters exactly once.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def are_anagrams(str1: str, str2: str) -> bool:\\\\\\\\n    # Ensure both strings have the same length\\\\\\\\n    if len(str1) != len(str2):\\\\\\\\n        return False\\\\\\\\n    # Remove non-alphabetic characters and convert to lowercase\\\\\\\\n    str1 = \\'\\'.join([char for char in str1 if char.isalpha()]).lower()\\\\\\\\n    str2 = \\'\\'.join([char for char in str2 if char.isalpha()]).lower()\\\\\\\\n    # Sort the strings and compare them\\\\\\\\n    return sorted(str1) == sorted(str2)\\\\\", \\\\\"tests\\\\\": [\\\\\"assert are_anagrams(\\'listen\\', \\'silent\\') == True\\\\\", \\\\\"assert are_anagrams(\\'hello\\', \\'world\\') == False\\\\\", \\\\\"assert are_anagrams(\\'moat\\', \\'tomato\\') == True\\\\\"] }\"'}"