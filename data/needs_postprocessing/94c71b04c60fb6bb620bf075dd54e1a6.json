"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard - Circular Prime Number\\\\\", \\\\\"description\\\\\": \\\\\"A circular prime number is a prime number that remains prime under cyclic permutations of its digits. For example, 197 is a circular prime because: \\\\\\\\n- 197 is prime\\\\\\\\n- 971 is prime\\\\\\\\n- 719 is prime\\\\\\\\nWrite a function `is_circular_prime(num)` that takes an integer as input and returns True if it\\'s a circular prime, otherwise False.  \\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef is_circular_prime(num: int) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `num` (int): A positive integer.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the input number is a circular prime, `False` otherwise.\\\\\", \\\\\"code\\\\\": \\\\\"def is_prime(n):\\\\\\\\n    if n <= 1:\\\\\\\\n        return False\\\\\\\\n    for i in range(2, int(n**0.5) + 1):\\\\\\\\n        if n % i == 0:\\\\\\\\n            return False\\\\\\\\n    return True\\\\\\\\n\\\\\\\\ndef is_circular_prime(num: int) -> bool:\\\\\\\\n    if not is_prime(num):\\\\\\\\n        return False\\\\\\\\n    str_num = str(num)\\\\\\\\n    for i in range(len(str_num)):\\\\\\\\n        rotated_num = int(str_num[i:] + str_num[:i])\\\\\\\\n        if not is_prime(rotated_num):\\\\\\\\n            return False\\\\\\\\n    return True\\\\\", \\\\\"tests\\\\\": [\\\\\"assert is_circular_prime(197) == True\\\\\", \\\\\"assert is_circular_prime(113) == True\\\\\", \\\\\"assert is_circular_prime(2) == True\\\\\", \\\\\"assert is_circular_prime(12) == False\\\\\"] }\"'}"