"{'model': 'mistral-nemo:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Prime Factorization\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `prime_factorize` that takes an integer `n` as input and returns its prime factorization as a sorted list of tuples. Each tuple should contain the prime factor and its exponent.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef prime_factorize(n: int) -> List[Tuple[int, int]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `n` (int): A positive integer greater than 1.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a sorted list of tuples where each tuple contains the prime factor and its exponent.\\\\\\\\n\\\\\\\\n**Constraints**:\\\\\\\\n- The input will be a valid integer greater than 1.\\\\\\\\n\\\\\\\\n**Hints**:\\\\\\\\n- You can use trial division to find factors. Start by dividing `n` by the smallest possible prime number (2) until it\\'s no longer divisible, then move on to the next prime number (3), and so on.\\\\\", \\\\\"code\\\\\": \\\\\"from typing import List, Tuple\\\\\\\\n\\\\\\\\ndef prime_factorize(n: int) -> List[Tuple[int, int]]:\\\\\\\\n    factors = []\\\\\\\\n    i = 2\\\\\\\\n    while i * i <= n:\\\\\\\\n        if n % i:\\\\\\\\n            i += 1\\\\\\\\n        else:\\\\\\\\n            count = 0\\\\\\\\n            while n % i == 0:\\\\\\\\n                count += 1\\\\\\\\n                n //= i\\\\\\\\n            factors.append((i, count))\\\\\\\\n    if n > 1:\\\\\\\\n        factors.append((n, 1))\\\\\\\\n    return sorted(factors)\\\\\\\\n\\\\\", \\\\\"tests\\\\\": [\\\\\"assert prime_factorize(315) == [(3, 1), (3, 2), (5, 1), (7, 1)]\\\\\", \\\\\"assert prime_factorize(90) == [(2, 1), (3, 2), (5, 1), (3, 1)]\\\\\", \\\\\"assert prime_factorize(100) == [(2, 2), (5, 2)]\\\\\"] }\"'}"