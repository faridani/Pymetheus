{
    "model": "llama3:latest",
    "response": "{\"title\": \"Fibonacci Spiral\", \"description\": \"Create a function that generates a Fibonacci spiral. The function should take an integer `n` as input and return the coordinates of the nth point on the spiral. The spiral starts at the origin `(0, 0)` and each subsequent point is placed at the end of the previous line segment.\\n\\n#### Function Signature\\n```python\\ndef fibonacci_spiral(n: int) -> tuple[tuple[int, int]]:\\n```\\n\\n#### Input\\n- `n` (int): The number of points to generate on the spiral.\\n\\n#### Output\\n- Returns a list of tuples, where each tuple contains the x and y coordinates of a point on the spiral.\", \"code\": \"\", \"\\nimport math\\n\\ndef fibonacci_spiral(n: int) -> tuple[tuple[int, int]]:\\n    if n <= 0:\\n        return []\\n\\n    fib_numbers = [0, 1]\\n    while len(fib_numbers) < n:\\n        fib_numbers.append(fib_numbers[-1] + fib_numbers[-2])\\n\\n    x_coords = []\\n    y_coords = []\\n    for i in range(n):\\n        radius = math.sqrt(i)\\n        angle = math.pi * i / (n - 1)\\n        x_coords.append(radius * math.cos(angle))\\n        y_coords.append(radius * math.sin(angle))\\n\\n    return list(zip(x_coords, y_coords))\": \"tests\\\": [\\\"assert len(fibonacci_spiral(10)) == 10\", \"assert set(fibonacci_spiral(10)) != {(0, 0)}\": \"assert fibonacci_spiral(5) != []\"}"
}