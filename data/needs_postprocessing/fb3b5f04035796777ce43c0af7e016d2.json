"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"\\'Anagram Detection (Hard)\\'\\\\\", \\\\\"description\\\\\": \\\\\"An anagram is a word or phrase formed by rearranging the letters of another word or phrase, typically using all the original letters exactly once. Write a function `is_anagram` that checks if two given strings are anagrams.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef is_anagram(str1: str, str2: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `str1`, `str2` (str): Two strings that may contain letters, numbers, spaces, and punctuation.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the input strings are anagrams of each other, `False` otherwise.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"import collections\\\\\\\\n\\\\\\\\ndef is_anagram(str1: str, str2: str) -> bool:\\\\\\\\n    # Remove non-alphabetic characters\\\\\\\\n    str1 = \\'\\'.join(char for char in str1 if char.isalpha()).lower()\\\\\\\\n    str2 = \\'\\'.join(char for char in str2 if char.isalpha()).lower()\\\\\\\\n    \\\\\\\\n    # Count frequency of each letter in both strings\\\\\\\\n    freq1 = collections.Counter(str1)\\\\\\\\n    freq2 = collections.Counter(str2)\\\\\\\\n    \\\\\\\\n    # Check if the two frequency dictionaries are equal\\\\\\\\n    return freq1 == freq2\\\\\", \\\\\"tests\\\\\": [\\\\\"assert is_anagram(\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert is_anagram(\\\\\\\\\\\\\"eleven plus two\\\\\\\\\\\\\", \\\\\\\\\\\\\"twelve plus one\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert is_anagram(\\\\\\\\\\\\\"hello\\\\\\\\\\\\\", \\\\\\\\\\\\\"world\\\\\\\\\\\\\") == False\\\\\", \\\\\"assert is_anagram(\\\\\\\\\\\\\"Mom, Dad, I\\'m mad!\\\\\\\\\\\\\", \\\\\\\\\\\\\"I\\'m bad, Madam.\\\\\\\\\\\\\") == True\\\\\"] }\"'}"