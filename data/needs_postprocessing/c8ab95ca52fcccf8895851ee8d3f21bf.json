{
    "model": "codestral:22b",
    "response": "{\"title\": \"[Hard] Maximum Flow Problem\", \"description\": \"The problem involves finding the maximum flow that can be sent from source to sink in a network. A network is represented as an adjacency matrix where each cell represents the capacity of the edge between two nodes. The task is to implement the Ford-Fulkerson algorithm for computing the maximum flow in this network.\\n\\n#### Function Signature\\n```python\\ndef max_flow(network: List[List[int]], source: int, sink: int) -> int:\\n```\\n\\n#### Input\\n- `network` (List[List[int]]): The adjacency matrix of the network.\\n- `source` (int): Index of the source node.\\n- `sink` (int): Index of the sink node.\\n\\n#### Output\\n- Returns an integer representing the maximum flow that can be sent from source to sink in the network.\", \"code\": \"\", \"\\nfrom collections import deque\\n\\ndef bfs(network, source, sink, parent):\\n    visited = [False]*len(network)\\n    queue = deque()\\n    queue.append(source)\\n    visited[source] = True\\n\\n    while queue:\\n        u = queue.popleft()\\n        for ind, val in enumerate(network[u]):\\n            if not visited[ind] and val > 0:\\n                queue.append(ind)\\n                visited[ind] = True\\n                parent[ind] = u\\n    return True if visited[sink] else False\\n\\ndef max_flow(network, source, sink):\\n    n = len(network)\\n    parent = [-1]*n\\n    max_flow = 0\\n\\n    while bfs(network, source, sink, parent):\\n        path_flow = float(\": \"nf\", \"source)\": \"path_flow = min (path_flow, network[parent[s]][s])\\n            s = parent[s]\\n\\n        max_flow += path_flow\\n        v = sink\\n        while(v != source):\\n            u = parent[v]\\n            network[u][v] -= path_flow\\n            network[v][u] += path_flow\\n            v = parent[v]\\n    return max_flow\", \",\\n    \": \"ests\", \"assert max_flow([[0, 16, 13, 0, 0, 0], [0, 0, 10, 12, 0, 0], [0, 4, 0, 0, 14, 0], [0, 0, 9, 0, 0, 20], [0, 0, 0, 7, 0, 4], [0, 0, 0, 0, 0, 0]], 0, 5) == 23\": \"assert max_flow([[0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], 0, 5) == 1\"}"
}