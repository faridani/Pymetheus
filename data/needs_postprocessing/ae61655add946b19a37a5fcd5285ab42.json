{
    "model": "llama3:latest",
    "response": "{\"title\": \"Minimum Window Substring\", \"description\": \"Given two strings, `s` and `t`, find the minimum window within `s` that contains all characters of `t`. If there are multiple such windows, return any one. If no such window exists, return an empty string.\\n\\n#### Function Signature\\n```python\\ndef min_window_substring(s: str, t: str) -> str:\\n```\\n\\n#### Input\\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\\n- `t` (str): A target string that contains characters to find in the window.\\n\\n#### Output\\n- Returns a minimum window substring within `s` that contains all characters of `t`, or an empty string if no such window exists.\", \"code\": \"\\nimport collections\\n\\ndef min_window_substring(s: str, t: str) -> str:\\n    if not s or not t:\\n        return ''\\n\\n    dict_t = collections.Counter(t)\\n    required_chars = len(dict_t)\\n\\n    left, right = 0, 0\\n    formed_chars = 0\\n\\n    window_counts = collections.Counter()\\n\\n    ans = float('inf'), None, None\\n\\n    while right < len(s):\\n        character = s[right]\\n        window_counts[character] += 1\\n\\n        if character in dict_t and window_counts[character] == dict_t[character]:\\n            formed_chars += 1\\n\\n        while left <= right and formed_chars == required_chars:\\n            character = s[left]\\n            if right - left + 1 < ans[0]:\\n                ans = (right - left + 1, left, right)\\n\\n            window_counts[character] -= 1\\n            if character in dict_t and window_counts[character] < dict_t[character]:\\n                formed_chars -= 1\\n\\n            left += 1\\n\\n        right += 1\\n\\n    return '' if ans[0] == float('inf') else s[ans[1]:ans[2]+1]\", \"tests\": [\"assert min_window_substring(\\\"ADOBECODEBANC\\\", \\\"ABC\\\") == 'BANC'\", \"assert min_window_substring(\", \", \", \") == ''\", \"assert min_window_substring(\\\"a\\\", \\\"aa\\\") == '',\", \"assert min_window_substring(\\\"a\\\", \\\"b\\\") == ''\"]}"
}