{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Hard: Tree Traversal\\\", \\\"description\\\": \\\"Given a tree with unique values and an integer k, find all the nodes that are at most k levels away from their parent node. For example, if we have the following tree:\\\\n```\\\\n    1\\\\n   / \\\\\\\\n  2   3\\\\n / \\\\   \\\\\\\\n4   5   6\\\\n/ \\\\     \\\\\\\\n7   8     9\\\\n```\\\\nAnd k = 2, the function should return [1, 2, 3, 4, 5]. The order of nodes in the result does not matter.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef nodes_at_most_k_levels_away(root: int) -> list:\\\\n```\\\\n\\\\n#### Input\\\\n- `root` (int): The root node of the tree.\\\\n- `k` (int): The maximum distance from a parent node that we are interested in.\\\\n\\\\n#### Output\\\\n- A list of unique values that are at most k levels away from their parent node. If there is no such node, return an empty list.\\\", \\\"code\\\": \\\"class Node:\\\\n    def __init__(self, value):\\\\n        self.value = value\\\\n        self.children = []\\\\n\\\\ndef nodes_at_most_k_levels_away(root: int) -> list:\\\\n    root_node = Node(root)\\\\n    result = set()\\\\n    stack = [root_node]\\\\n    for _ in range(k):\\\\n        next_stack = [\\\\n            node for node in stack if node.children\\\\n        ]\\\\n        for node in next_stack:\\\\n            result.add(node.value)\\\\n            node.children = []\\\\n        stack = next_stack.copy()\\\\n    return list(result)\\\", \\\"tests\\\": [\\\"assert nodes_at_most_k_levels_away(1) == [1, 2, 3, 4, 5]\\\", \\\"assert nodes_at_most_k_levels_away(1, 3) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\\\", \\\"assert nodes_at_most_k_levels_away(None) == []\\\", \\\"assert nodes_at_most_k_levels_away(1, -1) == [1]\\\"] }\""
}