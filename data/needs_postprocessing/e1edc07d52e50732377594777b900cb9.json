{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Maximum Sum of Two Subarrays\\\", \\\"description\\\": \\\"Given an array of integers, find the maximum sum of two non-overlapping subarrays. The problem can be solved by considering all possible pairs of subarrays and calculating their sums.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef max_sum_two_subarrays(arr: list[int)) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `arr` (list[int]): A list of integers.\\\\n\\\\n#### Output\\\\n- Returns the maximum sum of two non-overlapping subarrays.\\\\n\\\", \\\"code\\\": \\\"\\\\nimport itertools\\\\n\\\\ndef max_sum_two_subarrays(arr: list[int)) -> int:\\\\n    n = len(arr)\\\\n    max_sum = float('-inf')\\\\n\\\\n    for i in range(n):\\\\n        for j in range(i + 1, n):\\\\n            left_sum = sum(arr[:i])\\\\n            right_sum = sum(arr[j:])\\\\n            if left_sum + right_sum > max_sum:\\\\n                max_sum = left_sum + right_sum\\\\n\\\\n    return max_sum\\\\n\\\", \\\"tests\\\": [\\\"assert max_sum_two_subarrays([10, 2, -3, 5, 6]) == 26\\\", \\\"assert max_sum_two_subarrays([-1, 0, 1, 2, -3, 4]) == 8\\\", \\\"assert max_sum_two_subarrays([-2, -3, 4, 20, 5]) == 23\\\", \\\"assert max_sum_two_subarrays([1, 2, 3, 4, 5]) == 15\\\"] }\""
}