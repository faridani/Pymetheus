"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Roman Numeral Converter (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `to_roman` that converts an Arabic number to its equivalent Roman numeral.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef to_roman(arabic: int) -> str:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `arabic` (int): A non-negative integer within the range of 1-3999.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the equivalent Roman numeral for the given Arabic number as a string.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def to_roman(arabic: int) -> str:\\\\\\\\n    roman_numerals = {\\'M\\': 1000, \\'CM\\': 900, \\'D\\': 500, \\'CD\\': 400, \\'C\\': 100, \\'XC\\': 90, \\'L\\': 50, \\'XL\\': 40, \\'X\\': 10, \\'IX\\': 9, \\'V\\': 5, \\'IV\\': 4, \\'I\\': 1}\\\\\\\\n    roman = \\'\\'\\\\\\\\n    while arabic > 0:\\\\\\\\n        for key, value in roman_numerals.items():\\\\\\\\n            if arabic >= value:\\\\\\\\n                roman += key\\\\\\\\n                arabic -= value\\\\\\\\n                break\\\\\\\\n    return roman\\\\\", \\\\\"tests\\\\\": [\\\\\"assert to_roman(1) == \\'I\\'\\\\\", \\\\\"assert to_roman(3) == \\'III\\'\\\\\", \\\\\"assert to_roman(4) == \\'IV\\'\\\\\", \\\\\"assert to_roman(5) == \\'V\\'\\\\\", \\\\\"assert to_roman(9) == \\'IX\\'\\\\\", \\\\\"assert to_roman(10) == \\'X\\'\\\\\", \\\\\"assert to_roman(20) == \\'XX\\'\\\\\", \\\\\"assert to_roman(40) == \\'XL\\'\\\\\", \\\\\"assert to_roman(50) == \\'L\\'\\\\\", \\\\\"assert to_roman(90) == \\'XC\\'\\\\\", \\\\\"assert to_roman(100) == \\'C\\'\\\\\", \\\\\"assert to_roman(378) == \\'CCCLXXVIII\\'\\\\\", \\\\\"assert to_roman(1994) == \\'MCMXCIV\\'\\\\\"] }\"'}"