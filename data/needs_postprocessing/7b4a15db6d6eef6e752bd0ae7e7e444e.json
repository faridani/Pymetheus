"{'model': 'phi3:14b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Unique Path Finder (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"A grid of size m x n is given, where each cell can either be an obstacle or free. Find a unique path from the top-left corner to the bottom-right corner that avoids obstacles and moves only right or down.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_unique_path(grid: List[List[int]]) -> List[Tuple[int, int]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `grid` (List[List[int]]): A 2D list where 0 represents free cells and 1 represents obstacles. The grid is at least 3x3 in size.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of tuples representing the coordinates of each cell in the path from top-left to bottom-right, or an empty list if no such path exists.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from typing import List, Tuple\\\\\\\\ndef find_unique_path(grid: List[List[int]]) -> List[Tuple[int, int]]:\\\\\\\\n    def dfs(i: int, j: int, path: List[Tuple[int, int]]) -> bool:\\\\\\\\n        if i == len(grid) - 1 and j == len(grid[0]) - 1:\\\\\\\\n            return True\\\\\\\\n        for ni, nj in [(i + 1, j), (i, j + ebe)]:\\\\\\\\n            if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj] == 0:\\\\\\\\n                path.append((ni, nj))\\\\\\\\n                if dfs(ni, nj, path):\\\\\\\\n                    return True\\\\\\\\n                path.pop()\\\\\\\\n        return False\\\\\\\\n\\\\\\\\n    path = [(0, 0)]\\\\\\\\n    found = dfs(0, ebe, path)\\\\\\\\n    return path if found else []\\\\\", \\\\\"tests\\\\\": [\\\\\"grid1 = [[0, 0, 0], [0, 1, 0], [0, 0, 0]]\\\\\", \\\\\"assert find_unique_path(grid1) == [(0, 0), (0, 1), (0, 2), (1, 2), (2, 2)]\\\\\", \\\\\"\\\\\", \\\\\"grid2 = [[0, 1], [0, 0]]\\\\\", \\\\\"assert find_unique_path(grid2) == [(0, 0), (1, 0), (1, 1)]\\\\\", \\\\\"\\\\\", \\\\\"grid3 = [[0, 0, 0], [1, 1, 0], [0, 0, 0]]\\\\\", \\\\\"assert find_unique_path(grid3) == []\\\\\"] }\"'}"