{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Number of Islands\\\", \\\"description\\\": \\\"#### Problem\\\\nYou are given a 2D grid of integers where the value at each cell represents the height of that land cell. Write a function `num_islands` that counts the number of distinct islands in the grid.\\\\nAn island is considered as a group of connected cells with heights greater than or equal to a certain threshold (in this case, 0).\\\\n#### Function Signature\\\\n```python\\\\ndef num_islands(grid: list[list[int]], threshold: int) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `grid` (list[list[int]]): A 2D grid of integers representing the height of each land cell.\\\\n- `threshold` (int): The minimum height required for a cell to be considered part of an island.\\\\n\\\\n#### Output\\\\n- Returns the number of distinct islands in the grid.\\\", \\\"code\\\": \\\"\\\\nimport copy\\\\n\\\\ndef num_islands(grid: list[list[int]], threshold: int) -> int:\\\\n    if not grid or not grid[0]:\\\\n        return 0\\\\n    \\\\n    count = 0\\\\n    for i in range(len(grid)):\\\\n        for j in range(len(grid[i])):\\\\n            if grid[i][j] >= threshold and grid[i][j] > 0:\\\\n                dfs(grid, i, j)\\\\n                count += 1\\\\n\\\\n    def dfs(grid: list[list[int]], i: int, j: int) -> None:\\\\n        if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[i]) or grid[i][j] <= threshold or grid[i][j] == 0:\\\\n            return\\\\n        \\\\n        grid[i][j] = 0\\\\n        dfs(grid, i - 1, j)\\\\n        dfs(grid, i + 1, j)\\\\n        dfs(grid, i, j - 1)\\\\n        dfs(grid, i, j + 1)\\\\n\\\\n    return count\\\", \\\"tests\\\": [\\\"assert num_islands([[0], [0]], 0) == 0\\\", \\\"assert num_islands([[0, 0], [0, 1]], 0) == 1\\\", \\\"assert num_islands([[1, 1, 0, 0], [1, 0, 1, 1], [0, 0, 0, 0]], 1) == 2\\\", \\\"assert num_islands([[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]], 2) == 1\\\"] }\""
}