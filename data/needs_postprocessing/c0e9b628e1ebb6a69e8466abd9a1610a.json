{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Maximum Sum of A Subarray\\\", \\\"description\\\": \\\"Given an integer array `nums`, find the maximum sum of a subarray (i.e., a contiguous part of the array) that has at least one negative number. If no such subarray exists, return 0.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef max_sum_subarray_with_negative(nums: list[int)) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `nums` (list[int]): A non-empty list of integers.\\\\n\\\\n#### Output\\\\n- Returns the maximum sum of a subarray with at least one negative number, or 0 if no such subarray exists.\\\\n\\\", \\\"code\\\": \\\"def max_sum_subarray_with_negative(nums: list[int)) -> int:\\\\n    max_sum = float('-inf')\\\\n    current_sum = 0\\\\n    for num in nums:\\\\n        if num < 0:\\\\n            current_sum = 0\\\\n        else:\\\\n            current_sum += num\\\\n        max_sum = max(max_sum, current_sum)\\\\n    return max_sum if any(num < 0 for num in nums) else 0\\\", \\\"tests\\\": [\\\"assert max_sum_subarray_with_negative([-2, -3, 4, -1, -2, 1, 5, -3]) == 7\\\", \\\"assert max_sum_subarray_with_negative([1, 2, 3, 4, 5]) == 0\\\", \\\"assert max_sum_subarray_with_negative([-5, -3, -1, 0, 1, 2, 3, 4]) == 6\\\"] }\""
}