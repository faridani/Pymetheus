{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Maximum Sum of Divisible Subarrays\\\", \\\"description\\\": \\\"Given an array of integers, find the maximum sum of subarrays where each element in the subarray is divisible by 3. If no such subarray exists, return -1.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef max_sum_divisible_subarrays(arr: list[int)) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `arr` (list[int]): A list of integers.\\\\n\\\\n#### Output\\\\n- Returns the maximum sum of subarrays where each element is divisible by 3, or -1 if no such subarray exists.\\\\n\\\", \\\"code\\\": \\\"\\\\nimport itertools\\\\n\\\\ndef max_sum_divisible_subarrays(arr: list[int)) -> int:\\\\n    max_sum = -1\\\\n    for subarray in itertools.groupby(arr, lambda x: x % 3):\\\\n        subarray_list = [x for x, _ in subarray]\\\\n        if all(x % 3 == 0 for x in subarray_list):\\\\n            max_sum = max(max_sum, sum(subarray_list))\\\\n    return max_sum\\\\n\\\", \\\"tests\\\": [\\\"assert max_sum_divisible_subarrays([1, 2, 3, 4, 5]) == -1\\\", \\\"assert max_sum_divisible_subarrays([0, 0, 0, 3, 6]) == 9\\\", \\\"assert max_sum_divisible_subarrays([-3, -6, 3, 6]) == 9\\\", \\\"assert max_sum_divisible_subarrays([1, 4, 7, 10, 13, 16, 19, 22, 25]) == 51\\\"] }\""
}