{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Maximum Sum of a Subarray with Distinct Elements\\\", \\\"description\\\": \\\"A subarray of an array is a contiguous portion of the array. Given an array of integers, find the maximum sum that can be achieved by selecting a contiguous subarray where all elements are distinct.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef max_sum_distinct_subarray(nums: list[int)) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `nums` (list[int]): A list of integers containing at least one element.\\\\n\\\\n#### Output\\\\n- Returns the maximum sum that can be achieved by selecting a contiguous subarray where all elements are distinct. If there's no such subarray, return 0.\\\\n\\\", \\\"code\\\": \\\"\\\\nimport itertools\\\\n\\\\ndef max_sum_distinct_subarray(nums: list[int)) -> int:\\\\n    if len(nums) == 1:\\\\n        return nums[0]\\\\n    \\\\n    max_sum = 0\\\\n    for i in range(len(nums)):\\\\n        seen = set()\\\\n        current_sum = 0\\\\n        for j in range(i, len(nums)):\\\\n            if nums[j] not in seen:\\\\n                seen.add(nums[j])\\\\n                current_sum += nums[j]\\\\n            else:\\\\n                break\\\\n        max_sum = max(max_sum, current_sum)\\\\n    \\\\n    return max_sum\\\\n\\\\n\\\", \\\"tests\\\": [\\\"assert max_sum_distinct_subarray([1, 2, 3, 4, 5]) == 15\\\", \\\"assert max_sum_distinct_subarray([-1, -2, -3, -4, -5]) == -1\\\", \\\"assert max_sum_distinct_subarray([10, 20, 30, 40, 50]) == 150\\\", \\\"assert max_sum_distinct_subarray([1, 2, 3, 4, 4, 5]) == 9\\\"] }\""
}