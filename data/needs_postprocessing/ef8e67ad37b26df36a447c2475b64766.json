{
    "model": "codegeex4:9b",
    "response": "\"{ \\\"title\\\": \\\"Easy: Prime Factorization\\\", \\\"description\\\": \\\"Implement a function that performs prime factorization of a given integer. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Write a function `prime_factors` that takes an integer `n` as input and returns a list of its prime factors in ascending order.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef prime_factors(n: int) -> List[int]:\\\\n```\\\\n\\\\n#### Input\\\\n- `n` (int): An integer greater than 1.\\\\n\\\\n#### Output\\\\n- Returns a list of integers representing the prime factors of `n`, in ascending order.\\\\n\\\", \\\"code\\\": \\\"from typing import List\\\\n\\\\ndef prime_factors(n: int) -> List[int]:\\\\n    # Initialize an empty list to store the prime factors\\\\n    factors = []\\\\n    # Divide n by 2 until it's no longer divisible by 2\\\\n    while n % 2 == 0:\\\\n        factors.append(2)\\\\n        n //= 2\\\\n    # Check for odd factors starting from 3\\\\n    for i in range(3, int(n**0.5) + 1, 2):\\\\n        while n % i == 0:\\\\n            factors.append(i)\\\\n            n //= i\\\\n    # If n is a prime number greater than 2\\\\n    if n > 2:\\\\n        factors.append(n)\\\\n    return factors\\\\n\\\", \\\"tests\\\": [\\\"assert prime_factors(10) == [2, 5]\\\", \\\"assert prime_factors(15) == [3, 5]\\\", \\\"assert prime_factors(100) == [2, 2, 5, 5]\\\", \\\"assert prime_factors(13195) == [5, 7, 13, 29]\\\"] }\""
}