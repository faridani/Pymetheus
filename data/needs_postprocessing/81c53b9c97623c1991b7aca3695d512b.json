"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Word Ladder\\\\\", \\\\\"description\\\\\": \\\\\"You are given two words, `beginWord` and `endWord`, and a dictionary of words `wordList`.  Find the shortest transformation sequence from `beginWord` to `endWord` such that only one letter can be changed at a time and each intermediate word must exist in the `wordList`. Return the length of the shortest transformation sequence, or 0 if no such sequence exists.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef ladderLength(beginWord: str, endWord: str, wordList: list[str]) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `beginWord` (str): The starting word.\\\\\\\\n- `endWord` (str): The target word.\\\\\\\\n- `wordList` (list[str]): A list of valid words.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the length of the shortest transformation sequence, or 0 if no such sequence exists.\\\\\", \\\\\"code\\\\\": \\\\\"from collections import deque\\\\\\\\n\\\\\\\\ndef ladderLength(beginWord: str, endWord: str, wordList: list[str]) -> int:\\\\\\\\n    if endWord not in wordList:\\\\\\\\n        return 0\\\\\\\\n\\\\\\\\n    wordSet = set(wordList)\\\\\\\\n    queue = deque([(beginWord, 1)])\\\\\\\\n    visited = set([beginWord])\\\\\\\\n\\\\\\\\n    while queue:\\\\\\\\n        word, length = queue.popleft()\\\\\\\\n        if word == endWord:\\\\\\\\n            return length\\\\\\\\n\\\\\\\\n        for i in range(len(word)):\\\\\\\\n            for ch in \\'abcdefghijklmnopqrstuvwxyz\\':\\\\\\\\n                new_word = word[:i] + ch + word[i+1:]\\\\\\\\n                if new_word in wordSet and new_word not in visited:\\\\\\\\n                    queue.append((new_word, length + 1))\\\\\\\\n                    visited.add(new_word)\\\\\\\\n\\\\\\\\n    return 0\\\\\", \\\\\"tests\\\\\": [\\\\\"assert ladderLength(\\\\\\\\\\\\\"hit\\\\\\\\\\\\\", \\\\\\\\\\\\\"cog\\\\\\\\\\\\\", [\\\\\\\\\\\\\"hot\\\\\\\\\\\\\",\\\\\\\\\\\\\"dot\\\\\\\\\\\\\",\\\\\\\\\\\\\"dog\\\\\\\\\\\\\",\\\\\\\\\\\\\"lot\\\\\\\\\\\\\",\\\\\\\\\\\\\"log\\\\\\\\\\\\\",\\\\\\\\\\\\\"cog\\\\\\\\\\\\\"]) == 5\\\\\", \\\\\"assert ladderLength(\\\\\\\\\\\\\"hit\\\\\\\\\\\\\", \\\\\\\\\\\\\"cog\\\\\\\\\\\\\", [\\\\\\\\\\\\\"hot\\\\\\\\\\\\\",\\\\\\\\\\\\\"dot\\\\\\\\\\\\\",\\\\\\\\\\\\\"dog\\\\\\\\\\\\\",\\\\\\\\\\\\\"lot\\\\\\\\\\\\\",\\\\\\\\\\\\\"log\\\\\\\\\\\\\"]) == 0\\\\\", \\\\\"assert ladderLength(\\\\\\\\\\\\\"a\\\\\\\\\\\\\", \\\\\\\\\\\\\"c\\\\\\\\\\\\\", [\\\\\\\\\\\\\"a\\\\\\\\\\\\\",\\\\\\\\\\\\\"b\\\\\\\\\\\\\",\\\\\\\\\\\\\"c\\\\\\\\\\\\\"]) == 2\\\\\"] }\"'}"