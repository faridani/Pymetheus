"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"\\'Anagram Finder (Hard)\\'\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_anagrams` that takes a list of strings as input and returns a dictionary where the keys are the strings from the original list, and the values are lists of all the strings in the original list that are anagrams of the key.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of strings containing only lowercase letters.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a dictionary where the keys are the strings from the original list, and the values are lists of all the strings in the original list that are anagrams of the key.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from collections import Counter\\\\\\\\n\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n    # Create a dictionary with each word as key and its frequency as value using counter\\\\\\\\n    word_count = Counter(words)\\\\\\\\n    # Initialize an empty dictionary to store results\\\\\\\\n    result = {\\\\\\\\n        key: [word for word in words if sorted(key) == sorted(word) and counter[word] == count]\\\\\\\\n        for key, count in word_count.items()\\\\\\\\n    }\\\\\\\\n    return result\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\'listen\\', \\'silent\\', \\'enlist\\']) == {\\'listen\\': [\\'listen\\'], \\'silent\\': [\\'silent\\'], \\'enlist\\': [\\'enlist\\']}\\\\\", \\\\\"assert find_anagrams([\\'act\\', \\'cat\\', \\'dog\\', \\'tac\\', \\'god\\']) == {\\'act\\': [\\'act\\'], \\'cat\\': [\\'cat\\', \\'tac\\'], \\'dog\\': [\\'dog\\'], \\'tac\\': [\\'cat\\', \\'tac\\'], \\'god\\': [\\'god\\']}\\\\\"] }\"'}"