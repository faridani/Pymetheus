"{'model': 'gemma2:27b-instruct-q5_K_S', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Matrix Path Sum\\\\\", \\\\\"description\\\\\": \\\\\"You are given an m x n integer matrix.  A path in the matrix starts at cell (0, 0) and moves either right or down one cell at a time. The path sum is the sum of all numbers along the path. Write a function `min_path_sum` that returns the minimum possible path sum from the top left to the bottom right corner.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef min_path_sum(matrix: list[list[int]]) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `matrix` (list[list[int]]): A 2D integer array representing the matrix. \\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns an integer, the minimum path sum.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def min_path_sum(matrix: list[list[int]]) -> int:\\\\\\\\n    m, n = len(matrix), len(matrix[0])\\\\\\\\n    dp = [[0 for _ in range(n)] for _ in range(m)]\\\\\\\\n    dp[0][0] = matrix[0][0]\\\\\\\\n    for i in range(1, m):\\\\\\\\n        dp[i][0] = dp[i - 1][0] + matrix[i][0]\\\\\\\\n    for j in range(1, n):\\\\\\\\n        dp[0][j] = dp[0][j - 1] + matrix[0][j]\\\\\\\\n    for i in range(1, m):\\\\\\\\n        for j in range(1, n):\\\\\\\\n            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j]\\\\\\\\n    return dp[m - 1][n - 1]\\\\\", \\\\\"tests\\\\\": [\\\\\"assert min_path_sum([[1,3,1],[1,5,1],[4,2,1]]) == 7\\\\\", \\\\\"assert min_path_sum([[1,2,3],[4,5,6]]) == 12\\\\\"] }\"'}"