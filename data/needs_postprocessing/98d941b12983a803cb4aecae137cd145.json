"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Binary Tree Diameter\\\\\", \\\\\"description\\\\\": \\\\\"Given the root of a binary tree, return the length of the diameter of the tree. The diameter of a binary tree is defined as the longest path between any two nodes in the tree. This path may or may not pass through the root.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef diameter_of_binary_tree(root: TreeNode) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `root` (TreeNode): The root node of the binary tree.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns an integer representing the length of the diameter of the binary tree.\\\\\", \\\\\"code\\\\\": \\\\\"class TreeNode:\\\\\\\\n    def __init__(self, val=0, left=None, right=None):\\\\\\\\n        self.val = val\\\\\\\\n        self.left = left\\\\\\\\n        self.right = right\\\\\\\\n\\\\\\\\ndef diameter_of_binary_tree(root: TreeNode) -> int:\\\\\\\\n    diameter = 0\\\\\\\\n\\\\\\\\n    def dfs(node):\\\\\\\\n        nonlocal diameter\\\\\\\\n        if not node:\\\\\\\\n            return 0\\\\\\\\n        left_height = dfs(node.left)\\\\\\\\n        right_height = dfs(node.right)\\\\\\\\n        diameter = max(diameter, left_height + right_height)\\\\\\\\n        return max(left_height, right_height) + 1\\\\\\\\n\\\\\\\\n    dfs(root)\\\\\\\\n    return diameter\\\\\", \\\\\"tests\\\\\": [\\\\\"# Example Tree:   \\\\\\\\n#      1 \\\\\\\\n#     / \\\\\\\\\\\\\\\\ \\\\\\\\n#    2   3 \\\\\\\\n#   / \\\\\\\\\\\\\\\\ \\\\\\\\n#  4   5\\\\\\\\ntree = TreeNode(1, TreeNode(2, TreeNode(4), TreeNode(5)), TreeNode(3))\\\\\\\\nassert diameter_of_binary_tree(tree) == 3\\\\\", \\\\\"# Example Tree: \\\\\\\\n#         1\\\\\\\\n#        /\\\\\\\\n#       2\\\\\\\\nassert diameter_of_binary_tree(TreeNode(1, TreeNode(2))) == 2\\\\\"] }\"'}"