"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard - Prime Permutations\\\\\", \\\\\"description\\\\\": \\\\\"The prime numbers below 100 are: 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, and 97.\\\\\\\\n\\\\\\\\nWrite a function `prime_permutations` that takes an integer `n` as input and returns the number of unique permutations of prime numbers below `n` that are also themselves prime. \\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef prime_permutations(n: int) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `n` (int): An integer representing the upper limit for prime number search.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the count of unique prime permutations below `n`.\\\\\", \\\\\"code\\\\\": \\\\\"def is_prime(num):\\\\\\\\n  if num <= 1:\\\\\\\\n    return False\\\\\\\\n  for i in range(2, int(num**0.5) + 1):\\\\\\\\n    if num % i == 0:\\\\\\\\n      return False\\\\\\\\n  return True\\\\\\\\n\\\\\\\\ndef prime_permutations(n: int) -> int:\\\\\\\\n  primes = [p for p in range(2, n) if is_prime(p)]\\\\\\\\n  count = 0\\\\\\\\n  for i in range(len(primes)):\\\\\\\\n    for j in range(i + 1, len(primes)):\\\\\\\\n      p1 = str(primes[i])\\\\\\\\n      p2 = str(primes[j])\\\\\\\\n      if sorted(p1) == sorted(p2) and is_prime(int(p2)):\\\\\\\\n        count += 1\\\\\\\\n  return count\\\\\", \\\\\"tests\\\\\": [\\\\\"assert prime_permutations(100) == 2\\\\\", \\\\\"assert prime_permutations(1000) == 5\\\\\"] }\"'}"