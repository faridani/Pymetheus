{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Counting Islands\\\", \\\"description\\\": \\\"Write a function `count_islands` that takes a 2D list of binary integers as input. The binary integers are represented as 0s and 1s, where 0 represents water and 1 represents land. Each cell in the grid can be connected to neighboring cells with an island (horizontally or vertically). An 'island' is defined as any group of adjacent lands that share at least one border.\\\\n\\\\n#### Function Signature\\\\n\\\\n```\\\\ndef count_islands(grid: list) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n\\\\n- `grid` (list): A 2D list of binary integers, where each cell in the grid can be either water (0) or land (1).\\\\n\\\\n#### Output\\\\n\\\\n- Returns the total number of distinct islands found in the given grid.\\\\n\\\\n\\\", \\\"code\\\": \\\"\\\\ndef count_islands(grid: list) -> int:\\\\n    if not grid:\\\\n        return 0\\\\n    island_count = 0\\\\n    for i in range(len(grid)):\\\\n        for j in range(len(grid[0])):\\\\n            if grid[i][j] == 1 and (i == 0 or grid[i-1][j] == 0) and (j == 0 or grid[i][j-1] == 0):\\\\n                island_count += 1\\\\n                dfs(grid, i, j)\\\\n    return island_count\\\\n\\\\ndef dfs(grid: list, i: int, j: int) -> None:\\\\n    if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or grid[i][j] != 1:\\\\n        return\\\\n    grid[i][j] = 0\\\\n    dfs(grid, i-1, j)\\\\n    dfs(grid, i+1, j)\\\\n    dfs(grid, i, j-1)\\\\n    dfs(grid, i, j+1)\\\\n\\\\n\\\", \\\"tests\\\": [\\\"assert count_islands([[0,0,0,0,0],[1,0,1,0,0],[0,1,1,1,0],[0,0,0,0,0]]) == 1\\\", \\\"assert count_islands([[0,0,0,0,0],[1,1,0,0,0],[0,1,1,0,0],[0,0,0,0,0]]) == 2\\\", \\\"assert count_islands([[0,0,0,0,0],[0,1,0,0,0],[0,1,1,0,0],[0,0,0,0,0]]) == 1\\\", \\\"assert count_islands([]) == 0\\\"] }\""
}