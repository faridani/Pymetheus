"{'model': 'aya:35b', 'response': '[{\"title\": \"Valid Parentheses Checker (Medium)\", \"description\": \"A valid parentheses string contains an equal number of opening and closing parentheses. Write a function `are_valid_parentheses` that takes a string containing parentheses and returns `True` if the string is valid, and `False` otherwise.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef are_valid_parentheses(s: str) -> bool:\\\\n```\\\\n\\\\n#### Input\\\\n- `s` (str): A string containing parentheses.\\\\n\\\\n#### Output\\\\n- Returns `True` if the input string has a balanced number of opening and closing parentheses, `False` otherwise.\\\\n\\\\n#### Example\\\\n```python\\\\nprint(are_valid_parentheses(\\\\\\\\\\\\\"()\\\\\\\\\\\\\"))  # True\\\\nprint(are_valid_parentheses(\\\\\\\\\\\\\"((()))\\\\\\\\\\\\\"))  # False\\\\n```\", \"code\": \"\", \"python\\\\ndef are_valid_parentheses(s: str) -> bool:\\\\n    stack = []\\\\n    mapping = {\": \": \\'(\\', \"}, {\", \": \": \\'[\\'}\\\\n    for char in s:\\\\n        if char in mapping:\\\\n            top = stack.pop() if stack else \\'#\\'\\\\n            if mapping[char] != top:\\\\n                return False\\\\n        else:\\\\n            stack.append(char)\\\\n    return not stack\", \",\\\\n    \": \"ests\\': [\", \"True\": \"assert are_valid_parentheses(\\\\\"((()))\\\\\") == False\", \"assert are_valid_parentheses(\\\\\"{[()]}\\\\\") == True\": \"assert are_valid_parentheses(\\\\\"{[(])}\\\\\") == False\"}]'}"