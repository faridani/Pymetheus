"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"\\\\\\\\\\\\\"Anagram Detector (Hard)\\\\\\\\\\\\\"\\\\\", \\\\\"description\\\\\": \\\\\"Given two strings, determine if they are anagrams of each other. Anagrams are words or phrases formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef are_anagrams(s1: str, s2: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s1`, `s2` (str): Two strings that may contain letters and spaces.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the given strings are anagrams of each other, `False` otherwise.\\\\\\\\n\\\\\\\\n#### Constraints and Hints\\\\\\\\n- Both input strings will have at least one character.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"import collections\\\\\\\\n\\\\\\\\ndef are_anagrams(s1: str, s2: str) -> bool:\\\\\\\\n    # Remove spaces from the input strings\\\\\\\\n    s1 = s1.replace(\\' \\', \\'\\').lower()\\\\\\\\n    s2 = s2.replace(\\' \\', \\'\\').lower()\\\\\\\\n    \\\\\\\\n    # Count characters in each string\\\\\\\\n    char_counts1 = collections.Counter(s1)\\\\\\\\n    char_counts2 = collections.Counter(s2)\\\\\\\\n    \\\\\\\\n    # Check if both strings have the same number of characters and all characters count the same in both strings\\\\\\\\n    return len(s1) == len(s2) and char_counts1 == char_counts2\\\\\", \\\\\"tests\\\\\": [\\\\\"assert are_anagrams(\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert are_anagrams(\\\\\\\\\\\\\"hello\\\\\\\\\\\\\", \\\\\\\\\\\\\"olleh\\\\\\\\\\\\\") == False\\\\\", \\\\\"assert are_anagrams(\\\\\\\\\\\\\"moOse\\\\\\\\\\\\\", \\\\\\\\\\\\\"seezooM\\\\\\\\\\\\\") == True\\\\\"] }\"'}"