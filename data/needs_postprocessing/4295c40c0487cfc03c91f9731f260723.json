"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard - Integer to English Words Converter\\\\\", \\\\\"description\\\\\": \\\\\"Convert a non-negative integer to its English words representation.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef number_to_words(num: int) -> str:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `num` (int): A non-negative integer.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the English words representation of the input integer. For example, if `num = 123`, the function should return \\\\\\\\\\\\\"One Hundred Twenty Three\\\\\\\\\\\\\". If `num = 12345`, the function should return \\\\\\\\\\\\\"Twelve Thousand Three Hundred Forty Five\\\\\\\\\\\\\" \\\\\", \\\\\"code\\\\\": \\\\\"def number_to_words(num: int) -> str:\\\\\\\\n    less_than_20 = [\\'\\', \\'One\\', \\'Two\\', \\'Three\\', \\'Four\\', \\'Five\\', \\'Six\\', \\'Seven\\', \\'Eight\\', \\'Nine\\', \\'Ten\\', \\'Eleven\\',\\\\\\\\n                    \\'Twelve\\', \\'Thirteen\\', \\'Fourteen\\', \\'Fifteen\\', \\'Sixteen\\', \\'Seventeen\\', \\'Eighteen\\', \\'Nineteen\\']\\\\\\\\n    tens = [\\'\\', \\'\\', \\'Twenty\\', \\'Thirty\\', \\'Forty\\', \\'Fifty\\', \\'Sixty\\', \\'Seventy\\', \\'Eighty\\', \\'Ninety\\']\\\\\\\\n    thousands = [\\'\\', \\'Thousand\\', \\'Million\\', \\'Billion\\']\\\\\\\\n\\\\\\\\n    def helper(n):\\\\\\\\n        if n < 20:\\\\\\\\n            return less_than_20[n]\\\\\\\\n        elif n < 100:\\\\\\\\n            return tens[(n // 10)] + (\\' \\' + less_than_20[n % 10] if n % 10 != 0 else \\'\\')\\\\\\\\n        else:\\\\\\\\n            return less_than_20[n // 100] + \\' Hundred\\' + (\\' \\' + helper(n % 100) if helper(n % 100) != \\'\\' else \\'\\')\\\\\\\\n\\\\\\\\n    if num == 0:\\\\\\\\n        return \\'Zero\\'\\\\\\\\n\\\\\\\\n    result = \\'\\'\\\\\\\\n    i = 0\\\\\\\\n    while num > 0:\\\\\\\\n        if num % 1000 != 0:\\\\\\\\n            result = helper(num % 1000) + \\' \\' + thousands[i] + \\' \\' + result\\\\\\\\n        num //= 1000\\\\\\\\n        i += 1\\\\\\\\n    return result.strip()\\\\\\\\n\\\\\", \\\\\"tests\\\\\": [\\\\\"assert number_to_words(0) == \\'Zero\\'\\\\\", \\\\\"assert number_to_words(123) == \\'One Hundred Twenty Three\\'\\\\\", \\\\\"assert number_to_words(12345) == \\'Twelve Thousand Three Hundred Forty Five\\'\\\\\", \\\\\"assert number_to_words(1234567) == \\'One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\\'\\\\\", \\\\\"assert number_to_words(1000000) == \\'One Million\\'\\\\\"] }\"'}"