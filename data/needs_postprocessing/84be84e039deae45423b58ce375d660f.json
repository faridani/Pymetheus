{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Minimum Window Substring\\\", \\\"description\\\": \\\"Given two strings `s1` and `s2`, write a function that returns the minimum window substring from `s1` that contains all characters of `s2`. If there are multiple such windows, return the lexicographically smallest one.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef min_window_substring(s1: str, s2: str) -> str:\\\\n```\\\\n\\\\n#### Input\\\\n- `s1` (str): The original string.\\\\n- `s2` (str): The target string that must be contained in the window substring.\\\\n\\\\n#### Output\\\\n- Returns the minimum window substring from `s1` that contains all characters of `s2`. If no such window exists, returns an empty string.\\\\n\\\", \\\"code\\\": \\\"from collections import defaultdict\\\\n\\\\ndef min_window_substring(s1: str, s2: str) -> str:\\\\n    if not s2 or not s1:\\\\n        return \\\\\\\"\\\\\\\"\\\\n    s1_len = len(s1)\\\\n    s2_len = len(s2)\\\\n    if s2_len > s1_len:\\\\n        return \\\\\\\"\\\\\\\"\\\\n    target_count = defaultdict(int)\\\\n    for char in s2:\\\\n        target_count[char] += 1\\\\n    left = right = required_chars = 0\\\\n    min_length = float(\\\\\\\"inf\\\\\\\")\\\\n    min_window = \\\\\\\"\\\\\\\"\\\\n    while right < s1_len:\\\\n        if all(target_count[char] >= 0 for char in s2):\\\\n            if right - left + 1 < min_length or (right - left + 1 == min_length and s1[left:right+1] <= min_window):\\\\n                min_length = right - left + 1\\\\n                min_window = s1[left:right+1]\\\\n            left += 1\\\\n        else:\\\\n            if s1[right] in target_count:\\\\n                target_count[s1[right]] -= 1\\\\n            right += 1\\\\n    return min_window\\\", \\\"tests\\\": [\\\"assert min_window_substring('ADOBECODEBANC', 'ABC') == 'BANC'\\\", \\\"assert min_window_substring('', '') == ''\\\", \\\"assert min_window_substring('abc', 'b') == 'bc'\\\", \\\"assert min_window_substring('abcdefg', 'cde') == 'cde'\\\"] }\""
}