{
    "model": "llama3:latest",
    "response": "{\"title\": \"Minimum Window Substring\", \"description\": \"Given two strings `s1` and `s2`, write a function that returns the length of the shortest substring of `s1` that contains all characters in `s2`. If no such substring exists, return 0.\\n\\n#### Function Signature\\n```python\\ndef min_window_substring(s1: str, s2: str) -> int:\\n```\\n\\n#### Input\\n- `s1` (str): The string to search for the shortest substring.\\n- `s2` (str): The string that contains all characters to be searched in `s1`. \\n\\n#### Output\\n- Returns the length of the shortest substring of `s1` that contains all characters in `s2`, or 0 if no such substring exists.\", \"code\": \"from collections import Counter\\n\\ndef min_window_substring(s1: str, s2: str) -> int:\\n    if not s2 or len(s1) < len(s2):\\n        return 0\\n\\n    s1_count = Counter(s1)\\n    s2_count = Counter(s2)\\n\\n    for i in range(len(s1) - len(s2) + 1):\\n        window_count = Counter(s1[i:i+len(s2)])\\n        if window_count == s2_count:\\n            return len(s2)\\n    return 0\", \"tests\": [\"assert min_window_substring(\\\"hello world\\\", \\\"lo\\\") == 3\", \"assert min_window_substring(\\\"a b c d e f g\\\", \\\"abc\\\") == 3\", \"assert min_window_substring(\", \", \\\"xyz\\\") == 0\", \"assert min_window_substring(\\\"abcdefg\\\", \", \") == 8\"]}"
}