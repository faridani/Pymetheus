"{'model': 'phi3:14b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Grouping\\\\\", \\\\\"description\\\\\": \\\\\"Given a list of words, group them into anagrams. Anagrams are words that have the same characters but arranged differently (ignore case sensitivity). Output should be a list of groups where each group contains all the anagrams in it.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef group_anagrams(words: List[str]) -> List[List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of strings containing lowercase letters only.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list where each element is a group of anagrams. The groups themselves are lists and the order within them does not matter.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from collections import defaultdict\\\\\\\\nfrom typing import List, Tuple\\\\\\\\ndef group_anagrams(words: List[str]) -> List[List[str]]:\\\\\\\\n    anagram_groups = defaultdict(list)\\\\\\\\n    for word in words:\\\\\\\\n        sorted_word = \\'\\'.join(sorted(word))\\\\\\\\n        anagram_groups[sorted_word].append(word)\\\\\\\\n    return list(anagram_s groups.values())\\\\\\\\n\\\\\", \\\\\"tests\\\\\": [\\\\\"[assert group_anagrams([\\'eat\\', \\'tea\\', \\'tan\\', \\'ate\\', \\'nat\\', \\'bat\\']) == [[\\'eat\\', \\'tea\\', \\'ate\\'], [\\'tan\\', \\'nat\\'], [\\'bat\\']]]\\\\\", \\\\\"[assert group_ngrams([\\'listen\\', \\'silent\\', \\'enlist\\', \\'google\\']) == [[\\'listen\\', \\'silent\\', \\'enlist\\'], [\\'google\\']]]\\\\\", \\\\\"[assert group_anagrams([]) == []]\\\\\\\\n\\\\\", \\\\\"[assert group_anagrams([\\'act\\', \\'cat\\', \\'tac\\']) == [[\\'act\\', \\'cat\\', \\'tac\\']]]\\\\\"] }\"'}"