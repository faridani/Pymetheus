"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"\\\\\\\\\\\\\"Anagram Detection (Hard)\\\\\\\\\\\\\"\\\\\", \\\\\"description\\\\\": \\\\\"An anagram is a word or phrase formed by rearranging the letters of another word or phrase, typically using all the original letters exactly once. Write a function `find_anagrams` that finds all anagrams of a given string within a list of strings.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(str1: str, words: List[str]) -> List[str]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `str1` (str): A given string to find anagrams for.\\\\\\\\n- `words` (List[str]): A list of strings to search for anagrams within.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of all strings in the input list that are anagrams of the given string, case insensitive and with no duplicates.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from collections import Counter\\\\\\\\n\\\\\\\\ndef find_anagrams(str1: str, words: List[str]) -> List[str]:\\\\\\\\n    # Count each character in the input string\\\\\\\\n    count1 = Counter(str1.lower())\\\\\\\\n    # Create a list of anagram candidates\\\\\\\\n    candidates = [word for word in words if len(word) == len(str1) and Counter(word.lower()) == count1]\\\\\\\\n    return list(set(candidates))\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams(\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", [\\\\\\\\\\\\\"enlist\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\", \\\\\\\\\\\\\"service\\\\\\\\\\\\\"]) == [\\\\\\\\\\\\\"enlist\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\"]\\\\\", \\\\\"assert find_anagrams(\\\\\\\\\\\\\"world\\\\\\\\\\\\\", [\\\\\\\\\\\\\"playground\\\\\\\\\\\\\", \\\\\\\\\\\\\"drawl\\\\\\\\\\\\\", \\\\\\\\\\\\\"drowland\\\\\\\\\\\\\", \\\\\\\\\\\\\"giraffes\\\\\\\\\\\\\"]) == [\\\\\\\\\\\\\"drawl\\\\\\\\\\\\\", \\\\\\\\\\\\\"drowland\\\\\\\\\\\\\"]\\\\\", \\\\\"assert find_anagrams(\\\\\\\\\\\\\"eat\\\\\\\\\\\\\", [\\\\\\\\\\\\\"tea\\\\\\\\\\\\\", \\\\\\\\\\\\\"ate\\\\\\\\\\\\\", \\\\\\\\\\\\\"tan\\\\\\\\\\\\\", \\\\\\\\\\\\\"table\\\\\\\\\\\\\", \\\\\\\\\\\\\"bat\\\\\\\\\\\\\"]) == [\\\\\\\\\\\\\"ate\\\\\\\\\\\\\", \\\\\\\\\\\\\"eat\\\\\\\\\\\\\"]\\\\\"] }\"'}"