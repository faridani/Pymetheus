"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Balanced Brackets\\\\\", \\\\\"description\\\\\": \\\\\"Given a string containing only parentheses, curly braces, and square brackets, determine if the input string has balanced brackets. A string has balanced brackets if:\\\\\\\\n\\\\\\\\n1. Every opening bracket has a corresponding closing bracket of the same type.\\\\\\\\n2. The brackets are properly nested.\\\\\\\\n\\\\\\\\nFor example: \\\\\\\\\\\\\"(){}[]\\\\\\\\\\\\\" is balanced, while \\\\\\\\\\\\\"([)]\\\\\\\\\\\\\" and \\\\\\\\\\\\\"((()\\\\\\\\\\\\\" are not.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef is_balanced(s: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s` (str): A string containing only parentheses, curly braces, and square brackets.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the input string has balanced brackets, `False` otherwise.\\\\\", \\\\\"code\\\\\": \\\\\"def is_balanced(s: str) -> bool:\\\\\\\\n    stack = []\\\\\\\\n    bracket_pairs = {\\\\\\\\\\\\\")\\\\\\\\\\\\\": \\\\\\\\\\\\\"(\\\\\\\\\\\\\", \\\\\\\\\\\\\"}\\\\\\\\\\\\\": \\\\\\\\\\\\\"{\\\\\\\\\\\\\", \\\\\\\\\\\\\"]\\\\\\\\\\\\\": \\\\\\\\\\\\\"[\\\\\\\\\\\\\"}\\\\\\\\n\\\\\\\\n    for char in s:\\\\\\\\n        if char in bracket_pairs.values():  # If it\\'s an opening bracket\\\\\\\\n            stack.append(char)\\\\\\\\n        elif char in bracket_pairs.keys():  # If it\\'s a closing bracket\\\\\\\\n            if not stack or stack.pop() != bracket_pairs[char]:\\\\\\\\n                return False\\\\\\\\n    return len(stack) == 0 \\\\\", \\\\\"tests\\\\\": [\\\\\"assert is_balanced(\\'(){}[]\\') == True\\\\\", \\\\\"assert is_balanced(\\'([{}])\\') == True\\\\\", \\\\\"assert is_balanced(\\'((()))\\') == True\\\\\", \\\\\"assert is_balanced(\\'[()]{}\\') == True\\\\\", \\\\\"assert is_balanced(\\'([)]\\') == False\\\\\", \\\\\"assert is_balanced(\\'((()\\') == False\\\\\", \\\\\"assert is_balanced(\\'}{\\') == False\\\\\"] }\"'}"