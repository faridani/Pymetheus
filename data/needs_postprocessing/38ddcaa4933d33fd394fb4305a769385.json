{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Maximum Sum of a Subsequence\\\", \\\"description\\\": \\\"Given an array of integers `arr` and an integer `k`, find the maximum sum of a subsequence that contains at most `k` elements. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef max_sum_subsequence(arr: list[int], k: int) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `arr` (list[int]): A list of integers.\\\\n- `k` (int): The maximum number of elements allowed in the subsequence.\\\\n\\\\n#### Output\\\\n- Returns the maximum sum of a subsequence that contains at most `k` elements.\\\", \\\"code\\\": \\\"\\\\ndef max_sum_subsequence(arr: list[int], k: int) -> int:\\\\n    n = len(arr)\\\\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\\\\n    \\\\n    for i in range(1, n + 1):\\\\n        for j in range(1, min(i, k) + 1):\\\\n            if arr[i - 1] > 0:\\\\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + arr[i - 1])\\\\n            else:\\\\n                dp[i][j] = dp[i - 1][j]\\\\n    \\\\n    return dp[n][k]\\\\n\\\\n\\\", \\\"tests\\\": [\\\"assert max_sum_subsequence([1, -2, 3, 10, -4, 7, 2], 3) == 12\\\", \\\"assert max_sum_subsequence([-5, 0, 2, -3, 1, 4, 6], 2) == 6\\\", \\\"assert max_sum_subsequence([10, 20, 30, 40, 50], 1) == 50\\\", \\\"assert max_sum_subsequence([-1, -2, -3, -4, -5], 0) == 0\\\"] }\""
}