"{'model': 'phi3:14b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Counting Subarrays with a Specific Sum\\\\\", \\\\\"description\\\\\": \\\\\"Given an array of integers, write a function `count_subarrays` that counts the number of subarrays whose sum equals a given target. The function should take an array and a target integer as inputs and return the count of such subarrays.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef count_subarrays(arr: List[int], target: int) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `arr` (List[int]): A list of integers where 1 <= len(arr) <= 10^4 and -10^5 <= arr[i] <= 10^5.\\\\\\\\n- `target` (int): The target sum for subarrays to count. It is given that the absolute value of the target does not exceed 10^6.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns an integer representing the number of subarrays whose sum equals the target.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from typing import List\\\\\\\\n\\\\\\\\ndef count_subarrays(arr: List[int], target: int) -> int:\\\\\\\\n    prefix_sum = {0: 1}  # Dictionary to store counts of prefix sums\\\\\\\\n    current_sum = 0\\\\\\\\n    count = 0\\\\\\\\n\\\\\\\\n    for num in arr:\\\\\\\\n        current_amo\\\\\\\\n        rt += num\\\\\\\\n        diff = current_sum - target\\\\\\\\n        if diff in prefix_sum:\\\\\\\\n            count += prefix_sum[diff]\\\\\\\\n        \\\\\\\\n        # Update the counts of prefix sums\\\\\\\\n        prefix_sum[current_sum] = prefix_sum.get(current_sum, 0) + 1\\\\\\\\n    \\\\\\\\n    return count\\\\\\\\n\\\\\", \\\\\"tests\\\\\": [\\\\\"assert count_subarrays([2, 4, -6, 7], 3) == 2\\\\\", \\\\\"assert count_subarrays([5, 5, 7], 10) == 2\\\\\", \\\\\"assert count_subarrays([-8, 3, 5, 1, -3], 4) == 3\\\\\"] }\"'}"