"{'model': 'gemma2:27b-instruct-q5_K_S', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Matrix Spiral Traversal\\\\\", \\\\\"description\\\\\": \\\\\"You are given an m x n integer matrix.  Write a function `spiral_order` that returns the elements of the matrix in spiral order (clockwise).\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef spiral_order(matrix: list[list[int]]) -> list[int]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `matrix` (list[list[int]]): A 2D integer matrix.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of integers representing the elements of the matrix in spiral order.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def spiral_order(matrix: list[list[int]]) -> list[int]:\\\\\\\\n    m, n = len(matrix), len(matrix[0])\\\\\\\\n    top, bottom = 0, m - 1\\\\\\\\n    left, right = 0, n - 1\\\\\\\\n    direction = 0  # 0: right, 1: down, 2: left, 3: up\\\\\\\\n    result = []\\\\\\\\n\\\\\\\\n    while top <= bottom and left <= right:\\\\\\\\n        if direction == 0:\\\\\\\\n            for i in range(left, right + 1):\\\\\\\\n                result.append(matrix[top][i])\\\\\\\\n            top += 1\\\\\\\\n        elif direction == 1:\\\\\\\\n            for i in range(top, bottom + 1):\\\\\\\\n                result.append(matrix[i][right])\\\\\\\\n            right -= 1\\\\\\\\n        elif direction == 2:\\\\\\\\n            for i in range(right, left - 1, -1):\\\\\\\\n                result.append(matrix[bottom][i])\\\\\\\\n            bottom -= 1\\\\\\\\n        else:\\\\\\\\n            for i in range(bottom, top - 1, -1):\\\\\\\\n                result.append(matrix[i][left])\\\\\\\\n            left += 1\\\\\\\\n        direction = (direction + 1) % 4\\\\\\\\n    return result\\\\\", \\\\\"tests\\\\\": [\\\\\"assert spiral_order([[1,2,3],[4,5,6],[7,8,9]]) == [1,2,3,6,9,8,7,4,5]\\\\\", \\\\\"assert spiral_order([[1,2,3,4],[5,6,7,8],[9,10,11,12]]) == [1,2,3,4,8,12,11,10,9,5,6,7]\\\\\"] }\"'}"