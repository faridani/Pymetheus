{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Minimum Window Substring\\\", \\\"description\\\": \\\"Write a function `min_window_substring` that finds the minimum window substring within a given string `s` that contains all characters from another given string `t`. The function should return the minimum window substring if it exists, otherwise return an empty string.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef min_window_substring(s: str, t: str) -> str:\\\\n```\\\\n\\\\n#### Input\\\\n- `s` (str): A target string that may contain any characters.\\\\n- `t` (str): A query string that contains the characters to search for in `s`.\\\\n\\\\n#### Output\\\\n- Returns the minimum window substring of `s` that contains all characters from `t`, or an empty string if no such window exists.\\\", \\\"code\\\": \\\"from collections import Counter\\\\n\\\\ndef min_window_substring(s: str, t: str) -> str:\\\\n    if not s or not t:\\\\n        return \\\\\\\"\\\\\\\"\\\\n    t_count = Counter(t)\\\\n    required_chars = len(t_count)\\\\n    left = 0\\\\n    min_len = float('inf')\\\\n    min_window = \\\\\\\"\\\\\\\"\\\\n    for right in range(len(s)):\\\\n        while all(s[left:right+1].count(char) >= count for char, count in t_count.items()):\\\\n            if right - left + 1 < min_len:\\\\n                min_len = right - left + 1\\\\n                min_window = s[left:right+1]\\\\n            left += 1\\\\n    return min_window\\\", \\\"tests\\\": [\\\"assert min_window_substring('ADOBECODEBANC', 'ABC') == 'BANC'\\\", \\\"assert min_window_substring('hello world', 'world') == 'world'\\\", \\\"assert min_window_substring('abcde', 'ace') == 'ace'\\\", \\\"assert min_window_substring('', 'abc') == ''\\\"] }\""
}