{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Minimum Distance Problem\\\", \\\"description\\\": \\\"You are given a list of integers and an integer `target`. Find the minimum number of moves to reach the target. You can either increase or decrease the current value by 1.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef min_moves(nums: List[int], target: int) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `nums` (List[int]): A list of integers.\\\\n- `target` (int): The target value to reach.\\\\n\\\\n#### Output\\\\n- Returns the minimum number of moves to reach the target.\\\", \\\"code\\\": \\\"\\\\nfrom typing import List\\\\nimport heapq\\\\n\\\\ndef min_moves(nums: List[int], target: int) -> int:\\\\n    # Initialize a priority queue with the first difference and its corresponding move count\\\\n    pq = [(abs(nums[0] - target), 1)]\\\\n    \\\\n    for i in range(1, len(nums)):\\\\n        if nums[i] != target:\\\\n            new_diff = abs(nums[i] - target)\\\\n            while pq and new_diff >= min(pq):\\\\n                prev_diff, moves = heapq.heappop(pq)\\\\n                if new_diff < prev_diff + 2:\\\\n                    return moves\\\\n            heapq.heappush(pq, (new_diff, moves + 1))\\\\n    \\\\n    # If we've reached this point, it means the target is reachable\\\\n    min_moves = float('inf')\\\\n    while pq:\\\\n        diff, moves = heapq.heappop(pq)\\\\n        if moves < min_moves:\\\\n            min_moves = moves\\\\n    return min_moves\\\", \\\"tests\\\": [\\\"assert min_moves([1, 2, 3], 4) == 5\\\", \\\"assert min_moves([-10, -9, -8], 0) == 13\\\", \\\"assert min_moves([5, 6, 7], 2) == 12\\\"] }\""
}