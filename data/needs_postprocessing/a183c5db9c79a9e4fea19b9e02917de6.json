"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"\\\\\\\\\\\\\"Levenshtein Distance Calculator (Medium)\\\\\\\\\\\\\"\\\\\", \\\\\"description\\\\\": \\\\\"The Levenshtein distance between two strings is the minimum number of single-character edits (insertions, deletions or substitutions) required to change one word into the other.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef levenshtein_distance(str1: str, str2: str) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `str1` (str): A non-empty string.\\\\\\\\n- `str2` (str): A non-empty string.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the Levenshtein distance between `str1` and `str2` as an integer.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def levenshtein_distance(str1: str, str2: str) -> int:\\\\\\\\n    # Initialize matrices for insertions, deletions and substitutions\\\\\\\\n    len1 = len(str1)+1\\\\\\\\n    len2 = len(str2)+1\\\\\\\\n    dp = [[0] * len2 for _ in range(len1)]\\\\\\\\n\\\\\\\\n    # Filling the matrix with distance values based on insertions, deletions and substitutions.\\\\\\\\n    for i in range(len1):\\\\\\\\n        dp[i][0] = i\\\\\\\\n    for j in range(len2):\\\\\\\\n        dp[0][j] = j\\\\\\\\n\\\\\\\\n    # Fill the rest of the matrix using dynamic programming approach\\\\\\\\n    for i in range(1, len1+1):\\\\\\\\n        for j in range(1, len2+1):\\\\\\\\n            if str1[i-1] == str2[j-1]:\\\\\\\\n                dp[i][j] = dp[i-1][j-1]\\\\\\\\n            else:\\\\\\\\n                dp[i][j] = min(dp[i-1][j]+1, dp[i][j-1]+1, dp[i-1][j-1]+1)\\\\\\\\n    \\\\\\\\n    # The bottom right value is the Levenshtein distance\\\\\\\\n    return dp[-1][-1]\\\\\\\\n\\\\\", \\\\\"tests\\\\\": [\\\\\"assert levenshtein_distance(\\\\\\\\\\\\\"kitten\\\\\\\\\\\\\", \\\\\\\\\\\\\"sitting\\\\\\\\\\\\\") == 3\\\\\", \\\\\"assert levenshtein_distance(\\\\\\\\\\\\\"python\\\\\\\\\\\\\", \\\\\\\\\\\\\"pythons\\\\\\\\\\\\\") == 1\\\\\", \\\\\"assert levenshtein_distance(\\\\\\\\\\\\\"hello\\\\\\\\\\\\\", \\\\\\\\\\\\\"world\\\\\\\\\\\\\") == 4\\\\\", \\\\\"assert levenshtein_distance(\\\\\\\\\\\\\"programming\\\\\\\\\\\\\", \\\\\\\\\\\\\"programmar\\\\\\\\\\\\\") == 2\\\\\"] }\"'}"