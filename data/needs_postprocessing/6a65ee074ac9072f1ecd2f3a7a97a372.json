"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Detection (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Determine if two strings are anagrams of each other, which means they contain the same exact letters. However, consider only alphabetic characters and ignore capitalization. For example, the strings \\'Welcome\\' and \\'emocleW\\' are anagrams.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef are_anagrams(s1: str, s2: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s1` (str): A string containing only alphabetic characters in any case.\\\\\\\\n- `s2` (str): Another string containing only alphabetic characters in any case.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the two input strings are anagrams, `False` otherwise.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from collections import Counter\\\\\\\\ndef are_anagrams(s1: str, s2: str) -> bool:\\\\\\\\n    # Remove punctuation and convert to lowercase\\\\\\\\ns1 = \\'\\'.join(char for char in s1 if char.isalpha()).lower()\\\\\\\\ns2 = \\'\\'.join(char for char in s2 if char.isalpha()).lower()\\\\\\\\n    # Count the occurrences of each letter in both strings\\\\\\\\ncounts1 = Counter(s1)\\\\\\\\ncounts2 = Counter(s2)\\\\\\\\n    # Check if the two counts are the same\\\\\\\\nreturn counts1 == counts2\\\\\", \\\\\"tests\\\\\": [\\\\\"assert are_anagrams(\\\\\\\\\\\\\"Welcome\\\\\\\\\\\\\", \\\\\\\\\\\\\"emocleW\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert are_anagrams(\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert are_anagrams(\\\\\\\\\\\\\"hello\\\\\\\\\\\\\", \\\\\\\\\\\\\"world\\\\\\\\\\\\\") == False\\\\\", \\\\\"assert are_anagrams(\\\\\\\\\\\\\"a man, a plan, a canal: Panama\\\\\\\\\\\\\", \\\\\\\\\\\\\"amanaplanacanalpanamamalaplanadanamapana\\\\\\\\\\\\\") == True\\\\\"] }\"'}"