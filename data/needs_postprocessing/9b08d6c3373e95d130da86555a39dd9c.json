"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard - Balanced Parentheses\\\\\", \\\\\"description\\\\\": \\\\\"#### Description\\\\\\\\nGiven a string `s` containing only parentheses (e.g., \\'(\\', \\')\\', \\'{\\', \\'}\\', \\'[\\', \\']\\'), determine if the input string has balanced parentheses.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef is_balanced(s: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s` (str): A string containing only parentheses characters.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the parentheses in the input string are balanced, `False` otherwise.\\\\\", \\\\\"code\\\\\": \\\\\"def is_balanced(s: str) -> bool:\\\\\\\\n    stack = []\\\\\\\\n    parentheses_map = {\\')\\': \\'(\\', \\'}\\': \\'{\\', \\']\\': \\'[\\'}\\\\\\\\n    for char in s:\\\\\\\\n        if char in parentheses_map.values():  # Opening parenthesis\\\\\\\\n            stack.append(char)\\\\\\\\n        elif char in parentheses_map.keys():  # Closing parenthesis\\\\\\\\n            if not stack or stack.pop() != parentheses_map[char]:\\\\\\\\n                return False\\\\\\\\n    return not stack\\\\\", \\\\\"tests\\\\\": [\\\\\"\\'assert is_balanced(\\\\\\\\\\\\\"(){}[]\\\\\\\\\\\\\") == True\\'\\\\\", \\\\\"\\'assert is_balanced(\\\\\\\\\\\\\"([{}])\\\\\\\\\\\\\") == True\\'\\\\\", \\\\\"\\'assert is_balanced(\\\\\\\\\\\\\"(]\\\\\\\\\\\\\") == False\\'\\\\\", \\\\\"\\'assert is_balanced(\\\\\\\\\\\\\"([)]\\\\\\\\\\\\\") == False\\'\\\\\", \\\\\"\\'assert is_balanced(\\\\\\\\\\\\\"{{([])}}\\\\\\\\\\\\\") == True\\'\\\\\"] }\"'}"