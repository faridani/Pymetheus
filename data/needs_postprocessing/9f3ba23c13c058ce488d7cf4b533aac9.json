"{'model': 'aya:35b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Medium: Minimum Cost Path in a Grid\\\\\", \\\\\"description\\\\\": \\\\\"You are given an m x n grid of numbers, representing the cost of moving from one cell to another. Find the minimum cost path from the top-left corner to the bottom-right corner.\\\\\\\\n\\\\\\\\nEach cell in the grid may contain obstacles, which are represented by a value of -1. You cannot move through these cells.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef min_cost_path(grid: List[List[int]]) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `grid` (List[List[int]]): A 2D list of integers representing the cost grid. Each value is either a positive number or -1 (obstacle).\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns an integer representing the minimum cost to reach the bottom-right corner from the top-left.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def min_cost_path(grid):\\\\\\\\n    m, n = len(grid), len(grid[0])\\\\\\\\n    dp = [[0] * n for _ in range(m)]\\\\\\\\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\\\\\\\\n\\\\\\\\n    for i in range(m):\\\\\\\\n        for j in range(n):\\\\\\\\n            if grid[i][j] == -1:\\\\\\\\n                dp[i][j] = float(\\'inf\\')\\\\\\\\n            else:\\\\\\\\n                for dx, dy in directions:\\\\\\\\n                    x, y = i + dx, j + dy\\\\\\\\n                    if 0 <= x < m and 0 <= y < n:\\\\\\\\n                        dp[i][j] = min(dp[i][j], dp[x][y] + grid[i][j])\\\\\\\\n    return dp[-1][-1]\\\\\\\\n\\\\\", \\\\\"tests\\\\\": [\\\\\"assert min_cost_path([[0, -1, 0], [-1, 1, 0], [0, 0, 0]]) == 2\\\\\", \\\\\"assert min_cost_path([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 14\\\\\", \\\\\"assert min_cost_path([[0, -1, 0, -1], [-1, 2, -1, 3], {-1, -1, 4, 5}, {-1, -1, -1, 6]]) == 8\\\\\"] }\"'}"