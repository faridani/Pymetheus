"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard - Circular Prime Detector\\\\\", \\\\\"description\\\\\": \\\\\"A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.  A circular prime is a prime number where all of its rotations are also prime.\\\\\\\\n\\\\\\\\nFor example, 197 is a circular prime because:\\\\\\\\n- 197 is prime\\\\\\\\n- 971 is prime\\\\\\\\n- 719 is prime\\\\\\\\n\\\\\\\\nWrite a function `is_circular_prime` that takes an integer `n` and returns `True` if `n` is a circular prime, `False` otherwise. \\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef is_circular_prime(n: int) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `n` (int): A positive integer.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if `n` is a circular prime, `False` otherwise.\\\\\", \\\\\"code\\\\\": \\\\\"def is_prime(num):\\\\\\\\n    if num <= 1:\\\\\\\\n        return False\\\\\\\\n    for i in range(2, int(num**0.5) + 1):\\\\\\\\n        if num % i == 0:\\\\\\\\n            return False\\\\\\\\n    return True\\\\\\\\n\\\\\\\\ndef is_circular_prime(n: int) -> bool:\\\\\\\\n    if not is_prime(n):\\\\\\\\n        return False\\\\\\\\n    s = str(n)\\\\\\\\n    for i in range(len(s)):\\\\\\\\n        rotated_num = int(s[i:] + s[:i])\\\\\\\\n        if not is_prime(rotated_num):\\\\\\\\n            return False\\\\\\\\n    return True\\\\\", \\\\\"tests\\\\\": [\\\\\"assert is_circular_prime(197) == True\\\\\", \\\\\"assert is_circular_prime(37) == True\\\\\", \\\\\"assert is_circular_prime(313) == True\\\\\", \\\\\"assert is_circular_prime(12) == False\\\\\", \\\\\"assert is_circular_prime(56) == False\\\\\"] }\"'}"