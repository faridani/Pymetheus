"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard - Maze Solver\\\\\", \\\\\"description\\\\\": \\\\\"You are given a 2D grid representing a maze. The grid contains the following characters:\\\\\\\\n\\\\\\\\n- `\\'S\\'` : Starting point\\\\\\\\n- `\\'E\\'` : Ending point\\\\\\\\n- `\\'.\\'`: Open path\\\\\\\\n- `\\'#\\'` : Wall\\\\\\\\n\\\\\\\\nWrite a function `solve_maze` that takes the maze as input and returns `True` if there is a path from the starting point to the ending point, otherwise `False`.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef solve_maze(maze: list[list[str]]) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n\\\\\\\\n- `maze` (list[list[str]]): A 2D list representing the maze.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if there is a path from \\'S\\' to \\'E\\', otherwise `False`.\\\\\\\\n\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def solve_maze(maze: list[list[str]]) -> bool:\\\\\\\\n    rows = len(maze)\\\\\\\\n    cols = len(maze[0])\\\\\\\\n\\\\\\\\n    def dfs(row, col):\\\\\\\\n        if row < 0 or row >= rows or col < 0 or col >= cols or maze[row][col] == \\'#\\':\\\\\\\\n            return False\\\\\\\\n        if maze[row][col] == \\'E\\':\\\\\\\\n            return True\\\\\\\\n\\\\\\\\n        maze[row][col] = \\'#\\'  # Mark as visited\\\\\\\\n        return dfs(row + 1, col) or dfs(row - 1, col) or dfs(row, col + 1) or dfs(row, col - 1)\\\\\\\\n    \\\\\\\\n    for i in range(rows):\\\\\\\\n        for j in range(cols):\\\\\\\\n            if maze[i][j] == \\'S\\':\\\\\\\\n                return dfs(i, j)\\\\\\\\n    return False\\\\\", \\\\\"tests\\\\\": [\\\\\"maze = [[\\'S\\',\\'.\\',\\'.\\',\\'#\\',\\'.\\'],[\\'.\\',\\'.\\',\\'#\\',\\'.\\',\\'.\\'],[\\'.\\',\\'.\\',\\'.\\',\\'.\\',\\'E\\'],[\\'#\\',\\'#\\',\\'.\\',\\'.\\',\\'#\\']]; assert solve_maze(maze) == True\\\\\", \\\\\"maze2 = [[\\'S\\',\\'.\\',\\'#\\',\\'.\\',\\'.\\'],[\\'.\\',\\'#\\',\\'.\\',\\'.\\',\\'.\\'],[\\'.\\',\\'#\\',\\'.\\',\\'E\\',\\'.\\'],[\\'.\\',\\'#.\\',\\'#\\',\\'.\\',\\'#\\']]; assert solve_maze(maze2) == False\\\\\"] }\"'}"