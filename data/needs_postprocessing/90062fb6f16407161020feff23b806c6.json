"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Finder (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_anagrams` that finds all the anagrams of a given word or phrase within a larger text. An anagram is a word or phrase formed by rearranging the letters of another word or phrase, typically using all the original letters exactly once.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(word: str, text: str) -> List[str]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `word` (str): The word or phrase to find anagrams of.\\\\\\\\n- `text` (str): A larger text that may contain multiple occurrences of the word or phrase as well as other words and phrases.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of all the anagrams found within the given text.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def find_anagrams(word: str, text: str) -> List[str]:\\\\\\\\n    # Preprocess the word by removing spaces and converting to lowercase\\\\\\\\n    word = \\'\\'.join(char for char in word.lower() if char not in [\\' \\', \\'.\\', \\',\\', \\'!\\', \\'?\\'])\\\\\\\\n    # Create a dictionary to store character counts for each letter in the alphabet\\\\\\\\n    counts = {chr(i): 0 for i in range(ord(\\'a\\'), ord(\\'z\\') + 1)}\\\\\\\\n    # Count character frequencies in the word\\\\\\\\n    for char in word: counts[char] += 1\\\\\\\\n    # Initialize an empty list to store found anagrams\\\\\\\\n    anagrams = []\\\\\\\\n    # Iterate through each word in the text\\\\\\\\n    words = text.split()\\\\\\\\n    for possible_anagram in words:\\\\\\\\n        # Preprocess the potential anagram as we did with the word\\\\\\\\n        possible_anagram = \\'\\'.join(char for char in possible_anagram.lower() if char not in [\\' \\', \\'.\\', \\',\\', \\'!\\', \\'?\\'])\\\\\\\\n        # Check if the character frequencies of the potential anagram match those of the word\\\\\\\\n        if all([counts[char] == counts.get(char, 0) for char in possible_anagram]):\\\\\\\\n            # If so, add it to the list of anagrams\\\\\\\\n            anagrams.append(possible_anagram)\\\\\\\\n    \\\\\\\\n    return anagrams\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams(\\'listen\\', \\'No one is a song, it\\'s pretty funky in public\\') == [\\'silent\\', \\'enlist\\']\\\\\", \\\\\"assert find_anagrams(\\'actors\\', \\'The play was acted by talented actors.\\') == [\\'actorst\\', \\'actors\\']\\\\\", \\\\\"assert find_anagrams(\\'hello\\', \\'Hello there! How are you?\\') == []\\\\\"] }\"'}"