"{'model': 'gemma2:27b-instruct-q5_K_S', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard - Longest Substring Without Repeating Characters\\\\\", \\\\\"description\\\\\": \\\\\"Given a string `s`, find the length of the **longest substring** without repeating characters.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef longest_substring_without_repeating_characters(s: str) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s` (str): A string containing only lowercase English letters.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the length of the longest substring without repeating characters.\\\\\\\\n\\\\\\\\n#### Constraints\\\\\\\\n- 1 <= len(s) <= 5 * 10^4\\\\\\\\n\\\\\\\\n#### Example\\\\\\\\nInput: s = \\\\\\\\\\\\\"abcabcbb\\\\\\\\\\\\\"\\\\\\\\nOutput: 3\\\\\\\\nExplanation: The longest substring without repeating letters is \\\\\\\\\\\\\"abc\\\\\\\\\\\\\", which has a length of 3.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def longest_substring_without_repeating_characters(s: str) -> int:\\\\\\\\n    char_set = set()\\\\\\\\n    l = 0\\\\\\\\n    longest = 0\\\\\\\\n    for r in range(len(s)):\\\\\\\\n        while s[r] in char_set:\\\\\\\\n            char_set.remove(s[l])\\\\\\\\n            l += 1\\\\\\\\n        char_set.add(s[r])\\\\\\\\n        longest = max(longest, r - l + 1)\\\\\\\\n    return longest\\\\\", \\\\\"tests\\\\\": [\\\\\"assert longest_substring_without_repeating_characters(\\\\\\\\\\\\\"abcabcbb\\\\\\\\\\\\\") == 3\\\\\", \\\\\"assert longest_substring_without_repeating_characters(\\\\\\\\\\\\\"bbbbb\\\\\\\\\\\\\") == 1\\\\\", \\\\\"assert longest_substring_without_repeating_characters(\\\\\\\\\\\\\"pwwkew\\\\\\\\\\\\\") == 3\\\\\", \\\\\"assert longest_substring_without_repeating_characters(\\\\\\\\\\\\\"\\\\\\\\\\\\\") == 0\\\\\"] }\"'}"