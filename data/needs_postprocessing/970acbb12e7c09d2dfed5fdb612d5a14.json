"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Medium: Binary Search Tree Validation\\\\\", \\\\\"description\\\\\": \\\\\"A binary search tree (BST) is a data structure that follows the rule where for each node, all nodes in its left subtree have values less than its own value, and all nodes in its right subtree have values greater than its own value. Given a binary tree represented as a list of lists, where each inner list represents a node and contains the node\\'s value, left child index (or -1 if no left child), and right child index (or -1 if no right child). Write a function `is_valid_bst` that takes this representation of a binary tree and returns True if it is a valid BST, False otherwise.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef is_valid_bst(tree: list[list[int]]) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `tree` (list[list[int]]): A binary tree represented as a list of lists. Each inner list has the format [value, left_child_index, right_child_index].\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the input tree is a valid BST, `False` otherwise.\\\\\", \\\\\"code\\\\\": \\\\\"def is_valid_bst(tree: list[list[int]]) -> bool:\\\\\\\\n    def validate(node_index, min_val, max_val):\\\\\\\\n        if node_index == -1:\\\\\\\\n            return True\\\\\\\\n        node = tree[node_index]\\\\\\\\n        value = node[0]\\\\\\\\n        if value <= min_val or value >= max_val:\\\\\\\\n            return False\\\\\\\\n        return validate(node[1], min_val, value) and validate(node[2], value, max_val)\\\\\\\\n    return validate(0, float(\\'-inf\\'), float(\\'inf\\'))\\\\\", \\\\\"tests\\\\\": [\\\\\"assert is_valid_bst([[4, 1, 2], [2, -1, -1], [5, -1, -1]]) == True \\\\\", \\\\\"assert is_valid_bst([[1, 2, 3], [2, -1, -1], [5, -1, -1]]) == False\\\\\", \\\\\"assert is_valid_bst([[5, 1, -1], [2, -1, -1], [7, 4, -1]]) == True\\\\\", \\\\\"assert is_valid_bst([[10, 5, 15], [5, 3, 8], [15, 12, 18]]) == True\\\\\"] }\"'}"