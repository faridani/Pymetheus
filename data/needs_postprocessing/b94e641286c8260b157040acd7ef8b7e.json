{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Medium: Minimum Path Sum\\\", \\\"description\\\": \\\"Given a 2D grid of integers, write a function `min_path_sum` that calculates the minimum path sum from top-left to bottom-right. You are only allowed to move right or down.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef min_path_sum(grid: list) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `grid` (list): A 2D grid of integers, where each row is a list and the size of the grid is at least 1x1.\\\\n\\\\n#### Output\\\\n- Returns an integer representing the minimum path sum from top-left to bottom-right.\\\\n\\\\nNote: The problem does not specify that you cannot pass through the same cell twice. This is left as an exercise for you.\\\\n\\\", \\\"code\\\": \\\"\\\\nimport sys\\\\n\\\\ndef min_path_sum(grid):\\\\n    if not grid:\\\\n        return 0\\\\n    \\\\n    m, n = len(grid), len(grid[0])\\\\n    dp = [[0] * n for _ in range(m)]\\\\n    \\\\n    dp[0][0] = grid[0][0]\\\\n    for i in range(1, m):\\\\n        dp[i][0] = dp[i-1][0] + grid[i][0]\\\\n    for j in range(1, n):\\\\n        dp[0][j] = dp[0][j-1] + grid[0][j]\\\\n    \\\\n    for i in range(1, m):\\\\n        for j in range(1, n):\\\\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\\\\n    \\\\n    return dp[m-1][n-1]\\\\n\\\", \\\"tests\\\": [\\\"assert min_path_sum([[1,2,3],[4,5,6]]) == 12\\\", \\\"assert min_path_sum([[-1,-10,0],[-9,100,100])) == -19\\\", \\\"assert min_path_sum([]) == 0\\\"] }\""
}