"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Finder (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"An anagram is a word or phrase that consists of the same letters as another word or phrase, but arranged differently. Write a function `find_anagrams` that finds all anagrams of a given string within a provided list of strings.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(target: str, words: List[str]) -> List[str]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `target` (str): The target string to find anagrams of.\\\\\\\\n- `words` (List[str]): A list of strings containing potential anagrams.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of strings that are anagrams of the input target string.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"import collections\\\\\\\\ndef find_anagrams(target: str, words: List[str]) -> List[str]:\\\\\\\\n    # Count the frequency of each character in the target string\\\\\\\\n    target_count = collections.Counter(target)\\\\\\\\n    \\\\\\\\n    # Create a list of anagram candidates by filtering the input words based on the character counts of the target string\\\\\\\\n    anagrams = [word for word in words if collections.Counter(word) == target_count]\\\\\\\\n    return anagrams\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams(\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", [\\\\\\\\n    \\'enlist\\',\\\\\\\\n    \\'silent\\',\\\\\\\\n    \\'enlistment\\'\\\\\\\\n  ]) == [\\'enlist\\', \\'silent\\']\\\\\", \\\\\"assert find_anagrams(\\\\\\\\\\\\\"actinium\\\\\\\\\\\\\", [\\\\\\\\n    \\'nicotine\\',\\\\\\\\n    \\'cinnamon\\',\\\\\\\\n    \\'cinematics\\',\\\\\\\\n    \\'inactivity\\'\\\\\\\\n  ]) == [\\'nicotine\\', \\'cinnamon\\']\\\\\"] }\"'}"