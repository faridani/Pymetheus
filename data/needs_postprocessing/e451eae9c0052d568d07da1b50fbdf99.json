"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Finder (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_anagrams(words: List[str]) -> Dict[str, List[str]]` that takes a list of words and returns a dictionary where each key is a word and the value is a list of all the anagrams of the key in the given list.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of strings containing lowercase English words with no spaces or punctuation.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a dictionary where each key is a word and the value is a list of all its anagrams in the given list. The keys and values are lists of strings.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from collections import Counter, defaultdict\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n    # Create a dictionary to store anagrams\\\\\\\\n    anagrams = defaultdict(list)\\\\\\\\n    \\\\\\\\n    # Iterate over each word in the list\\\\\\\\n    for word in words:\\\\\\\\n        # Count the characters of the current word\\\\\\\\n        counts = Counter(word)\\\\\\\\n        \\\\\\\\n        # Iterate over each word again, looking for anagrams\\\\\\\\n        for other_word in words:\\\\\\\\n            # If the two words have different lengths, they can\\'t be anagrams, skip to the next word\\\\\\\\n            if len(other_word) != len(word):\\\\\\\\n                continue\\\\\\\\n            \\\\\\\\n            # Count the characters of the other word\\\\\\\\n            counts_other = Counter(other_word)\\\\\\\\n            \\\\\\\\n            # Check if the character counts of the current and other words are identical\\\\\\\\n            if counts == counts_other:\\\\\\\\n                anagrams[word].append(other_word)\\\\\\\\n    \\\\\\\\n    # Return the dictionary of anagrams\\\\\\\\n    return dict(anagrams)\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\\\\\\\\\\\\"listen\\\\\\\\\\\\\", \\\\\\\\\\\\\"silent\\\\\\\\\\\\\", \\\\\\\\\\\\\"enlist\\\\\\\\\\\\\"]) == {\\\\\\\\\\\\\"listen\\\\\\\\\\\\\": [\\\\\\\\\\\\\"silent\\\\\\\\\\\\\", \\\\\\\\\\\\\"enlist\\\\\\\\\\\\\"], \\\\\\\\\\\\\"silent\\\\\\\\\\\\\": [\\\\\\\\\\\\\"listen\\\\\\\\\\\\\"], \\\\\\\\\\\\\"enlist\\\\\\\\\\\\\": [\\\\\\\\\\\\\"listen\\\\\\\\\\\\\"]}\\\\\", \\\\\"assert find_anagrams([\\\\\\\\\\\\\"cat\\\\\\\\\\\\\", \\\\\\\\\\\\\"act\\\\\\\\\\\\\", \\\\\\\\\\\\\"tac\\\\\\\\\\\\\"]) == {\\\\\\\\\\\\\"cat\\\\\\\\\\\\\": [\\\\\\\\\\\\\"act\\\\\\\\\\\\\", \\\\\\\\\\\\\"tac\\\\\\\\\\\\\"], \\\\\\\\\\\\\"act\\\\\\\\\\\\\": [\\\\\\\\\\\\\"cat\\\\\\\\\\\\\", \\\\\\\\\\\\\"tac\\\\\\\\\\\\\"], \\\\\\\\\\\\\"tac\\\\\\\\\\\\\": [\\\\\\\\\\\\\"cat\\\\\\\\\\\\\", \\\\\\\\\\\\\"act\\\\\\\\\\\\\"]}\\\\\"] }\"'}"