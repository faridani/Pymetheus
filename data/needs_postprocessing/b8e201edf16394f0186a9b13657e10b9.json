"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Integer to Roman Numeral Conversion\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `int_to_roman` that converts a non-negative integer less than 4000 into its Roman numeral representation.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef int_to_roman(num: int) -> str:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `num` (int): A non-negative integer less than 4000.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a string representing the Roman numeral equivalent of the input integer.\\\\\", \\\\\"code\\\\\": \\\\\"def int_to_roman(num: int) -> str:\\\\\\\\n    roman_map = { 1: \\'I\\', 4: \\'IV\\', 5: \\'V\\', 9: \\'IX\\', 10: \\'X\\', 40: \\'XL\\', 50: \\'L\\', 90: \\'XC\\', 100: \\'C\\', 400: \\'XD\\', 500: \\'D\\', 900: \\'CM\\', 1000: \\'M\\' }\\\\\\\\n    i = 12\\\\\\\\n    roman_numeral = \\'\\'\\\\\\\\n    while num != 0:\\\\\\\\n        if list(roman_map.keys())[i] <= num:\\\\\\\\n            roman_numeral += list(roman_map.values())[i]\\\\\\\\n            num -= list(roman_map.keys())[i]\\\\\\\\n        else:\\\\\\\\n            i -= 1\\\\\\\\n    return roman_numeral\\\\\", \\\\\"tests\\\\\": [\\\\\"assert int_to_roman(3) == \\\\\\\\\\\\\"III\\\\\\\\\\\\\"\\\\\", \\\\\"assert int_to_roman(9) == \\\\\\\\\\\\\"IX\\\\\\\\\\\\\"\\\\\", \\\\\"assert int_to_roman(58) == \\\\\\\\\\\\\"LVIII\\\\\\\\\\\\\"\\\\\", \\\\\"assert int_to_roman(1994) == \\\\\\\\\\\\\"MCMXCIV\\\\\\\\\\\\\"\\\\\"] }\"'}"