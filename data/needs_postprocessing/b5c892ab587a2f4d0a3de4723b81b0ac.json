"{'model': 'mistral:latest', 'response': '{\"title\": \"\\'Reverse Polish Notation (RPN) Calculator (Hard)\\'\", \"description\": \"Write a function `calculate_rpn` that takes an array of numbers and operators as input, follows the rules of Reverse Polish Notation (RPN), and returns the result of the calculation. \\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef calculate_rpn(arr: List[str]) -> float:\\\\n```\\\\n\\\\n#### Input\\\\n- `arr` (List[str]): A list containing numbers and operators, following the Reverse Polish Notation rules.\\\\n\\\\n#### Output\\\\n- Returns the result of the calculation as a float.\\\\n\\\\nReverse Polish Notation is an expression notation that reverses the order of operators and operands. In RPN, instead of writing expressions like `(2 + 3) * 4`, you would write `2 3 + 4 *`. Operators are placed after their corresponding operands.\\\\n\\\\n#### Constraints\\\\n- The input list will only contain numbers (positive and negative), decimal points, addition (+), subtraction (-), multiplication (\\\\\\\\*), division (/), and exponentiation (**). No parentheses or spaces are allowed.\", \"code\": \"def calculate_rpn(arr: List[str]) -> float:\\\\n    stack = []\\\\n    operators = {\\'+\\': lambda x, y: x + y, \\'-\\': lambda x, y: x - y, \\'*\\': lambda x, y: x * y, \\'/\\': lambda x, y: x / y, \\'**\\': lambda x, y: x ** y}\\\\n    for item in arr:\\\\n        if item.isnumeric():\\\\n            stack.append(float(item))\\\\n        elif item in operators:\\\\n            b = stack.pop()\\\\n            a = stack.pop()\\\\n            stack.append(operators[item](a, b))\\\\n    return stack[0]\", \"tests\": [\"assert calculate_rpn([4, 3, +]) == 7\", \"assert calculate_rpn([6, 2, *, 3, **, /]) == 1.854375\", \"assert calculate_rpn([10, -2, 3, *]) == -20\", \"assert calculate_rpn([\\'12\\', \\'.5\\', *, \\'-4\\']) == -5.6\"]}'}"