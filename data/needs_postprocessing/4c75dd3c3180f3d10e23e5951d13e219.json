{
    "model": "gemma2:27b-instruct-q5_K_S",
    "response": "\"{ \\\"title\\\": \\\"Medium: Array Rotation\\\", \\\"description\\\": \\\"Given an array of integers `nums` and an integer `k`, rotate the array to the right by `k` steps.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef rotate_array(nums: list[int], k: int) -> None:\\\\n```\\\\n\\\\n#### Input\\\\n- `nums`: A list of integers representing the input array.\\\\n- `k`: An integer representing the number of steps to rotate the array to the right.\\\\n\\\\n#### Output\\\\n- Modifies the `nums` list in-place, rotating it to the right by `k` steps.\\\\n\\\\n#### Constraints:\\\\n - 1 <= nums.length <= 10^5\\\\n - -2^31 <= nums[i] <= 2^31 - 1\\\\n - 0 <= k <= 10^5\\\\n\\\\n#### Example:\\\\nIf `nums = [1,2,3,4,5,6,7]` and `k = 3`, the function should modify `nums` to `[5,6,7,1,2,3,4]`.\\\\n\\\\n\\\\n\\\", \\\"code\\\": \\\"def rotate_array(nums: list[int], k: int) -> None:\\\\n    n = len(nums)\\\\n    k %= n\\\\n    nums[:] = nums[-k:] + nums[:-k]\\\\n\\\", \\\"tests\\\": [\\\"nums = [1,2,3,4,5,6,7]; rotate_array(nums, 3); assert nums == [5,6,7,1,2,3,4]\\\", \\\"nums = [-1,-100,3,99]; rotate_array(nums, 2); assert nums == [3,99,-1,-100]\\\", \\\"nums = [1]; rotate_array(nums, 0); assert nums == [1]\\\"] }\""
}