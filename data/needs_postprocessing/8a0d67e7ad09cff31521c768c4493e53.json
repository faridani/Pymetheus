"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"\\'Anagram Finder\\' - Hard\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_anagrams(words: List[str]) -> Dict[str, List[str]]` that takes a list of words and returns a dictionary where each key is a word and the corresponding value is a list of all the anagrams of that word in the input list. Two words are anagrams if they contain the same letters but can have different capitalization, spaces, and punctuation.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of strings containing lowercase letters, spaces, and punctuation.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a dictionary where each key is a word in the input list and the corresponding value is a list of all its anagrams in the input list. The keys should be in sorted order.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from collections import Counter, defaultdict\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n    # Create a counter for each word and its characters\\\\\\\\n    word_count = defaultdict(Counter)\\\\\\\\n    for word in words:\\\\\\\\n        word_count[word].update(c for c in word if c.isalnum())\\\\\\\\n    \\\\\\\\n    # Sort the counters by their total count, smallest first\\\\\\\\n    sorted_words = sorted(word_count.items(), key=lambda x: x[1].total(), reverse=True)\\\\\\\\n    \\\\\\\\n    # Create an empty dictionary for the result\\\\\\\\n    result = {} \\\\\\\\n    \\\\\\\\n    # Iterate over the sorted list of words and build the result dictionary, grouping anagrams together\\\\\\\\n    for word, count in sorted_words:\\\\\\\\n        if word not in result or not count.total():\\\\\\\\n            result[word] = []\\\\\\\\n        else:\\\\\\\\n            for anagram in result[word]:\\\\\\\\n                # If the difference between the counts of any character is greater than zero, they are not anagrams\\\\\\\\n                if sum(abs(count[char] - word_count[anagram][char]) for char in string.ascii_lowercase) > 0:\\\\\\\\n                    break\\\\\\\\n            else:\\\\\\\\n                result[word].append(anagram)\\\\\\\\n    \\\\\\\\n    return result\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\'listen\\', \\'silent\\', \\'enlist\\', \\'education\\']) == {\\'listen\\': [\\'enlist\\', \\'silent\\'], \\'silent\\': [\\'listen\\'], \\'enlist\\': [\\'listen\\'], \\'education\\': []}\\\\\", \\\\\"assert find_anagrams([\\'cat\\', \\'act\\', \\'tac\\', \\'dog\\', \\'god\\']) == {\\'cat\\': [\\'act\\', \\'tac\\'], \\'act\\': [\\'cat\\', \\'tac\\'], \\'tac\\': [\\'cat\\', \\'act\\'], \\'dog\\': [], \\'god\\': []}\\\\\", \\\\\"assert find_anagrams([\\'hello\\', \\'world\\', \\'olleh\\', \\'dlrow\\']) == {\\'hello\\': [\\'olleh\\'], \\'world\\': [\\'dlrow\\'], \\'olleh\\': [\\'hello\\'], \\'dlrow\\': [\\'world\\']}\\\\\"] }\"'}"