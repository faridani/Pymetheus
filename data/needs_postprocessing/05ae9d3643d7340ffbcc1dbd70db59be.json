"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"\\'Prime Factorization of Large Numbers (Hard)\\',\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `prime_factors` that takes a non-negative integer and returns a list of prime numbers that are factors of the input number. The function should handle large numbers, up to 12 digits.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef prime_factors(n: int) -> List[int]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `n` (int): A non-negative integer.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of prime numbers that are factors of the input number. If the input number is 1, return an empty list.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def prime_factors(n: int) -> List[int]:\\\\\\\\n    if n <= 1:\\\\\\\\n        return []\\\\\\\\n    i = 2\\\\\\\\n    factors = [i]\\\\\\\\n    while i * i <= n:\\\\\\\\n        if n % i == 0:\\\\\\\\n            n //= i\\\\\\\\n            factors.append(i)\\\\\\\\n        else:\\\\\\\\n            i += 1\\\\\\\\n    if n > 1:\\\\\\\\n        factors.append(n)\\\\\\\\n    return factors\\\\\", \\\\\"tests\\\\\": [\\\\\"assert prime_factors(4) == [2, 2]\\\\\", \\\\\"assert prime_factors(9) == [3, 3]\\\\\", \\\\\"assert prime_factors(17) == [17]\\\\\", \\\\\"assert prime_factors(56 = 2 * 2 * 3 * 7) == [2, 2, 3, 7]\\\\\", \\\\\"assert prime_factors(496 = 2 * 2 * 3 * 7 * 7) == [2, 2, 3, 7, 7]\\\\\"] }\"'}"