{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Median of Two Sorted Arrays (Hard)\\\", \\\"description\\\": \\\"Given two sorted arrays, `nums1` and `nums2`, find the median of the combined array. The combined array should be sorted.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef find_median(nums1: list[int], nums2: list[int]) -> float:\\\\n```\\\\n\\\\n#### Input\\\\n- `nums1` (list[int]): The first sorted array.\\\\n- `nums2` (list[int]): The second sorted array.\\\\n\\\\n#### Output\\\\n- Returns the median of the combined array. If the length of the combined array is odd, return the middle element. If the length is even, return the average of the two middle elements.\\\\n\\\", \\\"code\\\": \\\"\\\\nimport heapq\\\\n\\\\ndef find_median(nums1: list[int], nums2: list[int]) -> float:\\\\n    merged = []\\\\n    heap = []\\\\n\\\\n    for num in nums1:\\\\n        heapq.heappush(heap, -num)\\\\n    \\\\n    for num in nums2:\\\\n        heapq.heappush(heap, -num)\\\\n\\\\n    while heap:\\\\n        merged.append(-heapq.heappop(heap))\\\\n\\\\n    if len(merged) % 2 == 0:\\\\n        return (merged[len(merged)//2-1] + merged[len(merged)//2]) / 2\\\\n    else:\\\\n        return merged[len(merged)//2]\\\\n\\\\n\\\", \\\"tests\\\": [\\\"assert find_median([1,3], [2]) == 2.0\\\", \\\"assert find_median([1,2], [3,4]) == 2.5\\\", \\\"assert find_median([-10,-5,0,5,10], []) == 0.0\\\"] }\""
}