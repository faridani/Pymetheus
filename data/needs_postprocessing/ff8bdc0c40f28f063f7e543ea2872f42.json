{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Minimum Swaps to Sort an Array (Hard)\\\", \\\"description\\\": \\\"Given an array of n integers where 1 <= arr[i] <= n, determine the minimum number of swaps required to sort the array. A swap operation is defined as follows: for two indices i and j, if i < j, then swap(arr[i], arr[j]).\\\\n\\\\n#### Function Signature\\\\n```\\\\ndef min_swaps(arr: list[int)) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `arr` (list[int)): An unsorted array of integers where 1 <= arr[i] <= n.\\\\n\\\\n#### Output\\\\n- Returns the minimum number of swaps required to sort the given array.\\\\n\\\", \\\"code\\\": \\\"from collections import defaultdict\\\\n\\\\ndef min_swaps(arr: list[int)) -> int:\\\\n    n = len(arr)\\\\n    count = [0] * (n + 1)\\\\n    for x in arr:\\\\n        count[x] += 1\\\\n    swaps = 0\\\\n    i = 1\\\\n    while i <= n:\\\\n        if count[i] > 0:\\\\n            swaps += count[i] - 1\\\\n            count[i] = 0\\\\n            while i < n and count[i] == 0:\\\\n                i += 1\\\\n        i += 1\\\\n    return swaps\\\", \\\"tests\\\": [\\\"assert min_swaps([3,2,5,1,4]) == 3\\\", \\\"assert min_swaps([1,2,3,4,5]) == 0\\\", \\\"assert min_swaps([1,3,2,5,4]) == 5\\\", \\\"assert min_swaps([1,2,3,4,5,6,7,8,9,10]) == 0\\\"] }\""
}