"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Roman Numeral Validator (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"A Roman numeral is a numeral system that originated in ancient Rome and was widely used throughout Europe before the adoption of the Arabic numeral system. The Roman numeral system consists of seven symbols: I, V, X, L, C, D, and M. Each symbol represents a specific value. Write a function `is_valid_roman` that takes a string as input and returns `True` if it is a valid Roman numeral, and `False` otherwise.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef is_valid_roman(s: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s` (str): A string that represents a possible Roman numeral.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the input string is a valid Roman numeral, `False` otherwise.\\\\\\\\n\\\\\\\\n#### Constraints and Hints\\\\\\\\n- The Roman numerals are built from combinations of only the symbols I, V, X, L, C, D, M with repeated values of a symbol representing multiple units of its value. For example, III is three I\\'s and VI is five V\\'s.\\\\\\\\n- Certain symbol combinations hold special meaning in Roman numerals: \\\\\\\\n  - IV represents four (1 + 5)\\\\\\\\n  - IX represents nine (1 + 9)\\\\\\\\n  - XL represents forty (10 + 40)\\\\\\\\n  - XC represents ninety (10 + 90)\\\\\\\\n  - CD represents four hundred (100 + 400)\\\\\\\\n  - CM represents nine hundred (100 + 900)\\\\\\\\n- The Roman numeral system does not have a zero, so you can\\'t represent numbers less than one.\\\\\\\\n\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def is_valid_roman(s: str) -> bool:\\\\\\\\n    roman = {\\'I\\': 1, \\'V\\': 5, \\'X\\': 10, \\'L\\': 50, \\'C\\': 100, \\'D\\': 500, \\'M\\': 1000}\\\\\\\\n    prev_value = 0\\\\\\\\n    for char in s:\\\\\\\\n        current_value = roman.get(char, 0)\\\\\\\\n        if not current_value and char != \\'I\\' and char != \\'X\\'\\\\\\\\n            return False\\\\\\\\n        elif current_value > prev_value:\\\\\\\\n            return False\\\\\\\\n        prev_value = current_value\\\\\", \\\\\"tests\\\\\": [\\\\\"assert is_valid_roman(\\'III\\') == True\\\\\", \\\\\"assert is_valid_roman(\\'IV\\') == True\\\\\", \\\\\"assert is_valid_roman(\\'IX\\') == True\\\\\", \\\\\"assert is_valid_roman(\\'V\\') == True\\\\\", \\\\\"assert is_valid_roman(\\'L\\') == True\\\\\", \\\\\"assert is_valid_roman(\\'XC\\') == True\\\\\", \\\\\"assert is_valid_roman(\\'CD\\') == True\\\\\", \\\\\"assert is_valid_roman(\\'CM\\') == True\\\\\", \\\\\"assert is_valid_roman(\\'MCMXCIV\\') == True\\\\\", \\\\\"assert not is_valid_roman(\\'IIV\\') == True\\\\\", \\\\\"assert not is_valid_roman(\\'XLM\\') == True\\\\\"] }\"'}"