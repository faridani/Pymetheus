"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"\\'Maze Traversal Algorithm (Hard)\\'\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_shortest_path` that finds the shortest path from top-left to bottom-right in a given 2D maze. The maze is represented as a list of lists where \\'.\\' represents an open space and \\'#\\' represents a wall.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_shortest_path(maze: List[List[str]]) -> List[List[int]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `maze` (List[List[str]]): A list of lists representing the maze, where each inner list contains \\'.\\' or \\'#\\'. The list representing a row should have the same length.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of lists representing the shortest path from top-left to bottom-right, where each cell in the path is represented by an integer 0. If no path exists, return `None`.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"import collections\\\\\\\\nfrom typing import List\\\\\\\\n\\\\\\\\ndef find_shortest_path(maze: List[List[str]]) -> List[List[int]]:\\\\\\\\n    if not maze or not all(len(row) == len(maze[0]) for row in maze):\\\\\\\\n        return None\\\\\\\\n    visited = set()\\\\\\\\n    queue = collections.deque([((0, 0), 0)])\\\\\\\\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\\\\\\\\n    while queue:\\\\\\\\n        x, y, path_len = queue.popleft()\\\\\\\\n        if (x, y) == (len(maze)-1, len(maze[0])-1):\\\\\\\\n            return [row[:path_len+1] for row in path]\\\\\\\\n        visited.add((x, y))\\\\\\\\n        for dx, dy in directions:\\\\\\\\n            nx, ny = x + dx, y + dy\\\\\\\\n            if 0 <= nx < len(maze) and 0 <= ny < len(maze[0]) and maze[nx][ny] == \\'.\\' and (nx, ny) not in visited:\\\\\\\\n                queue.append(((nx, ny), path_len+1))\\\\\\\\n        visited.add((x, y))\\\\\\\\n    return None\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_shortest_path([[\\\\\\\\\\\\\".\\\\\\\\\\\\\", \\\\\\\\\\\\\"#\\\\\\\\\\\\\"], [\\\\\\\\\\\\\"#\\\\\\\\\\\\\", \\\\\\\\\\\\\".\\\\\\\\\\\\\"]]) == [[\\\\\\\\\\\\\"0\\\\\\\\\\\\\"]]\\\\\\\\n\\\\\", \\\\\"assert find_shortest_path([[\\\\\\\\\\\\\".\\\\\\\\\\\\\", \\\\\\\\\\\\\".\\\\\\\\\\\\\"], [\\\\\\\\\\\\\"#\\\\\\\\\\\\\", \\\\\\\\\\\\\".\\\\\\\\\\\\\"]]) == None\\\\\", \\\\\"assert find_shortest_path}\"'}"