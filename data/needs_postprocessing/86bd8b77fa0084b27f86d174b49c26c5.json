"{'model': 'qwen2:7b', 'response': '{\"title\": \"Advanced Text Formatting\", \"description\": \"\\\\nAn advanced text formatting function that takes a string and returns it with custom formatting options. This includes:\\\\n\\\\n- Reversing the input string.\\\\n- Capitalizing every word (but not preserving punctuation).\\\\n- Counting the number of words.\\\\n\\\\n#### Function Signature\\\\n\\\\n```python\\\\ndef format_text(s: str, reverse_order: bool = False, capitalize_words: bool = True) -> Tuple[str, int]:\\\\n```\\\\n\\\\n#### Input\\\\n- `s` (`str`) - The input string to be formatted.\\\\n \\\\n#### Output\\\\n- A tuple containing the formatted text and the number of words.\\\\n\\\\n**Constraints**\\\\n1. `reverse_order` flag can only be either `True` or `False`.\\\\n2. `capitalize_words` flag can only be either `True` or `False`.\\\\n3. The input string\\'s length does not exceed 50 characters.\\\\n4. The input text may contain spaces, but no more than one space between words.\\\\n\\\\n#### Hints\\\\n- Consider using built-in Python string methods for various operations like reversing strings and capitalizing words.\", \"code\": \"\", \"\\\\nimport re\\\\nfrom typing import Tuple\\\\n\\\\ndef format_text(s: str, reverse_order: bool = False, capitalize_words: bool = True) -> Tuple[str, int]:\\\\n    words = s.split()\\\\n    formatted_words = []\\\\n    \\\\n    if capitalize_words:\\\\n        for word in words:\\\\n            # Keep spaces intact while capitalizing letters\\\\n            formatted_word = \\'\\'.join([w.capitalize() if i == 0 else w for i, w in enumerate(word)])\\\\n            formatted_words.append(formatted_word)\\\\n    else:\\\\n        for word in words:\\\\n            # Remove spaces when not capitalizing words\\\\n            formatted_word = re.sub(r\\'\\\\\\\\s+\\', \\'\\', word)  \\\\n            formatted_words.append(formatted_word)\\\\n    \\\\n    if reverse_order:\\\\n        formatted_text = \\' \\'.join(reversed(formatted_words))\\\\n    else:\\\\n        formatted_text = \\' \\'.join(formatted_words)\\\\n\\\\n    num_of_words = len(words)\\\\n    return (formatted_text, num_of_words)\": \"tests\\\\\": [\\'assert format_text(\\\\\"hello world\\\\\") == (\\\\\"Dlrow Olleh\", \"assert format_text(\\\\\"hello world\\\\\", reverse_order=True) == (\\\\\"Llh DlroW\\\\\", 2)\": \"assert format_text(\\\\\"hello world\\\\\", capitalize_words=False) == (\\\\\"HELLO WORLD\\\\\", 2)\", \"assert format_text(\\\\\"hello world, welcome to python\\\\\") == (\\\\\"PnOtnI TOT Emoclew ,Olleh W\\\\\", 3)\": \"assert format_text(\\\\\"   leading spaces   \\\\\", capitalize_words=True) == (\\\\\"LdNIng SPS\\\\\", 1), \\'assert format_text(\\\\\"no space\\\\\", reverse_order=False) == (\\\\\"On spaeC\\\\\", 2)\\']\"}'}"