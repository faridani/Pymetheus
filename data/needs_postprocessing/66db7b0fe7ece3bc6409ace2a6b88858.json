{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Hard: Tree Node Sum\\\", \\\"description\\\": \\\"Consider a tree node as a structure with two child nodes (left and right) and a value. We want to write a function that calculates the sum of values in all leaf nodes. A leaf node is defined as a node with no children.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef leaf_node_sum(root: Node) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `root` (Node): The root node of the tree.\\\\n\\\\n#### Output\\\\n- Returns the sum of values in all leaf nodes.\\\\n\\\", \\\"code\\\": \\\"class Node:\\\\n    def __init__(self, value):\\\\n        self.value = value\\\\n        self.left = None\\\\n        self.right = None\\\\n\\\\ndef leaf_node_sum(root: Node) -> int:\\\\n    if root is None or (root.left is None and root.right is None):\\\\n        return 0\\\\n\\\\n    sum = 0\\\\n    stack = [root]\\\\n    while stack:\\\\n        node = stack.pop()\\\\n        if node.left is None and node.right is None:\\\\n            sum += node.value\\\\n        else:\\\\n            if node.left:\\\\n                stack.append(node.left)\\\\n            if node.right:\\\\n                stack.append(node.right)\\\\n\\\\n    return sum\\\", \\\"tests\\\": [\\\"assert leaf_node_sum(Node(1, Node(2), Node(3))) == 5\\\", \\\"assert leaf_node_sum(None) == 0\\\", \\\"assert leaf_node_sum(Node(1)) == 1\\\"] }\""
}