{
    "model": "llama3:latest",
    "response": "{\"title\": \"Easy: Tree Traversals\", \"description\": \"Given a binary tree, write a function `traverse` that performs an inorder traversal (left-root-right) of the tree and returns a list of node values in this order. The input tree is represented as a dictionary where each key is a node value and its corresponding value is a list containing the left child and right child nodes.\\n\\n#### Function Signature\\n```python\\ndef traverse(tree: dict) -> list:\\n```\\n\\n#### Input\\n- `tree` (dict): A binary tree represented as a dictionary.\\n\\n#### Output\\n- Returns a list of node values in inorder traversal order.\", \"code\": \"def traverse(tree: dict) -> list:\\n    def _traverse(node, result):\\n        if node is None:\\n            return\\n        _traverse(node[0], result)\\n        result.append(node[1])\\n        _traverse(node[2], result)\\n    result = []\\n    _traverse((None, None, None), result)\\n    return result\", \"tests\": [\"assert traverse({}) == []\", \"assert traverse({'a', ['b', None, 'c']}) == [b, a, c]\", \"assert traverse({'a', ['b', {'d', [None, 'e', None]}, 'c']}) == [b, d, e, a, c\"]}"
}