"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Finder (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_anagrams` that takes in a list of strings and finds all the pairs of strings in the list that are anagrams of each other. An anagram is a word or phrase that is formed by rearranging the letters of another word or phrase (ignoring case).\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: List[str]) -> Set[Tuple[str, str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of strings that may contain letters, numbers, and spaces.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a set of tuples where each tuple contains two strings in the input list that are anagrams of each other.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"import collections\\\\\\\\n\\\\\\\\ndef find_anagrams(words: List[str]) -> Set[Tuple[str, str]]:\\\\\\\\n    # Create a dictionary to store the frequency of each character in each word\\\\\\\\n    char_freq = {word: collections.Counter(char.lower()) for word in words}\\\\\\\\n    \\\\\\\\n    # Find all pairs of words that have the same number of characters and whose frequencies match except possibly for case\\\\\\\\n    return {(w1, w2) for w1, w2 in combinations(words, 2) if len(w1) == len(w2) and all(char_freq[w1][c] == char_freq[w2][c] or (char_freq[w1][c].isupper() and char_freq[w2][c].islower()))}\\\\\\\\n\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\'cat\\', \\'act\\', \\'tac\\', \\'dog\\', \\'god\\']) == {(\\'cat\\', \\'act\\'), (\\'tac\\', \\'act\\')}\\\\\", \\\\\"assert find_anagrams([\\'listen\\', \\'silent\\', \\'enlist\\']) == {(\\'listen\\', \\'silent\\')}\\\\\", \\\\\"assert find_anagrams([\\'hello\\', \\'world\\', \\'olleh\\']) == set()\\\\\"] }\"'}"