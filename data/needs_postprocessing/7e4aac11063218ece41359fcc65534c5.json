"{'model': 'mistral:latest', 'response': '{\"title\": \"Anagram Finder (Hard)\", \"description\": \"Write a function `find_anagrams` that takes a list of strings and finds all pairs of strings within the list that are anagrams of each other.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef find_anagrams(words: List[str]) -> Set[Tuple[str, str]]:\\\\n```\\\\n\\\\n#### Input\\\\n- `words` (List[str]): A list of strings that may contain letters in any case and spaces.\\\\n\\\\n#### Output\\\\n- Returns a set of tuples where each tuple contains two strings that are anagrams of each other.\\\\n\\\\n#### Hint\\\\nAn anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\", \"code\": \"def find_anagrams(words: List[str]) -> Set[Tuple[str, str]]:\\\\n    # Convert each string to a sorted list of characters\\\\n    words = [sorted(word.lower().replace(\\' \\', \\'\\')) for word in words]\\\\n    # Create an empty set to store the results\\\\n    result = set()\\\\n    \\\\n    # Iterate through all pairs of strings\\\\n    for i in range(len(words)):\\\\n        for j in range(i + 1, len(words)):\\\\n            # If the sorted list of characters for the current pair is equal\\\\n            if words[i] == words[j]:\\\\n                result.add((words[i], words[j]))\\\\n    \\\\n    # Return the results as a set of tuples\\\\n    return result\", \"tests\": [\"assert find_anagrams([\\'listen\\', \\'silent\\', \\'enlist\\']) == {\\'(\\\\\\\\\\'enlist\\\\\\\\\\', \\\\\\\\\\'listen\\\\\\\\\\')\\', (\\'\\\\\\\\\\'silent\\\\\\\\\\', \\\\\\\\\\'listen\\\\\\\\\\')\\'}\", \"assert find_anagrams([\\'cars\\', \\'racecars\\', \\'actors\\']) == {\\'(\\\\\\\\\\'actors\\\\\\\\\\', \\\\\\\\\\'cars\\\\\\\\\\')\", \"\\'(\\'racercars\\', \\'cars\\')\"]}'}"