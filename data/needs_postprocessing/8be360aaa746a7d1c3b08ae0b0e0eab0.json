"{'model': 'mistral:latest', 'response': '[{\"title\": \"\\'Anagram Detector (Hard)\\'\", \"description\": \"Write a function `find_anagrams(words: List[str]) -> Dict[str\", \"find_anagrams(words\": \"List[str]) -> Dict[str\", \"List[str]]\": \"n```\\\\n\\\\n#### Input\\\\n- `words` (List[str]): A sorted list of strings containing only alphabetic characters.\\\\n\\\\n#### Output\\\\n- Returns a dictionary where the keys are anagrams of words in the input list\", \"example\": \"n```python\\\\ndict_output = {\\\\n    \\'abc\\': [\\'apple\\'\", \"apples\": \"n    \\'bac\\': [\\'bat\\'\", \"tab\": \"n\"}, [\"str]) -> Dict[str, List[str]]:\\\\n    # Count the frequency of each character in each word\\\\n    char_freq = defaultdict(int)\\\\n    for word in words:\\\\n        char_freq[\\'\\'.join(sorted(word)).lower()) += 1\\\\n    \\\\n    # Create a dictionary to store the anagram groups\\\\n    anagrams = {}\\\\n    for key, count in char_freq.items():\\\\n        # If we have reached the frequency of a unique character sequence,\\\\n        if count == len(words):\\\\n            # Add the corresponding word to the current anagram group\\\\n            anagrams[key] = [word]\\\\n        else:\\\\n            # If there is already an anagram group for this character sequence,\\\\n            # add the current word to it\\\\n            if key in anagrams:\\\\n                anagrams[key].append(word)\\\\n    return anagrams\", \"tests\\\\\": [\\\\\"assert find_anagrams([\\'apple\\', \\'apples\\', \\'bat\\', \\'tab\\', \\'ant\\', \\'tank\\']) == {\\'abc\\': [\\'apple\\', \\'apples\\'], \\'bac\\': [\\'bat\\', \\'tab\\'], \\'anttank\\': [\\'ant\\', \\'tank\\']}\", \"assert find_anagrams([\\'listen\\', \\'silent\\', \\'enlist\\']) == {\\'eistlsnet\\': [\\'listen\\', \\'silent\\', \\'enlist\\']}\", \"assert find_anagrams([\\'dog\\', \\'god\\']) == {\\'dgog\\': [\\'dog\\', \\'god\\']}\"]]'}"