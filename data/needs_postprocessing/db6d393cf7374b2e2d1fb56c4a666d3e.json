{
    "model": "command-r7b:latest",
    "response": "\"{ \\\"title\\\": \\\"Medium: Prime Factorization\\\", \\\"description\\\": \\\"Write a function `prime_factors` that takes an integer `n` as input and returns a list of its prime factors.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef prime_factors(n: int) -> list[int]:\\\\n```\\\\n\\\\n#### Input\\\\n- `n` (int): A positive integer greater than 1.\\\\n\\\\n#### Output\\\\n- Returns a list of distinct prime factors of the input number in ascending order.\\\\n\\\", \\\"code\\\": \\\"import math\\\\n\\\\ndef prime_factors(n: int) -> list[int]:\\\\n    factors = []\\\\n    # Check for the smallest factor 2\\\\n    while n % 2 == 0:\\\\n        factors.append(2)\\\\n        n //= 2\\\\n\\\\n    # Check for odd factors from 3 to sqrt(n)\\\\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\\\\n        while n % i == 0:\\\\n            factors.append(i)\\\\n            n //= i\\\\n\\\\n    # If n is a prime number greater than 2\\\\n    if n > 2:\\\\n        factors.append(n)\\\\n\\\\n    return factors\\\", \\\"tests\\\": [\\\"assert prime_factors(8) == [2, 2, 2]\\\", \\\"assert prime_factors(17) == [17]\\\", \\\"assert prime_factors(315) == [3, 3, 5, 7]\\\"] }\""
}