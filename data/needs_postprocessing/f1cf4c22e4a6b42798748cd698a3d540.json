"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Circular Prime Detector\\\\\", \\\\\"description\\\\\": \\\\\"A circular prime is a prime number that remains prime when its digits are rotated. For example, 197 is a circular prime because 197, 971, and 719 are all prime numbers.\\\\\\\\n\\\\\\\\nWrite a function `is_circular_prime(num)` that takes an integer `num` as input and returns `True` if it\\'s a circular prime, otherwise return `False`.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef is_circular_prime(num: int) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `num`: An integer greater than 1.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the input number is a circular prime, `False` otherwise.\\\\\", \\\\\"code\\\\\": \\\\\"def is_prime(n):\\\\\\\\n    if n <= 1:\\\\\\\\n        return False\\\\\\\\n    for i in range(2, int(n**0.5) + 1):\\\\\\\\n        if n % i == 0:\\\\\\\\n            return False\\\\\\\\n    return True\\\\\\\\n\\\\\\\\ndef is_circular_prime(num: int) -> bool:\\\\\\\\n    if not is_prime(num):\\\\\\\\n        return False\\\\\\\\n    str_num = str(num)\\\\\\\\n    for i in range(len(str_num)):\\\\\\\\n        rotated_num = int(str_num[i:] + str_num[:i])\\\\\\\\n        if not is_prime(rotated_num):\\\\\\\\n            return False\\\\\\\\n    return True\\\\\", \\\\\"tests\\\\\": [\\\\\"assert is_circular_prime(197) == True\\\\\", \\\\\"assert is_circular_prime(113) == True\\\\\", \\\\\"assert is_circular_prime(123) == False\\\\\"] }\"'}"