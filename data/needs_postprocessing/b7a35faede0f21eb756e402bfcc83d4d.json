"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Palindromic Prime Checker (Medium)\\\\\", \\\\\"description\\\\\": \\\\\"A palindromic prime is a number that reads the same forwards and backwards, and is also a prime number. Write a function `is_palindromic_prime` that checks if a given number is both a palindrome and a prime.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef is_palindromic_prime(n: int) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `n` (int): A positive integer that may be large.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the input number is both a palindrome and a prime, `False` otherwise.\\\\\\\\n\\\\\\\\nNote: You may assume that the input will always be an integer. For example, you do not have to handle the case where the input is a floating point number.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def is_palindromic_prime(n: int) -> bool:\\\\\\\\n    # Check if the number is negative or non-integer\\\\\\\\n    if n < 0 or not isinstance(n, int):\\\\\\\\n        return False\\\\\\\\n    # Convert to string for palindrome check\\\\\\\\n    s = str(n)\\\\\\\\n    # Reverse the string for comparison\\\\\\\\n    rs = s[::-1]\\\\\\\\n    # Check if the number is a palindrome\\\\\\\\n    if s != rs:\\\\\\\\n        return False\\\\\\\\n    # Check if the number is prime\\\\\\\\n    for i in range(2, int(n**0.5) + 1):\\\\\\\\n        if n % i == 0:\\\\\\\\n            return False\\\\\\\\n    # If the number passed all checks, it\\'s a palindromic prime\\\\\\\\n    return True\\\\\", \\\\\"tests\\\\\": [\\\\\"assert is_palindromic_prime(311) == True\\\\\", \\\\\"assert is_palindromic_prime(577) == False\\\\\", \\\\\"assert is_palindromic_prime(9009) == True\\\\\", \\\\\"assert is_palindromic_prime(2888288) == False\\\\\"] }\"'}"