"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"\\'Mad Libs Word Scramble Solver (Hard)\\'\\\\\", \\\\\"description\\\\\": \\\\\"In a Mad Libs game, players provide words to fill in the blanks of a story template. The goal is to create a humorous or nonsensical story by providing random or absurd words. Write a function `unscramble_madlib` that takes a scrambled string and a dictionary of words as input, and returns the unscrambled sentence using the provided words.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef unscramble_madlib(word_list: Dict[str, str], scrambled_sentence: str) -> str:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `word_list` (Dict[str, str]): A dictionary where the keys are the placeholder words in the sentence and the values are the corresponding words to replace those placeholders.\\\\\\\\n- `scrambled_sentence` (str): A scrambled string containing a mix of letters from the placeholder words.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the unscrambled sentence with the placeholder words replaced by their corresponding words from the dictionary.\\\\\\\\n\\\\\\\\nHint: Use a simple letter frequency approach to find the most likely matches for each placeholder word in the scrambled sentence.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from collections import Counter\\\\\\\\n\\\\\\\\ndef unscramble_madlib(word_list: Dict[str, str], scrambled_sentence: str) -> str:\\\\\\\\n    # Create a counter to store the frequency of each letter in the scrambled sentence\\\\\\\\n    freq = Counter(scrambled_sentence)\\\\\\\\n    \\\\\\\\n    # Initialize an empty dictionary to store the unscrambled words\\\\\\\\n    unscrambled = {}\\\\\\\\n    \\\\\\\\n    # Iterate over each placeholder word and find its matching word in the scrambled sentence\\\\\\\\n    for placeholder, word in word_list.items():\\\\\\\\n        # Calculate the frequency of each letter in the placeholder word\\\\\\\\n        freq_placeholder = Counter(placeholder)\\\\\\\\n        \\\\\\\\n        # Find the most frequent match in the scrambled sentence\\\\\\\\n        matched_letters = set(freq_placeholder).intersection(set(scrambled_sentence))\\\\\\\\n        if len(matched_letters) > 0:\\\\\\\\n            # Sort the matches by their frequencies and take the first one as the most likely match\\\\\\\\n            match = sorted(set(scrambled_sentence) & set(placeholder), key=freq[char] for char in scrambled_sentence)\\\\\\\\n            match = match[0]\\\\\\\\n            \\\\\\\\n            # Replace the placeholders with their matched words in the unscrambled string\\\\\\\\n            unscrambled[placeholder] = word\\\\\\\\n            scrambled_sentence = scrambled_sentence.replace(match, \\'\\')\\\\\\\\n    \\\\\\\\n    # Return the unscrambled sentence with all placeholders replaced by their corresponding words\\\\\\\\n    return \\' \\'.join([unscrambled[placeholder] for placeholder in unscrambled])\\\\\", \\\\\"tests\\\\\": [\\\\\"assert unscramble_madlib({\\\\\\\\\\\\\"adjective\\\\\\\\\\\\\": \\\\\\\\\\\\\"happy\\\\\\\\\\\\\", \\\\\\\\\\\\\"verb\\\\\\\\\\\\\": \\\\\\\\\\\\\"dance\\\\\\\\\\\\\", \\\\\\\\\\\\\"noun\\\\\\\\\\\\\": \\\\\\\\\\\\\"party\\\\\\\\\\\\\"}, \\\\\\\\\\\\\"yadnacphapyt\\\\\\\\\\\\\") == \\\\\\\\\\\\\"happy dance party\\\\\\\\\\\\\"\\\\\", \\\\\"assert unscramble_madlib({\\\\\\\\\\\\\"color\\\\\\\\\\\\\": \\\\\\\\\\\\\"red\\\\\\\\\\\\\", \\\\\\\\\\\\\"animal\\\\\\\\\\\\\": \\\\\\\\\\\\\"cat\\\\\\\\\\\\\", \\\\\\\\\\\\\"place\\\\\\\\\\\\\": \\\\\\\\\\\\\"moon\\\\\\\\\\\\\"}, \\\\\\\\\\\\\"rcetlamoodnaecatsoopmaenir\\\\\\\\\\\\\") == \\\\\\\\\\\\\"red cat on the moon\\\\\\\\\\\\\"\\\\\"] }\"'}"