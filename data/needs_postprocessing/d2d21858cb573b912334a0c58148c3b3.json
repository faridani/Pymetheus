{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Maximum Increasing Subsequence\\\", \\\"description\\\": \\\"Write a function `max_increasing_subsequence` that finds the length of the longest increasing subsequence (LIS) in a given array of integers. The LIS problem is a classic problem in dynamic programming.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef max_increasing_subsequence(arr: list[int]) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `arr` (list[int]): A list of integers where each integer represents the length of the next element in the subsequence.\\\\n\\\\n#### Output\\\\n- Returns the length of the longest increasing subsequence.\\\\n\\\", \\\"code\\\": \\\"def max_increasing_subsequence(arr: list[int]) -> int:\\\\n    n = len(arr)\\\\n    dp = [1] * n\\\\n    for i in range(1, n):\\\\n        for j in range(i):\\\\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\\\\n                dp[i] = dp[j] + 1\\\\n    return max(dp)\\\\n\\\", \\\"tests\\\": [\\\"assert max_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4\\\", \\\"assert max_increasing_subsequence([0, 1, 2, 3, 4, 5]) == 6\\\"] }\""
}