{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Easy: Tree Height\\\", \\\"description\\\": \\\"A tree is a connected graph where each node has at most one parent. Write a function `tree_height` that calculates the height of a given tree. The height of a tree is defined as the maximum length of a path from the root to any leaf.\\\\n\\\\n#### Function Signature\\\\n```\\\\ndef tree_height(root: int, children: list[int]) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `root` (int): The root node of the tree.\\\\n- `children` (list[int]): A list where each element is a child of the corresponding node in the `root` list. For example, if `root = [1, 2, 3]` and `children = [[4, 5], [6], []]`, then the tree looks like this:\\\\n```\\\\n    1\\\\n   / \\\\\\\\ \\\\n  2     3\\\\n  |      |\\\\n  4  5   6\\\\n```\\\", \\\"code\\\": \\\"def tree_height(root: int, children: list[int]) -> int:\\\\n    if not children or root == max(children):\\\\n        return 1\\\\n    else:\\\\n        heights = [tree_height(child, children[i+1:]) for i in range(len(children)) if child in children[i]]\\\\n        return 1 + max(heights) if heights else 0\\\", \\\"tests\\\": [\\\"assert tree_height(1, [[4, 5], [6], []]) == 3\\\", \\\"assert tree_height(2, []) == 1\\\", \\\"assert tree_height(0, []) == 0\\\"] }\""
}