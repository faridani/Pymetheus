{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Easy: Number of Islands\\\", \\\"description\\\": \\\"#### Problem Statement\\\\nYou are given a grid of size `n x m` where each cell can either be land (`1`) or water (`0`). You are also given the coordinates of two cells on the grid. Write a function that counts the number of islands (connected groups of land) in the grid, and then returns the minimum distance between the two given cells.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef min_distance(grid: list[list[int]], r1: int, c1: int, r2: int, c2: int) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `grid` (list[list[int]]): A 2D grid of size `n x m`, where each cell can be either land (`1`) or water (`0`).\\\\n- `r1` (int), `c1` (int): The row and column indices of the first cell.\\\\n- `r2` (int), `c2` (int): The row and column indices of the second cell.\\\\n\\\\n#### Output\\\\n- Returns the minimum distance between the two given cells, considering that we can only move horizontally or vertically through land cells.\\\\n\\\", \\\"code\\\": \\\"from collections import deque\\\\n\\\\ndef min_distance(grid: list[list[int]], r1: int, c1: int, r2: int, c2: int) -> int:\\\\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\\\\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\\\\n    queue = deque([(r1, c1)])\\\\n    parent = {(r1, c1): None}\\\\n    while queue:\\\\n        r, c = queue.popleft()\\\\n        if (r, c) == (r2, c2):\\\\n            break\\\\n        for dr, dc in directions:\\\\n            nr, nc = r + dr, c + dc\\\\n            if 0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and grid[nr][nc] == 1 and not visited[nr][nc]:\\\\n                queue.append((nr, nc))\\\\n                parent[(nr, nc)] = (r, c)\\\\n                visited[nr][nc] = True\\\\n    if (r2, c2) not in parent:\\\\n        return -1\\\\n    distance = 0\\\\n    while (r, c) != (r2, c2):\\\\n        r, c = parent[(r, c)]\\\\n        distance += 1\\\\n    return distance\\\", \\\"tests\\\": [\\\"assert min_distance([[0, 0, 0], [1, 1, 0], [0, 0, 0]], 0, 1, 2, 2) == 2\\\", \\\"assert min_distance([[0, 0, 0], [1, 1, 0], [0, 0, 0]], 0, 0, 2, 2) == -1\\\"] }\""
}