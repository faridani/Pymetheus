{
    "model": "llama3:latest",
    "response": "{\"title\": \"Medium: Counting Inversions\", \"description\": \"Given a list of integers, count and return the number of inversions. An inversion occurs when two elements in the list are in the wrong order (i.e., an element larger than its right neighbor). For example, if the input is [5, 3, 8, 4], there are three inversions: (3, 5), (4, 5), and (4, 8).\\n\\n#### Function Signature\\n```python\\ndef count_inversions(arr: list[int]) -> int:\\n```\\n\\n#### Input\\n- `arr` (list[int]): A list of integers.\\n\\n#### Output\\n- Returns the number of inversions in the input list.\", \"code\": \"def count_inversions(arr: list[int]) -> int:\\n    if len(arr) <= 1:\\n        return 0\\n\\n    mid = len(arr) // 2\\n    left_half = arr[:mid]\\n    right_half = arr[mid:]\\n\\n    left_inversions = count_inversions(left_half)\\n    right_inversions = count_inversions(right_half)\\n\\n    merged_inversions = merge_and_count_inversions(left_half\", \"merge_and_count_inversions(left\": \"list[int]\", \"right\": \"list[int]) -> int:\\n    result = []\\n    inversions = 0\\n    i = j = 0\\n\\n    while i < len(left) and j < len(right):\\n        if left[i] <= right[j]:\\n            result.append(left[i])\\n            i += 1\\n        else:\\n            result.append(right[j])\\n            j += 1\\n            inversions += len(left) - i\\n\\n    result.extend(left[i:])\\n    result.extend(right[j:])\\n\\n    return inversions\", \"tests\": [\"assert count_inversions([5, 3, 8, 4]) == 3\", \"assert count_inversions([2, 1, 3, 4, 5]) == 3\", \"assert count_inversions([5, 5, 5]) == 0\"]}"
}