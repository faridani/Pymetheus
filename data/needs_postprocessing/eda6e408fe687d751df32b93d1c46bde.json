"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard - Longest Substring Without Repeating Characters\\\\\", \\\\\"description\\\\\": \\\\\"Given a string `s`, find the length of the longest substring without repeating characters.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n\\\\\\\\n```python\\\\\\\\ndef longest_substring_without_repeating_characters(s: str) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n\\\\\\\\n- `s` (str): A string containing only ASCII characters.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n\\\\\\\\n- Returns an integer representing the length of the longest substring without repeating characters.\\\\\\\\n\\\\\\\\n#### Constraints\\\\\\\\n\\\\\\\\n- 0 <= len(s) <= 5 * 10^4\\\\\\\\n\\\\\\\\n#### Hints\\\\\\\\n\\\\\\\\nConsider using a sliding window approach to efficiently track substrings and their character frequencies.\\\\\", \\\\\"code\\\\\": \\\\\"def longest_substring_without_repeating_characters(s: str) -> int:\\\\\\\\n    char_set = set()\\\\\\\\n    max_length = 0\\\\\\\\n    left = 0\\\\\\\\n    for right in range(len(s)):\\\\\\\\n        while s[right] in char_set:\\\\\\\\n            char_set.remove(s[left])\\\\\\\\n            left += 1\\\\\\\\n        char_set.add(s[right])\\\\\\\\n        max_length = max(max_length, right - left + 1)\\\\\\\\n    return max_length\\\\\", \\\\\"tests\\\\\": [\\\\\"assert longest_substring_without_repeating_characters(\\'abcabcbb\\') == 3\\\\\", \\\\\"assert longest_substring_without_repeating_characters(\\'bbbbb\\') == 1\\\\\", \\\\\"assert longest_substring_without_repeating_characters(\\'pwwkew\\') == 3\\\\\", \\\\\"assert longest_substring_without_repeating_characters(\\'\\') == 0\\\\\", \\\\\"assert longest_substring_without_repeating_characters(\\'dvdf\\') == 3\\\\\"] }\"'}"