"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Detector (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_anagrams(words: List[str]) -> Dict[str, List[str]]` that finds and groups all anagrams of the given words.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of strings that may contain letters (in any case) and spaces.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a dictionary where the keys are anagrams and the values are lists of words that form the anagram.\\\\\\\\n\\\\\\\\n**Hint:** Anagram is a word or phrase formed by rearranging the letters of another word or phrase, typically using all the original letters exactly once.\\\\\\\\n\\\\\\\\n**Constraint:** The given list can have duplicates. For example, `[\\'listen\\', \\'silent\\', \\'enlist\\']` has three words that form anagrams.\\\\\", \\\\\"code\\\\\": \\\\\"from collections import Counter\\\\\\\\n\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n    # Create a dictionary of anagram counts\\\\\\\\n    word_counts = {Counter(word): word for word in words}\\\\\\\\n    # Group by anagram and return the result\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\'listen\\', \\'silent\\', \\'enlist\\']) == {\\'enlists: listen, silent\\'}\\\\\", \\\\\"assert find_anagrams([\\'cats\\', \\'act\\', \\'tac\\', \\'sat\\'] == {\\'acts: act, sat, tac\\', \\'cats: cats\\'}\\\\\", \\\\\"assert find_anagrams([\\'dog\\', \\'god\\']) == {\\'dog\\': [\\'dog\\'], \\'god\\': []}\\\\\"] }\"'}"