{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Hard: Maximum Sum of Distinct Subarrays\\\", \\\"description\\\": \\\"Given an integer array, find the maximum sum of distinct subarrays. A subarray is a contiguous part of the array.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef max_sum_distinct_subarrays(arr: list[int)) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `arr` (list[int]): An integer array that may contain negative numbers and zeros.\\\\n\\\\n#### Output\\\\n- Returns the maximum sum of distinct subarrays.\\\\n\\\", \\\"code\\\": \\\"\\\\ndef max_sum_distinct_subarrays(arr: list[int]) -> int:\\\\n    n = len(arr)\\\\n    dp = [[0, 0] for _ in range(n)]\\\\n    \\\\n    for i in range(1, n):\\\\n        if arr[i-1] > 0 and (i == 1 or arr[i-2] <= 0) or arr[i-1] < 0 and (i == 1 or arr[i-2] >= 0):\\\\n            dp[i][0] = max(dp[i-1][0], dp[i-1][1])\\\\n        else:\\\\n            if i % 2 == 0:\\\\n                dp[i][0] = dp[(i//2)-1][0]\\\\n            else:\\\\n                dp[i][0] = dp[(i-1)//2][0]\\\\n            \\\\n            if arr[i-1] > 0 and (i == 1 or arr[i-2] <= 0) or arr[i-1] < 0 and (i == 1 or arr[i-2] >= 0):\\\\n                dp[i][1] = max(dp[i-1][1], dp[i-1][0])\\\\n            else:\\\\n                if i % 2 == 0:\\\\n                    dp[i][1] = dp[(i//2)-1][1]\\\\n                else:\\\\n                    dp[i][1] = dp[(i-1)//2][1]\\\\n                    \\\\n    return max(dp[-1][0], dp[-1][1])\\\\n\\\", \\\"tests\\\": [\\\"assert max_sum_distinct_subarrays([1, 2, 3]) == 9\\\", \\\"assert max_sum_distinct_subarrays([-1, -2, -3]) == -6\\\", \\\"assert max_sum_distinct_subarrays([1, -2, 3]) == 4\\\", \\\"assert max_sum_distinct_subarrays([0, 0, 0]) == 0\\\"] }\""
}