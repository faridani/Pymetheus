"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"\\'Anagram Finder (Hard)\\'\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_anagrams` that takes a list of words as input and returns a dictionary where the keys are words from the input list and the values are lists of anagrams for each key word. Anagram is a word or phrase that contains the same letters as another word or phrase, but in a different order.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of strings where each string is a word.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a dictionary where the keys are words from the input list and the values are lists of anagrams for each key word. The keys should be unique.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from collections import Counter, defaultdict\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n    # Count the occurrence of each character in each word\\\\\\\\n    count = defaultdict(int)\\\\\\\\n    for word in words:\\\\\\\\n        for char in word:\\\\\\\\n            count[char] += 1\\\\\\\\n    \\\\\\\\n    # Create a dictionary to store anagrams\\\\\\\\n    anagrams = {}  \\\\\\\\n    \\\\\\\\n    # Iterate through the counts and find anagrams\\\\\\\\n    for k, v in count.items():\\\\\\\\n        if v > 1:\\\\\\\\n            # If the count of any character is greater than 1, it cannot be an anagram\\\\\\\\n            continue\\\\\\\\n        key = \\'\\'.join(sorted(k))\\\\\\\\n        if key not in anagrams:\\\\\\\\n            anagrams[key] = []\\\\\\\\n        \\\\\\\\n        # Add the word to the list of anagrams for the key\\\\\\\\n        anagrams[key].append(word)\\\\\\\\n    \\\\\\\\n    # Return the dictionary of anagrams\\\\\\\\n    return anagrams\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\'listen\\', \\'silent\\', \\'enlist\\', \\'education\\', \\'edition\\', \\'teacher\\']) == {\\'tihsnel\\': [\\'listen\\', \\'silent\\'], \\'dectioued\\': [\\'education\\', \\'edition\\'], \\'enlstie\\': [\\'enlist\\']}\\\\\", \\\\\"assert find_anagrams([\\'apple\\', \\'apples\\', \\'app\\', \\'appeal\\', \\'peel\\']) == {\\'ppale\\': [\\'apple\\', \\'apples\\'], \\'app\\': [\\'apple\\', \\'app\\'], \\'eaelp\\': [\\'appeal\\', \\'peel\\']}\\\\\"] }\"'}"