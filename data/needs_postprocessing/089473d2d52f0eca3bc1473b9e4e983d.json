{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Maximum Sum of Divisible Subarrays\\\", \\\"description\\\": \\\"Given an integer array `nums` and an integer `k`, find the maximum sum of all possible subsequences that are divisible by `k`. A subsequence is considered divisible by `k` if the sum of its elements is a multiple of `k`.\\\\n\\\\n#### Function Signature\\\\n```\\\\ndef max_sum_divisible(nums: list[int], k: int) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `nums` (list[int]): An integer array with at least one element.\\\\n- `k` (int): A positive integer that is the divisor.\\\\n\\\\n#### Output\\\\n- Returns the maximum sum of all possible subsequences that are divisible by `k`.\\\\n\\\\n#### Constraints\\\\n- The length of `nums` is between 1 and 1000.\\\\n- All elements in `nums` are non-negative integers.\\\\n- `k` is a positive integer between 2 and the maximum value in `nums`.\\\\n\\\", \\\"code\\\": \\\"\\\\ndef max_sum_divisible(nums: list[int], k: int) -> int:\\\\n    n = len(nums)\\\\n    prefix_sum = [0] * (n + 1)\\\\n    for i in range(n):\\\\n        prefix_sum[i + 1] = prefix_sum[i] + nums[i]\\\\n\\\\n    dp = [[0, float('inf')] for _ in range(k)]\\\\n    for i in range(n):\\\\n        for j in range(min(i // k, k)):\\\\n            if (prefix_sum[i + 1] - prefix_sum[max(0, i - k * j)] % k) == 0:\\\\n                dp[j][1] = min(dp[j][1], prefix_sum[i + 1])\\\\n    return max(dp, key=lambda x: x[1])[1]\\\\n\\\", \\\"tests\\\": [\\\"assert max_sum_divisible([3, 6, 2, 7, 4], 5) == 15\\\", \\\"assert max_sum_divisible([1, 2, 3, 4, 5], 3) == 9\\\", \\\"assert max_sum_divisible([10, 20, 30], 5) == 60\\\", \\\"assert max_sum_divisible([1], 2) == 1\\\"] }\""
}