"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Longest Increasing Path in a Matrix\\\\\", \\\\\"description\\\\\": \\\\\"Given an m x n integers matrix, return the length of the longest increasing path you can find by starting at any cell and moving along upward, downward, leftward, or rightward directions.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef longest_increasing_path(matrix: list[list[int]]) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `matrix` (list[list[int]]): A 2D list representing the matrix of integers.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the length of the longest increasing path in the matrix.\\\\\\\\n\\\\\\\\n#### Constraints\\\\\\\\n- 1 <= m, n <= 200\\\\\\\\n- 0 <= matrix[i][j] <= 2^31 - 1\\\\\", \\\\\"code\\\\\": \\\\\"def longest_increasing_path(matrix: list[list[int]]) -> int:\\\\\\\\n    rows = len(matrix)\\\\\\\\n    cols = len(matrix[0])\\\\\\\\n    dp = [[-1 for _ in range(cols)] for _ in range(rows)]\\\\\\\\n\\\\\\\\n    def dfs(row, col):\\\\\\\\n        if dp[row][col] != -1:\\\\\\\\n            return dp[row][col]\\\\\\\\n\\\\\\\\n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\\\\\\\\n        max_path = 1\\\\\\\\n\\\\\\\\n        for dr, dc in directions:\\\\\\\\n            new_row = row + dr\\\\\\\\n            new_col = col + dc\\\\\\\\n            if 0 <= new_row < rows and 0 <= new_col < cols and matrix[new_row][new_col] > matrix[row][col]:\\\\\\\\n                path_length = 1 + dfs(new_row, new_col)\\\\\\\\n                max_path = max(max_path, path_length)\\\\\\\\n        dp[row][col] = max_path\\\\\\\\n        return max_path\\\\\\\\n\\\\\\\\n    longest_path = 0\\\\\\\\n    for row in range(rows):\\\\\\\\n        for col in range(cols):\\\\\\\\n            longest_path = max(longest_path, dfs(row, col))\\\\\\\\n    return longest_path\\\\\", \\\\\"tests\\\\\": [\\\\\"assert longest_increasing_path([[9,9,4],[6,6,8],[2,1,1]]) == 4\\\\\", \\\\\"assert longest_increasing_path([[3,4],[2,5]]) == 2\\\\\", \\\\\"assert longest_increasing_path([[1]]) == 1\\\\\"] }\"'}"