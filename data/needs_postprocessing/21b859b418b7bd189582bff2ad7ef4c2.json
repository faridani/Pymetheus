{
    "model": "llama3:latest",
    "response": "{\"title\": \"Longest Increasing Subsequence (Hard)\", \"description\": \"Given a sequence of n integers, find the length of the longest increasing subsequence (LIS). A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. The subsequence does not have to be strictly increasing, but it cannot contain any element that is smaller than its predecessor.\\n\\n#### Function Signature\\n```python\\ndef lis_length(arr: list[int)) -> int:\\n```\\n\\n#### Input\\n- `arr` (list[int]): A sequence of n integers.\\n\\n#### Output\\n- Returns the length of the longest increasing subsequence.\", \"code\": \"\\ndef lis_length(arr: list[int)) -> int:\\n    if not arr:\\n        return 0\\n\\n    dp = [1] * len(arr)\\n    for i in range(1, len(arr)):\\n        for j in range(i):\\n            if arr[i] > arr[j]:\\n                dp[i] = max(dp[i], dp[j] + 1)\\n\\n    return max(dp)\", \"tests\": [\"assert lis_length([10, 22, 9, 33, 21, 50, 41, 60]) == 5\", \"assert lis_length([1, 2, 3, 4, 5]) == 5\", \"assert lis_length([]) == 0\"]}"
}