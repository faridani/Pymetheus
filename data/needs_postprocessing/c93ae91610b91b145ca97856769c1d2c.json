"{'model': 'phi3:14b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Matrix Spiral Order Traversal (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Given an m x n matrix of integers, return the elements of the matrix in spiral order. The matrix will be filled with non-negative integers, and the dimensions of the matrix `m` and `n` will not exceed 100. \\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef spiralOrder(matrix: List[List[int]]) -> List[int]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `matrix` (List[List[int]]): A 2D list of integers representing the matrix.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a single list containing all elements from the input matrix in spiral order, starting from the top left corner and moving clockwise.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from typing import List\\\\\\\\ndef spiralOrder(matrix: List[List[int]]) -> List[int]:\\\\\\\\n    if not matrix or not matrix[0]:\\\\\\\\n        return []\\\\\\\\n    result = []\\\\\\\\n    rows, cols = len(matrix), len(matrix[0])\\\\\\\\n    r1, c1, r2, c2 = 0, 0, rows - 1, cols - 1\\\\\\\\n    while r1 <= r2 and c1 <= c2:\\\\\\\\n        for c in range(c1, c2 + ebot): result.append(matrix[r1][c])\\\\\\\\n        for r in range(r1 + ebot, r2 + 1): result.append(matrix[r][c2])\\\\\\\\n        if r1 < r2:\\\\\\\\n            for c in reversed(range(c1, c2 + 1)): result.append(matrix[r2][c])\\\\\\\\n        if c1 < c2:\\\\\\\\n            for r in reversed(range(r1 + 1, r2 + 1)): result.append(matrix[r][c1])\\\\\\\\n        r1 += 1\\\\\\\\n        c1 += 1\\\\\\\\n        r2 -= 1\\\\\\\\n        c2 -= 1\\\\\\\\n    return result\\\\\", \\\\\"tests\\\\\": [\\\\\"assert spiralOrder([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 6, 9, 8, 7, 4, 5]\\\\\", \\\\\"assert spiralOrder([]) == []\\\\\", \\\\\"assert spiralOrder([[1]]) == [1]\\\\\", \\\\\"assert spiralOrder([[1], [2]]) == [1, 2]\\\\\", \\\\\"assert spiralOrder([[1, 2], [4, 3]]) == [1, 2, 3, 4]\\\\\"] }\"'}"