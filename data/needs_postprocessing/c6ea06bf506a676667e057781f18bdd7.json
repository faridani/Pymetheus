"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Snake and Ladder Traversal\\\\\", \\\\\"description\\\\\": \\\\\"You are given a 2D array representing a board for a Snake and Ladder game. The rows represent the horizontal position, while columns represent vertical positions.  \\\\\\\\n\\\\\\\\nThe board contains:\\\\\\\\n\\\\\\\\n- **\\'0\\'**: Represents an empty square.\\\\\\\\n- **\\'S\\'**: Represents the starting position of the snake.\\\\\\\\n- **\\'L\\'**: Represents a ladder.\\\\\\\\n- **Numbers (1-100)**: Represent squares with corresponding numbers.\\\\\\\\n\\\\\\\\nYour task is to write a function `min_rolls(board)` that determines the minimum number of dice rolls required to reach square 100 starting from \\'S\\'. The snake and ladders follow standard rules: If you land on a ladder, climb up to the corresponding numbered square. If you land on a snake\\'s head, slide down to its tail.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n\\\\\\\\n```python\\\\\\\\ndef min_rolls(board) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n\\\\\\\\n- `board` (list of lists): A 2D array representing the Snake and Ladder board.\\\\\\\\n\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n\\\\\\\\n- Returns the minimum number of dice rolls required to reach square 100. Return -1 if it\\'s impossible to reach square 100.\\\\\\\\n\\\\\\\\n#### Constraints\\\\\\\\n- The board will be a square matrix with dimensions between 10x10 and 20x20.\\\\\\\\n- There will be exactly one \\'S\\' on the board representing the starting position.\\\\\", \\\\\"code\\\\\": \\\\\"from collections import deque\\\\\\\\n\\\\\\\\ndef min_rolls(board) -> int:\\\\\\\\n    rows = len(board)\\\\\\\\n    cols = len(board[0])\\\\\\\\n    start = None\\\\\\\\n    for i in range(rows):\\\\\\\\n        for j in range(cols):\\\\\\\\n            if board[i][j] == \\'S\\':\\\\\\\\n                start = (i, j)\\\\\\\\n                break\\\\\\\\n    if start is None:\\\\\\\\n        return -1\\\\\\\\n\\\\\\\\n    queue = deque([(start, 0)])  # (position, rolls)\\\\\\\\n    visited = set([start])\\\\\\\\n\\\\\\\\n    while queue:\\\\\\\\n        (row, col), rolls = queue.popleft()\\\\\\\\n        if board[row][col] == \\'100\\':\\\\\\\\n            return rolls\\\\\\\\n\\\\\\\\n        for dice in range(1, 7):\\\\\\\\n            new_row = row + (dice // cols)\\\\\\\\n            new_col = col + (dice % cols)\\\\\\\\n            if 0 <= new_row < rows and 0 <= new_col < cols:\\\\\\\\n                if (new_row, new_col) not in visited:\\\\\\\\n                    if isinstance(board[new_row][new_col], int):\\\\\\\\n                        queue.append(((board[new_row][new_col] // 10 - 1, board[new_row][new_col] % 10 - 1), rolls + 1))\\\\\\\\n                    elif board[new_row][new_col] == \\'L\\':\\\\\\\\n                        for r in range(rows):\\\\\\\\n                            for c in range(cols):\\\\\\\\n                                if isinstance(board[r][c], int) and board[r][c] > board[new_row][new_col]:\\\\\\\\n                                    queue.append(((board[r][c] // 10 - 1, board[r][c] % 10 - 1), rolls + 1))\\\\\\\\n                                    break\\\\\\\\n                    visited.add((new_row, new_col))\\\\\\\\n    return -1\\\\\", \\\\\"tests\\\\\": [\\\\\"board = [[\\'S\\', \\'0\\', \\'L32\\'], [\\'0\\', \\'0\\', \\'0\\'], [\\'0\\', \\'16\\', \\'0\\']]; assert min_rolls(board) == 2; \\\\\", \\\\\"board = [[\\'S\\',\\'0\\',\\'0\\'],[\\'0\\',\\'L45\\',\\'0\\'],[\\'0\\',\\'0\\',\\'100\\']];assert min_rolls(board) == 2\\\\\", \\\\\"board = [[\\'S\\',\\'0\\',\\'0\\'],[\\'0\\',\\'0\\',\\'0\\'],[\\'0\\',\\'0\\',\\'100\\']]; assert min_rolls(board) == 3\\\\\"] }\"'}"