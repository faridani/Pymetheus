"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Recursive Matrix Pathfinding\\\\\", \\\\\"description\\\\\": \\\\\"Given a 2D matrix representing a grid where 0 represents an open path and 1 represents an obstacle, write a function `find_path` that determines if there exists a valid path from the top-left corner (0, 0) to the bottom-right corner of the matrix. The function should use recursion to explore possible paths.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_path(matrix: list[list[int]]) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `matrix` (list[list[int]]): A 2D list representing the grid where 0 is an open path and 1 is an obstacle.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if a valid path exists, `False` otherwise.\\\\\", \\\\\"code\\\\\": \\\\\"def find_path(matrix: list[list[int]]) -> bool:\\\\\\\\n    rows = len(matrix)\\\\\\\\n    cols = len(matrix[0])\\\\\\\\n\\\\\\\\n    def is_valid(row, col):\\\\\\\\n        return 0 <= row < rows and 0 <= col < cols and matrix[row][col] == 0\\\\\\\\n\\\\\\\\n    def explore(row, col):\\\\\\\\n        if row == rows - 1 and col == cols - 1:\\\\\\\\n            return True\\\\\\\\n\\\\\\\\n        matrix[row][col] = 1  # Mark current cell as visited\\\\\\\\n\\\\\\\\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # Right, Down, Left, Up\\\\\\\\n\\\\\\\\n        for dr, dc in directions:\\\\\\\\n            new_row = row + dr\\\\\\\\n            new_col = col + dc\\\\\\\\n            if is_valid(new_row, new_col) and explore(new_row, new_col):\\\\\\\\n                return True\\\\\\\\n\\\\\\\\n        return False  # Backtrack if no valid path found\\\\\\\\n\\\\\\\\n    return explore(0, 0)\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_path([[0, 0, 0], [0, 1, 0], [0, 0, 0]]) == True\\\\\", \\\\\"assert find_path([[0, 1, 0], [0, 1, 0], [0, 0, 0]]) == False\\\\\", \\\\\"assert find_path([[0, 0, 1], [0, 1, 0], [0, 0, 0]]) == True\\\\\"] }\"'}"