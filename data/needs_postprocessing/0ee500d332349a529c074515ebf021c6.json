{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Hard: Maximum Sum of Subarrays with Distinct Elements\\\", \\\"description\\\": \\\"Given a list of integers, find the maximum sum of all possible subarrays where each element in the subarray is distinct. For example, if the input array is [1, 2, 3, 4, 5], one possible subarray would be [1, 2, 3] with a sum of 6. Another possible subarray would be [4, 5] with a sum of 9. The maximum sum among all such subarrays is 9.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef max_distinct_sum(arr: list[int)) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `arr` (list[int]): A list of integers.\\\\n\\\\n#### Output\\\\n- Returns the maximum sum of all possible subarrays where each element in the subarray is distinct.\\\\n\\\", \\\"code\\\": \\\"import itertools\\\\n\\\\ndef max_distinct_sum(arr: list[int)) -> int:\\\\n    # Initialize maximum sum to 0\\\\n    max_sum = 0\\\\n    \\\\n    # Iterate over all possible subarrays of arr\\\\n    for r in range(1, len(arr) + 1):\\\\n        for subarr in itertools.combinations(arr, r):\\\\n            # Calculate the sum of the current subarray\\\\n            subarr_sum = sum(subarr)\\\\n            \\\\n            # Check if each element in the subarray is distinct\\\\n            if len(set(subarr)) == len(subarr):\\\\n                # Update maximum sum if necessary\\\\n                max_sum = max(max_sum, subarr_sum)\\\\n    \\\\n    return max_sum\\\", \\\"tests\\\": [\\\"assert max_distinct_sum([1, 2, 3, 4, 5]) == 9\\\", \\\"assert max_distinct_sum([-1, -2, 0, 1, 2]) == 0\\\", \\\"assert max_distinct_sum([10, 20, 30, 40]) == 60\\\"] }\""
}