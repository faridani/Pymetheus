{
    "model": "llama3:latest",
    "response": "{\"title\": \"Eulerian Path Checker\", \"description\": \"An Eulerian path is a path that visits every edge of a graph exactly once. Write a function `eulerian_path` that checks if a given directed graph represented as an adjacency list is Eulerian.\\n\\n#### Function Signature\\n```python\\ndef eulerian_path(graph: list[list[int]]) -> bool:\\n```\\n\\n#### Input\\n- `graph` (list of lists of ints): A directed graph represented as an adjacency list, where each inner list represents the edges from a node. For example, if `graph` is `[[(1, 2), (3)], [(0, 1), (2, 4)]], it means there are two nodes, 0 and 1, connected by an edge in both directions, and another node 2 that has edges to nodes 0 and 4.\\n\\n#### Output\\n- Returns `True` if the input graph is Eulerian, `False` otherwise.\", \"code\": \"from collections import defaultdict\\n\\ndef eulerian_path(graph: list[list[int]]) -> bool:\\n    # Get the number of nodes in the graph\\n    num_nodes = len(graph)\\n    # Create a dictionary to store the in-degree and out-degree of each node\\n    in_degrees = defaultdict(int)\\n    out_degrees = defaultdict(int)\\n    # Calculate the in-degree and out-degree of each node\\n    for edges in graph:\\n        for edge in edges:\\n            in_degrees[edge[1]] += 1\\n            out_degrees[edge[0]] += 1\\n    # Check if all nodes have either an in-degree or an out-degree, but not both\\n    for i in range(num_nodes):\\n        if in_degrees[i] == 0 and out_degrees[i] != 0:\\n            return False\\n        if in_degrees[i] != 0 and out_degrees[i] == 0:\\n            return False\\n    # Check if there is exactly one node with an in-degree but no out-degree, or vice versa\\n    in_degree_counts = defaultdict(int)\\n    out_degree_counts = defaultdict(int)\\n    for i in range(num_nodes):\\n        if in_degrees[i] != 0:\\n            in_degree_counts[in_degrees[i]] += 1\\n        if out_degrees[i] != 0:\\n            out_degree_counts[out_degrees[i]] += 1\\n    if len(in_degree_counts) > 1 or len(out_degree_counts) > 1:\\n        return False\\n    # If all checks pass, the graph is Eulerian\\n    return True\", \"tests\": [\"assert eulerian_path([[(0, 1), (1, 2)], [(1, 3)]]) == True\", \"assert eulerian_path([[(0, 1), (1, 2), (2, 3)], [(0, 2)]]\", false, \"assert eulerian_path([[], [(), (), ()]]) == True\"]}"
}