"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Prime Factorization - A Hard Problem\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `prime_factors` that takes an integer as input and returns the prime factors of the given number. The function should return a list of prime numbers that multiply together to produce the input number.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef prime_factors(n: int) -> List[int]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `n` (int): A positive integer greater than 1.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of prime numbers that are the factors of the input number. Order does not matter.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def prime_factors(n: int) -> List[int]:\\\\\\\\n    factors = []\\\\\\\\n    i = 2\\\\\\\\n    while i * i <= n:\\\\\\\\n        if n % i == 0:\\\\\\\\n            factors.append(i)\\\\\\\\n            n //= i\\\\\\\\n        else:\\\\\\\\n            i += 1\\\\\\\\n    if n > 1:\\\\\\\\n        factors.append(n)\\\\\\\\n    return [f for f in set(factors) if is_prime(f)]\\\\\\\\n\\\\\\\\ndef is_prime(num: int) -> bool:\\\\\\\\n    if num < 2:\\\\\\\\n        return False\\\\\\\\n    for i in range(2, int(num**0.5)+1):\\\\\\\\n        if num % i == 0:\\\\\\\\n            return False\\\\\\\\n    return True\\\\\", \\\\\"tests\\\\\": [\\\\\"assert prime_factors(6) == [2, 3]\\\\\", \\\\\"assert prime_factors(9) == [3, 3]\\\\\", \\\\\"assert prime_factors(15) == [3, 5]\\\\\", \\\\\"assert prime_factors(22) == [2, 37]\\\\\"] }\"'}"