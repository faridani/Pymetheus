{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Hard: Sum of Divisors\\\", \\\"description\\\": \\\"Given a positive integer `n`, find the sum of all its proper divisors. A proper divisor of a number is one that divides the number exactly, excluding the number itself.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef sum_of_divisors(n: int) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `n` (int): A positive integer\\\\n\\\\n#### Output\\\\n- Returns the sum of all proper divisors of the input integer\\\\n\\\\nNote that 1 is considered a proper divisor for any number.\\\\n\\\\nExample:\\\\n\\\\n* For `n = 12`, the function should return `1 + 2 + 3 + 4 + 6 = 16`\\\\n* For `n = 24`, the function should return `1 + 2 + 3 + 4 + 6 + 8 + 12 = 36`\\\\n\\\\nCan you write a Python function to solve this problem?\\\", \\\"code\\\": \\\"\\\\ndef sum_of_divisors(n: int) -> int:\\\\n    def divisors(num: int) -> set[int]:\\\\n        result = {1}\\\\n        for i in range(2, num):\\\\n            if num % i == 0:\\\\n                result.add(i)\\\\n                if i * i <= num:\\\\n                    result.add(num // i)\\\\n        return result\\\\n\\\\n    return sum(divisors(n))\\\\n\\\", \\\"tests\\\": [\\\"assert sum_of_divisors(12) == 16\\\", \\\"assert sum_of_divisors(24) == 36\\\", \\\"assert sum_of_divisors(1) == 1\\\", \\\"assert sum_of_divisors(2) == 1\\\", \\\"assert sum_of_divisors(3) == 4\\\", \\\"assert sum_of_divisors(5) == 6\\\"] }\""
}