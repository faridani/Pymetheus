{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Closest Pair\\\", \\\"description\\\": \\\"Given a list of points on the plane, where each point is represented by its coordinates (x, y), find the closest pair of points. The distance between two points (x1, y1) and (x2, y2) is calculated as sqrt((x2 - x1)^2 + (y2 - y1)^2). Write a function `closest_pair` that takes a list of points as input and returns the closest pair of points.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef closest_pair(points: list[tuple[int, int]]) -> tuple[tuple[int, int], tuple[int, int]]:\\\\n```\\\\n\\\\n#### Input\\\\n- `points` (list[tuple[int, int]]): A list of points on the plane, where each point is represented by its coordinates (x, y).\\\\n\\\\n#### Output\\\\n- Returns a tuple containing the closest pair of points.\\\\n\\\", \\\"code\\\": \\\"\\\\nimport math\\\\n\\\\ndef closest_pair(points: list[tuple[int, int]]) -> tuple[tuple[int, int], tuple[int, int]]:\\\\n    # Sort the points by their x-coordinates\\\\n    points.sort(key=lambda point: point[0])\\\\n\\\\n    # Initialize the minimum distance to infinity\\\\n    min_distance = float('inf')\\\\n\\\\n    # Initialize the closest pair of points\\\\n    closest_pair_points = None\\\\n\\\\n    # Iterate over all pairs of points\\\\n    for i in range(len(points)):\\\\n        for j in range(i + 1, len(points)):\\\\n            # Calculate the distance between the two points\\\\n            distance = math.sqrt((points[j][0] - points[i][0]) ** 2 + (points[j][1] - points[i][1]) ** 2)\\\\n\\\\n            # If the distance is smaller than the current minimum distance, update the minimum distance and the closest pair of points\\\\n            if distance < min_distance:\\\\n                min_distance = distance\\\\n                closest_pair_points = (points[i], points[j])\\\\n\\\\n    return closest_pair_points\\\\n\\\\n\\\", \\\"tests\\\": [\\\"assert closest_pair([(1, 1), (2, 2), (3, 3)]) == ((1, 1), (2, 2))\\\", \\\"assert closest_pair([(0, 0), (-1, -1), (1, 1)]) == ((0, 0), (-1, -1))\\\"] }\""
}