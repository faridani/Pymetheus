"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"\\'Anagram Detector (Hard)\\'\\\\\", \\\\\"description\\\\\": \\\\\"An anagram is a word or phrase that can be formed by rearranging the letters of another word or phrase, typically using all the original letters exactly once. Write a function `find_anagrams` that takes in a list of strings and returns a dictionary where keys are unique strings from the input list and values are lists of the anagrams for each key.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of strings containing only lowercase letters.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a dictionary where keys are unique strings from the input list and values are lists of the anagrams for each key. For example, given the input `[\\'listen\\', \\'silent\\', \\'enlist\\', \\'education\\']`, the output would be `{\\'listen\\': [\\'listen\\'], \\'silent\\': [\\'silent\\'], \\'enlist\\': [\\'enlist\\'], \\'education\\': [\\'educate\\', \\'ducation\\']}`.\\\\\", \\\\\"code\\\\\": \\\\\"from collections import Counter, OrderedDict\\\\\\\\n\\\\\\\\ndef find_anagrams(words: List[str]) -> Dict[str, List[str]]:\\\\\\\\n    # Create a dictionary where keys are the sorted counts of letters in each word and values are the words themselves\\\\\\\\n    word_count = {Counter(sorted(word)): word for word in words}\\\\\\\\n    \\\\\\\\n    # Combine identical dictionaries into groups\\\\\\\\n    anagrams = OrderedDict()\\\\\\\\n    for key, value in word_count.items():\\\\\\\\n        if key in anagrams:\\\\\\\\n            anagrams[key].append(value)\\\\\\\\n        else:\\\\\\\\n            anagrams[key] = [value]\\\\\\\\n    \\\\\\\\n    # Convert the resulting dictionary into the desired format\\\\\\\\n    result = {value: list(anagram) for value, anagram in anagrams.items()}\\\\\\\\n    return result\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\'listen\\', \\'silent\\', \\'enlist\\', \\'education\\']) == {\\'listen\\': [\\'listen\\'], \\'silent\\': [\\'silent\\'], \\'enlist\\': [\\'enlist\\'], \\'education\\': [\\'educate\\', \\'ducation\\']}\\\\\", \\\\\"assert find_anagrams([\\'civic\\', \\'caves\\', \\'vice\\', \\'clive\\', \\'devil\\']) == {\\'civic\\': [\\'civic\\'], \\'caves\\': [\\'caves\\'], \\'vice\\': [\\'vice\\'], \\'clive\\': [\\'live\\', \\'evilcl\\'], \\'devil\\': [\\'deviled\\', \\'ledivde\\']}\\\\\"] }\"'}"