{
    "model": "gemma2:27b",
    "response": "\"{ \\\"title\\\": \\\"Medium - Balanced Parentheses\\\", \\\"description\\\": \\\"Given a string containing only parentheses ( '(' and ')' ), determine if the input string has balanced parentheses. A string with balanced parentheses means that every opening parenthesis '(' has a corresponding closing parenthesis ')' and they are properly nested.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef is_balanced(s: str) -> bool:\\\\n```\\\\n\\\\n#### Input\\\\n- `s` (str): A string containing only parentheses '(' and ')'.\\\\n\\\\n#### Output\\\\n- Returns `True` if the input string has balanced parentheses, `False` otherwise.\\\", \\\"code\\\": \\\"def is_balanced(s: str) -> bool:\\\\n    stack = []\\\\n    parentheses = {'(': ')', '{': '}', '[': ']'}\\\\n    for char in s:\\\\n        if char in parentheses.keys():\\\\n            stack.append(char)\\\\n        elif char in parentheses.values():\\\\n            if not stack or parentheses[stack.pop()] != char:\\\\n                return False\\\\n    return len(stack) == 0\\\", \\\"tests\\\": [\\\"'assert is_balanced('()') == True'\\\", \\\"'assert is_balanced('(())') == True'\\\", \\\"'assert is_balanced('({[]})') == True'\\\", \\\"'assert is_balanced('([)]') == False'\\\", \\\"'assert is_balanced('((())') == False'\\\", \\\"'assert is_balanced(')') == False'\\\"] }\""
}