"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Prime Factorization - Easy\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `prime_factors` that finds the prime factors of a given number.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef prime_factors(n: int) -> list[int]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `n` (int): A positive integer.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of prime numbers that are factors of the input number.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def prime_factors(n: int) -> list[int]:\\\\\\\\n    # Initialize an empty list to store the factors\\\\\\\\n    factors = []\\\\\\\\n    # Loop from 2 to the square root of n\\\\\\\\n    for i in range(2, int(n ** 0.5) + 1):\\\\\\\\n        # If n is divisible by i, add it to the list and divide n by i\\\\\\\\n        if n % i == 0:\\\\\\\\n            factors.append(i)\\\\\\\\n            n //= i\\\\\\\\n    \\\\\\\\n    # If n is greater than 1 (which means there are still factors left to find), they must be prime numbers\\\\\\\\n    if n > 1:\\\\\\\\n        factors.append(n)\\\\\\\\n    return factors\\\\\", \\\\\"tests\\\\\": [\\\\\"assert prime_factors(2) == [2]\\\\\", \\\\\"assert prime_factors(4) == [2, 2]\\\\\", \\\\\"assert prime_factors(5) == [5]\\\\\", \\\\\"assert prime_factors(12) == [2, 2, 3]\\\\\", \\\\\"assert prime_factors(28) == [2, 2, 7\\\\\"] }\"'}"