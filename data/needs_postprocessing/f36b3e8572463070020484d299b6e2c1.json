{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Hard: Maximum Sum of Min Values\\\", \\\"description\\\": \\\"Given a 2D array `matrix` of size `n x m`, find the maximum sum of minimum values of all possible submatrices. A submatrix is a subset of elements from the original matrix, formed by selecting some rows and columns.\\\\n\\\\n#### Function Signature\\\\n```\\\\ndef max_sum_min(matrix: list[list[int]]) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `matrix` (list of lists of integers): A 2D array of size `n x m`, where each element is an integer.\\\\n\\\\n#### Output\\\\n- Returns the maximum sum of minimum values of all possible submatrices.\\\\n\\\", \\\"code\\\": \\\"\\\\ndef max_sum_min(matrix: list[list[int]]) -> int:\\\\n    n, m = len(matrix), len(matrix[0])\\\\n    prefix_sum = [[0] * (m + 1) for _ in range(n + 1)]\\\\n    for i in range(1, n + 1):\\\\n        for j in range(1, m + 1):\\\\n            prefix_sum[i][j] = matrix[i - 1][j - 1] + prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1]\\\\n    max_sum = float('-inf')\\\\n    for i in range(1, n + 1):\\\\n        for j in range(1, m + 1):\\\\n            for k in range(i):\\\\n                for col in range(j):\\\\n                    min_val = min(matrix[x][col] for x in range(k, i))\\\\n                    sum_min = prefix_sum[i][j] - prefix_sum[k][j] - prefix_sum[i][col] + prefix_sum[k][col]\\\\n                    max_sum = max(max_sum, sum_min * min_val)\\\\n    return max_sum\\\\n\\\", \\\"tests\\\": [\\\"assert max_sum_min([[1, 2], [3, 4]]) == 5\\\", \\\"assert max_sum_min([[1, 0, -1], [2, 3, 2], [4, 5, 6]]) == 7\\\", \\\"assert max_sum_min([[10, 15, 20], [30, 35, 40], [50, 55, 60]]) == 240\\\", \\\"assert max_sum_min([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 27\\\"] }\""
}