{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Minimum Cost to Reach the End\\\", \\\"description\\\": \\\"You are given an undirected graph represented as an adjacency list where each node has at most 1000 neighbors. You are also given a list of nodes and their corresponding costs. Write a function that returns the minimum cost to reach the end node from any other node in the graph.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef min_cost_to_end(graph: dict, costs: dict) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `graph` (dict): A dictionary where each key is a node and its corresponding value is a list of neighboring nodes.\\\\n- `costs` (dict): A dictionary where each key is a node and its corresponding value is the cost to reach that node from the starting node.\\\\n\\\\n#### Output\\\\n- Returns the minimum cost to reach the end node from any other node in the graph.\\\\n\\\", \\\"code\\\": \\\"import heapq\\\\n\\\\ndef min_cost_to_end(graph: dict, costs: dict) -> int:\\\\n    # Create a dictionary to store the shortest distance from each node to the end node\\\\n    distances = {node: float('inf') for node in graph}\\\\n    distances['end'] = 0\\\\n    priority_queue = [(0, 'end')]\\\\n    while priority_queue:\\\\n        current_distance, current_node = heapq.heappop(priority_queue)\\\\n        if current_distance > distances[current_node]:\\\\n            continue\\\\n        for neighbor in graph.get(current_node, []):\\\\n            distance = current_distance + costs[neighbor]\\\\n            if distance < distances[neighbor]:\\\\n                distances[neighbor] = distance\\\\n                heapq.heappush(priority_queue, (distance, neighbor))\\\\n    # Return the minimum cost to reach the end node from any other node in the graph\\\\n    return min(distances.values()) - costs['end']\\\", \\\"tests\\\": [\\\"assert min_cost_to_end({'A': ['B', 'C'], 'B': ['D'], 'C': [], 'D': []}, {'A': 0, 'B': 1, 'C': 2, 'D': 3}) == 5\\\", \\\"assert min_cost_to_end({'A': ['B', 'C'], 'B': ['D'], 'C': [], 'D': []}, {'A': 0, 'B': 2, 'C': 4, 'D': 6}) == 8\\\"] }\""
}