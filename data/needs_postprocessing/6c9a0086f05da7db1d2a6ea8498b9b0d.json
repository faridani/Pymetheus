{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Maximum Area of a Histogram\\\", \\\"description\\\": \\\"Given an array of integers `heights` representing the heights of bars in a histogram, write a function to find the maximum area that can be enclosed by two vertical lines, such that the area is calculated as the sum of the areas between these lines and the top bar.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef max_area(heights: list[int)) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `heights` (list[int]): A list of integers representing the heights of bars in a histogram.\\\\n\\\\n#### Output\\\\n- Returns the maximum area that can be enclosed by two vertical lines, as described above.\\\", \\\"code\\\": \\\"\\\\nimport math\\\\n\\\\ndef max_area(heights: list[int)) -> int:\\\\n    n = len(heights)\\\\n    max_area = 0\\\\n    stack = []\\\\n\\\\n    for i in range(n):\\\\n        while stack and heights[stack[-1]] > heights[i]:\\\\n            top = stack.pop()\\\\n            width = i if not stack else i - stack[-1] - 1\\\\n            max_area = max(max_area, heights[top] * width)\\\\n        stack.append(i)\\\\n\\\\n    while stack:\\\\n        top = stack.pop()\\\\n        width = n if not stack else n - stack[-1] - 1\\\\n        max_area = max(max_area, heights[top] * width)\\\\n\\\\n    return max_area\\\\n\\\", \\\"tests\\\": [\\\"assert max_area([2,1,5,6,2,3]) == 9\\\", \\\"assert max_area([1,8,6,2,5,4,8,3,7]) == 24\\\", \\\"assert max_area([1]) == 1\\\", \\\"assert max_area([]) == 0\\\"] }\""
}