"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"\\'Anagram Finder (Hard)\\'\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `find_anagrams` that finds all anagrams of a given string within a list of strings.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(word: str, words: List[str]) -> List[str]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `word` (str): The word to search for anagrams of.\\\\\\\\n- `words` (List[str]): A list of strings where the anagrams are located.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of all anagrams of the input string within the given list of strings.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from collections import Counter\\\\\\\\n\\\\\\\\ndef find_anagrams(word: str, words: List[str]) -> List[str]:\\\\\\\\n    # Create a dictionary mapping characters to counts for the word\\\\\\\\n    word_count = Counter(word)\\\\\\\\n    # Initialize an empty list to hold the results\\\\\\\\n    anagrams = []\\\\\\\\n    \\\\\\\\n    # Iterate through each string in the given list\\\\\\\\n    for w in words:\\\\\\\\n        # Create a dictionary mapping characters to counts for the current word\\\\\\\\n        w_count = Counter(w)\\\\\\\\n        \\\\\\\\n        # If the number of occurrences of each character is the same in both the input word and the current string,\\\\\\\\n        # add the current string to the list of anagrams\\\\\\\\n        if all(word_count[c] == w_count[c] for c in word_count.keys()):\\\\\\\\n            anagrams.append(w)\\\\\\\\n    \\\\\\\\n    # Return the list of anagrams\\\\\\\\n    return anagrams\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams(\\'listen\\', [\\'enlists\\', \\'silent\\', \\'sinless\\', \\'decent\\', \\'deter\\']) == [\\'enlist\\', \\'silent\\']\\\\\", \\\\\"assert find_anagrams(\\'hello\\', [\\'olleh\\', \\'world\\', \\'school\\', \\'hell\\', \\'shout\\']) == [\\'olleh\\', \\'hell\\']\\\\\", \\\\\"assert find_anagrams(\\'python\\', [\\'typhon\\', \\'toyphp\\', \\'cytop\\', \\'pthyo\\']) == []\\\\\"] }\"'}"