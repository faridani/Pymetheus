{
    "model": "llama3:latest",
    "response": "{\"title\": \"K-Unique Permutations\", \"description\": \"Given a string `s` of length `n`, find the number of unique permutations (considering case) that can be formed by rearranging the characters in `s`. Write a function `k_unique_permutations` that calculates this value.\\n\\n#### Function Signature\\n```python\\ndef k_unique_permutations(s: str) -> int:\\n```\\n\\n#### Input\\n- `s` (str): A string of length `n`, where each character is either an uppercase letter, a lowercase letter, or a digit.\\n\\n#### Output\\n- Returns the number of unique permutations that can be formed by rearranging the characters in `s`.\", \"code\": \"\", \"\\nfrom math import factorial\\nimport itertools\\n\\ndef k_unique_permutations(s: str) -> int:\\n    # Calculate the total number of permutations\\n    n = len(s)\\n    total_permutations = 1\\n    for char in set(s):\\n        total_permutations *= factorial(s.count(char))\\n\\n    # Calculate the number of unique permutations\\n    unique_permutations = 0\\n    for perm in itertools.permutations(s):\\n        if len(set(perm)) == len(s):\\n            unique_permutations += 1\\n\\n    return int(total_permutations / unique_permutations)\": \"tests\\\": [\\\"assert k_unique_permutations('abc') == 6\", \"assert k_unique_permutations('abba') == 4\": \"assert k_unique_permutations('aabbcc') == 12\", \"Note\": \"This question is a bit tricky, but if you think it's too hard, let me know and I can adjust the difficulty level.\"}"
}