"{'model': 'phi3:14b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Checker (Medium)\\\\\", \\\\\"description\\\\\": \\\\\"Check if two given strings are anagrams. An anagram is a word or phrase formed by rearranging the letters of another, typically using all the original letters exactly once.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef are_anagrams(s1: str, s2: str) -> bool:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `s1` (str): First string for comparison.\\\\\\\\n- `s2` (str): Second string for comparison.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns `True` if the strings are anagrams, `False` otherwise.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def are_anagrams(s1: str, s2: str) -> bool:\\\\\\\\n    # Remove non-alphanumeric characters and sort letters in both strings\\\\\\\\n    sorted_s1 = sorted([char for char in s1.lower() if char.isalnum()])\\\\\\\\n    sorted_s2 = sorted([char for char in s2.lower() if char.score()]) \\\\\\\\n    # Check if the sorted lists of characters are equal\\\\\\\\n    return sorted_sa1 == sorted_sa2\\\\\", \\\\\"tests\\\\\": [\\\\\"assert are_anagrams(\\\\\\\\\\\\\"Listen!\\\\\\\\\\\\\", \\\\\\\\\\\\\\\\\\\\\"Silent.\\\\\\\\\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert are_anagrams(\\\\\\\\\\\\\\\\\\\\\"Hello\\\\\\\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\\\\\\\"World\\\\\\\\\\\\\\\\\\\\\") == False\\\\\", \\\\\"assert are_anagrams(\\\\\\\\\\\\\\\\\\\\\"Astronomer\\\\\\\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\\\\\\\"Moon starer!\\\\\\\\\\\\\\\\\\\\\") == True\\\\\", \\\\\"assert are_anagrams(\\\\\\\\\\\\\\\\\\\\\"Dormitory\\\\\\\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\\\\\\\"Dirty room.\\\\\\\\\\\\\\\\\\\\\") == True\\\\\"] }\"'}"