{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Hard: Maximum Sum of Subarray with No More Than K Consecutive Ones\\\", \\\"description\\\": \\\"Given an array `nums` and a positive integer `k`, find the maximum sum of a subarray within `nums` where no more than `k` consecutive ones appear. If there are multiple such subarrays, return the one with the maximum sum.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef max_sum_subarray(nums: list[int), k: int) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `nums` (list<int>): A list of integers where each integer is either 0 or 1.\\\\n- `k` (int): The maximum number of consecutive ones allowed in the subarray.\\\\n\\\\n#### Output\\\\n- Returns the maximum sum of a subarray within `nums` that satisfies the condition described above.\\\\n\\\", \\\"code\\\": \\\"from typing import List\\\\n\\\\ndef max_sum_subarray(nums: List[int], k: int) -> int:\\\\n    n = len(nums)\\\\n    prefix_sum = [0] * (n + 1)\\\\n    for i in range(n):\\\\n        if nums[i] == 1:\\\\n            prefix_sum[i + 1] = prefix_sum[i] + 1\\\\n        else:\\\\n            prefix_sum[i + 1] = prefix_sum[i]\\\\n    max_sum = 0\\\\n    current_sum = 0\\\\n    ones_count = 0\\\\ntimes i in range(n):\\\\n        if nums[i] == 1:\\\\n            ones_count += 1\\\\n        current_sum += nums[i]\\\\n        while ones_count > k and i - prefix_sum[ones_count] >= 0:\\\\n            current_sum -= nums[prefix_sum[ones_count]]\\\\n            ones_count -= 1\\\\n        max_sum = max(max_sum, current_sum)\\\\n    return max_sum\\\", \\\"tests\\\": [\\\"assert max_sum_subarray([0, 1, 1, 1], 2) == 3\\\", \\\"assert max_sum_subarray([0, 0, 1, 1, 1], 2) == 4\\\", \\\"assert max_sum_subarray([1, 0, 0, 1, 1], 3) == 5\\\"] }\""
}