{
    "model": "codebooga:latest",
    "response": "\"{ \\\"title\\\": \\\"Hard: Prime Factorization\\\", \\\"description\\\": \\\"Write a function `prime_factorization` that takes an integer `n` as input and returns the prime factorization of `n`.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef prime_factorization(n: int) -> List[int]:\\\\n```\\\\n\\\\n#### Input\\\\n- `n` (int): A positive integer greater than 1.\\\\n\\\\n#### Output\\\\n- Returns a list of unique prime factors of `n` in ascending order.\\\\n\\\\n#### Example\\\\n- `prime_factorization(36) -> [2, 3]`\\\\n- `prime_factorization(56) -> [2, 7]`\\\\n- `prime_factorization(100) -> [2, 5, 5]`, not `[2, 2, 5, 5]` because the factors should be unique.\\\\n\\\", \\\"code\\\": \\\"from typing import List\\\\n\\\\ndef prime_factorization(n: int) -> List[int]:\\\\n    def factorize(n, i=2):\\\\n        factors = []\\\\n        while n % i == 0:\\\\n            factors.append(i)\\\\n            n //= i\\\\n        return factors\\\\n\\\\n    primes = [2] + [x for x in range(3, n+1) if all(x % y != 0 for y in range(2, int(x**0.5)+1)]\\\\n    factors = []\\\\n    for p in primes:\\\\n        f = factorize(n, i=p)\\\\n        if f:\\\\n            factors += f\\\\n            n //= p\\\\n        if n == 1:\\\\n            break\\\\n    return factors\\\\n\\\", \\\"tests\\\": [\\\"assert prime_factorization(36) == [2, 3]\\\", \\\"assert prime_factorization(56) == [2, 7]\\\", \\\"assert prime_factorization(100) == [2, 5]\\\"] }\""
}