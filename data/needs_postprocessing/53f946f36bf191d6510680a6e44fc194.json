{
    "model": "llama3:latest",
    "response": "{\"title\": \"Number of Islands (Hard)\", \"description\": \"You are given a 2D grid of size `m` x `n`, where each cell contains either a land character (`'1'`) or a water character (`'0'`). Write a function `num_islands` that calculates the number of islands in the grid. A connected group of `'1'` characters is considered an island.\\n\\n#### Function Signature\\n```python\\ndef num_islands(grid: list[list[str]]) -> int:\\n```\\n\\n#### Input\\n- `grid` (list[list[str]]): A 2D grid where each cell contains either a land character (`'1'`) or a water character (`'0'`). The grid is represented as a list of lists, where each inner list represents a row in the grid.\\n\\n#### Output\\n- Returns the number of islands in the grid.\", \"code\": \"\", \"\\nfrom typing import List\\n\\ndef num_islands(grid: List[List[str]]) -> int:\\n    if not grid or not grid[0]:\\n        return 0\\n\\n    def dfs(i: int, j: int) -> None:\\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == '0':\\n            return\\n        grid[i][j] = '0'\\n        dfs(i - 1, j)\\n        dfs(i + 1, j)\\n        dfs(i, j - 1)\\n        dfs(i, j + 1)\\n\\n    count = 0\\n    for i in range(len(grid)):\\n        for j in range(len(grid[0])):\\n            if grid[i][j] == '1':\\n                dfs(i, j)\\n                count += 1\\n\\n    return count\": \"\", \"tests\": [\"assert num_islands([['1','1','0','0','0'], ['1','1','0','0','0'], ['0','0','1','0','0]]) == 1\", \"assert num_islands([['1','1','0','0'], ['1','1','0','0'], ['0','0','1','0']]) == 3\", \"assert num_islands([]) == 0\", \"assert num_islands([[]]) == 0\"]}"
}