"{'model': 'gemma2:27b-instruct-q5_K_S', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Subarray Sum Divisibility\\\\\", \\\\\"description\\\\\": \\\\\"Given an array of integers `arr` and a positive integer `k`, find the number of non-empty contiguous subarrays whose sum is divisible by `k`.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef count_divisible_subarrays(arr: list[int], k: int) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `arr` (list[int]): An array of integers.\\\\\\\\n- `k` (int): A positive integer.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the number of non-empty contiguous subarrays whose sum is divisible by `k`.\\\\\\\\n\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def count_divisible_subarrays(arr: list[int], k: int) -> int:\\\\\\\\n    count = 0\\\\\\\\n    prefix_sums = {0: 1}\\\\\\\\n    current_sum = 0\\\\\\\\n    for num in arr:\\\\\\\\n        current_sum += num\\\\\\\\n        remainder = current_sum % k\\\\\\\\n        if remainder in prefix_sums:\\\\\\\\n            count += prefix_sums[remainder]\\\\\\\\n        prefix_sums[remainder] = prefix_sums.get(remainder, 0) + 1\\\\\\\\n    return count\\\\\", \\\\\"tests\\\\\": [\\\\\"assert count_divisible_subarrays([2,3,1,4], 3) == 3\\\\\", \\\\\"assert count_divisible_subarrays([1,2,3,4,5], 2) == 6\\\\\", \\\\\"assert count_divisible_subarrays([1,1,1,1], 4) == 4\\\\\", \\\\\"assert count_divisible_subarrays([10, 5, -5, 10], 5) == 4\\\\\"] }\"'}"