"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Anagram Finder (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"An anagram is a word or phrase that is formed by rearranging the letters of another word or phrase. Write a function `find_anagrams` which takes a list of strings as input and returns all pairs of strings that are anagrams of each other.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef find_anagrams(words: List[str]) -> Set[Tuple[str, str]]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `words` (List[str]): A list of strings containing only letters, with no spaces or punctuation.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a set of tuples where each tuple contains two strings that are anagrams of each other.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from collections import Counter\\\\\\\\n\\\\\\\\ndef find_anagrams(words: List[str]) -> Set[Tuple[str, str]]:\\\\\\\\n    counter = Counter()\\\\\\\\n    result = set()\\\\\\\\n    for word in words:\\\\\\\\n        counter.update(word)\\\\\\\\n        for potential_anagram in words:\\\\\\\\n            if potential_anagram != word and counter[potential_anagram] == counter[word[:len(potential_anagram)]]:\\\\\\\\n                result.add((word, potential_anagram))\\\\\\\\n    return result\\\\\", \\\\\"tests\\\\\": [\\\\\"assert find_anagrams([\\'listen\\', \\'silent\\', \\'enlist\\']) == {\\'(\\\\\\\\\\'enlist\\\\\\\\\\', \\\\\\\\\\'listen\\\\\\\\)\\', (\\\\\\\\\\'enlist\\\\\\\\\\', \\\\\\\\\\'silent\\\\\\\\\\'), (\\\\\\\\\\'listen\\\\\\\\\\', \\\\\\\\\\'silent\\\\\\\\\\')}\\\\\", \\\\\"assert find_anagrams([\\'python\\', \\'phtoyn\\', \\'bytpoth\\']) == {(\\'python\\', \\'phtoyn\\'), (\\'phtoyn\\', \\'bytpoth\\')}\\\\\"] }\"'}"