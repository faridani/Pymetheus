"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Prime Factors Finder (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `prime_factors` that finds the prime factors of a given non-negative integer.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef prime_factors(n: int) -> list[int]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `n` (int): A non-negative integer.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of integers representing the prime factors of the input number, sorted in ascending order.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"from math import sqrt\\\\\\\\ndef prime_factors(n: int) -> list[int]:\\\\\\\\n    # Initialize result and possible divisor variables\\\\\\\\n    result = []\\\\\\\\n    div = 2\\\\\\\\n    while div * div <= n:\\\\\\\\n        if n % div == 0:\\\\\\\\n            result.append(div)\\\\\\\\n            n //= div\\\\\\\\n        else:\\\\\\\\n            div += 1\\\\\\\\n    # If the number is greater than 1, it must be a prime itself\\\\\\\\n    if n > 1:\\\\\\\\n        result.append(n)\\\\\\\\n    return result\\\\\", \\\\\"tests\\\\\": [\\\\\"assert prime_factors(4) == [2, 2]\\\\\", \\\\\"assert prime_factors(9) == [3, 3]\\\\\", \\\\\"assert prime_factors(25) == [5, 5]\\\\\", \\\\\"assert prime_factors(17) == [17]\\\\\", \\\\\"assert prime_factors(221) == [3, 7, 41\\\\\"] }\"'}"