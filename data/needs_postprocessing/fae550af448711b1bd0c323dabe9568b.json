{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"N-Queens Problem\\\", \\\"description\\\": \\\"The N-Queens problem is a classic problem in computer science. You are given an integer `n`, representing the size of a chessboard, and your task is to place `n` queens on the board such that no two queens attack each other.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef solve_n_queens(n: int) -> list[list[str]]:\\\\n```\\\\n\\\\n#### Input\\\\n- `n` (int): The size of the chessboard, which is an integer between 1 and 8 (inclusive).\\\\n\\\\n#### Output\\\\n- Returns a list of lists, where each inner list represents the position of a queen on the board. The boards are numbered from top to bottom, with rows represented by integers from 0 to `n-1`. For example, `[[(0, 'Q'), (1, 'Q'), (2, 'Q')]` would represent a 3x3 chessboard with three queens placed.\\\\n\\\", \\\"code\\\": \\\"def solve_n_queens(n: int) -> list[list[str]]:\\\\n    def is_safe(board, row, col):\\\\n        for i in range(row):\\\\n            if board[i][1] == 'Q' and abs(i - row) == col - len(str(len(board) - 1)):\\\\n                return False\\\\n        return True\\\\n\\\\n    def place_queens(n, row=0, board=[[]]):\\\\n        if row == n:\\\\n            return [board]\\\\n        result = []\\\\n        for col in range(n):\\\\n            if is_safe(board, row, col):\\\\n                new_board = [row + 1] + board[row + 1:]\\\\n                new_board.append([(col, 'Q')])\\\\n                result += place_queens(n, row + 1, new_board)\\\\n        return result\\\\n    return place_queens(n)[0]\\\", \\\"tests\\\": [\\\"assert len(solve_n_queens(4)) == 2\\\", \\\"assert all(len(board) == 4 for board in solve_n_queens(4))\\\", \\\"assert any(all(row[1] == 'Q' for row in board) for board in solve_n_queens(4))\\\"] }\""
}