{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Medium: Tree Sum\\\", \\\"description\\\": \\\"Given a binary tree, write a function to calculate the sum of all values at each level. The function should return a list where each element is the sum of the node values at that level.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef level_sums(root: TreeNode) -> List[int]:\\\\n```\\\\n\\\\n#### Input\\\\n- `root` (TreeNode): The root of the binary tree.\\\\n\\\\n#### Output\\\\n- Returns a list where each element is the sum of the node values at that level, in order from top to bottom.\\\", \\\"code\\\": \\\"class TreeNode:\\\\n    def __init__(self, x):\\\\n        self.val = x\\\\n        self.left = None\\\\n        self.right = None\\\\n\\\\nimport collections\\\\n\\\\ndef level_sums(root: TreeNode) -> List[int]:\\\\n    if not root:\\\\n        return []\\\\n    queue = collections.deque([(root, 1)])\\\\n    result = []\\\\n    while queue:\\\\n        level_sum = 0\\\\n        for _ in range(len(queue)):\\\\n            node, level = queue.popleft()\\\\n            level_sum += node.val\\\\n            if node.left:\\\\n                queue.append((node.left, level + 1))\\\\n            if node.right:\\\\n                queue.append((node.right, level + 1))\\\\n        result.append(level_sum)\\\\n    return result\\\", \\\"tests\\\": [\\\"assert level_sums(TreeNode(1).left = TreeNode(3).right = TreeNode(4)) == [1, 4]\\\", \\\"assert level_sums(None) == []\\\", \\\"assert level_sums(TreeNode(5).left = TreeNode(6).right = TreeNode(7), TreeNode(8).left = TreeNode(9).right = TreeNode(10)) == [5, 15, 0]\\\"] }\""
}