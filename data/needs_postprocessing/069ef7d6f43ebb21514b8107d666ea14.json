"{'model': 'gemma2:27b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Hard: Prime Number Spirals\\\\\", \\\\\"description\\\\\": \\\\\"You are given a positive integer `n`. Consider a spiral grid starting with the number 1 at the center. Numbers increase sequentially as you move clockwise around the spiral. For example, for n = 3, the grid would look like this:\\\\\\\\n\\\\\\\\n```\\\\\\\\n2 1 8\\\\\\\\n7   9\\\\\\\\n6 5 4\\\\\\\\n```\\\\\\\\n\\\\\\\\nWrite a function `prime_spiral(n)` that returns the percentage of prime numbers in the spiral grid of size `n x n`. Round the percentage to two decimal places.\\\\\\\\n\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n\\\\\\\\n```python\\\\\\\\ndef prime_spiral(n: int) -> float:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `n` (int): A positive integer representing the size of the spiral grid.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a float representing the percentage of prime numbers in the spiral grid, rounded to two decimal places.\\\\\", \\\\\"code\\\\\": \\\\\"def is_prime(num):\\\\\\\\n    if num <= 1: return False\\\\\\\\n    for i in range(2, int(num**0.5) + 1):\\\\\\\\n        if num % i == 0:\\\\\\\\n            return False\\\\\\\\n    return True\\\\\\\\n\\\\\\\\n\\\\\\\\ndef prime_spiral(n: int) -> float:\\\\\\\\n    grid = [[0 for _ in range(n)] for _ in range(n)]\\\\\\\\n    row, col = n // 2, n // 2\\\\\\\\n    direction = \\'right\\'\\\\\\\\n    num = 1\\\\\\\\n    prime_count = 0\\\\\\\\n\\\\\\\\n\\\\\\\\n    for i in range(n * n):\\\\\\\\n        grid[row][col] = num\\\\\\\\n        if is_prime(num): prime_count += 1\\\\\\\\n\\\\\\\\n        if direction == \\'right\\':\\\\\\\\n            col += 1\\\\\\\\n            if col == n or grid[row][col] != 0:\\\\\\\\n                direction = \\'down\\'\\\\\\\\n                col -= 1\\\\\\\\n                row += 1\\\\\\\\n        elif direction == \\'down\\':\\\\\\\\n            row += 1\\\\\\\\n            if row == n or grid[row][col] != 0:\\\\\\\\n                direction = \\'left\\'\\\\\\\\n                row -= 1\\\\\\\\n                col -= 1\\\\\\\\n        elif direction == \\'left\\':\\\\\\\\n            col -= 1\\\\\\\\n            if col < 0 or grid[row][col] != 0:\\\\\\\\n                direction = \\'up\\'\\\\\\\\n                col += 1\\\\\\\\n                row -= 1\\\\\\\\n        elif direction == \\'up\\':\\\\\\\\n            row -= 1\\\\\\\\n            if row < 0 or grid[row][col] != 0:\\\\\\\\n\\\\\\\\n                direction = \\'right\\'\\\\\\\\n\\\\\\\\n                row += 1\\\\\\\\n\\\\\\\\n                col += 1\\\\\\\\n\\\\\\\\n        num += 1\\\\\\\\n\\\\\\\\n    return round((prime_count / (n * n)) * 100, 2)\\\\\", \\\\\"tests\\\\\": [\\\\\"assert prime_spiral(3) == 44.44\\\\\", \\\\\"assert prime_spiral(5) == 36.0\\\\\"] }\"'}"