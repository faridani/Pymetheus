"{'model': 'llama3.1:8b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Maximum Square Submatrix\\\\\", \\\\\"description\\\\\": \\\\\"A square submatrix is a matrix that can be formed from the rows of another matrix by selecting any number of consecutive rows. For example, given the matrix \\\\\\\\n\\\\\\\\n```python\\\\\\\\n[[1, 2, 3],\\\\\\\\n [4, 5, 6],\\\\\\\\n [7, 8, 9]]\\\\\\\\n```\\\\\\\\n\\\\\\\\nthe following submatrices are square: \\\\\\\\n\\\\\\\\n```python\\\\\\\\n[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]]\\\\\\\\n```\\\\\\\\n\\\\\\\\nHowever, the following submatrices are not square: \\\\\\\\n\\\\\\\\n```python\\\\\\\\n[[1, 2], [4, 5]], [[1, 2, 3, 4]]\\\\\\\\n```\\\\\\\\n\\\\\\\\nGiven a 2D array `matrix` of integers, return the size of the largest square submatrix that can be formed from the rows of `matrix`. \\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef max_square_submatrix(matrix: list[list[int]]) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `matrix` (list[list[int]]): A 2D array of integers. Each row and column has a length of at least 1.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns the size of the largest square submatrix that can be formed from the rows of `matrix`. \\\\\\\\n\\\\\\\\nConstraints:\\\\\\\\n- The number of rows in `matrix` is between 1 and 1000 (inclusive).\\\\\\\\n- The number of columns in each row is at least 1.\\\\\\\\n\\\\\\\\nHint: You may need to use dynamic programming.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"import numpy as np\\\\\\\\ndef max_square_submatrix(matrix: list[list[int]]) -> int:\\\\\\\\n    # Convert the input matrix to a numpy array\\\\\\\\n    matrix = np.array(matrix)\\\\\\\\n\\\\\\\\n    # Get the number of rows and columns in the matrix\\\\\\\\n    num_rows, num_cols = matrix.shape\\\\\\\\n\\\\\\\\n    # Create a 2D array `dp` with the same shape as `matrix`, initialized to zeros.\\\\\\\\n    dp = np.zeros((num_rows, num_cols), dtype=int)\\\\\\\\n\\\\\\\\n    # Initialize the maximum square submatrix size to zero\\\\\\\\n    max_size = 0\\\\\\\\n\\\\\\\\n    # Iterate over each row in the matrix\\\\\\\\n    for i in range(num_rows):\\\\\\\\n        # Iterate over each column in the current row\\\\\\\\n        for j in range(num_cols):\\\\\\\\n            # If this is the first row or column, set `dp[i][j]` to one.\\\\\\\\n            if i == 0 or j == 0:\\\\\\\\n                dp[i][j] = 1\\\\\\\\n            else:\\\\\\\\n                # For each cell above and to the left of the current cell,\\\\\\\\n                # find the smallest square submatrix that contains both cells.\\\\\\\\n                # Set `dp[i][j]` to one more than that size.\\\\\\\\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1\\\\\\\\n            # Update the maximum square submatrix size if necessary\\\\\\\\n            max_size = max(max_size, dp[i][j])\\\\\\\\n\\\\\\\\n    # Return the size of the largest square submatrix\\\\\\\\n    return max_size\\\\\", \\\\\"tests\\\\\": [\\\\\"assert max_square_submatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3\\\\\", \\\\\"assert max_square_submatrix([[1, 2, 3], [4, 5, 6]]) == 2\\\\\", \\\\\"assert max_square_submatrix([[]]) == 0\\\\\"] }\"'}"