{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Minimum Window Substring\\\", \\\"description\\\": \\\"Given two strings `s1` and `s2`, write a function that finds the minimum window substring of `s1` that contains all characters of `s2`. If no such window exists, return an empty string.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef min_window_substring(s1: str, s2: str) -> str:\\\\n```\\\\n\\\\n#### Input\\\\n- `s1` (str): The main string to search for the minimum window substring.\\\\n- `s2` (str): The target string containing characters to be found in the minimum window substring of `s1`.\\\", \\\"code\\\": \\\"\\\\nfrom collections import defaultdict\\\\n\\\\ndef min_window_substring(s1: str, s2: str) -> str:\\\\n    if not s1 or not s2:\\\\n        return ''\\\\n\\\\n    dict_s2 = defaultdict(int)\\\\n    for char in s2:\\\\n        dict_s2[char] += 1\\\\n\\\\n    required_chars = len(dict_s2)\\\\n\\\\n    left, right = 0, 0\\\\n    min_len = float('inf')\\\\n    min_window = ''\\\\n\\\\n    while right < len(s1):\\\\n        if right >= len(s2) or all(s1[left:right + 1].count(char) == dict_s2[char] for char in dict_s2):\\\\n            if right - left + 1 < min_len:\\\\n                min_len = right - left + 1\\\\n                min_window = s1[left:right + 1]\\\\n            left += 1\\\\n        else:\\\\n            right += 1\\\\n\\\\n    return min_window\\\", \\\"tests\\\": [\\\"assert min_window_substring('ADOBECODEBANC', 'ABC') == 'BANC'\\\", \\\"assert min_window_substring('a', 'a') == 'a'\\\", \\\"assert min_window_substring('abc', 'b') == 'bc'\\\", \\\"assert min_window_substring('hello', 'world') == ''\\\"] }\""
}