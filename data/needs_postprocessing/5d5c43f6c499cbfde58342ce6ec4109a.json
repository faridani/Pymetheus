"{'model': 'codeup:latest', 'response': '[\"\", [\"int]) -> int`\\\\n\\\\nInput: A list of integers.\\\\n\\\\nOutput: The maximum sum of a contiguous subarray within the input array.\\\\n\\\\nHere is the solution in Python:\\\\n\\\\n```python\\\\ndef max_sum_subarray(arr):\\\\n    n = len(arr)\\\\n    if n <= 1:\\\\n        return arr[0] if arr else 0\\\\n    mid = n // 2\\\\n    left = max_sum_subarray(arr[:mid])\\\\n    right = max_sum_subarray(arr[mid:])\\\\n    return max(left, right) + arr[mid]\\\\n```\\\\n\\\\nTests:\\\\n\\\\n* `assert max_sum_subarray([1, 2, 3, 4, 5]) == 15`\\\\n* `assert max_sum_subarray([-1, 0, 1, 2, 3]) == 6`\\\\n* `assert max_sum_subarray([4, 5, 6, 7, 8]) == 28`\\\\n* `assert max_sum_subarray([9, 1, 2, 3, 4]) == 16`\\\\n\\\\nHere is the JSON string:\\\\n\\\\n{\\\\n\\\\\"title\\\\\": \\\\\"Maximum Sum Subarray\\\\\",\\\\n\\\\\"description\\\\\":\", \"Given an array of integers, find the contiguous subarray within the array that has the maximum sum. The input array may contain negative numbers, positive numbers, and/or zeroes. The subarray may not contain negative numbers.\", \"code\\\\\": \\\\\"def max_sum_subarray(arr: list[int]) -> int:\\\\n    n = len(arr)\\\\n    if n <= 1:\\\\n        return arr[0] if arr else 0\\\\n    mid = n // 2\\\\n    left = max_sum_subarray(arr[:mid])\\\\n    right = max_sum_subarray(arr[mid:])\\\\n    return max(left, right) + arr[mid]\", \"tests\\\\\": [\\\\\"assert max_sum_subarray([1, 2, 3, 4, 5]) == 15\", \"assert max_sum_subarray([-1, 0, 1, 2, 3]) == 6\", \"assert max_sum_subarray([4, 5, 6, 7, 8]) == 28\", \"assert max_sum_subarray([9, 1, 2, 3, 4]) == 16\"]]'}"