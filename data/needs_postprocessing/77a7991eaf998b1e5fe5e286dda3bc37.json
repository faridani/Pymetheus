{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Harmonious Tree\\\", \\\"description\\\": \\\"A harmonious tree is a binary tree where the root node has at most two children, and all non-leaf nodes have exactly three children. Given a binary tree represented as a list of integers, where each integer represents the value of a node, write a function `is_harmonious` that checks if the given binary tree is harmonious.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef is_harmonious(tree: list) -> bool:\\\\n```\\\\n\\\\n#### Input\\\\n- `tree` (list): A list of integers representing a binary tree, where each integer represents the value of a node. The first element in the list is the root node.\\\\n- Each integer can be either an integer (node value), or a tuple containing two child nodes.\\\\n- For example: `[1, [2, 3], [4, [5, 6], [7, 8]]` represents the following binary tree:\\\\n```\\\\n      1\\\\n    /   \\\\\\\\\\\\n   2     3\\\\n  / \\\\\\\\    / \\\\\\\\ \\\\n4   5  6  7  8\\\\n```\\\\n\\\\n#### Output\\\\n- Returns `True` if the input binary tree is harmonious, `False` otherwise.\\\\n\\\", \\\"code\\\": \\\"def is_harmonious(tree: list) -> bool:\\\\n    # Base case: If the tree is empty (i.e., all nodes have been processed), it's harmonious.\\\\n    if not tree:\\\\n        return True\\\\n    # Check if the root node has at most two children.\\\\n    if len(tree) > 2 or (tree[1] and len(tree[1]) != 3):\\\\n        return False\\\\n    # Recursively check each child subtree is harmonious.\\\\n    for child in tree[1]:\\\\n        if not is_harmonious(child):\\\\n            return False\\\\n    return True\\\\n\\\", \\\"tests\\\": [\\\"assert is_harmonious([1, [2], [3]]) == True\\\", \\\"assert is_harmonious([1, [2, 3], [4, [5], [6]]]) == True\\\", \\\"assert is_harmonious([1, [2, 3], [4, [5, 6], [7, 8, 9]]]) == False\\\"] }\""
}