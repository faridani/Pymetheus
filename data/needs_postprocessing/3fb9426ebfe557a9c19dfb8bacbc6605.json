"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"\\'Prime Factorization Count\\' - Easy\\\\\", \\\\\"description\\\\\": \\\\\"Write a function `prime_factorization_count` that takes a positive integer as input and returns a dictionary containing the number of times each prime number is a factor in the given number. For example, the prime factors of 30 are 2 (twice), 3, and 5, so the function should return {2: 2, 3: 1, 5: 1}.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef prime_factorization_count(n: int) -> dict:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `n` (int): A positive integer greater than 1.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a dictionary containing the count of each prime number that is a factor in `n`.\\\\\", \\\\\"code\\\\\": \\\\\"def prime_factorization_count(n: int) -> dict:\\\\\\\\n    result = {2: 0}\\\\\\\\n    factors = set(range(2, n + 1))\\\\\\\\n    current_factor = 2\\\\\\\\n    while len(factors) > 0:\\\\\\\\n        if n % current_factor == 0:\\\\\\\\n            count = factors.pop(current_factor) \\\\\\\\n            result[current_factor] += count * (count + 1) // 2\\\\\\\\n            n //= current_factor\\\\\\\\n        else:\\\\\\\\n            current_factor += 1\\\\\\\\n    prime_factors = list(filter(lambda x: result[x] > 0, range(2, n)))\\\\\\\\n    for prime in prime_factors:\\\\\\\\n        result[prime] *= len(list(filter(lambda y: prime * y == n, factors)))\\\\\\\\n    return {key: value for key, value in sorted(result.items(), key=lambda item: item[0])}\\\\\", \\\\\"tests\\\\\": [\\\\\"assert prime_factorization_count(1) == {2: 0}\\\\\", \\\\\"assert prime_factorization_count(6) == {2: 3}\\\\\", \\\\\"assert prime_factorization_count(28) == {2: 2, 4: 1, 7: 1}\\\\\", \\\\\"assert prime_factorization_count(499979) == {7: 5, 13: 3, 17: 2, 19: 1, 37: 1}\\\\\"] }\"'}"