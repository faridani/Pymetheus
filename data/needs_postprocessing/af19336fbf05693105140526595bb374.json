{
    "model": "llama3:latest",
    "response": "\"{ \\\"title\\\": \\\"Maximal Rectangle in a 2D Grid\\\", \\\"description\\\": \\\"Given a grid of characters where each cell can be either '1' (representing an obstacle) or '0' (representing free space), write a function `max_rectangle` that returns the maximum area of a rectangle that can be formed by selecting a subset of contiguous cells in the grid. The selected cells must form a valid rectangle, meaning they cannot have any obstacles ('1') inside them.\\\\n\\\\n#### Function Signature\\\\n```python\\\\ndef max_rectangle(grid: list[list[str]]) -> int:\\\\n```\\\\n\\\\n#### Input\\\\n- `grid` (list[list[str]]): A 2D grid of characters where each cell is either '0' or '1'. The grid is guaranteed to be a rectangle.\\\\n\\\\n#### Output\\\\n- Returns the maximum area of a valid rectangle that can be formed by selecting a subset of contiguous cells in the grid.\\\", \\\"code\\\": \\\"from typing import List\\\\n\\\\ndef max_rectangle(grid: List[List[str]]) -> int:\\\\n    if not grid or not grid[0]:\\\\n        return 0\\\\n\\\\n    m, n = len(grid), len(grid[0])\\\\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\\\\n\\\\n    max_area = 0\\\\n\\\\n    for i in range(1, m + 1):\\\\n        for j in range(1, n + 1):\\\\n            if grid[i - 1][j - 1] == '0':\\\\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\\\\n                max_area = max(max_area, dp[i][j])\\\\n\\\\n    return max_area\\\", \\\"tests\\\": [\\\"assert max_rectangle([['0', '0'], ['1', '0']]) == 2\\\", \\\"assert max_rectangle([['0', '1'], ['1', '0']]) == 1\\\", \\\"assert max_rectangle([['0', '0', '0'], [ '0', '1', '0' ], ['0', '0', '0' ]]) == 3\\\", \\\"assert max_rectangle([['0'] * 10 for _ in range(10)]) == 100\\\"] }\""
}