"{'model': 'phi3:14b', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Binary Tree Height Calculator (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"Given a binary tree, calculate its height. The function should return the maximum depth of the tree.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef max_depth(root: Node) -> int:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `root` (Node): Root node of the binary tree.\\\\\\\\n  - Note: A `Node` class has been defined as follows:\\\\\\\\n    ```python\\\\\\\\n    class Node:\\\\\\\\n        def __init__(self, val=0, left=None, right=None):\\\\\\\\n            self.val = val\\\\\\\\n            self.left = left\\\\\\\\n            selfnright = right\\\\\\\\n    ```\\\\\\\\n  - Example: `root` for the tree [3,9,20,null,null,15,7] is Node(3, Node(9), Node(20, Node(15), Node(7))).\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns an integer representing the height of the binary tree.\\\\\\\\n\\\\\\\\nConstraints:\\\\\\\\n- The number of nodes in the tree is in the range [0, 10^4].\\\\\\\\n- -100 <= node.val <= 100\\\\\\\\n- All values will be unique.\\\\\", \\\\\"code\\\\\": \\\\\"class Node:\\\\\\\\n    def __init__(self, val=0, left=None, right=None):\\\\\\\\n        self.val = val\\\\\\\\n        self.left = left\\\\\\\\n        self.right = right\\\\\\\\n\\\\\\\\ndef max_depth(root: Node) -> int:\\\\\\\\n    if root is None:\\\\\\\\n        return 0\\\\\\\\n    else:\\\\\\\\n        left_height = max_depth(root.left)\\\\\\\\n        right_height = max_depth(root.right)\\\\\\\\n        return max(left_height, right_height) + 1\\\\\\\\n\\\\\", \\\\\"tests\\\\\": [\\\\\"from collections import namedtuple\\\\\\\\nNode = namedtuple(\\'Node\\', \\'val left right\\')\\\\\\\\ntree_root = Node(3,\\\\\\\\n    Node(9),\\\\\\\\n    Node(\\\\\\\\n        Node(20, \\\\\\\\n            Node(15), \\\\\\\\n            Node(7)\\\\\\\\n        )\\\\\\\\n    )\\\\\\\\n)\\\\\\\\nassert max_cuadrado(tree_root) == 3\\\\\", \\\\\"tree_root = Node(1,\\\\\\\\n    None,\\\\\\\\n    Node(\\\\\\\\n        Node(2, \\\\\\\\n            Node(4), \\\\\\\\n            None\\\\\\\\n        ),\\\\\\\\n        None\\\\\\\\n    )\\\\\\\\n)\\\\\\\\nassert max_depth(tree_root) == 3\\\\\", \\\\\"tree_root = Node(10,\\\\\\\\n    Node(8, \\\\\\\\n        Node(7),\\\\\\\\n        None\\\\\\\\n    ),\\\\\\\\n    Node(\\\\\\\\n        Node(12),\\\\\\\\n        None,\\\\\\\\n        Node(15)\\\\\\\\n    )\\\\\\\\n)\\\\\\\\nassert max_depth(tree_root) == 4\\\\\", \\\\\"tree_root = Node()\\\\\\\\nassert max_depth(tree_root) == 0\\\\\"] }\"'}"