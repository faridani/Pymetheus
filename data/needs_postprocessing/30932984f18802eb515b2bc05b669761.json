"{'model': 'mistral:latest', 'response': '\"{ \\\\\"title\\\\\": \\\\\"Prime Factorization Analyzer (Hard)\\\\\", \\\\\"description\\\\\": \\\\\"In number theory, the prime number theorem estimates the number of primes less than a given number. Write a function `prime_factors` that takes a positive integer as input and returns its prime factors in the form of a list.\\\\\\\\n\\\\\\\\n#### Function Signature\\\\\\\\n```python\\\\\\\\ndef prime_factors(n: int) -> List[int]:\\\\\\\\n```\\\\\\\\n\\\\\\\\n#### Input\\\\\\\\n- `n` (int): A positive integer greater than 1.\\\\\\\\n\\\\\\\\n#### Output\\\\\\\\n- Returns a list of prime numbers that divide the input number.\\\\\\\\n\\\\\", \\\\\"code\\\\\": \\\\\"def prime_factors(n: int) -> List[int]:\\\\\\\\n    factors = []\\\\\\\\n    i = 2\\\\\\\\n    while i * i <= n:\\\\\\\\n        if n % i == 0:\\\\\\\\n            factors.append(i)\\\\\\\\n            n //= i\\\\\\\\n        else:\\\\\\\\n            i += 1\\\\\\\\n    if n > 1:\\\\\\\\n        factors.append(n)\\\\\\\\n    return [int(x) for x in sorted(set(factors)) if x != 1]\\\\\", \\\\\"tests\\\\\": [\\\\\"assert prime_factors(12) == [2, 2, 3]\\\\\", \\\\\"assert prime_factors(45) == [3, 3, 5]\\\\\", \\\\\"assert prime_factors(7890) == [2, 3, 3, 5, 7, 7, 11, 13, 17]\\\\\"] }\"'}"