{
    "title": "Sudoku Checker (Hard)",
    "description": "Write a function that checks if a given Sudoku grid is valid. A valid Sudoku grid has the following properties:\n\n- It is a 9x9 matrix, where each row, column and one of the nine 3x3 sub-grids (also called 'regions') contains the numbers from 1 to 9 without repetition.\n- The grid does not have any zeros. \n\n#### Function Signature\n```python\ndef is_valid_sudoku(grid: list[list[int]]) -> bool:\n```\n\n#### Input\n- `grid` (list of lists of int): A 9x9 matrix representing a Sudoku grid, where each element is an integer from 1 to 9 or 0.\n\n#### Output\n- Returns `True` if the input grid is valid, `False` otherwise.",
    "code": "from typing import List\n\ndef is_valid_sudoku(grid: List[List[int]]) -> bool:\n    def check_row(row: List[int]) -> bool:\n        return len(set(row)) == 9 and all(1 <= num <= 9 for num in row)\n\n    def check_col(col: List[int]) -> bool:\n        return len(set(col)) == 9 and all(1 <= num <= 9 for num in col)\n\n    def check_region(region: List[List[int]]) -> bool:\n        flat = [num for row in region for num in row]\n        return len(set(flat)) == 9 and all(1 <= num <= 9 for num in flat)\n\n    for i in range(9):\n        if not check_row(grid[i]):\n            return False\n        if not check_col([grid[j][i] for j in range(9)]):\n            return False\n        region = [row[i:i+3] for row in grid[i*3:(i+1)*3]]\n        if not check_region(region):\n            return False\n\n    return True",
    "tests": [
        "assert is_valid_sudoku([[5,3,4,6,7,8,9,1,2], [6,7,8,9,1,2,3,4,5], [1,9,8,3,4,2,5,6,7], [8,5,9,7,6,3,4,2,1], [4,2,6,8,5,1,3,9,7], [3,1,9,7,4,2,8,5,6], [9,6,1,5,3,7,2,8,4], [7,4,2,6,9,5,1,3,8], [2,8,4,3,1,6,7,9,5]]) == True",
        "assert is_valid_sudoku([[1,2,3],[4,5,6],[7,8,0]]) == False"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "CodeWars"
}