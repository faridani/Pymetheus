{
    "title": "Hard: Tree Traversals",
    "description": "Given a tree represented as an adjacency list, write a function that returns the sum of all node values reachable from any leaf node. A leaf node is a node with no children.\n\n#### Function Signature\n```python\ndef tree_traversal_sum(tree:\n    dict) -> int:\n```\n\n#### Input\n- `tree` (dict): An adjacency list representing the tree, where each key is a node and its value is a list of child nodes.\n\n#### Output\n- Returns the sum of all node values reachable from any leaf node.",
    "code": "",
    "\nimport collections\n\ndef tree_traversal_sum(tree):\n    # Create a dictionary to store the sum of node values for each subtree\n    subtree_sums = collections.defaultdict(int)\n\n    def traverse(node, parent_value=0):\n        if not tree[node]:\n            return [parent_value]\n        else:\n            child_sums = []\n            for child in tree[node]:\n                child_sum = traverse(child, parent_value)[1]\n                child_sums.append(sum(child_sum) + parent_value)\n            return [max(child_sums)]\n\n    max_leaf_sum = traverse(0)[0]\n\n    return max_leaf_sum": "",
    "tests": [
        "assert tree_traversal_sum({0: [], 1: [2], 2: [3, 4], 3: [], 4: []}) == 10",
        "assert tree_traversal_sum({0: [], 1: [2], 2: [3], 3: [4], 4: []}) == 7",
        "assert tree_traversal_sum({0: [1, 2], 1: [3], 2: [4], 3: [5], 4: [6], 5: [], 6: []}) == 15"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "Project Euler"
}