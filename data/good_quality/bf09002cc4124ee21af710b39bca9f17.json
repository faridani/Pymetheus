{
    "title": "Hard -  Circular Prime Identifier",
    "description": "A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. A circular prime is a prime number that remains prime after any cyclic rearrangement of its digits.\n\nWrite a function `is_circular_prime` that takes an integer as input and determines if it's a circular prime number.\n\n#### Function Signature\n```python\ndef is_circular_prime(num: int) -> bool:\n```\n\n#### Input\n- `num` (int): A positive integer greater than 1. \n\n#### Output\n- Returns `True` if the input number is a circular prime, `False` otherwise.",
    "code": "def is_prime(n: int) -> bool:\n  if n <= 1:\n    return False\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return False\n  return True\n\ndef is_circular_prime(num: int) -> bool:\n    if not is_prime(num):\n        return False\n    num_str = str(num)\n    for i in range(len(num_str)):\n      rotated_num = int(num_str[i:] + num_str[:i])\n      if not is_prime(rotated_num):\n        return False\n    return True",
    "tests": [
        "'assert is_circular_prime(197) == True'",
        "'assert is_circular_prime(13) == True'",
        "'assert is_circular_prime(2) == True'",
        "'assert is_circular_prime(12) == False'",
        "'assert is_circular_prime(37) == False'"
    ],
    "difficulty": "insanely difficult",
    "model": "gemma2:27b",
    "style": "SPOJ"
}