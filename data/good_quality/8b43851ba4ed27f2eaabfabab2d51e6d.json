{
    "title": "Tree Traversals and Permutations",
    "description": "A tree traversed by DFS (Depth-First Search) or BFS (Breadth-First Search) can give us a permutation of the nodes. Write a function `permute_tree` that takes a binary tree as input and returns all possible permutations of its nodes.\n\n#### Function Signature\n```python\ndef permute_tree(root: TreeNode) -> List[Tuple[int]]:\n```\n\n#### Input\n- `root` (TreeNode): The root node of the binary tree, where each node has a value and two children.\n\n#### Output\n- Returns a list of tuples, where each tuple is a permutation of the nodes in the tree. Each permutation is represented as a sequence of node values.",
    "code": "class TreeNode:\n    def __init__(self, val=0):\n        self.val = val\n        self.left = None\n        self.right = None\n\nfrom typing import List, Tuple\n\ndef permute_tree(root: TreeNode) -> List[Tuple[int]]:\n    if root is None:\n        return [()]\n\n    permutations = []\n    def dfs(node: TreeNode, path: List[int]) -> None:\n        if node is None:\n            return\n        for i in range(len(path), -1, -1):\n            new_path = list(path)\n            new_path.insert(i, node.val)\n            permutations.append(tuple(new_path))\n        dfs(node.left, new_path + [node.val])\n        dfs(node.right, new_path + [node.val])\n\n    dfs(root, [])\n    return permutations",
    "tests": [
        "assert permute_tree(None) == [()]",
        "assert set(permute_tree(TreeNode(1)).flatten()) == {(1),}",
        "assert set(permute_tree(TreeNode(1, TreeNode(2))).flatten()) == {(1,), (1, 2), (2, 1)}",
        "assert set(permute_tree(TreeNode(1, TreeNode(2, TreeNode(3)))).flatten()) == {(1,), (1, 2), (1, 2, 3), (1, 3, 2), (2,), (2, 1), (2, 1, 3), (2, 3, 1), (3,)}"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "Internationals Olympiad"
}