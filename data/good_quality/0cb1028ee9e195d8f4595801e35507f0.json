{
    "title": "Easy: Number of Unique Substrings",
    "description": "A substring of a string is a contiguous sequence of characters within that string. For example, the substrings of the string 'abc' are 'a', 'b', 'c', 'ab', 'bc', and 'abc'. A string is said to be unique if it does not contain any other strings as its substrings.\n\nWrite a function `count_unique_substrings` that counts the number of unique substrings in a given string.\n\n#### Function Signature\n```python\ndef count_unique_substrings(s: str) -> int:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, and special characters.\n\n#### Output\n- Returns the number of unique substrings in the input string.",
    "code": "import math\n\ndef count_unique_substrings(s: str) -> int:\n    n = len(s)\n    dp = [0] * (1 << 6)\n    for i in range(n):\n        for mask in range(1 << 6):\n            if ((mask >> (s[i].ord() - ord('a')) & 1) == 0):\n                continue\n            new_mask = mask ^ (1 << (s[i].ord() - ord('a')))\n            dp[new_mask] += dp[mask]\n    return sum(1 for x in dp if x > 0)",
    "tests": [
        "assert count_unique_substrings('abc') == 7",
        "assert count_unique_substrings('abca') == 8",
        "assert count_unique_substrings('abcde') == 13"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "AtCoder"
}