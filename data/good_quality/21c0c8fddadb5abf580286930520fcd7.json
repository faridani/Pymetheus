{
    "title": "Highway Intersection",
    "description": "A highway intersection is formed by two perpendicular roads. Given a set of points representing the positions of traffic lights along these roads, write a function to determine whether there exists an arrangement of traffic lights such that all the lights are in sync and no two adjacent lights are out of sync.\n\n#### Function Signature\n```python\ndef highway_intersection(lights: list) -> bool:\n```\n\n#### Input\n- `lights` (list): A list of tuples, where each tuple contains the position of a traffic light on one road and its corresponding status ('in' or 'out'). For example, `[(0, 'in'), (2, 'in'), (4, 'out')]` represents three lights along one road.\n\n#### Output\n- Returns `True` if there exists an arrangement where all the lights are in sync and no two adjacent lights are out of sync, `False` otherwise.",
    "code": "\nimport math\n\ndef highway_intersection(lights: list) -> bool:\n    # Calculate the total number of positions\n    n = len(lights)\n\n    # Initialize a variable to store the maximum difference between consecutive lights\n    max_diff = 0\n\n    # Iterate over all pairs of adjacent lights\n    for i in range(n - 1):\n        # Calculate the absolute difference between the current light and the next one\n        diff = abs(lights[i][0] - lights[i + 1][0])\n\n        # Update the maximum difference if necessary\n        max_diff = max(max_diff, diff)\n\n    # If all lights are in sync, return True\n    if max_diff == 0:\n        return True\n\n    # Calculate the period of the highway intersection\n    period = math.gcd(max_diff, len(lights))\n\n    # Initialize a variable to store the total sum of positions modulo the period\n    total_sum_modulo = 0\n\n    # Iterate over all lights\n    for light in lights:\n        # Add the position of the current light modulo the period to the total sum\n        total_sum_modulo = (total_sum_modulo + light[0] % period) % period\n\n    # If the total sum is zero, return True\n    if total_sum_modulo == 0:\n        return True\n\n    # Initialize a variable to store the maximum difference modulo the period\n    max_diff_modulo = 0\n\n    # Iterate over all pairs of adjacent lights\n    for i in range(n - 1):\n        # Calculate the absolute difference between the current light and the next one modulo the period\n        diff_modulo = abs((lights[i][0] % period) - (lights[i + 1][0] % period))\n\n        # Update the maximum difference if necessary\n        max_diff_modulo = max(max_diff_modulo, diff_modulo)\n\n    # If all lights are in sync modulo the period, return True\n    if max_diff_modulo == 0:\n        return True\n\n    # Otherwise, return False\n    return False",
    "tests": [
        "assert highway_intersection([(1, 'in'), (2, 'in'), (3, 'out'), (4, 'in')]) == True",
        "assert highway_intersection([(1, 'in'), (3, 'in'), (5, 'out'), (7, 'in')]) == False"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "Project Euler"
}