{
    "title": "Euler's Totient Function",
    "description": "Euler's totient function \u03c6(n) is a function that counts the positive integers up to n that are relatively prime to n. It is written as $\\phi(n)$ in mathematics. Write a function `euler_totient` that calculates Euler's totient function for a given number `n`. The function should be able to handle numbers up to 10^9.\n\n#### Function Signature\n```python\ndef euler_totient(n: int) -> int:\n```\n\n#### Input\n- `n` (int): A positive integer.\n\n#### Output\n- Returns Euler's totient function value for the input number.",
    "code": "from math import sqrt\nimport sympy\n\ndef euler_totient(n: int) -> int:\n    if n < 2:\n        return n\n    count = 0\n    for i in range(1, int(sqrt(n)) + 1):\n        if sympy.isprime(i):\n            if sympy.mod(n, i) == 0:\n                break\n        else:\n            count += 1\n    if count == (int(sqrt(n)) - 1 // int(sqrt(n)) % 2 + 1):  # n is prime or power of prime\n        return n\n    else:\n        for i in range(int(sqrt(n)) + 1, n):\n            if sympy.isprime(i):\n                count += 1\n                while n % i == 0:\n                    n //= i\n                break\n        if n > 1:\n            count += 1\n    return count",
    "tests": [
        "assert euler_totient(1) == 1",
        "assert euler_totient(2) == 1",
        "assert euler_totient(3) == 2",
        "assert euler_totient(4) == 2",
        "assert euler_totient(5) == 4",
        "assert euler_totient(6) == 2",
        "assert euler_totient(7) == 6",
        "assert euler_totient(8) == 4",
        "assert euler_totient(9) == 6",
        "assert euler_totient(10) == 4"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "ICPC"
}