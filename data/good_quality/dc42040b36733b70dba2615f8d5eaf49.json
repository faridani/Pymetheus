{
    "title": "Hard: Maximum Sum of Subarray with Consecutive Elements",
    "description": "Write a function `max_sum` that takes an integer array and returns the maximum sum of a subarray with consecutive elements.\n\n#### Function Signature\n```python\ndef max_sum(arr: list[int)) -> int:\n```\n\n#### Input\n- `arr` (list[int]): A non-empty list of integers.\n\n#### Output\n- Returns the maximum sum of a subarray with consecutive elements. If there is no such subarray, returns 0.",
    "code": "",
    "\ndef max_sum(arr: list[int)) -> int:\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    max_ending_here = max_so_far = arr[0]\n    min_ending_here = min_so_far = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] > max_ending_here + arr[i]:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here += arr[i]\n        \n        if max_ending_here < 0:\n            max_ending_here = 0\n        \n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        \n        if arr[i] < min_ending_here + arr[i]:\n            min_ending_here = arr[i]\n        else:\n            min_ending_here += arr[i]\n        \n        if min_ending_here < 0:\n            min_ending_here = 0\n        \n        if min_ending_here < min_so_far:\n            min_so_far = min_ending_here\n    \n    return max(max_so_far, -min_so_far)": "",
    "tests": [
        "assert max_sum([-2,1,-3,4,-1,2,1,-5,4]) == 6",
        "assert max_sum([1,-2,3,-1,2,-3,2,1,-2]) == 3",
        "assert max_sum([-1, -2, -3, -2, -1]) == 0",
        "assert max_sum([10,20,30,40,50]) == 150"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "Daily Coding Problem"
}