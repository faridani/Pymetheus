{
    "title": "Longest Increasing Subsequence (Easy)",
    "description": "Given a list of integers, write a function to find the length of the longest increasing subsequence. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n#### Function Signature\n```python\ndef longest_increasing_subsequence(lst: list[int]) -> int:\n```\n\n#### Input\n- `lst` (list[int]): A list of integers.\n\n#### Output\n- Returns the length of the longest increasing subsequence in the input list.",
    "code": "def longest_increasing_subsequence(lst: list[int]) -> int:\n    if not lst:\n        return 0\n    dp = [1] * len(lst)\n    for i in range(1, len(lst)):\n        for j in range(i):\n            if lst[i] > lst[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
    "tests": [
        "assert longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4",
        "assert longest_increasing_subsequence([]) == 0",
        "assert longest_increasing_subsequence([1]) == 1"
    ],
    "difficulty": "hard",
    "model": "llama3:latest",
    "style": "Exercism"
}