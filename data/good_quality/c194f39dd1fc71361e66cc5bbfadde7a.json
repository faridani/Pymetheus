{
    "title": "Sudoku Validator",
    "description": "A Sudoku puzzle is a 9x9 grid that can be filled with numbers from 1 to 9. Write a function `is_valid_sudoku` that takes a 2D list representing the Sudoku puzzle as input and returns `True` if it's valid, `False` otherwise.\n\n#### Function Signature\n```python\ndef is_valid_sudoku(board: list[list[int]]) -> bool:\n```\n\n#### Input\n- `board` (list[list[int]]): A 2D list representing the Sudoku puzzle. Each inner list represents a row in the grid, and each element in the list represents a cell in that row.\n\n#### Output\n- Returns `True` if the input Sudoku puzzle is valid, `False` otherwise.",
    "code": "",
    "\nimport copy\n\ndef is_valid_sudoku(board: list[list[int]]) -> bool:\n    # Check rows\n    for row in board:\n        seen = set()\n        for cell in row:\n            if cell == 0 or cell not in range(1, 10):\n                return False\n            if cell in seen:\n                return False\n            seen.add(cell)\n\n    # Check columns\n    for col in zip(*board):\n        seen = set()\n        for cell in col:\n            if cell == 0 or cell not in range(1, 10):\n                return False\n            if cell in seen:\n                return False\n            seen.add(cell)\n\n    # Check 3x3 sub-grids\n    for i in range(0, 9, 3):\n        for j in range(0, 9, 3):\n            seen = set()\n            for k in range(3):\n                for cell in board[i+k][j:j+3]:\n                    if cell == 0 or cell not in range(1, 10):\n                        return False\n                    if cell in seen:\n                        return False\n                    seen.add(cell)\n\n    return True": "",
    "tests": [
        "assert is_valid_sudoku([[], [], [], [], [], [], [], []]) == True",
        "assert is_valid_sudoku([[5,3], [6,0], [0,9], [8,7,4], [0,5,0], [0,0,0], [0,3,1], [7,0,6], [0,2,0]]) == False",
        "assert is_valid_sudoku([[5,3], [4,6], [7,9,2], [8,1,4], [2,5,3], [3,7,1], [9,6,4], [7,2,8], [3,4,5]]) == True"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "Competitive Programming"
}