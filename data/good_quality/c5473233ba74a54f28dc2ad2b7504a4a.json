{
    "title": "Hardest Sudoku Solver",
    "description": "Write a function `solve_sudoku` that takes a 9x9 2D list representing a Sudoku puzzle as input. The function should fill the board with numbers from 1 to 9, making sure each row, column, and 3x3 sub-grid contains each number exactly once.\n\n#### Function Signature\n```python\ndef solve_sudoku(board: list[list[int]]) -> None:\n```\n\n#### Input\n- `board` (list[list[int]]): A 9x9 2D list representing a Sudoku puzzle. The values in the board can be either numbers from 1 to 9 or zeros, where zero represents an empty cell.\n\n#### Output\n- Fills the input board with numbers from 1 to 9, making sure each row, column, and 3x3 sub-grid contains each number exactly once. If it is not possible to solve the Sudoku puzzle, the function should raise a `ValueError`.",
    "code": "def solve_sudoku(board: list[list[int]]) -> None:\n    def is_valid(board, num, pos):\n        # Check row\n        for i in range(9):\n            if board[pos[0]][i] == num and pos[1] != i:\n                return False\n        # Check column\n        for i in range(9):\n            if board[i][pos[1]] == num and pos[0] != i:\n                return False\n        # Check box\n        start_row, start_col = 3 * (pos[0] // 3), 3 * (pos[1] // 3)\n        for i in range(3):\n            for j in range(3):\n                if board[start_row + i][start_col + j] == num:\n                    return False\n        return True\n    def solve(board):\n        for i in range(9):\n            for j in range(9):\n                if board[i][j] == 0:\n                    for num in range(1, 10):\n                        if is_valid(board, num, (i, j)):\n                            board[i][j] = num\n                            if solve(board):\n                                return True\n                            else:\n                                board[i][j] = 0\n                    return False\n        return True\n    solve(board)",
    "tests": [
        "board = [[5,1,7,6,0,0,0,3,4],\n             [2,8,9,0,0,4,0,0,0],\n             [3,4,6,7,8,5,0,0,0],\n             [0,0,0,0,0,0,0,0,0],\n             [0,0,0,9,8,7,6,5,4],\n             [0,0,2,1,0,0,0,0,0],\n             [0,0,0,3,2,1,0,0,0],\n             [5,2,9,7,6,3,8,1,4],\n             [1,4,3,5,6,2,7,0,0]];\nsolve_sudoku(board);",
        "print(board)"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "Exercism"
}