{
    "title": "Hard: Tree Summation",
    "description": "Given a binary tree, where each node has an integer value and two child nodes (left and right), write a function `tree_sum` that calculates the sum of all node values in the tree. The function should take as input a root node of the tree and return the total sum.\n\n#### Function Signature\n```python\ndef tree_sum(node: Node) -> int:\n```\n\n#### Input\n- `node`: A binary tree node, with integer value and two child nodes (left and right).\n\n#### Output\n- The sum of all node values in the tree.",
    "code": "class Node:\n    def __init__(self, val: int, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef tree_sum(node: Node) -> int:\n    if node is None:\n        return 0\n    else:\n        return node.val + tree_sum(node.left) + tree_sum(node.right)",
    "tests": [
        "assert tree_sum(Node(1, Node(2), Node(3))) == 6",
        "assert tree_sum(Node(5, Node(4), Node(10, Node(8), Node(15)))) == 39",
        "assert tree_sum(None) == 0",
        "assert tree_sum(Node(-1)) == -1"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "Internationals Olympiad"
}