{
    "title": "Hard: Maximum Subsequence Sum",
    "description": "Write a function `max_subsequence_sum` that finds the maximum sum of a subsequence in a given array of integers. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements.\n\n#### Function Signature\n```python\ndef max_subsequence_sum(arr: list[int)) -> int:\n```\n\n#### Input\n- `arr` (list[int]): An array of integers.\n\n#### Output\n- Returns the maximum sum of a subsequence in the input array.",
    "code": "\nimport sys\n\ndef max_subsequence_sum(arr: list[int]) -> int:\n    n = len(arr)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            if arr[j - 1] > 0:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + arr[j-1])\n            else:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1])\n    \n    return dp[-1][-1]",
    "tests": [
        "assert max_subsequence_sum([-2, 3, -4]) == 5",
        "assert max_subsequence_sum([1, 2, -1, 3, 4]) == 10",
        "assert max_subsequence_sum([-1, 0, 1]) == 1",
        "assert max_subsequence_sum([1, -2, 3, -5, 4, -6]) == 7"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "SPOJ"
}