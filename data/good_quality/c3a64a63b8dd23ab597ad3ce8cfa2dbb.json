{
    "title": "Hard: Minimum Window Substring",
    "description": "Given two strings, `s` and `t`, find the minimum window substring of `s` that contains all characters of `t`. If no such window exists, return an empty string. For example, if `s = \"ADOBECODEBANC\"` and `t = \"ABC\"`, the function should return `\"BANC\"`. The function should have a time complexity of O(n), where n is the length of `s`. \n\n#### Function Signature\n```python\ndef min_window_substring(s: str, t: str) -> str:\n```\n\n#### Input\n- `s` (str): A string that may contain any characters.\n- `t` (str): A string that contains only the characters that should be present in the minimum window substring of `s`. \n\n#### Output\n- Returns the minimum window substring of `s` that contains all characters of `t`, or an empty string if no such window exists.",
    "code": "from collections import defaultdict\n\ndef min_window_substring(s: str, t: str) -> str:\n    if not t or not s:\n        return \"\"\n    t_count = defaultdict(int)\n    for char in t:\n        t_count[char] += 1\n    required_chars = len(t_count)\n    left, right = 0, 0\n    min_length = float('inf')\n    min_window = \"\"\n    while right < len(s):\n        if all(t_count[char] <= s_count[char] for char in t_count):\n            while left <= right and all(t_count[char] <= s_count[char] for char in t_count):\n                if right - left + 1 < min_length:\n                    min_length = right - left + 1\n                    min_window = s[left:right+1]\n                left += 1\n        right += 1\n    return min_window",
    "tests": [
        "assert min_window_substring('ADOBECODEBANC', 'ABC') == 'BANC'",
        "assert min_window_substring('HelloWorld', 'low') == 'low'",
        "assert min_window_substring('', 'abc') == ''",
        "assert min_window_substring('abccba', 'abc') == 'abc'"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "HackerEarth"
}