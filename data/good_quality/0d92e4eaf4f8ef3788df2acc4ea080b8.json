{
    "title": "Economical Banknote Sorter",
    "description": "Write a function `sort_banknotes` that takes an integer array `denominations` representing the values of different banknotes and their quantities, and returns the minimum number of trips needed to sort all the banknotes. A trip is defined as any sequence of banknotes sorted in ascending order.\n\n#### Function Signature\n```python\ndef sort_banknotes(denominations: list[int]) -> int:\n```\n\n#### Input\n- `denominations` (list[int]): An integer array where each element represents the value of a banknote and its quantity. The values are in ascending order.\n\n#### Output\n- Returns the minimum number of trips needed to sort all the banknotes.",
    "code": "\ndef sort_banknotes(denominations: list[int]) -> int:\n    if not denominations:\n        return 0\n\n    trips = 1\n    current_trip_value = denominations[0]\n\n    for denomination in denominations:\n        if denomination > current_trip_value:\n            trips += 1\n            current_trip_value = denomination\n        elif denomination != current_trip_value:\n            current_trip_value = min(current_trip_value, denomination)\n\n    return trips",
    "tests": [
        "assert sort_banknotes([2, 3, 4]) == 1",
        "assert sort_banknotes([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 5",
        "assert sort_banknotes([]) == 0",
        "assert sort_banknotes([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 2"
    ],
    "difficulty": "hard",
    "model": "llama3:latest",
    "style": "HackerRank"
}