{
    "title": "Medium: Maximum Sum of Subsequence",
    "description": "A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Write a function `max_sum_subsequence` that takes as input two lists of integers, `nums1` and `nums2`, and returns the maximum sum of any subsequence that can be formed using elements from both lists.\n\n#### Function Signature\n```python\ndef max_sum_subsequence(nums1: list[int], nums2: list[int]) -> int:\n```\n\n#### Input\n- `nums1` (list[int]): A list of integers.\n- `nums2` (list[int]): Another list of integers.\n\n#### Output\n- Returns the maximum sum of any subsequence that can be formed using elements from both lists.",
    "code": "",
    "\ndef max_sum_subsequence(nums1: list[int], nums2: list[int]) -> int:\n    n = len(nums1)\n    m = len(nums2)\n\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif nums1[i - 1] > nums2[j - 1]:\n                dp[i][j] = dp[i][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n][m]": "",
    "tests": [
        "assert max_sum_subsequence([-2, -3, 4], [1, -5, 6]) == 29",
        "assert max_sum_subsequence([1, 2, 3], [-2, 0, 9]) == 12",
        "assert max_sum_subsequence([-10, -20, 30, 50], [-40, -50, 60, 100]) == 150",
        "assert max_sum_subsequence([-1, -2, -3], [1, 2, 3]) == 6"
    ],
    "difficulty": "medium",
    "model": "llama3:latest",
    "style": "ACM-ICPC"
}