{
    "title": "'Anagram Checker (Hard)'",
    "description": "An anagram is a word or phrase that consists of the same letters as another word or phrase, but arranged differently. Write a function `is_anagram` that checks if two given strings are anagrams.\n\n#### Function Signature\n```python\ndef is_anagram(s1: str, s2: str) -> bool:\n```\n\n#### Input\n- `s1` (str): A string containing only lowercase English alphabets. \n- `s2` (str): Another string containing only lowercase English alphabets.\n\n#### Output\n- Returns `True` if the two strings are anagrams, `False` otherwise.",
    "code": "import collections\ndef is_anagram(s1: str, s2: str) -> bool:\n    # Ensure both strings have the same length\n    if len(s1) != len(s2):\n        return False\n    \n    # Count the frequency of each character in the first string\n    freq1 = collections.Counter(s1)\n    \n    # Count the frequency of each character in the second string\n    freq2 = collections.Counter(s2)\n    \n    # Check if the frequencies are equal\n    return all([freq1[char] == freq2[char] for char in sorted(freq1)])",
    "tests": [
        "assert is_anagram('listen', 'silent') == True",
        "assert is_anagram('python', 'typhon') == False",
        "assert is_anagram('act', 'cat') == True",
        "assert is_anagram('madam', 'dam') == True"
    ],
    "difficulty": "insanely difficult",
    "model": "mistral:latest",
    "style": "SPOJ"
}