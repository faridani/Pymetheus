{
    "title": "Easy: Prime Factors Counter",
    "description": "A prime factor of a positive integer is a prime number that divides the integer without leaving a remainder. For example, the prime factors of 12 are 2, 2, and 3 because 2*2*3 = 12. Write a function `prime_factors` that counts the number of distinct prime factors of a given integer.\n\n#### Function Signature\n```python\ndef prime_factors(n: int) -> int:\n```\n\n#### Input\n- `n` (int): A positive integer.\n\n#### Output\n- Returns the number of distinct prime factors of the input integer.",
    "code": "import math\n\ndef is_prime(k: int) -> bool:\n    if k < 2:\n        return False\n    for i in range(2, math.isqrt(k)+1):\n        if k % i == 0:\n            return True\n    return False\n\ndef prime_factors(n: int) -> int:\n    factors = set()\n    for p in range(2, n+1):\n        while n % p == 0:\n            factors.add(p)\n            n //= p\n    if n > 1:\n        factors.add(n)\n    return len(factors)",
    "tests": [
        "assert prime_factors(12) == 3",
        "assert prime_factors(25) == 2",
        "assert prime_factors(1000) == 4",
        "assert prime_factors(24) == 2"
    ],
    "difficulty": "medium",
    "model": "llama3:latest",
    "style": "Codeforces"
}