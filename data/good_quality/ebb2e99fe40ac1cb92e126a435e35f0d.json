{
    "title": "The Great Library of Alexandria",
    "description": "The Great Library of Alexandria was one of the largest and most significant libraries of the ancient world. It was a center of learning and scholarship, housing over 700,000 volumes on various subjects, including mathematics, astronomy, medicine, and philosophy.\n\n#### Problem Statement\nYou are given an array of integers representing the number of books in different categories at the library. Each category has its own bookshelf with a specific capacity (number of books it can hold). The goal is to rearrange the books among the bookshelves so that each bookshelf holds exactly its capacity, and no more.\n\n#### Function Signature\n```python\ndef optimize_library(bookshelf_capacities: list[int], book_counts: list[int]) -> int:\n```\n\n#### Input\n- `bookshelf_capacities` (list[int]): A list of integers representing the capacities of each bookshelf.\n- `book_counts` (list[int]): A list of integers representing the number of books in each category.\n\n#### Output\n- Returns the minimum possible total distance required to move all the books among the bookshelves, where the distance between two adjacent categories is 1 unit. If it's not possible to distribute the books according to the given capacities, return -1.",
    "code": "\nimport math\n\ndef optimize_library(bookshelf_capacities: list[int], book_counts: list[int]) -> int:\n    # Calculate the remaining capacity of each bookshelf\n    remaining_capacities = [capacity for capacity in bookshelf_capacities]\n    \n    # Initialize the total distance and the current book category index\n    total_distance = 0\n    book_category_index = 0\n    \n    # Distribute the books among the bookshelves\n    for book_count in book_counts:\n        # Calculate the remaining space on the current bookshelf\n        remaining_space = remaining_capacities[book_category_index]\n        \n        # If the bookshelf has enough capacity, place all books on it and move to the next one\n        if remaining_space >= book_count:\n            remaining_capacities[book_category_index] -= book_count\n            book_category_index += 1\n        # Otherwise, try to distribute the books among the rest of the bookshelves\n        else:\n            for i in range(book_category_index, len(remaining_capacities)):\n                if remaining_capacities[i] >= book_count - (remaining_space + 1):\n                    remaining_capacities[i] -= book_count - (remaining_space + 1)\n                    total_distance += math.ceil((i - book_category_index) / 2.0)\n                    book_category_index = i\n                    break\n        \n        # If there are no more bookshelves or not enough capacity for the remaining books, return -1\n        if book_category_index == len(remaining_capacities):\n            return -1\n    \n    return total_distance",
    "tests": [
        "assert optimize_library([3, 2, 5], [1, 4, 1]) == 2",
        "assert optimize_library([1, 2], [1, 1]) == 0",
        "assert optimize_library([1, 2, 3], [1, 2, 3]) == 2",
        "assert optimize_library([2, 2], [4, 4]) == -1"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "Facebook Hacker Cup"
}