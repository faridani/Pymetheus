{
    "title": "Maximal Increasing Subsequence",
    "description": "A maximal increasing subsequence (MIS) of a sequence is the longest contiguous subsequence that is strictly increasing. For example, given the sequence [1, 2, 3, 4, 5, 6], the MIS is [2, 3, 4]. Given two sequences A and B, find their MIS.\n\n#### Function Signature\n```python\ndef mis(A: list[int), B: list[int]) -> int:\n```\n\n#### Input\n- `A` (list[int]): The first sequence of integers.\n- `B` (list[int]): The second sequence of integers.\n\n#### Output\n- Returns the length of the longest MIS that can be formed by combining elements from A and B. If no such subsequence exists, return 0.",
    "code": "",
    "\ndef mis(A: list[int], B: list[int]) -> int:\n    n = len(A)\n    m = len(B)\n\n    # Initialize a 2D table to store the lengths of the longest increasing subsequences\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    max_length = 0\n\n    # Iterate over the sequences A and B\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            # If the current elements are increasing, update the table\n            if A[i - 1] < B[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                max_length = max(max_length, dp[i][j])\n            # Otherwise, take the maximum length from the previous cells\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return max_length": "",
    "tests": [
        "assert mis([1, 2, 3], [4, 5]) == 3",
        "assert mis([1, 2], [3, 4]) == 0",
        "assert mis([1, 2, 3], []) == 3",
        "assert mis([], [1, 2, 3]) == 0"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "ICPC"
}