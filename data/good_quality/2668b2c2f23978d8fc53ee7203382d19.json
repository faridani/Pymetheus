{
    "title": "Easy: Maximum Sum of a Subarray",
    "description": "Given an array of integers, find the maximum sum of a subarray (a contiguous part of the array). A negative number is also a valid input.\n\n#### Function Signature\n```python\ndef max_subarray_sum(arr: list[int)) -> int:\n```\n\n#### Input\n- `arr` (list[int]): A list of integers that may contain positive and negative numbers.\n\n#### Output\n- Returns the maximum sum of a subarray. If all elements in the array are negative, it returns 0.",
    "code": "",
    "\nimport sys\n\ndef max_subarray_sum(arr: list[int]) -> int:\n    if not arr:\n        return 0\n    \n    max_current = max_global = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_current = max(arr[i], max_current + arr[i])\n        max_global = max(max_global, max_current)\n    \n    return max_global": "",
    "tests": [
        "assert max_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6",
        "assert max_subarray_sum([1]) == 1",
        "assert max_subarray_sum([-1]) == 0",
        "assert max_subarray_sum([]) == 0"
    ],
    "difficulty": "medium",
    "model": "llama3:latest",
    "style": "Daily Coding Problem"
}