{
    "title": "Hard: N-Queens Problem Solver",
    "description": "The N-queens puzzle is a problem of placing N queens on an N\u00d7N chessboard such that no two queens threaten each other. Given an integer N, write a function `solve_n_queens` that returns all distinct solutions to the N-queens puzzle. Each solution contains a list of integers, where the i-th integer is the column position of the queen in the i-th row.\n\n#### Function Signature\n```python\ndef solve_n_queens(N: int) -> List[List[int]]:\n```\n\n#### Input\n- `N` (int): The size of the chessboard and the number of queens to place.\n\n#### Output\n- Returns a list of lists of integers representing all distinct solutions to the N-queens puzzle. If no solution exists, return an empty list.",
    "code": "",
    "from typing import List\n\ndef solve_n_queens(N: int) -> List[List[int]]:\n    def is_safe(board, row, col):\n        for i in range(row):\n            if board[i] == col or \\\n                board[i] - i == col - row or \\\n                board[i] + i == col + row:\n                return False\n        return True\n\n    def backtrack(board, row):\n        if row == N:\n            result.append(list(board))\n            return\n        for col in range(N):\n            if is_safe(board, row, col):\n                board[row] = col\n                backtrack(board, row + 1)\n                board[row] = -1\n\n    result = []\n    board = [-1] * N\n    backtrack(board, 0)\n    return result": "",
    "tests": [
        "assert solve_n_queens(4) == [[1, 3, 0, 2], [2, 0, 3, 1]]",
        "assert solve_n_queens(5) == []"
    ],
    "difficulty": "insanely difficult",
    "model": "codestral:22b",
    "style": "HackerRank"
}