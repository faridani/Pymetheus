{
    "title": "'Palindromic Substrings Count (Medium)'",
    "description": "Given a string `s`, find and count the number of non-empty palindromic substrings within it. A palindromic substring is a contiguous sequence of characters that reads the same backward as forward.\n\n#### Function Signature\n```python\ndef count_palindromes(s: str) -> int:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns an integer representing the number of non-empty palindromic substrings within the input string.",
    "code": "import re\ndef count_palindromes(s: str) -> int:\n    # Find all possible palindromic substrings (ignoring case)\n    palindromes = re.findall('([A-Za-z]+)', s.lower())\n    # Count the number of unique palindromic substrings (ignore duplicates if they are the same, but in a different order)\n    return len(set(''.join(palindromes)))",
    "tests": [
        "assert count_palindromes(\"a\") == 1",
        "assert count_palindromes(\"aa\") == 1",
        "assert count_palindromes(\"aba\") == 2",
        "assert count_palindromes(\"abbaaba\") == 5"
    ],
    "difficulty": "medium",
    "model": "mistral:latest",
    "style": "TopCoder"
}