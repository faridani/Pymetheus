{
    "title": "Hard: Longest Common Subsequence",
    "description": "The longest common subsequence (LCS) problem is about finding the longest sequence of characters that appear left-to-right (but not necessarily in a contiguous block), in both strings. Write a function `longest_common_subsequence` which takes two strings and returns their LCS length.\n\n#### Function Signature\n```python\ndef longest_common_subsequence(s1: str, s2: str) -> int:\n```\n\n#### Input\n- `s1` (str): The first string of lowercase English alphabets.\n- `s2` (str): The second string of lowercase English alphabets.\n\n#### Output\n- Returns the length of the longest common subsequence between s1 and s2.",
    "code": "def longest_common_subsequence(s1: str, s2: str) -> int:\n    m = len(s1)\n    n = len(s2)\n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]\n",
    "tests": [
        "assert longest_common_subsequence('abcde', 'ace') == 3",
        "assert longest_common_subsequence('abc', 'def') == 0",
        "assert longest_common_subsequence('AGGTAB', 'GXTXAYB') == 4"
    ],
    "difficulty": "super hard",
    "model": "qwen2:7b",
    "style": "ACM-ICPC"
}