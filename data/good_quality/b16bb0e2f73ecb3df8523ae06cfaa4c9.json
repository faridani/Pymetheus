{
    "title": "Fibonacci Primes",
    "description": "Given a number n, generate all prime numbers up to n. Then for each prime p, find its Fibonacci index (the position of p in the Fibonacci sequence starting from 0) if it is present or return -1 otherwise.\n\n#### Function Signature\n```\ndef fibonacci_primes(n: int) -> list:\n```\n\n#### Input\n- `n` (int): The upper limit for generating prime numbers and checking for Fibonacci index.\n\n#### Output\n- Returns a list of tuples, where each tuple contains a prime number and its Fibonacci index if it is present in the Fibonacci sequence, or -1 otherwise.",
    "code": "\nimport math\n\ndef fibonacci_primes(n: int) -> list:\n    primes = []\n    for i in range(2, n + 1):\n        is_prime = True\n        for j in range(2, int(math.sqrt(i)) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n\n    fibonacci_sequence = [0, 1]\n    while fibonacci_sequence[-1] < n:\n        next_number = fibonacci_sequence[-1] + fibonacci_sequence[-2]\n        if next_number > n:\n            break\n        fibonacci_sequence.append(next_number)\n\n    result = []\n    for prime in primes:\n        if prime in fibonacci_sequence:\n            result.append((prime, fibonacci_sequence.index(prime)))\n        else:\n            result.append((prime, -1))\n\n    return result",
    "tests": [
        "assert fibonacci_primes(10) == [(2, 1), (3, 2), (5, 0), (7, 4)]",
        "assert fibonacci_primes(20) == [(2, 1), (3, 2), (5, 0), (7, 4), (11, 5), (13, 6), (17, -1), (19, -1)]"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "Codewars"
}