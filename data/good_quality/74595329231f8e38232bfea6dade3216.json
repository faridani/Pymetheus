{
    "title": "Maximum Sum Subarray",
    "description": "Given a list of integers, find the maximum sum of any subarray (not necessarily contiguous). A subarray is a sequence of elements from the original array.\n\n#### Function Signature\n```python\ndef max_sum_subarray(arr: list[int]) -> int:\n```\n\n#### Input\n- `arr` (list[int]): A list of integers.\n\n#### Output\n- Returns the maximum sum of any subarray in the input list.",
    "code": "from typing import List\n\ndef max_sum_subarray(arr: List[int]) -> int:\n    n = len(arr)\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(n):\n        current_sum += arr[i]\n        \n        if current_sum < 0:\n            current_sum = 0\n        else:\n            max_sum = max(max_sum, current_sum)\n    \n    return max_sum",
    "tests": [
        "assert max_sum_subarray([1, -2, 3, 10, -4, 7, 2]) == 18",
        "assert max_sum_subarray([-5, 0, 6, 2, 8]) == 13",
        "assert max_sum_subarray([-1, 0, 1]) == 2",
        "assert max_sum_subarray([-1, -2, -3, -4]) == -1"
    ],
    "difficulty": "hard",
    "model": "llama3:latest",
    "style": "HackerEarth"
}