{
    "title": "Maximum Sum of Distinct Subsequences (Easy)",
    "description": "A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For example, the subsequences of a string are strings that can be obtained from the original string by deleting some characters.\n\nWrite a function `max_sum_subsequence` that returns the maximum sum of distinct subsequences in a given list of integers.\n\n#### Function Signature\n```python\ndef max_sum_subsequence(lst: list[int]) -> int:\n```\n\n#### Input\n- `lst` (list[int]): A list of integers.\n\n#### Output\n- Returns the maximum sum of distinct subsequences in the input list.",
    "code": "",
    "\ndef max_sum_subsequence(lst: list[int]) -> int:\n    n = len(lst)\n    dp = [0] * (1 << n)\n    \n    for i in range(1 << n):\n        total = 0\n        for j in range(n):\n            if ((i >> j) & 1):\n                total += lst[j]\n        dp[i] = total\n    \n    max_sum = 0\n    for i in range(1 << n):\n        for j in range(i + 1, (1 << n)):\n            max_sum = max(max_sum, dp[i] + dp[j])\n    \n    return max_sum": "",
    "tests": [
        "assert max_sum_subsequence([1, 2, 3]) == 6",
        "assert max_sum_subsequence([-1, 0, 1]) == 1",
        "assert max_sum_subsequence([1, -1, 1]) == 2"
    ],
    "difficulty": "medium",
    "model": "llama3:latest",
    "style": "AtCoder"
}