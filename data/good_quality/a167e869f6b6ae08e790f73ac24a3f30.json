{
    "title": "Number of Islands",
    "description": "Given a 2D binary grid containing `0`s and `1`s, where each `1` represents land and each `0` represents water.\n\nWrite a function that calculates the number of distinct islands in the grid. An island is defined as any group of connected `1`s (i.e., land) that are not entirely surrounded by other `1`s (i.e., water).\n\n#### Function Signature\n```python\ndef count_islands(grid: list[list[int]]) -> int:\n```\n\n#### Input\n- `grid` (list[list[int]]): A 2D binary grid where each element is either `0` or `1`, representing water and land, respectively.\n\n#### Output\n- Returns the number of distinct islands in the grid.",
    "code": "",
    "\nfrom typing import List\n\ndef count_islands(grid: List[List[int]]) -> int:\n    if not grid:\n        return 0\n\n    def dfs(i: int, j: int) -> None:\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == 0:\n            return\n        grid[i][j] = 0\n        for x, y in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:\n            dfs(x, y)\n\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                dfs(i, j)\n                count += 1\n\n    return count": "",
    "tests": [
        "assert count_islands([[0,1,1,1], [1,0,1,1], [1,1,1,1]]) == 1",
        "assert count_islands([[0,1,1,1], [1,0,1,1], [1,1,1,1], [0,0,0,0]]) == 1",
        "assert count_islands([[1,1,1,1], [1,0,1,1], [1,1,1,1]]) == 3"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "Facebook Hacker Cup"
}