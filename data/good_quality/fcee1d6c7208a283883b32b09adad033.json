{
    "title": "Finding the Maximum Sum of Subarrays",
    "description": "A subarray is a contiguous portion of an array. For example, if we have the array `[1, 2, 3, 4, 5]`, then the subarrays are `[]`, `[1]`, `[1, 2]`, `[1, 2, 3]`, ..., and `[1, 2, 3, 4, 5]`. A sum of a subarray is the sum of its elements. For example, if we have the array `[1, -2, 3, 10, -4, 7, 2, -5]`, then the sums of the subarrays are `0`, `-1`, `2`, `12`, ..., and `-1`. Write a function `max_sum_subarray` that finds the maximum sum of all possible subarrays.\n\n#### Function Signature\n```python\ndef max_sum_subarray(arr: list[int)) -> int:\n```\n\n#### Input\n- `arr` (list[int]): A list of integers representing the array.\n\n#### Output\n- Returns the maximum sum of all possible subarrays.",
    "code": "",
    "\nimport math\n\ndef max_sum_subarray(arr: list[int)) -> int:\n    n = len(arr)\n    total_sum = sum(arr)\n    current_max_sum = -math.inf\n    current_sum = 0\n    \n    for i in range(n):\n        current_sum += arr[i]\n        \n        if current_sum < 0:\n            current_sum = 0\n        \n        current_max_sum = max(current_max_sum, current_sum)\n    \n    return total_sum + current_max_sum": "",
    "tests": [
        "assert max_sum_subarray([-2, -3, 4, -1, -2, 1, 5, -3]) == 7",
        "assert max_sum_subarray([1, 2, 3, 4, 5]) == 15",
        "assert max_sum_subarray([-1, -2, -3, -4, -5]) == -1"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "ACM-ICPC"
}