{
    "title": "Economical Fueling",
    "description": "You are a truck driver who just started working for a new company. Your boss told you that your job depends on how efficiently you can fuel up at gas stations. The company has given you a special card that allows you to get discounts based on the total amount of money spent on gas. However, there's a catch! You can only fill up in whole number amounts (no fractions) and the card only works if you spend exactly an amount between 100 and 500 dollars inclusive. Write a function `economical_fueling` that determines how many unique combinations of gas stations you can visit to maximize your earnings while staying within the constraints.\n\n#### Function Signature\n```python\ndef economical_fueling(gas_stations: list) -> int:\n```\n\n#### Input\n- `gas_stations` (list): A list of integers representing the cost of fuel at each gas station. The list contains at least two elements, and all elements are between 1 and 100 inclusive.\n\n#### Output\n- Returns the number of unique combinations of gas stations that you can visit to maximize your earnings while staying within the constraints.",
    "code": "from itertools import permutations\n\ndef economical_fueling(gas_stations: list) -> int:\n    # Calculate the total cost of fuel at all gas stations\n    total_cost = sum(gas_stations)\n    # Initialize a set to store unique combinations that work with the card\n    valid_combinations = set()\n    for r in range(2, len(gas_stations) + 1):\n        for combination in permutations(gas_stations, r):\n            # Calculate the total cost of the current combination\n            combination_cost = sum(combination)\n            # Check if the combination's cost is between 100 and 500 inclusive\n            if 100 <= combination_cost <= 500:\n                valid_combinations.add(tuple(sorted(combination)))\n    return len(valid_combinations)",
    "tests": [
        "assert economical_fueling([10, 20, 30, 40]) == 3",
        "assert economical_fueling([1, 2, 3, 4, 5]) == 0",
        "assert economical_fueling([100, 101, 102]) == 1",
        "assert economical_fueling([1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 200]) == 2"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "Codeforces"
}