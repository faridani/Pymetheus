{
    "title": "Prime Factors of Large Numbers",
    "description": "Write a function `prime_factors` that takes an integer `n` as input and returns the prime factors of `n`. The function should be able to handle large numbers.\n\n#### Function Signature\n```python\ndef prime_factors(n: int) -> list[int]:\n```\n\n#### Input\n- `n` (int): A positive integer for which we want to find its prime factors.\n\n#### Output\n- Returns a list of prime factors of the input number.",
    "code": "",
    "\nimport math\n\ndef is_prime(m: int) -> bool:\n    if m < 2:\n        return False\n    for i in range(2, int(math.sqrt(m)) + 1):\n        if m % i == 0:\n            return False\n    return True\n\ndef prime_factors(n: int) -> list[int]:\n    factors = []\n    d = n\n    while d > 1:\n        for i in range(2, int(math.sqrt(d)) + 1):\n            if is_prime(i) and d % i == 0:\n                factors.append(i)\n                d //= i\n                break\n        else:\n            factors.append(d)\n            break\n    return factors\n\ndef main():\n    print(prime_factors(10000000))\n\nif __name__ == ": "main__",
    "tests": [
        "assert prime_factors(10) == [2, 5]",
        "assert prime_factors(27) == [3, 3, 3]",
        "assert prime_factors(36) == [2, 2, 3, 3]",
        "assert prime_factors(9999) == [3, 3, 7, 11]"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "SPOJ"
}