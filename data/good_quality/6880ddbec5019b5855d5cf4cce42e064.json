{
    "title": "Maximum Sum of Subarray",
    "description": "Given an array of integers, write a function `max_sum_subarray` that returns the maximum sum of a subarray (a contiguous part of the array). For example, for the input `[3, 2, -1, 5, -1, 2, 10]`, the output should be `14` because the subarray `[2, 5, -1, 2, 10]` has a sum of `14`. Note that there may be multiple subarrays with the maximum sum.\n\n#### Function Signature\n```python\ndef max_sum_subarray(arr: list[int)) -> int:\n```\n\n#### Input\n- `arr` (list[int]): A list of integers.\n\n#### Output\n- Returns the maximum sum of a subarray.",
    "code": "",
    "\nimport itertools\n\ndef max_sum_subarray(arr: list[int)) -> int:\n    # Initialize the maximum sum\n    max_sum = float('-inf')\n\n    # Iterate over all possible subarrays\n    for window_size in range(1, len(arr) + 1):\n        for i in range(len(arr) - window_size + 1):\n            # Calculate the sum of the current subarray\n            subarray_sum = sum(arr[i:i+window_size])\n\n            # Update the maximum sum if necessary\n            max_sum = max(max_sum, subarray_sum)\n\n    return max_sum": "",
    "tests": [
        "assert max_sum_subarray([3, 2, -1, 5, -1, 2, 10]) == 14",
        "assert max_sum_subarray([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6",
        "assert max_sum_subarray([1, -1, 3, -3, 2, 3, -2, 3, 1]) == 9"
    ],
    "difficulty": "medium",
    "model": "llama3:latest",
    "style": "ICPC"
}