{
    "title": "Number of Islands",
    "description": "Given a 2D binary matrix `grid` containing `0`s and `1`s, return the number of islands.\n\n#### Function Signature\n```\ndef num_islands(grid: list[list[int]]) -> int:\n```\n\n#### Input\n- `grid` (list[list[int]]): A 2D binary grid where `0`s represent water and `1`s represent land.\n\n#### Output\n- Returns the number of islands in the grid. An island is a group of connected `1`s that are not surrounded by `0`s.",
    "code": "\ndef num_islands(grid: list[list[int]]) -> int:\n    if not grid or not grid[0]:\n        return 0\n\n    def dfs(i, j):\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == 0:\n            return\n        grid[i][j] = 0\n        dfs(i - 1, j)\n        dfs(i + 1, j)\n        dfs(i, j - 1)\n        dfs(i, j + 1)\n\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                dfs(i, j)\n                count += 1\n    return count",
    "tests": [
        "assert num_islands([[0,0,1,0,0],[0,0,1,0,0],[0,0,1,0,0]]) == 1",
        "assert num_islands([[1,1,0,0,0],[1,1,0,0,0],[0,0,0,0,0]]) == 1",
        "assert num_islands([[1,0,1,1,0],[0,0,0,0,0],[1,1,1,1,0]]) == 3"
    ],
    "difficulty": "medium",
    "model": "llama3:latest",
    "style": "Interview Query"
}