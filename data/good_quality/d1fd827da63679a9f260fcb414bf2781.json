{
    "title": "The Great Wall of China",
    "description": "A farmer has 100 feet of fencing and wants to enclose a rectangular area with an existing barn as one side. The barn is 20 feet wide. What are the maximum dimensions (length and width) that will give him the maximum area?\n\n#### Function Signature\n```python\ndef max_area(width: int, length: int) -> tuple[int]:\n```\n\n#### Input\n- `width` (int): The width of the existing barn.\n- `length` (int): The total length of fencing available.\n\n#### Output\n- Returns a tuple containing the maximum possible length and width.",
    "code": "def max_area(width: int, length: int) -> tuple[int]:\n    import math\n    # Calculate the maximum possible area based on the formula for the area of a rectangle (length * width)\n    area = length * width\n    # Use calculus to find the derivative of the function with respect to each variable and set it equal to 0 to find the maximum\n    d_area_d_length = length\n    d_area_d_width = width\n    d_area_d_length_at_max = 0\n    d_area_d_width_at_max = 0\n    max_length = 0\n    max_width = 0\n    for i in range(1, int(math.sqrt(length * width)) + 1):\n        for j in range(i, -1, -1):\n            if length * width == i ** 2 + j ** 2:\n                d_area_d_length_at_max = j\n                d_area_d_width_at_max = i\n                max_length = j\n                max_width = i\n    return (max_width, max_length)",
    "tests": [
        "assert max_area(20, 100) == (40, 40)",
        "assert max_area(10, 50) == (25, 15)",
        "assert max_area(5, 30) == (7, 7)",
        "assert max_area(1, 2) == (1, 1)"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "Codewars"
}