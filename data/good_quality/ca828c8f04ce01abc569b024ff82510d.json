{
    "title": "Sudoku Validator (Hard)",
    "description": "A popular puzzle game, Sudoku involves filling a 9x9 grid with numbers from 1 to 9 such that each row, column and 3x3 sub-grid contains each number exactly once. Write a function `validate_sudoku` that takes a 2D list of integers as input and checks if it represents a valid Sudoku puzzle.\n\n#### Function Signature\n```python\ndef validate_sudoku(grid: List[List[int]]) -> bool:\n```\n\n#### Input\n- `grid` (List[List[int]]): A 9x9 grid of integers, where each integer is between 1 and 9. The grid may contain zeros to represent empty cells.\n\n#### Output\n- Returns `True` if the input grid represents a valid Sudoku puzzle, `False` otherwise.",
    "code": "",
    "\nimport copy\n\ndef validate_sudoku(grid: list[list[int]]) -> bool:\n    # Check each row\n    for row in grid:\n        row_set = set()\n        for num in row:\n            if num == 0 or num not in range(1, 10):\n                return False\n            if num in row_set:\n                return False\n            row_set.add(num)\n\n    # Check each column\n    for col_idx in range(9):\n        col_set = set()\n        for row in grid:\n            num = row[col_idx]\n            if num == 0 or num not in range(1, 10):\n                return False\n            if num in col_set:\n                return False\n            col_set.add(num)\n\n    # Check each 3x3 sub-grid\n    for i in range(0, 9, 3):\n        for j in range(0, 9, 3):\n            sub_grid_set = set()\n            for k in range(i, i+3):\n                for num in grid[k][j:j+3]:\n                    if num == 0 or num not in range(1, 10):\n                        return False\n                    if num in sub_grid_set:\n                        return False\n                    sub_grid_set.add(num)\n\n    # If we haven't returned by now, the Sudoku puzzle is valid\n    return True": "",
    "tests": [
        "assert validate_sudoku([[], [], [], [], [], [], [], [], []]) == True",
        "assert validate_sudoku([[5,3], [6,0], [0,9], [8,7,4], [0,5,0], [0,0,0], [0,3,1], [0,1,2], [0,0,0]]) == False",
        "assert validate_sudoku([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24], [25, 26, 27]]) == True"
    ],
    "difficulty": "hard",
    "model": "llama3:latest",
    "style": "CodeChef"
}