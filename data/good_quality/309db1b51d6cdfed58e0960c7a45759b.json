{
    "title": "Minimum Window Substring",
    "description": "Given two strings `s1` and `s2`, write a function `min_window_substring` that finds the minimum window substring in `s1` that contains all characters of `s2`. If no such window exists, return an empty string.\n\n#### Function Signature\n```python\ndef min_window_substring(s1: str, s2: str) -> str:\n```\n\n#### Input\n- `s1` (str): The string in which to find the minimum window substring.\n- `s2` (str): The string containing characters that must be present in the minimum window substring.\n\n#### Output\n- Returns the minimum window substring in `s1` that contains all characters of `s2`. If no such window exists, returns an empty string.",
    "code": "from collections import defaultdict\n\ndef min_window_substring(s1: str, s2: str) -> str:\n    if not s2 or len(s2) > len(s1):\n        return \"\"\n    left = right = 0\n    formed = 0\n    window_counts = defaultdict(int)\n    for char in s2:\n        window_counts[char] += 1\n    required_chars = len(window_counts)\n    min_len = float('inf')\n    result = \"\"\n    while right < len(s1):\n        if formed == required_chars:\n            left_substr = s1[left:right+1]\n            if right - left + 1 < min_len:\n                min_len = right - left + 1\n                result = left_substr\n            left += 1\n            window_counts[s1[left]] -= 1\n            if window_counts[s1[left]] == 0:\n                formed -= 1\n        else:\n            right += 1\n            window_counts[s1[right]] += 1\n            if window_counts[s1[right]] > 0:\n                formed += 1\n    return result",
    "tests": [
        "assert min_window_substring('ADOBECODEBANC', 'ABC') == 'BANC'",
        "assert min_window_substring('hello', 'lo') == 'lo'",
        "assert min_window_substring('abcde', 'cd') == 'cde'",
        "assert min_window_substring('', '') == ''"
    ],
    "difficulty": "medium",
    "model": "llama3:latest",
    "style": "Competitive Programming"
}