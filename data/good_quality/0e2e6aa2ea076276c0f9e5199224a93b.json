{
    "title": "Euler's Totient Function",
    "description": "Euler's totient function, denoted by \u03c6(n), counts the positive integers up to a given number n that are relatively prime to n.\n\n#### Function Signature\n```python\ndef euler_totient(n: int) -> list:\n```\n\n#### Input\n- `n` (int): A positive integer for which we want to compute Euler's totient function.\n\n#### Output\n- Returns a list of integers representing the value of Euler's totient function at each number from 1 up to `n`, inclusive.\n\nExample: If you input `6`, the output should be `[5, 3, 2, 2, 4, 2]`. The numbers in this list represent the values of Euler's totient function at 1, 2, 3, 4, 5, and 6.\n\n#### Constraints\nThe input number `n` will be a positive integer not exceeding 1000000.",
    "code": "",
    "\nimport math\n\ndef euler_totient(n: int) -> list:\n    result = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if i == 1:\n            result[i] = n\n        else:\n            for j in range(2, int(math.sqrt(i)) + 1):\n                if i % j == 0:\n                    k = i // j\n                    while k % j == 0 and k <= n:\n                        k //= j\n                    result[i] -= (k > 1) * (j - 1)\n                    break\n            else:\n                result[i] = i - 1\n    return [x if x > 0 else 1 for x in result]": "",
    "tests": [
        "assert euler_totient(6) == [5, 3, 2, 2, 4, 2]",
        "assert euler_totient(10) == [9, 8, 7, 7, 6, 6, 4, 4, 3, 1]",
        "assert euler_totient(13) == [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "TopCoder"
}