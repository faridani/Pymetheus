{
    "title": "Maximal Increasing Subsequence",
    "description": "Given a list of integers, find the length of the longest subsequence that is strictly increasing. For example, if you are given the sequence [1, 3, 5, 4, 2], the maximal increasing subsequence would be [1, 3, 4] with a length of 3.\n\n#### Function Signature\n```python\ndef max_increasing_subsequence(lst: list[int]) -> int:\n```\n\n#### Input\n- `lst` (list[int]): A list of integers that can contain duplicates.\n\n#### Output\n- Returns the length of the longest subsequence that is strictly increasing.",
    "code": "",
    "\nfrom typing import List\n\ndef max_increasing_subsequence(lst: List[int]) -> int:\n    if not lst:\n        return 0\n    \n    dp = [1] * len(lst)\n    \n    for i in range(1, len(lst)):\n        for j in range(i):\n            if lst[i] > lst[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)": "",
    "tests": [
        "assert max_increasing_subsequence([1, 3, 5, 4, 2]) == 3",
        "assert max_increasing_subsequence([10, 20, 30, 40, 50]) == 5",
        "assert max_increasing_subsequence([]) == 0",
        "assert max_increasing_subsequence([1]) == 1"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "Internationals Olympiad"
}