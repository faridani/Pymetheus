{
    "title": "Hardest Sudoku Solver",
    "description": "Write a function `solve_sudoku` that takes as input a partially filled sudoku board and returns a valid solution if one exists. The board is represented as a 2D list of integers, where 0 represents an empty cell. The function should return the solved board or None if no solution exists.\n\n#### Function Signature\n```python\ndef solve_sudoku(board: List[List[int]]) -> Optional[List[List[int]]]:\n```\n\n#### Input\n- `board` (List[List[int]]): A 2D list of integers representing a partially filled sudoku board, where 0 represents an empty cell.\n\n#### Output\n- Returns the solved board or None if no solution exists.",
    "code": "",
    "\nimport copy\n\ndef solve_sudoku(board):\n    def is_valid(board, row, col, num):\n        # Check the row\n        for x in range(9):\n            if board[row][x] == num:\n                return False\n        # Check the column\n        for x in range(9):\n            if board[x][col] == num:\n                return False\n\n        start_row = row - row % 3\n        start_col = col - col % 3\n        for i in range(3):\n            for j in range(3):\n                if board[i + start_row][j + start_col] == num:\n                    return False\n        return True\n\n    def solve(board):\n        for i in range(9):\n            for j in range(9):\n                if board[i][j] == 0:\n                    for num in range(1, 10):\n                        if is_valid(board, i, j, num):\n                            board[i][j] = num\n                            if solve(board):\n                                return True\n                            board[i][j] = 0\n                    return False\n        return True\n\n    if not solve(copy.deepcopy(board)):\n        return None\n    return board": "",
    "tests": [
        "assert solve_sudoku([[5,3,0,7,0,0,0,0,0], [6,0,0,1,9,8,0,0,6], [8,0,0,0,6,0,2,0,0], [4,9,8,7,0,0,0,3,1], [7,0,0,4,8,0,0,0,3], [0,1,2,0,5,0,0,7,6], [0,0,0,2,0,9,0,0,5], [0,8,0,0,0,0,3,2,0], [0,4,0,0,7,0,0,0,0]]) == [[1,3,4,7,5,2,8,6,9], [6,7,2,1,9,8,3,4,5], [8,5,9,6,4,3,2,7,1], [4,9,8,7,1,5,3,2,6], [7,2,1,4,8,6,5,9,3], [5,1,2,3,5,4,7,8,6], [2,4,6,2,3,9,1,7,5], [3,8,5,2,7,1,4,6,9], [9,6,1,5,7,3,8,2,4]]",
        "assert solve_sudoku([[0, 0, 0, 0, 0, 0, 0, 0, 0]]) is None"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "Exercism"
}