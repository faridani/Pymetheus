{
    "title": "Hard: Maximum Area of Island",
    "description": "Given a binary grid (0s and 1s), find the maximum area of an island. An island is any contiguous set of 1s that can be formed by grouping all connected 1s together.\n\n#### Function Signature\n```python\ndef max_island_area(grid: list[list[int]]) -> int:\n```\n\n#### Input\n- `grid` (list[list[int]]): A binary grid where each cell is either 0 or 1. The size of the grid is MxN.\n\n#### Output\n- Returns the maximum area of an island in the given grid.",
    "code": "",
    "\ndef max_island_area(grid: list[list[int]]) -> int:\n    if not grid:\n        return 0\n\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    max_area = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                area = dfs(grid, i, j)\n                max_area = max(max_area, area)\n\n    return max_area\n\ndef dfs(grid: list[list[int]], i: int, j: int) -> int:\n    if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == 0:\n        return 0\n    grid[i][j] = 0  # mark as visited\n    area = 1\n    for direction in directions:\n        new_i, new_j = i + direction[0], j + direction[1]\n        if (new_i >= 0 and new_i < len(grid) and \n            new_j >= 0 and new_j < len(grid[0]) and \n            grid[new_i][new_j] == 1):\n            area += dfs(grid, new_i, new_j)\n    return area": "",
    "tests": [
        "assert max_island_area([[0,0,1,0,0],[0,1,1,1,0],[0,1,0,0,0]]) == 4",
        "assert max_island_area([[1,1,1,1,1],[1,1,1,1,1]]) == 25",
        "assert max_island_area([[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]) == 0"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "Interview Query"
}