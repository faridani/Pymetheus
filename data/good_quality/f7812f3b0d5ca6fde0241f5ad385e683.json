{
    "title": "Hard: Maximum Sum Subarray",
    "description": "Given an array of integers, find the maximum sum of a subarray (a contiguous sequence of elements) within that array. The subarray can start anywhere in the original array.\n\n#### Function Signature\n```python\ndef max_sum_subarray(arr: list[int)) -> int:\n```\n\n#### Input\n- `arr` (list[int]): A list of integers.\n\n#### Output\n- Returns the maximum sum of a subarray within the input array.",
    "code": "from typing import List\n\ndef max_sum_subarray(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    n = len(arr)\n    max_ending_here = max_so_far = arr[0]\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far",
    "tests": [
        "assert max_sum_subarray([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6",
        "assert max_sum_subarray([1, 2, 3, 4, 5]) == 15",
        "assert max_sum_subarray([-1, -2, -3, -4, -5]) == -1",
        "assert max_sum_subarray([]) == 0"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "SPOJ"
}