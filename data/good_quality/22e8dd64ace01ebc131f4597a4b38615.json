{
    "title": "Easy: Number of Islands",
    "description": "Given an `m x n` grid filled with water (`0`) and land (`1`), return the number of **islands**.\n\nAn **island** is a group of connected cells that have a value of `1`.\n\n#### Function Signature\n```\ndef num_islands(grid: list[list[int]]) -> int:\n```\n\n#### Input\n- `grid` (list[list[int]]): A 2D grid filled with water (`0`) and land (`1`)\n\n#### Output\n- Returns the number of islands in the given grid\n\nExample:\n```\n[\n    [0,0,1,0,0],\n    [0,0,1,0,0],\n    [0,0,1,1,0],\n    [0,0,0,1,0]\n]\n```\n\n#### Constraints\n- The grid will not be empty.\n- All cells in the grid are either water (`0`) or land (`1`).",
    "code": "",
    "\ndef num_islands(grid: list[list[int]]) -> int:\n    if not grid:\n        return 0\n\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                dfs(grid, i, j)\n                count += 1\n\n    return count\n\ndef dfs(grid: list[list[int]], i: int, j: int) -> None:\n    if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or grid[i][j] != 1:\n        return\n\n    grid[i][j] = 0\n    dfs(grid, i - 1, j)\n    dfs(grid, i + 1, j)\n    dfs(grid, i, j - 1)\n    dfs(grid, i, j + 1)": "",
    "tests": [
        "assert num_islands([[0,0,1,0,0],[0,0,1,0,0],[0,0,1,1,0],[0,0,0,1,0]]) == 1",
        "assert num_islands([[0,0,1,0,0],[0,0,1,0,0],[0,0,1,1,0],[0,0,0,1,0],[0,0,0,0,1]]) == 4",
        "assert num_islands([]) == 0"
    ],
    "difficulty": "easy",
    "model": "llama3:latest",
    "style": "Exercism"
}