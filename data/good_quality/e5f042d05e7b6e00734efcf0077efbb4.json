{
    "title": "Hardest Divisor Sum",
    "description": "You are given a list of positive integers. Your task is to find all pairs of numbers from this list that have a divisor sum equal to their product.\n\n#### Function Signature\n```python\ndef find_divisor_sum_pairs(nums: list[int]) -> list[tuple[int, int]]:\n```\n\n#### Input\n- `nums` (list[int]): A list of positive integers.\n\n#### Output\n- Returns a list of tuples, where each tuple contains two numbers from the input list that have a divisor sum equal to their product.",
    "code": "import math\n\ndef find_divisor_sum_pairs(nums: list[int]) -> list[tuple[int, int]]:\n    result = []\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            a, b = nums[i], nums[j]\n            if math.gcd(a, b) > 1 and sum(math.gcd(a, d) * (a // d) + math.gcd(b, d) * (b // d) for d in range(1, min(a, b) + 1)) == a * b:\n                result.append((a, b))\n    return result",
    "tests": [
        "assert find_divisor_sum_pairs([2, 4, 6]) == [(2, 2)]",
        "assert find_divisor_sum_pairs([10, 15, 20]) == [(10, 10), (15, 15)]",
        "assert find_divisor_sum_pairs([3, 5, 7, 9, 11]) == []"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "Codeforces"
}