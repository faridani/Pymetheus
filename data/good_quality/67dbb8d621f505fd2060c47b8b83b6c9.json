{
    "title": "Divisor Summation",
    "description": "#### Problem Statement\nGiven a list of integers, return the sum of all divisors (including 1 and the number itself) for each integer. For example, if the input is `[2, 4, 6]`, the output should be `[1, 3, 7]`. The input will contain at least one positive integer.\n\n#### Function Signature\n```python\ndef divisor_sum(nums: list[int]) -> list[int]:\n```\n\n#### Input\n- `nums` (list[int]): A list of positive integers.\n\n#### Output\n- Returns a list of integers, where each integer is the sum of all divisors for the corresponding input number.",
    "code": "\nimport math\n\ndef divisor_sum(nums: list[int]) -> list[int]:\n    def get_divisors(n: int) -> set[int]:\n        divisors = {1}\n        for i in range(2, math.isqrt(n) + 1):\n            if n % i == 0:\n                divisors.add(i)\n                if i * i != n:\n                    divisors.add(n // i)\n        return divisors\n\n    result = []\n    for num in nums:\n        result.append(sum(get_divisors(num)))\n    return result",
    "tests": [
        "assert divisor_sum([2, 4, 6]) == [1, 3, 7]",
        "assert divisor_sum([5, 15, 20]) == [1, 4, 42]",
        "assert divisor_sum([1, 2, 3, 4, 5]) == [1, 1, 3, 3, 5]"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "AtCoder"
}