{
    "title": "Minimum Distance Between Binary Codepoints",
    "description": "Write a function `min_distance` that takes a string as input and returns the minimum distance between any two binary codepoints (0s or 1s) in the string.\n\n#### Function Signature\n```python\ndef min_distance(s: str) -> int:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns the minimum distance between any two binary codepoints in the input string.",
    "code": "import re\n\ndef min_distance(s: str) -> int:\n    # Convert the string to binary and remove non-binary characters\n    binary_string = re.sub('[^01]', '', ''.join(format(ord(char), '08b') for char in s))\n    # Find all occurrences of 0s or 1s and convert them into indices\n    indices = [i for i, bit in enumerate(binary_string) if bit in '01']\n    # If there are less than two binary codepoints, return -1 (not found)\n    if len(indices) < 2:\n        return -1\n    # Calculate the minimum distance between any two binary codepoints\n    return min([indices[i] - indices[i-1] for i in range(1, len(indices))])",
    "tests": [
        "assert min_distance('Hello World!') == 0",
        "assert min_distance('10101010') == 2",
        "assert min_distance('011001100110000111010101') == 4",
        "assert min_distance('101011') == -1"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "CodeSignal"
}