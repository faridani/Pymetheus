{
    "title": "Euler's Totient Function",
    "description": "Given a list of integers, calculate the Euler's totient function for each integer and return their sum. The Euler's totient function is defined as the number of positive integers less than or equal to n that are relatively prime to n.\n\n#### Function Signature\n```python\ndef euler_totient_sum(n_list: list[int]) -> int:\n```\n\n#### Input\n- `n_list` (list[int]): A list of positive integers for which Euler's totient function is calculated.\n\n#### Output\n- Returns the sum of Euler's totient function values for each integer in the input list.\n\nNote that this problem requires knowledge of number theory and Python programming. You may want to refer to mathematical concepts such as the Euler's totient function, the prime factorization of numbers, and modular arithmetic to solve this problem.",
    "code": "\nimport math\n\ndef euler_totient_sum(n_list: list[int]) -> int:\n    def euler_totient(n: int) -> int:\n        if n <= 1:\n            return n\n        result = 0\n        for i in range(1, n + 1):\n            if math.gcd(i, n) == 1:\n                result += 1\n        return result\n\n    return sum(euler_totient(n) for n in n_list)",
    "tests": [
        "assert euler_totient_sum([1, 2, 3, 4]) == 10",
        "assert euler_totient_sum([5, 6, 7, 8, 9]) == 16",
        "assert euler_totient_sum([10, 11, 12]) == 20",
        "assert euler_totient_sum([]) == 0"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "AtCoder"
}