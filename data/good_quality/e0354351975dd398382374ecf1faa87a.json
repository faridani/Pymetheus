{
    "title": "Hard: Minimum Path Sum",
    "description": "Given a 2D grid of integers, find the minimum path sum from top left to bottom right. The grid contains obstacles marked by zeros, and you can only move either down or right at each step.\n\n#### Function Signature\n```python\ndef min_path_sum(grid: list[list[int]]) -> int:\n```\n\n#### Input\n- `grid` (list[list[int]]): A 2D grid of integers where zero represents an obstacle and all other values are the weights for the path sum.\n\n#### Output\n- Returns the minimum path sum from top left to bottom right without going through obstacles.",
    "code": "\ndef min_path_sum(grid: list[list[int]]) -> int:\n    if not grid or not grid[0]:\n        return 0\n\n    m, n = len(grid), len(grid[0])\n    dp = [[0] * n for _ in range(m)]\n\n    dp[0][0] = grid[0][0]\n    for i in range(1, m):\n        if grid[i][0] == 0:\n            break\n        dp[i][0] = dp[i-1][0] + grid[i][0]\n    for j in range(1, n):\n        if grid[0][j] == 0:\n            break\n        dp[0][j] = dp[0][j-1] + grid[0][j]\n\n    for i in range(1, m):\n        for j in range(1, n):\n            if grid[i][j] == 0:\n                continue\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n\n    return dp[m-1][n-1]",
    "tests": [
        "assert min_path_sum([[1,3,1],[1,5,1],[4,2,1]]) == 7",
        "assert min_path_sum([[0,3,1],[1,5,1],[4,2,1]]) == 6",
        "assert min_path_sum([[1,0,1],[1,0,1],[4,2,1]]) == 8"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "TopCoder"
}