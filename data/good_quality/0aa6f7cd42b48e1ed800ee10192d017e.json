{
    "title": "Easiest Way (Medium)",
    "description": "Write a function `shortest_path` that takes as input two lists of integers, `start` and `end`, representing the coordinates of the start and end points on a grid. The function should return the length of the shortest possible path from the start to the end point.\n\n#### Function Signature\n```python\ndef shortest_path(start: list[int], end: list[int]) -> int:\n```\n\n#### Input\n- `start` (list[int]): A list containing two integers representing the x and y coordinates of the start point.\n- `end` (list[int]): A list containing two integers representing the x and y coordinates of the end point.\n\n#### Output\n- Returns an integer representing the length of the shortest possible path from the start to the end point.",
    "code": "def shortest_path(start: list[int], end: list[int]) -> int:\n    dx = [1, -1, 0, 0]\n    dy = [0, 0, 1, -1]\n    queue = [(0, start)]\n    visited = set([tuple(start)])\n    while queue:\n        d, (x, y) = heapq.heappop(queue)\n        if (x, y) == tuple(end):\n            return d\n        for i in range(4):\n            nx, ny = x + dx[i], y + dy[i]\n            if 0 <= nx < len(start[0]) and 0 <= ny < len(start):\n                if (nx, ny) not in visited:\n                    visited.add((nx, ny))\n                    heapq.heappush(queue, (d + 1, (nx, ny)))\n    return -1",
    "tests": [
        "assert shortest_path([0, 0], [3, 4]) == 5",
        "assert shortest_path([2, 2], [1, 1]) == 2",
        "assert shortest_path([0, 0], [0, 0]) == 0",
        "assert shortest_path([1, 1], [-1, -1]) == 7"
    ],
    "difficulty": "medium",
    "model": "llama3:latest",
    "style": "CodeChef"
}