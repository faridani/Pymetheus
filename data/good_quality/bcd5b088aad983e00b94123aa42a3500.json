{
    "title": "Easy: Valid Sudoku",
    "description": "Write a function `is_valid_sudoku` that takes a 9x9 grid as input and checks if it represents a valid Sudoku puzzle. A valid Sudoku puzzle is defined by the following rules:\n\n- Each row, column, and 3x3 sub-grid (also known as a 'region') contains each number from 1 to 9 exactly once.\n- The input grid is represented as a list of lists, where each inner list represents a row in the puzzle. Empty cells are represented by the value -1.\n\n#### Function Signature\n```python\ndef is_valid_sudoku(board: list[list[int]]) -> bool:\n```\n\n#### Input\n- `board` (list[list[int]]): A 9x9 grid representing a Sudoku puzzle, where empty cells are represented by -1.\n\n#### Output\n- Returns `True` if the input Sudoku puzzle is valid, `False` otherwise.",
    "code": "\ndef is_valid_sudoku(board: list[list[int]]) -> bool:\n    # Function to check rows\n    def is_valid_row(row: list[int]) -> bool:\n        seen = set()\n        for num in row:\n            if num == -1:\n                continue\n            if num not in seen:\n                seen.add(num)\n            else:\n                return False\n        return True\n\n    # Function to check columns\n    def is_valid_column(column: list[int]) -> bool:\n        seen = set()\n        for num in column:\n            if num == -1:\n                continue\n            if num not in seen:\n                seen.add(num)\n            else:\n                return False\n        return True\n\n    # Function to check 3x3 sub-grids\n    def is_valid_region(region: list[list[int]]) -> bool:\n        seen = set()\n        for row in region:\n            for num in row:\n                if num == -1:\n                    continue\n                if num not in seen:\n                    seen.add(num)\n                else:\n                    return False\n        return True\n\n    # Check rows, columns, and regions\n    for i in range(9):\n        if not is_valid_row(board[i]):\n            return False\n        if not is_valid_column([board[j][i] for j in range(9)]):\n            return False\n        region = [board[i * 3 + k][j] for j, k in enumerate(range(3))]\n        if not is_valid_region(region):\n            return False\n\n    return True",
    "tests": [
        "assert is_valid_sudoku([[-1,-1,-1,-1,-1,-1,-1,-1,-1], [-1,-1,-1,-1,-1,-1,-1,-1,-1], [-1,-1,-1,-1,-1,-1,-1,-1,-1], [-1,-1,-1,1,2,3,4,5,6], [-1,-1,-1,7,8,9,10,11,12], [-1,-1,-1,13,14,15,16,17,18], [-1,-1,-1,19,20,21,22,23,24], [-1,-1,-1,25,26,27,28,29,30], [-1,-1,-1]]) == True",
        "assert is_valid_sudoku([[-1,-1,-1,-1,-1,-1,-1,-1,-1], [-1,-1,-1,-1,-1,-1,-1,-1,-1], [-1,-1,-1,1,2,3,4,5,6], [-1,-1,-1,7,8,9,10,11,12], [-1,-1,-1,13,14,15,16,17,18], [-1,-1,-1,19,20,21,22,23,24], [-1,-1,-1,25,26,27,28,29,30], [-1,-1,-1,31,32,33,34,35,36]]) == False",
        "assert is_valid_sudoku([[-1,-1,-1,-1,-1,-1,-1,-1,-1], [1,2,3,4,5,6,7,8,9], [-1,-1,-1,10,11,12,13,14,15], [-1,-1,-1,16,17,18,19,20,21], [-1,-1,-1,22,23,24,25,26,27], [-1,-1,-1,28,29,30,31,32,33], [-1,-1,-1,34,35,36,37,38,39], [-1,-1,-1,40,41,42,43,44,45], [-1,-1,-1]]) == True",
        "assert is_valid_sudoku([[-1,-1,-1,-1,-1,-1,-1,-1,-1], [1,2,3,4,5,6,7,8,9], [-1,-1,-1,10,11,12,13,14,15], [-1,-1,-1,16,17,18,19,20,21], [-1,-1,-1,22,23,24,25,26,27], [-1,-1,-1,28,29,30,31,32,33], [-1,-1,-1,34,35,36,37,38,39], [-1,-1,-1,40,41,42,43,44,45], [11]]) == False"
    ],
    "difficulty": "easy",
    "model": "llama3:latest",
    "style": "Competitive Programming"
}