{
    "title": "Hard: Sudoku Solver",
    "description": "A Sudoku puzzle is a 9x9 grid filled with numbers from 1 to 9. Some numbers are given, and some cells are blank. The goal of the game is to fill all blank cells with numbers so that each row, column, and 3x3 sub-grid contains each number exactly once.\n\n#### Function Signature\n```python\ndef solve_sudoku(grid: list[list[int]]) -> bool:\n```\n\n#### Input\n- `grid` (list[list[int]]): A 9x9 grid filled with numbers from 1 to 9, and some cells are blank (represented as 0).\n\n#### Output\n- Returns `True` if the input Sudoku puzzle has a valid solution, `False` otherwise.",
    "code": "import copy\n\ndef solve_sudoku(grid: list[list[int]]) -> bool:\n    for i in range(9):\n        for j in range(9):\n            if grid[i][j] == 0:\n                for num in range(1, 10):\n                    if is_valid(grid, i, j, num):\n                        grid[i][j] = num\n                        if solve_sudoku(grid):\n                            return True\n                        grid[i][j] = 0\n                return False\n    return True\n\ndef is_valid(grid: list[list[int]], row: int, col: int, num: int) -> bool:\n    for i in range(9):\n        if grid[i][col] == num:\n            return False\n    for j in range(9):\n        if grid[row][j] == num:\n            return False\n    box_row = row // 3 * 3\n    box_col = col // 3 * 3\n    for i in range(3):\n        for j in range(3):\n            if grid[box_row + i][box_col + j] == num:\n                return False\n    return True",
    "tests": [
        "assert solve_sudoku([[5,3,0,0,7,0,0,0,0], [6,0,0,1,9,5,0,0,0], [0,9,8,0,0,0,0,6,0], [1,0,0,0,0,3,0,0,7], [0,6,0,0,0,0,2,8,0], [0,0,0,4,1,9,0,0,5], [0,0,0,0,8,3,0,0,0], [0,0,0,0,0,9,8,7,6], [0,0,0,0,0,0,0,3,1]]) == True",
        "assert solve_sudoku([[1,2,3,4,5,6,7,8,9]]) == False"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "CodeWars"
}