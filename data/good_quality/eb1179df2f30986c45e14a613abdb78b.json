{
    "title": "Medium: Sudoku Solver",
    "description": "A standard 9x9 Sudoku grid has some numbers filled in, and the goal is to fill in the remaining blank cells with numbers from 1 to 9 such that each row, column, and 3x3 sub-grid contains the numbers 1-9 without repeating any number. Write a function `solve_sudoku` that takes a partially filled-in Sudoku grid as input and returns the completed grid if it has a unique solution. If there are multiple solutions or no solution exists, return an empty list.\n\n#### Function Signature\n```python\ndef solve_sudoku(grid: list[list[int]]) -> list[list[int]]:\n```\n\n#### Input\n- `grid` (list[list[int]]): A partially filled-in Sudoku grid represented as a 2D list of integers. The grid is guaranteed to have at least one blank cell.\n\n#### Output\n- Returns the completed Sudoku grid if it has a unique solution, or an empty list otherwise.",
    "code": "",
    "\nimport copy\n\ndef solve_sudoku(grid: list[list[int]]) -> list[list[int]]:\n    def is_valid(num, row, col):\n        # Check row\n        for x in range(9):\n            if grid[row][x] == num:\n                return False\n\n        # Check column\n        for x in range(9):\n            if grid[x][col] == num:\n                return False\n\n        # Check box\n        start_row = row - row % 3\n        start_col = col - col % 3\n        for i in range(3):\n            for j in range(3):\n                if grid[i + start_row][j + start_col] == num:\n                    return False\n        return True\n\n    def solve():\n        for i in range(9):\n            for j in range(9):\n                if grid[i][j] == 0:\n                    for n in range(1, 10):\n                        if is_valid(n, i, j):\n                            grid[i][j] = n\n                            if solve():\n                                return True\n                            else:\n                                grid[i][j] = 0\n                    return False\n        return True\n\n    result = copy.deepcopy(grid)\n    if not solve():\n        return []\n    return result": "",
    "tests": [
        "assert solve_sudoku([[5,1,7,6,0,0,3,4,2],[1,9,8,3,4,2,5,6,7],[4,2,6,5,3,7,9,1,8],[3,5,9,7,6,1,0,2,4],[0,0,3,4,2,5,1,6,7],[8,7,6,5,1,4,2,3,9],[4,1,2,3,9,8,7,6,5],[7,6,5,2,1,3,4,8,9],[2,3,9,1,8,4,5,6,7]]) == [[5, 1, 7, 6, 8, 3, 4, 2, 9], [1, 9, 8, 3, 4, 2, 5, 6, 7], [4, 2, 6, 5, 3, 7, 9, 1, 8], [3, 5, 9, 7, 6, 1, 0, 2, 4], [0, 0, 3, 4, 2, 5, 1, 6, 7], [8, 7, 6, 5, 1, 4, 2, 3, 9], [4, 1, 2, 3, 9, 8, 7, 6, 5], [7, 6, 5, 2, 1, 3, 4, 8, 9], [2, 3, 9, 1, 8, 4, 5, 6, 7]]",
        "assert solve_sudoku([[0,0,0,0,0,0,0,0,0]]) == []"
    ],
    "difficulty": "medium",
    "model": "llama3:latest",
    "style": "TopCoder"
}