{
    "title": "Maximum Sum of Alternating Subarrays",
    "description": "Given a 2D array `arr` of size n x m, where each cell contains an integer. Write a function that returns the maximum sum of all possible alternating subarrays.\n\n#### Function Signature\n```python\ndef max_sum_alternating_subarray(arr: list[list[int]]) -> int:\n```\n\n#### Input\n- `arr` (list[list[int]]): A 2D array of size n x m, where each cell contains an integer.\n\n#### Output\n- Returns the maximum sum of all possible alternating subarrays.",
    "code": "",
    "\ndef max_sum_alternating_subarray(arr: list[list[int]]) -> int:\n    n, m = len(arr), len(arr[0])\n    prefix_sum = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            prefix_sum[i][j] = arr[i - 1][j - 1] + prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1]\n    \n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(m):\n            for k in range(i, n):\n                for end_col in range(j, m):\n                    sum_alternating = (prefix_sum[k + 1][end_col + 1] - prefix_sum[k + 1][j] -\n                                       prefix_sum[i][end_col + 1] + prefix_sum[i][j]) // 2\n                    max_sum = max(max_sum, sum_alternating)\n    \n    return max_sum": "",
    "tests": [
        "assert max_sum_alternating_subarray([[1, 2], [3, -4]]) == 5",
        "assert max_sum_alternating_subarray([[-1, 0, 1], [2, -2, 3], [-1, 3, -1]]) == 10",
        "assert max_sum_alternating_subarray([[1, -2, 3], [-4, 5, -6], [7, 8, 9]]) == 17"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "CodeChef"
}