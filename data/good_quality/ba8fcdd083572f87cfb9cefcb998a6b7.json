{
    "title": "'Efficient Palindrome Checker (Medium)'",
    "description": "Write a function `is_palindrome` that checks if a given string is a palindrome. The difference from the previous problem is that you should optimize your solution to handle long strings efficiently.\n\n#### Function Signature\n```python\ndef is_palindrome(s: str) -> bool:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns `True` if the input string is a palindrome, `False` otherwise.\n\n#### Constraints\nThe function should handle strings of length up to 10^5 characters efficiently.",
    "code": "import collections\n\ndef is_palindrome(s: str) -> bool:\n    # Count characters in the string\n    counts = collections.Counter(s)\n    # Check if the number of occurrences for each character in the second half of the string equals the number of occurrences for each character in the first half.\n    return all([counts[char] == counts.get(char, 0) for char in s[:len(s)//2]])",
    "tests": [
        "assert is_palindrome(\"A man, a plan, a canal, Panama\") == True",
        "assert is_palindrome(\"racecar\") == True",
        "assert is_palindrome(\"hello\") == False",
        "assert is_palindrome(\"No 'x' in Nixon\") == True",
        "assert is_palindrome(\"a\" * 100000) == False"
    ],
    "difficulty": "medium",
    "model": "mistral:latest",
    "style": "ICPC"
}