{
    "title": "Easy: Number of Islands",
    "description": "Given an m x n grid filled with non-negative numbers, find the number of islands. An island is a group of 1s separated by 0s.\n\n#### Function Signature\n```python\ndef num_islands(grid: list[list[int]]) -> int:\n```\n\n#### Input\n- `grid` (list[list[int]]): A 2D grid filled with non-negative numbers, where 0 represents an empty cell and 1 represents a cell that is part of an island.\n\n#### Output\n- Returns the number of islands in the given grid.",
    "code": "\nimport copy\n\ndef num_islands(grid: list[list[int]]) -> int:\n    if not grid or not grid[0]:\n        return 0\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dfs(grid, i, j)\n                count += 1\n    return count\n\ndef dfs(grid: list[list[int]], i: int, j: int):\n    if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == 0:\n        return\n    grid[i][j] = 0\n    dfs(grid, i - 1, j)\n    dfs(grid, i + 1, j)\n    dfs(grid, i, j - 1)\n    dfs(grid, i, j + 1)",
    "tests": [
        "assert num_islands([[0,0,1,0,0],[1,0,1,1,0],[0,1,1,1,0],[0,0,0,1,0]]) == 1",
        "assert num_islands([[1,1,0,0,0],[1,1,0,0,0],[0,0,1,0,0],[0,0,0,1,1]]) == 3",
        "assert num_islands([[1]]*5) == 5"
    ],
    "difficulty": "easy",
    "model": "llama3:latest",
    "style": "Competitive Programming"
}