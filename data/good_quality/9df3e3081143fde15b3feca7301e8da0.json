{
    "title": "Counting Islands",
    "description": "An island is a group of connected land with no adjacent islands between it and the coastline. Write a function `count_islands` that takes as input a 2D list of integers, where 0 represents water and 1 represents land. The function should return the number of islands in the given grid.\n\n#### Function Signature\n```python\ndef count_islands(grid: list[list[int]]) -> int:\n```\n\n#### Input\n- `grid` (list[list[int]]): A 2D list of integers, where 0 represents water and 1 represents land.\n\n#### Output\n- Returns the number of islands in the given grid.",
    "code": "def count_islands(grid: list[list[int]]) -> int:\n    if not grid:\n        return 0\n    island_count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1 and (i-1 < 0 or j-1 < 0 or i+1 >= len(grid) or j+1 >= len(grid[0]) or grid[i-1][j] != 1 and grid[i+1][j] != 1 and grid[i][j-1] != 1 and grid[i][j+1] != 1):\n                island_count += 1\n                dfs(grid, i, j)\n    return island_count\n\ndef dfs(grid: list[list[int]], i: int, j: int):\n    if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or grid[i][j] != 1:\n        return\n    grid[i][j] = 2\n    dfs(grid, i-1, j)\n    dfs(grid, i+1, j)\n    dfs(grid, i, j-1)\n    dfs(grid, i, j+1)",
    "tests": [
        "assert count_islands([[0,0,1,0,0],[0,0,1,0,0],[0,0,1,1,1]]) == 1",
        "assert count_islands([[1,1,0,0,0],[1,1,0,0,0],[0,0,0,1,1]]) == 2",
        "assert count_islands([]) == 0",
        "assert count_islands([[]]) == 0"
    ],
    "difficulty": "medium",
    "model": "llama3:latest",
    "style": "Internationals Olympiad"
}