{
    "title": "Maximum Sum of Subarray (Medium)",
    "description": "Given an integer array `nums`, find the maximum sum of a subarray which is contiguous.\n\n#### Function Signature\n```python\ndef max_subarray_sum(nums: list[int]) -> int:\n```\n\n#### Input\n- `nums` (list[int]): A non-empty list of integers.\n\n#### Output\n- Returns the maximum sum of a subarray within the input array.",
    "code": "",
    "\ndef max_subarray_sum(nums: list[int]) -> int:\n    if not nums:\n        return 0\n    \n    current_max = max_so_far = nums[0]\n    \n    for num in nums[1:]:\n        current_max = max(num, current_max + num)\n        max_so_far = max(max_so_far, current_max)\n    \n    return max_so_far": "",
    "tests": [
        "assert max_subarray_sum([-2,1,-3,4,-1,2,1,-5,4]) == 6",
        "assert max_subarray_sum([1, -1, 5, -5, 10]) == 15",
        "assert max_subarray_sum([]) == 0",
        "assert max_subarray_sum([-1]) == -1"
    ],
    "difficulty": "medium",
    "model": "llama3:latest",
    "style": "LeetCode"
}