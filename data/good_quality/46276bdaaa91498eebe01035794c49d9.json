{
    "title": "Maximum Sum of Non-Adjacent Elements",
    "description": "A sequence of numbers is considered to be a mountain sequence if the elements are arranged in such a way that every element is either greater than or equal to its left neighbor and less than all its right neighbors. For example, the sequences [1, 2, 3], [1, 4, 7, 9], and [0, 1, -2] are mountain sequences.\n\nWrite a function `max_sum` that takes a list of integers as input and returns the maximum sum of non-adjacent elements in all possible mountain subsequences.\n\n#### Function Signature\n```python\ndef max_sum(nums: list[int)) -> int:\n```\n\n#### Input\n- `nums` (list[int]): A list of integers that may contain negative numbers, zeros, and positive numbers.\n\n#### Output\n- Returns the maximum sum of non-adjacent elements in all possible mountain subsequences.",
    "code": "",
    "\nimport heapq\n\ndef max_sum(nums: list[int]) -> int:\n    n = len(nums)\n    dp = [0] * (n + 1)\n    heap = []\n    \n    for i in range(n):\n        if not heap or nums[i] >= heap[0]:\n            heapq.heappush(heap, nums[i])\n        else:\n            dp[i+1] = max(dp[i], dp[i-1] + nums[i] - heap[0])\n            heapq.heappop(heap)\n    \n    return max(dp)": "",
    "tests": [
        "assert max_sum([3, 4, 2]) == 6",
        "assert max_sum([5, 3, 1, 2, 7, 6, 4, 8]) == 18"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "AtCoder"
}