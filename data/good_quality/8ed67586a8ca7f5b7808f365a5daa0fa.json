{
    "title": "Hard: Maximum Sum of Non-Overlapping Subarrays",
    "description": "Consider a 1D array `nums` where each element is an integer. Your task is to find the maximum sum of non-overlapping subarrays.\n\n#### Function Signature\n```python\ndef max_non_overlapping_sum(nums: list[int]) -> int:\n```\n\n#### Input\n- `nums` (list[int]): A 1D array of integers where each element can be either positive, negative or zero.\n\n#### Output\n- Returns the maximum sum of non-overlapping subarrays. For example, given `[3,2,-1,5,6,-8]`, your function should return `9` because the maximum sum of non-overlapping subarrays is `[3,2] + [5,6] = 9`.",
    "code": "",
    "\nimport sys\n\ndef max_non_overlapping_sum(nums: list[int]) -> int:\n    n = len(nums)\n    if n == 0:\n        return 0\n    \n    # Initialize dynamic programming table\n    dp = [[0, i-1] for i in range(n+1)]\n    \n    # Compute maximum sum of non-overlapping subarrays ending at each position\n    for i in range(1, n+1):\n        if nums[i-1] > 0:\n            dp[i][0] = max(dp[i-1][1], dp[i-2][1] + nums[i-2]) if i >= 2 else dp[i-1][1]\n        elif nums[i-1] < 0:\n            dp[i][0] = max(dp[i-1][1], -nums[i-1])\n        else:\n            dp[i][0] = dp[i-1][1]\n    \n    # Reconstruct the maximum sum of non-overlapping subarrays\n    i, j, total_sum = n, 0, 0\n    while i > 0 and j >= 0:\n        if dp[i][0] != dp[j][1]:\n            if nums[dp[i-1][1]] < 0:\n                total_sum -= nums[dp[i-1][1]]\n            else:\n                total_sum += nums[dp[i-1][1]]\n            i -= 2\n        j -= 1\n    \n    return total_sum": "",
    "tests": [
        "assert max_non_overlapping_sum([3,2,-1,5,6,-8]) == 9",
        "assert max_non_overlapping_sum([-10, -20, 0, 30, 50, -100, 200]) == 70",
        "assert max_non_overlapping_sum([]) == 0"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "TopCoder"
}