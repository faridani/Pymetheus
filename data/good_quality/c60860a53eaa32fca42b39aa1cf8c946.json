{
    "title": "Maximum Sum of Divisors II (Hard)",
    "description": "A positive integer `n` has a special property if the sum of all its proper divisors, excluding itself, is equal to `n`. For example, the number 6 has a sum of 1 + 2 + 3 = 6. Write a function `max_sum_of_divisors` that returns the maximum such positive integer up to a given limit `k`. If no such number exists within the range, return -1.\n\n#### Function Signature\n```python\ndef max_sum_of_divisors(k: int) -> int:\n```\n\n#### Input\n- `k` (int): The upper limit of numbers to consider. A positive integer.\n\n#### Output\n- Returns the maximum positive integer up to `k` with a sum of its proper divisors equal to itself, or -1 if no such number exists.",
    "code": "\ndef max_sum_of_divisors(k: int) -> int:\n    def sum_of_divisors(n: int) -> int:\n        total = 0\n        for i in range(1, n):\n            if n % i == 0:\n                total += i\n        return total\n\n    max_n = -1\n    for n in range(1, k + 1):\n        if sum_of_divisors(n) == n and n > max_n:\n            max_n = n\n    return max_n if max_n != -1 else -1",
    "tests": [
        "assert max_sum_of_divisors(100) == 496",
        "assert max_sum_of_divisors(2000) == 2016",
        "assert max_sum_of_divisors(3000) == -1"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "AtCoder"
}