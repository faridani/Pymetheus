{
    "title": "Minimum Time to Visit All Locations",
    "description": "A company has a set of locations that need to be visited. The time required to visit each location and the order in which they should be visited is given as an input. Write a function `min_time` that returns the minimum time required to visit all locations.\n\n#### Function Signature\n```python\ndef min_time(locations: list[tuple], orders: list[int]) -> int:\n```\n\n#### Input\n- `locations`: A list of tuples, where each tuple contains two integers representing the start and end times for visiting a location.\n- `orders`: A list of integers representing the order in which locations should be visited.\n\n#### Output\n- Returns the minimum time required to visit all locations. The order of visits is given by the `orders` list.",
    "code": "import heapq\ndef min_time(locations: list[tuple], orders: list[int]) -> int:\n    # Create a priority queue to store the end times and corresponding orders\n    pq = [(end, i) for i, (start, end) in enumerate(locations)]\n    heapq.heapify(pq)\n    # Initialize the current time and total time required to visit all locations\n    curr_time = 0\n    total_time = 0\n    # Iterate over the orders and update the current time and total time accordingly\n    for _ in range(len(orders)):\n        end, order_idx = heapq.heappop(pq)\n        if curr_time < start:\n            curr_time = start\n        total_time += (end - curr_time)\n        curr_time = end\n    return total_time",
    "tests": [
        "assert min_time([(1, 3), (2, 4), (5, 7)], [0, 1, 2]) == 7",
        "assert min_time([(1, 3), (2, 4), (6, 8)], [0, 1, 2]) == 9",
        "assert min_time([(1, 3), (2, 4), (5, 7)], []) == 0"
    ],
    "difficulty": "medium",
    "model": "llama3:latest",
    "style": "Competitive Programming"
}