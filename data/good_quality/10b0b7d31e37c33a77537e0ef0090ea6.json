{
    "title": "Median of Two Sorted Arrays (Medium)",
    "description": "Given two sorted arrays, find the median of the combined array.\n\n#### Function Signature\n```python\ndef find_median(arr1: list[int], arr2: list[int]) -> float:\n```\n\n#### Input\n- `arr1` and `arr2` (list[int]): Two sorted lists of integers.\n\n#### Output\n- Returns the median of the combined array as a float.",
    "code": "\nimport heapq\n\ndef find_median(arr1: list[int], arr2: list[int]) -> float:\n    merged = []\n    heap = []\n\n    for i in range(len(arr1)):\n        if i < len(arr2):\n            if arr1[i] <= arr2[i]:\n                heapq.heappush(heap, (arr1[i], 0))\n            else:\n                heapq.heappush(heap, (arr2[i], 1))\n        else:\n            heapq.heappush(heap, (arr2[i], 1))\n\n    for i in range(len(arr1)):\n        if heap[0][1] == 0:\n            merged.append(heapq.heappop(heap)[0])\n        else:\n            merged.append(-heapq.heappop(heap)[0])\n\n    median = 0.0\n\n    if len(merged) % 2 != 0:\n        median = merged[len(merged) // 2]\n    else:\n        median = (merged[len(merged) // 2 - 1] + merged[len(merged) // 2]) / 2\n\n    return median",
    "tests": [
        "assert round(find_median([1,3], [2]), 5) == 2.0",
        "assert find_median([1,3], []) == 1.5",
        "assert find_median([], [2]) == 1.5"
    ],
    "difficulty": "medium",
    "model": "llama3:latest",
    "style": "Exercism"
}