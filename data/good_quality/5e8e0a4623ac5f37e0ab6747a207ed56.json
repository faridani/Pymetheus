{
    "title": "Sudoku Checker",
    "description": "A Sudoku puzzle consists of a 9x9 grid, divided into nine 3x3 sub-grids or \"regions.\" Some numbers are given as clues and some cells are empty. The goal is to fill in all the empty cells with numbers from 1 to 9 such that each row, column, and region contains each number exactly once.\n\n#### Function Signature\n```python\ndef sudoku_valid(board: list) -> bool:\n```\n\n#### Input\n- `board` (list): A 2D list representing the Sudoku board. Each inner list has nine elements, representing a row in the board. The elements of each inner list are integers from 0 to 9, where 0 represents an empty cell.\n\n#### Output\n- Returns `True` if the input board is a valid Sudoku puzzle, and `False` otherwise.",
    "code": "\nimport copy\n\ndef sudoku_valid(board: list) -> bool:\n    # Check each row\n    for row in board:\n        seen = set()\n        for num in row:\n            if num == 0 or num in seen:\n                return False\n            seen.add(num)\n\n    # Check each column\n    for col in zip(*board):\n        seen = set()\n        for num in col:\n            if num == 0 or num in seen:\n                return False\n            seen.add(num)\n\n    # Check each region\n    for i in range(0, 9, 3):\n        for j in range(0, 9, 3):\n            seen = set()\n            for k in range(3):\n                for l in range(3):\n                    num = board[i + k][j + l]\n                    if num == 0 or num in seen:\n                        return False\n                    seen.add(num)\n\n    # If we haven't returned by now, the board is valid\n    return True",
    "tests": [
        "assert sudoku_valid([[5,3,4,6,7,8,9,1,2], [6,7,8,9,1,2,3,4,5], [1,9,8,3,4,2,5,6,7], [8,5,9,7,6,3,4,2,1], [4,2,6,8,5,1,7,3,9], [7,1,3,9,2,4,8,5,6], [9,6,1,5,3,7,2,8,4], [2,8,4,1,6,5,3,9,7], [3,5,9,4,2,8,6,7,1]]) == True",
        "assert sudoku_valid([[0 for _ in range(9)] for _ in range(9)]) == False",
        "assert sudoku_valid([[1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]]) == False"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "ACM-ICPC"
}