{
    "title": "Divisor Summation",
    "description": "Given a list of integers, write a function `sum_of_divisors` that calculates the sum of all divisors (excluding the number itself) for each integer in the list. The function should return a dictionary where keys are the input integers and values are their corresponding divisor sums.\n\n#### Function Signature\n```python\ndef sum_of_divisors(nums: list[int]) -> dict[int, int]:\n```\n\n#### Input\n- `nums` (list[int]): A list of integers.\n\n#### Output\n- Returns a dictionary where keys are the input integers and values are their corresponding divisor sums.",
    "code": "from math import sqrt\n\ndef sum_of_divisors(nums: list[int]) -> dict[int, int]:\n    def calculate_sum(n: int) -> int:\n        sum = 0\n        for i in range(1, int(sqrt(n)) + 1):\n            if n % i == 0:\n                if i * i != n:\n                    sum += i + n // i\n                else:\n                    sum += i\n        return sum - n\n    return {num: calculate_sum(num) for num in nums}",
    "tests": [
        "assert sum_of_divisors([4, 6, 10]) == {4: 3, 6: 9, 10: 18}",
        "assert sum_of_divisors([1, 2, 3, 5, 7]) == {1: 0, 2: 1, 3: 2, 5: 5, 7: 8}",
        "assert sum_of_divisors([]) == {}",
        "assert sum_of_divisors([15]) == {15: 24}"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "ACM-ICPC"
}