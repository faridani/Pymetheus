{
    "title": "Counting Islands",
    "description": "In a given map, you are able to find some islands that contain all the necessary resources to survive. You want to calculate how many of these islands there are in total.\n\n#### Function Signature\n```python\ndef count_islands(grid: list[list[int]]) -> int:\n```\n\n#### Input\n- `grid` (list[list[int]]): A 2D grid where each cell represents a map of the world, with 0 representing water and 1 representing land.\n\n#### Output\n- Returns an integer that counts the number of islands in the given grid.",
    "code": "\nimport copy\n\ndef count_islands(grid: list[list[int]]) -> int:\n    if not grid or not grid[0]:\n        return 0\n\n    result = 0\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n\n    def dfs(i, j):\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or visited[i][j]:\n            return\n\n        visited[i][j] = True\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            new_i, new_j = i + dx, j + dy\n            if (0 <= new_i < len(grid) and 0 <= new_j < len(grid[0]) and\n                    grid[new_i][new_j] == 1 and not visited[new_i][new_j]):\n                dfs(new_i, new_j)\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1 and not visited[i][j]:\n                result += 1\n                dfs(i, j)\n\n    return result",
    "tests": [
        "assert count_islands([[0, 0, 0, 0], [1, 1, 1, 0], [0, 0, 0, 0]]) == 1",
        "assert count_islands([[0, 0, 1, 1], [1, 0, 0, 1], [1, 0, 0, 1]]) == 2",
        "assert count_islands([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]) == 0"
    ],
    "difficulty": "medium",
    "model": "llama3:latest",
    "style": "Facebook Hacker Cup"
}