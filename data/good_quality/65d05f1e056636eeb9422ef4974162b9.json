{
    "title": "Hard: Maximum Sum of Distinct Subarrays",
    "description": "Given a 2D array `matrix` and an integer `k`, find the maximum sum of distinct subarrays such that the sum of any two distinct subarrays is at least `k`. The subarrays are contiguous sequences of elements in `matrix`. If no such subarray exists, return `-1`.\n\n#### Function Signature\n```python\ndef max_sum_distinct_subarrays(matrix: list[list[int]], k: int) -> int:\n```\n\n#### Input\n- `matrix` (list[list[int]]): A 2D array of integers where each row is a subarray.\n- `k` (int): An integer used to calculate the sum of distinct subarrays.\n\n#### Output\n- Returns the maximum sum of distinct subarrays such that the sum of any two distinct subarrays is at least `k`. If no such subarray exists, return `-1`.\n\n#### Constraints\nThe input matrix will have at most 100 rows and 100 columns. Each element in the matrix will be an integer between -1000 and 1000.\n\n#### Hints\nYou can solve this problem by using dynamic programming to build a prefix sum array for each row of the matrix. Then, iterate over all possible subarrays and calculate their sums. Use a set to keep track of distinct sums and update the maximum sum accordingly.",
    "code": "\nfrom typing import List\n\ndef max_sum_distinct_subarrays(matrix: List[List[int]], k: int) -> int:\n    n = len(matrix)\n    m = len(matrix[0])\n    prefix_sum = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            prefix_sum[i][j] = matrix[i - 1][j - 1] + prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1]\n\n    max_sum = -1\n    distinct_sums = set()\n\n    for i in range(n):\n        for j in range(m):\n            start_row, end_row = i, i\n            while end_row < n:\n                subarray_sum = prefix_sum[end_row + 1][m] - prefix_sum[i][m]\n                if subarray_sum not in distinct_sums:\n                    distinct_sums.add(subarray_sum)\n                    max_sum = max(max_sum, subarray_sum)\n\n                start_col, end_col = j, j\n                while end_col < m:\n                    subarray_sum = prefix_sum[end_row + 1][end_col + 1] - prefix_sum[i][j]\n                    if subarray_sum not in distinct_sums:\n                        distinct_sums.add(subarray_sum)\n                        max_sum = max(max_sum, subarray_sum)\n\n                if sum(d for d in distinct_sums) >= k and max_sum >= k:\n                    return max_sum\n\n    return -1",
    "tests": [
        "assert max_sum_distinct_subarrays([[1, 2], [3, 4]], 5) == 9",
        "assert max_sum_distinct_subarrays([[1, 2, 3], [2, 3, 4], [4, 4, 4]], 8) == 12",
        "assert max_sum_distinct_subarrays([[0, 1], [-1, 0]], 2) == -1",
        "assert max_sum_distinct_subarrays([[1000, -500, 0], [-500, 0, -1000], [0, -1000, 1000]], 1500) == 2000"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "ICPC"
}