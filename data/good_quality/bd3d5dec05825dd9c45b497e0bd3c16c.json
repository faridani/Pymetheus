{
    "title": "Minimum Window Substring",
    "description": "Given a string `s` and an integer array `words`, find the minimum window substring that contains all words from `words`. The words can be repeated. If there is no such window, return an empty string.\n\n#### Function Signature\n```\ndef min_window_substring(s: str, words: list) -> str:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, and spaces.\n- `words` (list): A list of strings that are the words to be found in the input string.\n\n#### Output\n- Returns a substring of `s` that contains all words from `words`, or an empty string if no such window exists.",
    "code": "\nimport collections\n\ndef min_window_substring(s: str, words: list) -> str:\n    word_count = collections.Counter(words)\n    required = len(word_count)\n    left, right = 0, 0\n    \n    while right < len(s):\n        window_counts = collections.Counter(s[left:right+1].split())\n        if window_counts >= word_count:\n            if required == (right - left + 1):\n                return s[left:right+1]\n            else:\n                left += 1\n        right += 1\n    return ''",
    "tests": [
        "assert min_window_substring(\"abc\", [\"a\", \"b\", \"c\"]) == 'abc'",
        "assert min_window_substring(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", [\"hello\", \"world\"]) == ''",
        "assert min_window_substring(\"a a a a\", [\"aa\"]) == 'a a a a'",
        "assert min_window_substring(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", [\"hello\", \"world\", \"python\"]) == ''"
    ],
    "difficulty": "hard",
    "model": "llama3:latest",
    "style": "CodeSignal"
}