{
    "title": "Valid Sudoku",
    "description": "Write a function `is_valid_sudoku` that takes a 9x9 2D list of strings as input, representing a partially filled-in standard 9x9 Sudoku grid. The function should return True if the given Sudoku is valid according to the standard rules (each row and each column must contain the digits from 1-9 with no repetition, and each 3x3 sub-grid must contain the digits from 1-9 with no repetition).\n\n#### Function Signature\n```python\ndef is_valid_sudoku(board: list[list[str]]) -> bool:\n```\n\n#### Input\n- `board` (list[list[str]]): A partially filled-in Sudoku grid, represented as a 2D list of strings. Each string in the list can be either '1' to '9', or an empty string.\n\n#### Output\n- Returns True if the input Sudoku is valid, False otherwise.",
    "code": "\nimport copy\n\ndef is_valid_sudoku(board: list[list[str]]) -> bool:\n    # Check each row\n    for row in board:\n        row_set = set()\n        for cell in row:\n            if cell != '':\n                digit = int(cell)\n                if digit < 1 or digit > 9:\n                    return False\n                if digit in row_set:\n                    return False\n                row_set.add(digit)\n\n    # Check each column\n    for col in range(9):\n        col_set = set()\n        for row in board:\n            cell = row[col]\n            if cell != '':\n                digit = int(cell)\n                if digit < 1 or digit > 9:\n                    return False\n                if digit in col_set:\n                    return False\n                col_set.add(digit)\n\n    # Check each sub-grid\n    for i in range(0, 9, 3):\n        for j in range(0, 9, 3):\n            sub_grid_set = set()\n            for x in range(i, i+3):\n                for y in range(j, j+3):\n                    cell = board[x][y]\n                    if cell != '':\n                        digit = int(cell)\n                        if digit < 1 or digit > 9:\n                            return False\n                        if digit in sub_grid_set:\n                            return False\n                        sub_grid_set.add(digit)\n\n    return True",
    "tests": [
        "assert is_valid_sudoku([['5', '3', '', '', '', '', '', '', ''], ['6', '', '', '7', '8', '', '', '', ''], ['.', '.', '.', '9', '1', '', '', '', ''], ['2', '', '', '', '6', '', '', '', ''], ['', '8', '7', '4', '', '', '', '', ''], ['5', '2', '', '', '', '', '', '', ''], ['1', '', '', '', '3', '', '', '', ''], ['', '', '.', '6', '', '', '', '.', '7'], ['8', '6', '', '8', '5', '', '', '', '9']]) == True",
        "assert is_valid_sudoku([['5', '3', '', '', '', '', '', '', ''], ['6', '', '', '7', '8', '', '', '', ''], ['.', '.', '.', '9', '1', '', '', '', ''], ['2', '', '', '', '6', '', '', '', ''], ['', '8', '7', '4', '', '', '', '', ''], ['5', '2', '', '', '', '', '', '', ''], ['1', '', '', '', '3', '', '', '', ''], ['', '', '.', '6', '', '', '', '.', '9'], ['8', '6', '', '8', '5', '', '', '', '']]) == False"
    ],
    "difficulty": "medium",
    "model": "llama3:latest",
    "style": "Daily Coding Problem"
}