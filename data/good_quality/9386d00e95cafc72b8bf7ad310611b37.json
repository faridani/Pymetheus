{
    "title": "Hard: Maximum Subarray Sum for an Array of Arrays",
    "description": "You are given a 2D array `arr` where each sub-array represents a day, and the elements within the sub-arrays represent the stock prices at different times. Your task is to find the maximum sum that can be obtained by selecting one element from each day.\n\n#### Function Signature\n```python\ndef max_subarray_sum(arr: list[list[int]]) -> int:\n```\n\n#### Input\n- `arr` (list[list[int]]): A 2D array where each sub-array represents a day, and the elements within the sub-arrays represent the stock prices at different times.\n\n#### Output\n- Returns the maximum sum that can be obtained by selecting one element from each day.",
    "code": "import itertools\n\ndef max_subarray_sum(arr: list[list[int]]) -> int:\n    # Initialize the maximum sum to negative infinity\n    max_sum = float('-inf')\n    # Iterate over all possible combinations of elements, one from each day\n    for combination in itertools.product(*arr):\n        # Calculate the sum of the current combination\n        total = sum(combination)\n        # Update the maximum sum if the current combination's sum is greater\n        max_sum = max(max_sum, total)\n    return max_sum",
    "tests": [
        "assert max_subarray_sum([[1, 2], [3, 4], [5, 6]]) == 6",
        "assert max_subarray_sum([[-1000], [-2000, -3000], [-4000, -5000]]) == -1000",
        "assert max_subarray_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 12"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "Codeforces"
}