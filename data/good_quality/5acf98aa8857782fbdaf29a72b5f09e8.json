{
    "title": "Hard: Maximum Sum of an Increasing Subsequence",
    "description": "A classic problem from the ACM-ICPC! Given a sequence of integers, find the maximum sum of a subsequence that is strictly increasing. A subsequence is defined as a subset of the given sequence where all elements are in sorted order.\n\n#### Function Signature\n```python\ndef max_increasing_subsequence_sum(arr: list[int)) -> int:\n```\n\n#### Input\n- `arr` (list<int>): A list of integers that may contain duplicates, and is not empty.\n\n#### Output\n- Returns the maximum sum of a strictly increasing subsequence in the input array. If no such subsequence exists, return -1.",
    "code": "from typing import List\n\ndef max_increasing_subsequence_sum(arr: List[int]) -> int:\n    if len(arr) == 0:\n        return -1\n    dp = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] > dp[-1]:\n            dp.append(arr[i])\n        else:\n            idx = binary_search(dp, arr[i])\n            dp[idx] = arr[i]\n    return sum(dp)\n\ndef binary_search(arr: List[int], target: int) -> int:\n    low, high = 0, len(arr)-1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] < target:\n            low = mid+1\n        else:\n            high = mid-1\n    return low",
    "tests": [
        "assert max_increasing_subsequence_sum([10, 70, 60, 80, 100]) == 250",
        "assert max_increasing_subsequence_sum([1, 3, 6, 8, 9, 10, 12, 15, 20]) == 25",
        "assert max_increasing_subsequence_sum([]) == -1",
        "assert max_increasing_subsequence_sum([5]) == 5"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "ACM-ICPC"
}