{
    "title": "Tiling the Board",
    "description": "Given a board of size M x N, where each cell can be either empty or contain a piece. Write a function `can_tile` that takes the number of rows (M) and columns (N), as well as a 2D list representing the board, and returns True if it's possible to tile the board with L-shaped tiles (L, T, F, R), False otherwise.\n\n#### Function Signature\n```python\ndef can_tile(M: int, N: int, board: List[List[str]]) -> bool:\n```\n\n#### Input\n- `M` (int): The number of rows in the board.\n- `N` (int): The number of columns in the board.\n- `board` (List[List[str]]): A 2D list representing the board, where each cell can be either 'E' (empty) or a piece (L, T, F, R).\n\n#### Output\n- Returns True if it's possible to tile the board with L-shaped tiles, False otherwise.",
    "code": "\nimport copy\n\ndef can_tile(M: int, N: int, board: List[List[str]]) -> bool:\n    # Create a copy of the original board\n    new_board = copy.deepcopy(board)\n\n    # Function to place an L-shaped tile at position (i, j)\n    def place_l(i: int, j: int) -> None:\n        for x in range(-1, 2):\n            for y in range(-1, 2):\n                if i + x >= 0 and i + x < M and j + y >= 0 and j + y < N:\n                    new_board[i + x][j + y] = 'E'\n        return None\n\n    # Function to place a T-shaped tile at position (i, j)\n    def place_t(i: int, j: int) -> None:\n        for x in range(-1, 2):\n            for y in range(-1, 2):\n                if i + x >= 0 and i + x < M and j + y >= 0 and j + y < N:\n                    new_board[i + x][j + y] = 'E'\n        return None\n\n    # Function to place an F-shaped tile at position (i, j)\n    def place_f(i: int, j: int) -> None:\n        for x in range(-1, 2):\n            for y in range(-1, 2):\n                if i + x >= 0 and i + x < M and j + y >= 0 and j + y < N:\n                    new_board[i + x][j + y] = 'E'\n        return None\n\n    # Function to place an R-shaped tile at position (i, j)\n    def place_r(i: int, j: int) -> None:\n        for x in range(-1, 2):\n            for y in range(-1, 2):\n                if i + x >= 0 and i + x < M and j + y >= 0 and j + y < N:\n                    new_board[i + x][j + y] = 'E'\n        return None\n\n    # Check each cell on the board\n    for i in range(M):\n        for j in range(N):\n            if new_board[i][j] == 'L':\n                place_l(i, j)\n            elif new_board[i][j] == 'T':\n                place_t(i, j)\n            elif new_board[i][j] == 'F':\n                place_f(i, j)\n            elif new_board[i][j] == 'R':\n                place_r(i, j)\n\n    # Check if the board is fully covered with tiles\n    for i in range(M):\n        for j in range(N):\n            if new_board[i][j] == 'E':\n                return False\n\n    return True",
    "tests": [
        "assert can_tile(3, 3, [['L', 'T', 'F'], ['R', 'E', 'E'], ['E', 'E', 'E']]) == True",
        "assert can_tile(4, 2, [['E', 'E'], ['E', 'L'], ['E', 'E'], ['T', 'E']]) == False",
        "assert can_tile(3, 3, [['E', 'E', 'E'], ['E', 'E', 'E'], ['E', 'E', 'E']]) == True"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "Codecademy"
}