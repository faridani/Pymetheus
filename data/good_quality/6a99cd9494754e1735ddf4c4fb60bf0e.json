{
    "title": "Number of Islands",
    "description": "Given a 2D binary grid, count the number of islands. An island is defined as a contiguous area of `1`s surrounded by `0`s.\n\n#### Function Signature\n```python\ndef num_islands(grid: list[list[int]]) -> int:\n```\n\n#### Input\n- `grid` (list[list[int]]): A 2D binary grid where `1`s represent land and `0`s represent water.\n\n#### Output\n- Returns the number of islands in the given grid.",
    "code": "def num_islands(grid: list[list[int]]) -> int:\n    if not grid or not grid[0]:\n        return 0\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1 and dfs(grid, i, j) == True:\n                count += 1\n    return count\n\ndef dfs(grid: list[list[int]], i: int, j: int) -> bool:\n    if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[i]):\n        return False\n    if grid[i][j] == 0:\n        return True\n    grid[i][j] = 0\n    dfs(grid, i-1, j)\n    dfs(grid, i+1, j)\n    dfs(grid, i, j-1)\n    dfs(grid, i, j+1)",
    "tests": [
        "assert num_islands([[]]) == 0",
        "assert num_islands([['0']]) == 0",
        "assert num_islands([[0], [0]]) == 0",
        "assert num_islands([[0, 0], [0, 1]]) == 1",
        "assert num_islands([[0, 0, 0], [0, 1, 0], [0, 0, 0]]) == 1",
        "assert num_islands([['0', '0', '0'], ['0', '1', '0'], ['0', '0', '0']]) == 1"
    ],
    "difficulty": "hard",
    "model": "llama3:latest",
    "style": "Exercism"
}