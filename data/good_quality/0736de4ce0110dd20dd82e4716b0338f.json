{
    "title": "Minimum Path Sum II (Hard)",
    "description": "A non-negative integer array `nums` contains only positive integers. You want to find the minimum path sum from one end of the array to another, where you can move either up or down in each step. For example, if `nums = [10, 15, 20]`, the minimum path sum is 10 + 15 = 25.\n\n#### Function Signature\n```python\ndef min_path_sum(nums: list[int]) -> int:\n```\n\n#### Input\n- `nums` (list[int]): A non-negative integer array that contains only positive integers.\n\n#### Output\n- Returns the minimum path sum from one end of the array to another.",
    "code": "from typing import List\n\ndef min_path_sum(nums: List[int]) -> int:\n    n = len(nums)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        dp[i][1] = nums[i - 1]\n        for j in range(2, n + 1):\n            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + nums[i - 1]\n    \n    return dp[n][n]",
    "tests": [
        "assert min_path_sum([10, 15, 20]) == 25",
        "assert min_path_sum([5, 4, 3]) == 8",
        "assert min_path_sum([2, 1, 1]) == 2"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "SPOJ"
}