{
    "title": "Hard: Minimum Edit Distance",
    "description": "Given two strings, <code>word1</code> and <code>word2</code>, return the minimum number of operations required to transform <code>word1</code> into <code>word2</code>.\n\nYou have the following three operations at your disposal:\n\n* **Insert:** Insert a character into a string.\n* **Delete:** Delete a character from a string.\n* **Replace:** Replace a character in a string with another character.\n\n#### Function Signature\n```python\ndef min_distance(word1: str, word2: str) -> int:\n```\n\n#### Input\n* `word1` (str): The first string.\n* `word2` (str): The second string.\n\n#### Output\n- Returns the minimum number of operations required to transform <code>word1</code> into <code>word2</code>.",
    "code": "def min_distance(word1: str, word2: str) -> int:\n    n = len(word1)\n    m = len(word2)\n    # Create a DP table to store the minimum edit distances\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\n    # Initialize the first row and column of the DP table\n    for i in range(n + 1):\n        dp[i][0] = i\n    for j in range(m + 1):\n        dp[0][j] = j\n\n    # Fill the rest of the DP table\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if word1[i - 1] == word2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n\n    # Return the minimum edit distance\n    return dp[n][m]",
    "tests": [
        "assert min_distance(\"horse\", \"ros\") == 3",
        "assert min_distance(\"intention\", \"execution\") == 5",
        "assert min_distance(\"kitten\", \"sitting\") == 3",
        "assert min_distance(\"\", \"a\") == 1"
    ],
    "difficulty": "super hard",
    "model": "gemma2:27b",
    "style": "Internationals Olympiad"
}