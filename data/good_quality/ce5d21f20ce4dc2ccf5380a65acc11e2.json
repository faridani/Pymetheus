{
    "title": "Hard: Suffix Tree Generation",
    "description": "Given a string of characters, generate its suffix tree. The suffix tree for a given string `s` is a compact trie-like data structure that contains all the suffixes of `s`. Write a function `generate_suffix_tree` that generates the suffix tree for a given string.\n\n#### Function Signature\n```python\ndef generate_suffix_tree(s: str) -> dict:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, and other characters.\n\n#### Output\n- Returns a dictionary representing the suffix tree. Each key in the dictionary is a node in the suffix tree, and its value is another dictionary containing the child nodes of that node.",
    "code": "import collections\n\ndef generate_suffix_tree(s: str) -> dict:\n    def dfs(node_id, edge_label):\n        if edge_label not in edges[node_id]:\n            return\n        for label in edge_label:\n            if label not in edges:\n                edges[label] = {}\n            edges[node_id][label] = len(edges) - 1\n            node_id = dfs(len(edges) - 1, label)\n        return node_id\n    edges = collections.defaultdict(dict, {0: {'$': 1}})\n    for i in range(len(s)):\n        edges[i]['$'] = i + 1\n    root = 0\n    for i in range(len(s) - 1):\n        dfs(0, s[i:i+2])\n    return edges",
    "tests": [
        "assert len(generate_suffix_tree('banana')) == 5",
        "assert 'ba' in generate_suffix_tree('banana')[1].keys()",
        "assert 'nn' in generate_suffix_tree('banana')[3].keys()"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "ACM-ICPC"
}