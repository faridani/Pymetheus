{
    "title": "Maximum Sum of Non-Adjacent Elements (Hard)",
    "description": "Given a list of integers, find the maximum sum of non-adjacent elements. For example, if the input is [2, 7, 9, 3, 1], the function should return 12 because the maximum sum that can be obtained by selecting non-adjacent elements is 2 + 9 + 1 = 12.\n\n#### Function Signature\n```python\ndef max_sum_non_adjacent(nums: list[int)) -> int:\n```\n\n#### Input\n- `nums` (list[int]): A list of integers that may contain positive and negative values.\n\n#### Output\n- Returns the maximum sum of non-adjacent elements in the input list.",
    "code": "from typing import List\n\ndef max_sum_non_adjacent(nums: List[int]) -> int:\n    if not nums:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i-1], dp[i-2] + nums[i])\n        return dp[-1]",
    "tests": [
        "assert max_sum_non_adjacent([2, 7, 9, 3, 1]) == 12",
        "assert max_sum_non_adjacent([-2, -5, 6, -2, 0, -8]) == 6",
        "assert max_sum_non_adjacent([]) == 0",
        "assert max_sum_non_adjacent([1]) == 1"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "Codeforces"
}