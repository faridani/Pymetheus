{
    "title": "Hard: Prime Factors of a Number",
    "description": "Write a function `prime_factors` that takes an integer as input and returns the prime factors of that number. For example, if you call `prime_factors(315)`, it should return `[3, 3, 5, 7]`. The function should not include repeated prime factors.\n\n#### Function Signature\n```python\ndef prime_factors(n: int) -> list:\n```\n\n#### Input\n- `n` (int): An integer for which you need to find the prime factors.\n\n#### Output\n- Returns a list of prime factors of the input number. Note that this list does not include repeated prime factors.",
    "code": "def prime_factors(n: int) -> list:\n    factors = {}\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            if n in factors:\n                break\n            factors[i] = 0\n    if n > 1:\n        factors[n] = 0\n    return list(factors.keys())",
    "tests": [
        "assert prime_factors(315) == [3, 3, 5, 7]",
        "assert prime_factors(100) == [2, 2, 5]",
        "assert prime_factors(10) == [2, 5]",
        "assert prime_factors(1) == []"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "Codewars"
}