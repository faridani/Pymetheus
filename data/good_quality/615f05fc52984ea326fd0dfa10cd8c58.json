{
    "title": "Easy: Maximum Sum of Subarray",
    "description": "Given an array of integers, find the maximum sum of a contiguous subarray within it. For example, if the input is `[3, 2, -1, 4, -3, 5, 2, -5, 8]`, the function should return `29` because the maximum sum of a contiguous subarray is obtained by adding all elements from index `4` to `7`. Write a function `max_sum_subarray` that solves this problem.\n\n#### Function Signature\n```python\ndef max_sum_subarray(arr: list[int)) -> int:\n```\n\n#### Input\n- `arr` (list of integers): The input array.\n\n#### Output\n- Returns the maximum sum of a contiguous subarray within the input array.",
    "code": "",
    "\ndef max_sum_subarray(arr: list[int)) -> int:\n    if not arr:\n        return 0\n\n    current_sum = max_sum = arr[0]\n\n    for num in arr[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum": "",
    "tests": [
        "assert max_sum_subarray([3, 2, -1, 4, -3, 5, 2, -5, 8]) == 29",
        "assert max_sum_subarray([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6",
        "assert max_sum_subarray([]) == 0"
    ],
    "difficulty": "easy",
    "model": "llama3:latest",
    "style": "ACM-ICPC"
}