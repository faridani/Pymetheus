{
    "title": "Medium: Counting Subsequences",
    "description": "Given two strings `s1` and `s2`, write a function that counts the number of subsequences of `s2` that are also substrings of `s1`. A subsequence is a sequence that can be derived from another sequence by deleting some or no characters without changing the order of the remaining characters. For example, `\"abc\"` is a subsequence of `\"ahbgdc\"`, while `\"avc\"` is not. The function should return an integer representing the count of such subsequences.\n\n#### Function Signature\n```python\ndef count_subsequences(s1: str, s2: str) -> int:\n```\n\n#### Input\n- `s1` (str): A string that may contain letters, numbers, and special characters.\n- `s2` (str): A string that is a subsequence of `s1`. It may contain letters, numbers, and special characters.\n\n#### Output\n- Returns an integer representing the number of subsequences of `s2` that are also substrings of `s1`.",
    "code": "def count_subsequences(s1: str, s2: str) -> int:\n    n = len(s1)\n    m = len(s2)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 1\n    for j in range(m + 1):\n        dp[0][j] = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n][m]",
    "tests": [
        "assert count_subsequences('abcde', 'ace') == 3",
        "assert count_subsequences('hello', 'lo') == 2",
        "assert count_subsequences('hello', 'world') == 0"
    ],
    "difficulty": "medium",
    "model": "llama3:latest",
    "style": "Codeforces"
}