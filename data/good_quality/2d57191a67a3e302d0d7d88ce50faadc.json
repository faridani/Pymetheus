{
    "title": "Hard: Maximum Sum of Subarray with a Given Average",
    "description": "Given an array `nums` and an integer `average`, find the maximum sum of subarray that has an average equal to `average`. A subarray is a contiguous part of an array.\n\n#### Function Signature\n```python\ndef max_sum_subarray(nums: list[int], average: int) -> int:\n```\n\n#### Input\n- `nums` (list[int]): A list of integers.\n- `average` (int): The target average for the subarray.\n\n#### Output\n- Returns the maximum sum of subarray that has an average equal to `average`. If no such subarray exists, return -1.",
    "code": "",
    "\nimport statistics\n\ndef max_sum_subarray(nums: list[int], average: int) -> int:\n    n = len(nums)\n    total_sum = sum(nums)\n    \n    if total_sum / n != average:\n        return -1\n    \n    max_sum = float('-inf')\n    window_sum = 0\n    left = 0\n    \n    for right in range(n):\n        window_sum += nums[right]\n        \n        while window_sum > average * (right - left + 1) and left <= right:\n            window_sum -= nums[left]\n            left += 1\n        \n        if window_sum == average * (right - left + 1):\n            max_sum = max(max_sum, window_sum)\n    \n    return max_sum": "",
    "tests": [
        "assert max_sum_subarray([1, 2, 3, 4], 2) == 6",
        "assert max_sum_subarray([-5, -4, -3, -2, -1], 0) == -1",
        "assert max_sum_subarray([5, 6, 7, 8], 5.5) == 15",
        "assert max_sum_subarray([1, 2, 3], 1) == 4"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "HackerRank"
}