{
    "title": "Hard: Word Ladder Generator",
    "description": "A word ladder is a sequence of words where each pair of adjacent words differs by exactly one character. Write a function `word_ladder` that generates all possible word ladders starting from a given input string.\n\n#### Function Signature\n```python\ndef word_ladder(s: str) -> list:\n```\n\n#### Input\n- `s` (str): A string that may contain letters and spaces.\n\n#### Output\n- Returns a list of strings, where each string is a word in the word ladder.",
    "code": "\nimport itertools\nimport collections\n\ndef word_ladder(s: str) -> list:\n    # Create a Trie data structure to store all possible words\n    trie = collections.defaultdict(dict)\n    for word in set(word.split() for word in open('wordlist.txt')):\n        for i in range(len(word)):\n            prefix = ''.join(char for char in word[:i+1])\n            if len(prefix) > 0:\n                trie[prefix][0] = 0\n                trie[prefix][1] = set()\n            trie[prefix][1].add((word[i], word[i+1:]))\n    # Start the word ladder from the input string\n    current_word = s\n    ladder = [s]\n    visited = set([s])\n    while True:\n        next_ladder = []\n        for i in range(len(current_word)):\n            prefix = current_word[:i+1]\n            if prefix in trie and len(trie[prefix][1]) > 0:\n                for change, remaining in trie[prefix][1]:\n                    new_word = prefix + change + remaining\n                    if new_word not in visited:\n                        next_ladder.append(new_word)\n                        visited.add(new_word)\n        current_word = min(next_ladder) if len(next_ladder) > 0 else ''\n        if current_word == '':\n            break\n        ladder.append(current_word)\n    return ladder",
    "tests": [
        "assert word_ladder('hello') == ['hello', 'helo', 'hole', 'holo', 'loho', 'ohol', 'ohlo', 'olle', 'ello']",
        "assert word_ladder('test') == ['test', 'tete', 'lete', 'lete', 'letl', 'ltel', 'telr', 'terl', 'terp']"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "TopCoder"
}