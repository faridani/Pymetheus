{
    "title": "Maximum Sum of Non-Adjacent Elements (Hard)",
    "description": "Given a list of integers, find the maximum sum that can be obtained by selecting at most two non-adjacent elements from the list. If there are less than three elements in the list, return 0.\n\n#### Function Signature\n```python\ndef max_sum_of_non_adjacent_elements(arr: list[int)) -> int:\n```\n\n#### Input\n- `arr` (list[int]): A list of integers where each integer is between 1 and 100 inclusive.\n\n#### Output\n- Returns the maximum sum that can be obtained by selecting at most two non-adjacent elements from the input list.",
    "code": "",
    "\nimport heapq\n\ndef max_sum_of_non_adjacent_elements(arr: list[int)) -> int:\n    if len(arr) < 3:\n        return 0\n    n = len(arr)\n    dp = [0] * (n + 1)\n    heap = [(arr[0], 0)]\n    for i in range(1, n):\n        val, prev_i = heapq.heappop(heap)\n        if i < 2 or i >= n - 1:\n            dp[i] = max(dp[i-1], val)\n        else:\n            dp[i] = max(dp[i-1], val + arr[i])\n        heapq.heappush(heap, (arr[i], i))\n    return max(dp[-2:])": "",
    "tests": [
        "assert max_sum_of_non_adjacent_elements([1, 3, 5, 7]) == 9",
        "assert max_sum_of_non_adjacent_elements([10, 20, 30, 40, 50]) == 60",
        "assert max_sum_of_non_adjacent_elements([-1, 0, 2, -3, 4, -5, 6, -7, 8, -9, 10]) == 11",
        "assert max_sum_of_non_adjacent_elements([100] * 20) == 200"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "Google Code Jam"
}