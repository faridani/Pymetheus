{
    "title": "'Number Spiral Diagonals Sum Finder (Medium)'",
    "description": "In this problem, we are given a number `n`, and our task is to find the sum of numbers on the spiral diagonals with length up to `n`.\n\n#### Function Signature\n```python\ndef find_spiral_sum(n: int) -> int:\n```\n\n#### Input\n- `n` (int): An integer greater than or equal to 1.\n\n#### Output\n- Returns the sum of numbers on the spiral diagonals with length up to `n`. The first few terms are: 1, 3, 8, 4, 5, 9 and so on.",
    "code": "def find_spiral_sum(n: int) -> int:\n    # Initialize variables\n    odd = [1]\n    even = [2]\n    spiral_sum = 3\n    current = 0\n    count = 0\n    max_length = n*n\n    \n    while len(odd) < n or len(even) < n:\n        # Add next odd and even numbers\n        next_odd = current + 2 * [1, -1][count % 4] + 2 * (len(odd))\n        next_even = current + 2 * [1, -1][count % 4] + len(odd) + len(even)\n        \n        # Check if within bounds and not visited already\n        if 0 < next_odd < max_length and next_odd not in odd:\n            odd.append(next_odd)\n            spiral_sum += next_odd\n        if 0 < next_even < max_length and next_even not in even:\n            even.append(next_even)\n            spiral_sum += next_even\n        \n        # Move to the next position\n        current = odd[-1] if count % 4 == 0 else even[-1]\n        count += 1\n    return spiral_sum",
    "tests": [
        "assert find_spiral_sum(1) == 3",
        "assert find_spiral_sum(2) == 8",
        "assert find_spiral_sum(3) == 16",
        "assert find_spiral_sum(4) == 37"
    ],
    "difficulty": "medium",
    "model": "mistral:latest",
    "style": "ICPC"
}