{
    "title": "Prime Spiral",
    "description": "A prime spiral is a sequence of prime numbers arranged in a spiral pattern. Given an integer n, write a function `prime_spiral` that generates the first n prime numbers and returns them as a list in the order they appear in the prime spiral.\n\n#### Function Signature\n```python\ndef prime_spiral(n: int) -> List[int]:\n```\n\n#### Input\n- `n` (int): The number of prime numbers to generate.\n\n#### Output\n- Returns a list of the first n prime numbers in the order they appear in the prime spiral.",
    "code": "\nimport math\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_spiral(n: int) -> List[int]:\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes",
    "tests": [
        "assert prime_spiral(5) == [2, 3, 5, 11, 13]",
        "assert prime_spiral(10) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]",
        "assert prime_spiral(15) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "Codewars"
}