{
    "title": "Finding the Minimum Depth of a Binary Tree",
    "description": "Write a function `find_min_depth` that takes a binary tree represented as a dictionary and returns the minimum depth of any node in the tree. The binary tree is represented as follows: each key is either the root node or one of its children, and the value is the corresponding left child if it exists, and None otherwise. For example: {'root': [1, 2], 'left': [3, 4], 'right': [5, 6]}. The minimum depth is the length of the path from the root node to a leaf node.\n\n#### Function Signature\n``python\ndef find_min_depth(tree: dict) -> int:\n```\n\n#### Input\n- `tree` (dict): A binary tree represented as a dictionary.\n\n#### Output\n- Returns the minimum depth of any node in the binary tree.",
    "code": "def find_min_depth(tree: dict) -> int:\n    if not tree['root']:\n        return 0\n    min_depth = float('inf')\n    def dfs(node, depth):\n        nonlocal min_depth\n        if not node:\n            return\n        if not node[1]:\n            min_depth = min(min_depth, depth)\n        else:\n            dfs(node[1], depth + 1)\n            dfs(node[2], depth + 1)\n    dfs(tree['root'], 0)\n    return min_depth",
    "tests": [
        "assert find_min_depth({'root': [1], 'left': None, 'right': None}) == 1",
        "assert find_min_depth({'root': [1, 2], 'left': [3, 4], 'right': [5, 6]}) == 3",
        "assert find_min_depth({'root': [1, 2, 3], 'left': [4], 'right': None}) == 2"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "HackerEarth"
}