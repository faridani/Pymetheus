{
    "title": "Hard: Anagram Groups",
    "description": "Given a list of words, group the words that are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n#### Function Signature\n```python\ndef group_anagrams(words: list[str]) -> list[list[str]]:\n```\n\n#### Input\n- `words` (list[str]): A list of strings representing the words to be grouped.\n\n#### Output\n- Returns a list of lists, where each inner list contains anagrams of each other. The order of the groups and the order of words within each group do not matter.",
    "code": "def group_anagrams(words: list[str]) -> list[list[str]]:\n    anagram_groups = {}\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        if sorted_word in anagram_groups:\n            anagram_groups[sorted_word].append(word)\n        else:\n            anagram_groups[sorted_word] = [word]\n    return list(anagram_groups.values())",
    "tests": [
        "assert group_anagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]",
        "assert group_anagrams([\"listen\", \"silent\", \"enlist\"]) == [['listen', 'silent', 'enlist']]",
        "assert group_anagrams([\"dog\", \"cat\", \"god\"]) == [['dog', 'god'], ['cat']]"
    ],
    "difficulty": "super hard",
    "model": "gemma2:27b",
    "style": "Codecademy"
}