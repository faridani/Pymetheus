{
    "title": "Counting Islands",
    "description": "Given a 2D array of integers, count the number of islands. A island is defined as a group of connected cells with values equal to 1.\n\n#### Function Signature\n```python\ndef count_islands(grid: list[list[int]]) -> int:\n```\n\n#### Input\n- `grid` (list[list[int]]): A 2D array of integers where 0 represents water and 1 represents land.\n\n#### Output\n- Returns the number of islands in the input grid.",
    "code": "\nimport copy\n\ndef count_islands(grid: list[list[int]]) -> int:\n    if not grid:\n        return 0\n\n    num_islands = 0\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n\n    def dfs(i, j):\n        if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or grid[i][j] == 0 or visited[i][j]:\n            return\n        visited[i][j] = True\n        for dx in [-1, 0, 1]:\n            for dy in [-1, 0, 1]:\n                if abs(dx) + abs(dy) != 1:\n                    continue\n                x, y = i + dx, j + dy\n                if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == 1 and not visited[x][y]:\n                    dfs(x, y)\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1 and not visited[i][j]:\n                num_islands += 1\n                dfs(i, j)\n    return num_islands",
    "tests": [
        "assert count_islands([[0,0,1,0,0],[0,0,1,0,0],[0,0,1,1,1]]) == 1",
        "assert count_islands([[1,1,0,0,0],[1,1,0,0,0],[0,0,1,1,1]]) == 3",
        "assert count_islands([]) == 0",
        "assert count_islands([[]]) == 0"
    ],
    "difficulty": "hard",
    "model": "llama3:latest",
    "style": "Codecademy"
}