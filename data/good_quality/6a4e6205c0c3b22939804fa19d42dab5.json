{
    "title": "Maximum Number of Islands",
    "description": "Given a 2D grid of size M x N, which consists of islands and water. An island is considered as a group of connected cells (horizontally or vertically) with no adjacent water cells. Write a function `max_islands` that returns the maximum number of islands that can be formed in the given grid.\n\n#### Function Signature\n```python\ndef max_islands(grid: list[list[int]]) -> int:\n```\n\n#### Input\n- `grid` (list[list[int]]): A 2D grid where 0 represents water and 1 represents land.\n\n#### Output\n- Returns the maximum number of islands that can be formed in the given grid.",
    "code": "",
    "\ndef max_islands(grid: list[list[int]]) -> int:\n    if not grid or not grid[0]:\n        return 0\n\n    m, n = len(grid), len(grid[0])\n    visited = [[False for _ in range(n)] for _ in range(m)]\n\n    def dfs(i: int, j: int) -> int:\n        if i < 0 or i >= m or j < 0 or j >= n or grid[i][j] == 0 or visited[i][j]:\n            return 0\n\n        visited[i][j] = True\n        count = 1\n\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            ni, nj = i + dx, j + dy\n            if 0 <= ni < m and 0 <= nj < n and grid[ni][nj]:\n                count += dfs(ni, nj)\n\n        return count\n\n    max_count = 0\n    for i in range(m):\n        for j in range(n):\n            if not visited[i][j] and grid[i][j]:\n                max_count = max(max_count, dfs(i, j))\n\n    return max_count": "",
    "tests": [
        "assert max_islands([[0,0,1,0],[0,1,1,0],[0,1,1,0],[1,1,1,1]]) == 3",
        "assert max_islands([[0,0,1,0],[0,1,1,0],[0,0,0,0],[1,1,1,1]]) == 2",
        "assert max_islands([[0,0,0,0]]) == 0",
        "assert max_islands([[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]]) == 4"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "HackerRank"
}