{
    "title": "[Hard] Sum of Two Numbers in a Sorted Array",
    "description": "Given a sorted array of integers and an integer target, find two numbers in the array that sum to the target. Write a function `find_two_sum` that takes in a list of integers `nums` and an integer `target`, and returns a tuple containing two integers from the array that add up to the target. If no such pair exists, return None.\n\n#### Function Signature\n```python\ndef find_two_sum(nums: List[int], target: int) -> Optional[Tuple[int, int]]:\n```\n\n#### Input\n- `nums` (List[int]): A list of integers that is sorted in ascending order.\n- `target` (int): An integer representing the sum to find.\n\n#### Output\n- Returns a tuple containing two integers from the array that add up to the target, or None if no such pair exists.",
    "code": "",
    "from typing import List, Tuple, Optional\ndef find_two_sum(nums: List[int], target: int) -> Optional[Tuple[int, int]]:\n    left, right = 0, len(nums) - 1\n    while left < right:\n        current_sum = nums[left] + nums[right]\n        if current_sum == target:\n            return (nums[left], nums[right])\n        elif current_sum < target:\n            left += 1\n        else:\n            right -= 1\n    return None": "",
    "tests": [
        "assert find_two_sum([2, 7, 11, 15], 9) == (2, 7)",
        "assert find_two_sum([1, 3, 6, 8, 11, 15], 9) == None",
        "assert find_two_sum([1, 2, 3, 4, 5], 6) == (1, 5)",
        "assert find_two_sum([-5, -3, -1, 2, 4, 6], -1) == (-3, 2)"
    ],
    "difficulty": "super hard",
    "model": "codestral:22b",
    "style": "Codewars"
}