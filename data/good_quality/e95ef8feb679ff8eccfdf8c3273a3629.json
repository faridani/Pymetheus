{
    "title": "Hard: Maximal Rectangle",
    "description": "Given a 2D binary matrix where `0` represents the absence of a pixel, and `1` represents the presence of a pixel, write a function that returns the maximum area of a rectangle that can be formed by drawing lines horizontally or vertically between the pixels. The area is calculated as the product of the number of rows and columns in the rectangle.\n\n#### Function Signature\n```python\ndef maximal_rectangle(matrix: List[List[int]]) -> int:\n```\n\n#### Input\n- `matrix` (List[List[int]]): A 2D binary matrix where each cell is either `0` or `1`. The matrix may contain empty rows or columns.\n\n#### Output\n- Returns the maximum area of a rectangle that can be formed from the given pixels, calculated as the product of the number of rows and columns in the rectangle.",
    "code": "from typing import List\n\ndef maximal_rectangle(matrix: List[List[int]]) -> int:\n    if not matrix or not matrix[0]:\n        return 0\n\n    max_area = 0\n    for left in range(len(matrix[0])):\n        zeros = [row[left] == 0 for row in matrix]\n        temp_max = 0\n        for right in range(left, len(matrix[0])):\n            if all(zeros[i] for i in range(min(right+1, len(zeros)))):\n                temp_max += 1\n            else:\n                max_area = max(max_area, temp_max * (right - left + 1))\n                zeros = [row[right] == 0 for row in matrix]\n                temp_max = 0\n    return max_area",
    "tests": [
        "assert maximal_rectangle([[0,0,0],[1,1,1],[0,0,0]]) == 6",
        "assert maximal_rectangle([[0,1,0,0],[0,1,1,1],[0,0,0,0]]) == 4",
        "assert maximal_rectangle([[0,0,0],[0,1,1],[0,0,0]]) == 2",
        "assert maximal_rectangle([]) == 0"
    ],
    "difficulty": "hard",
    "model": "llama3:latest",
    "style": "Facebook Hacker Cup"
}