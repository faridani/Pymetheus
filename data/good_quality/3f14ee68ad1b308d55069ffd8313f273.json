{
    "title": "Hard: Maximal Increasing Subsequence",
    "description": "Given a list of integers, find the maximal increasing subsequence (MIS). An MIS is a sequence of numbers where each number is greater than its predecessor. Write a function `maximal_increasing_subsequence` that returns the length of the longest MIS.\n\n#### Function Signature\n```python\ndef maximal_increasing_subsequence(sequence: list[int]) -> int:\n```\n\n#### Input\n- `sequence` (list[int]): A list of integers where each number may be repeated, and there may be duplicates in the sequence.\n\n#### Output\n- Returns the length of the longest maximal increasing subsequence.",
    "code": "from typing import List\n\ndef maximal_increasing_subsequence(sequence: List[int]) -> int:\n    n = len(sequence)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if sequence[i] > sequence[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
    "tests": [
        "assert maximal_increasing_subsequence([1, 2, 3, 4]) == 4",
        "assert maximal_increasing_subsequence([5, 6, 7, 8]) == 4",
        "assert maximal_increasing_subsequence([1, 3, 6, 10]) == 4",
        "assert maximal_increasing_subsequence([1, 2, 3, 4, 5]) == 5"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "Competitive Programming"
}