{
    "title": "[Hard] Longest Common Subsequence",
    "description": "Given two strings `s1` and `s2`, return the length of their longest common subsequence. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining elements.\n\n#### Function Signature\n```python\ndef longest_common_subsequence(s1: str, s2: str) -> int:\n```\n\n#### Input\n- `s1`, `s2` (str): Strings that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns the length of their longest common subsequence as an integer.",
    "code": "",
    "def longest_common_subsequence(s1: str, s2: str) -> int:\n        dp = [[0] * (len(s2)+1) for _ in range(len(s1)+1)]\n        for i in range(1, len(s1)+1):\n            for j in range(1, len(s2)+1):\n                if s1[i-1] == s2[j-1]:\n                    dp[i][j] = dp[i-1][j-1]+1\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        return dp[-1][-1]": "",
    "tests": [
        "assert longest_common_subsequence(\"abcde\", \"ace\") == 3",
        "assert longest_common_subsequence(\"abc\", \"def\") == 0",
        "assert longest_common_subsequence(\"bsbininm\", \"jmjkbkjkv\") == 1"
    ],
    "difficulty": "hard",
    "model": "codestral:22b",
    "style": "CodeWars"
}