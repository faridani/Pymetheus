{
    "title": "Minimum Path Sum (Medium)",
    "description": "Given a m x n grid filled with non-negative numbers, find the minimum path sum from top left to bottom right. The path doesn't need to be the most efficient route and you can only move either down or right at any point in time.\n\n#### Function Signature\n```\ndef minPathSum(grid: list[list[int]]) -> int:\n```\n\n#### Input\n- `grid` (list[list[int]]): A 2D grid of integers where each element is non-negative.\n\n#### Output\n- Returns the minimum path sum from top left to bottom right.",
    "code": "\ndef minPathSum(grid: list[list[int]]) -> int:\n    m, n = len(grid), len(grid[0])\n    dp = [[0] * n for _ in range(m)]\n    \n    dp[0][0] = grid[0][0]\n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] + grid[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + grid[0][j]\n    \n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    \n    return dp[-1][-1]",
    "tests": [
        "assert minPathSum([[1,3,1],[1,5,1],[4,2,1]]) == 7",
        "assert minPathSum([[1,2,3],[1,5,9],[2,6,4]]) == 12"
    ],
    "difficulty": "medium",
    "model": "llama3:latest",
    "style": "ICPC"
}