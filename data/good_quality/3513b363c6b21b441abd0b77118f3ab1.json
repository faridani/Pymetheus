{
    "title": "Finding the Longest Increasing Subsequence",
    "description": "A subsequence of a given sequence is a new sequence that can be formed by deleting some elements from the original sequence, without changing their order. A longest increasing subsequence (LIS) is a subsequence in which all elements are increasing. Write a function `find_lis` that finds the length of the longest increasing subsequence in a given list of integers.\n\n#### Function Signature\n```python\ndef find_lis(arr: list[int]) -> int:\n```\n\n#### Input\n- `arr` (list[int]): A list of integers.\n\n#### Output\n- Returns the length of the longest increasing subsequence in the input list.",
    "code": "\nimport math\n\ndef find_lis(arr: list[int]) -> int:\n    n = len(arr)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
    "tests": [
        "assert find_lis([10, 9, 2, 5, 3, 7, 101, 18]) == 4",
        "assert find_lis([-10, -9, -2, -5, -3, -7, 101, 18]) == 3",
        "assert find_lis([1, 2, 3, 4, 5]) == 5",
        "assert find_lis([5, 4, 3, 2, 1]) == 1"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "CodeWars"
}