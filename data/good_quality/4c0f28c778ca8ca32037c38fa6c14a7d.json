{
    "title": "Easy: Sum of All Subsequences",
    "description": "Given a list of integers, find the sum of all possible subsequences. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n#### Function Signature\n```python\ndef sum_of_subsequences(lst: list[int]) -> int:\n```\n#### Input\n- `lst` (list[int]): A list of integers\n\n#### Output\n- Returns the sum of all possible subsequences as an integer\n\n#### Example\nExample: For the input `[1, 2, 3]`, your function should return `28`, which is the sum of all subsequences: `[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3], [], [1, ], [2, ], [3, ]`.",
    "code": "\ndef sum_of_subsequences(lst: list[int]) -> int:\n    n = len(lst)\n    total_sum = 0\n    for i in range(2 ** n):\n        subsequence_sum = 0\n        for j in range(n):\n            if (i & (1 << j)):\n                subsequence_sum += lst[j]\n        total_sum += subsequence_sum\n    return total_sum",
    "tests": [
        "assert sum_of_subsequences([1, 2, 3]) == 28",
        "assert sum_of_subsequences([-5, -4, -3]) == -21"
    ],
    "difficulty": "medium",
    "model": "llama3:latest",
    "style": "HackerRank"
}