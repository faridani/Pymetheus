{
    "title": "Maximal Network Rank",
    "description": "You are given two integers `n` and `m`, the number of nodes and edges respectively, in an undirected graph. You are also given a list of `edges` where each edge is represented as a tuple `(u, v)` denoting that there's a direct connection between node `u` and node `v`. Write a function `maxNetworkRank` that returns the maximum possible rank for this network.\n\n#### Function Signature\n\n```\ndef maxNetworkRank(n: int, m: int, edges: list[tuple[int, int]]) -> int:\n```\n\n#### Input\n\n- `n` (int): The number of nodes in the graph.\n- `m` (int): The number of edges in the graph.\n- `edges` (list[tuple[int, int]]): A list of tuples representing the edges in the graph.\n\n#### Output\n\n- Returns an integer representing the maximum possible rank for this network.",
    "code": "from typing import List, Tuple\ndef maxNetworkRank(n: int, m: int, edges: List[Tuple[int, int]]) -> int:\n    # Initialize a list to keep track of the number of outgoing edges from each node.\n    out_edges = [0] * (n + 1)\n\n    # Iterate over all the edges and increment the count for both nodes in each edge.\n    for u, v in edges:\n        out_edges[u] += 1\n        out_edges[v] += 1\n\n    # Initialize the maximum rank to be zero.\n    max_rank = 0\n\n    # Iterate over all nodes. For each node, its rank is the number of outgoing edges plus one (for itself).\n    for i in range(1, n + 1):\n        max_rank = max(max_rank, out_edges[i] + 1)\n\n    return max_rank",
    "tests": [
        "assert maxNetworkRank(5, 4, [(0, 1), (2, 3), (1, 2), (3, 4)]) == 4",
        "assert maxNetworkRank(8, 14, [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 0), (0, 5), (5, 7)]) == 16",
        "assert maxNetworkRank(10, 11, [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 0), (0, 1)]) == 16"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "LeetCode"
}