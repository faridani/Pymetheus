{
    "title": "Easy: Counting Triangles",
    "description": "Given a list of points on a plane, count the number of triangles that can be formed with those points. Two distinct points form an edge and three edges form a triangle.\n\n#### Function Signature\n```python\ndef count_triangles(points: List[Tuple[int, int]]) -> int:\n```\n\n#### Input\n- `points` (List[Tuple[int, int]]): A list of coordinates of the points on the plane.\n\n#### Output\n- Returns the number of triangles that can be formed with those points.",
    "code": "from typing import List, Tuple\n\ndef count_triangles(points: List[Tuple[int, int]]) -> int:\n    n = len(points)\n    triangles = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if is_points_form_triangle(points[i], points[j], points[k]):\n                    triangles += 1\n    return triangles\n\ndef is_points_form_triangle(p1: Tuple[int, int], p2: Tuple[int, int], p3: Tuple[int, int]) -> bool:\n    # Calculate the slopes of all three sides of the triangle.\n    slope12 = (p2[1] - p1[1]) * 1.0 / (p2[0] - p1[0]) if p2[0] != p1[0] else float('inf')\n    slope23 = (p3[1] - p2[1]) * 1.0 / (p3[0] - p2[0]) if p3[0] != p2[0] else float('inf')\n    slope31 = (p1[1] - p3[1]) * 1.0 / (p1[0] - p3[0]) if p1[0] != p3[0] else float('inf')\n\n    # Check if the three points are collinear.\n    return slope12 == slope23 and slope23 == slope31 or \\\n           slope12 == slope31 and slope31 == slope23 or \\\n           slope23 == slope12 and slope12 == slope31",
    "tests": [
        "assert count_triangles([(0, 0), (1, 2), (3, 1)]) == 1",
        "assert count_triangles([(0, 0), (1, 2), (3, 1), (-1, -2), (-3, -1)]) == 2"
    ],
    "difficulty": "medium",
    "model": "llama3:latest",
    "style": "Facebook Hacker Cup"
}