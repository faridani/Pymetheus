{
    "title": "Hard: Binary Search Tree Node Counter",
    "description": "Write a function `count_nodes` that takes the root of a binary search tree and returns the number of nodes in the tree. The binary search tree node is defined as follows:\n\n#### Function Signature\n```python\ndef count_nodes(node): \n```\n\n#### Input\n- `node`: A binary search tree node.\n\n#### Output\n- Returns an integer representing the number of nodes in the binary search tree rooted at the given node.",
    "code": "",
    "\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\ndef count_nodes(node):\n    if node is None:\n        return 0\n    else:\n        return 1 + count_nodes(node.left) + count_nodes(node.right)\n\n# Example usage\nroot = Node(5)\nroot.left = Node(3)\nroot.right = Node(7)\nroot.left.left = Node(2)\nroot.left.right = Node(4)\nroot.right.left = Node(6)\nroot.right.right = Node(8)\n\nprint(count_nodes(root))  # Output: 9": "",
    "tests": [
        "assert count_nodes(None) == 0",
        "assert count_nodes(Node(5)).right == None",
        "assert count_nodes(Node(2)) == 1",
        "assert count_nodes(root).left.left.value == 2"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "HackerRank"
}