{
    "title": "Hard: Finding the Longest Increasing Subsequence",
    "description": "A longest increasing subsequence (LIS) of a given sequence is the longest contiguous subsequence that is strictly increasing. Given a list of integers, write a function `lis` that returns the length of the longest increasing subsequence.\n\n#### Function Signature\n```python\ndef lis(lst: list[int]) -> int:\n```\n\n#### Input\n- `lst` (list[int]): A list of integers.\n\n#### Output\n- Returns the length of the longest increasing subsequence in the input list.",
    "code": "def lis(lst: list[int]) -> int:\n    n = len(lst)\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if lst[i] > lst[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)",
    "tests": [
        "assert lis([10, 22, 9, 33, 21, 50, 41, 60]) == 5",
        "assert lis([1, 2, 3, 4, 5]) == 5",
        "assert lis([-1, -2, -3, -4, -5]) == 1",
        "assert lis([10, 20, 30, 40, 50]) == 5"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "SPOJ"
}