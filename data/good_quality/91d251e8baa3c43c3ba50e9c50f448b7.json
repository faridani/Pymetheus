{
    "title": "Counting Ways to Reach a City",
    "description": "You are given an array of distances between cities. Write a function that calculates the number of ways you can reach each city from the first city, considering only one-way roads.\n\n#### Function Signature\n```python\ndef count_ways(dists: list[int]) -> list[int]:\n```\n\n#### Input\n- `dists` (list[int]): A list of distances between cities. The distance at index `i` is the distance from city 0 to city `i`.\n\n#### Output\n- Returns a list of integers, where each integer at index `i` represents the number of ways you can reach city `i` from the first city.",
    "code": "from math import factorial\n\ndef count_ways(dists: list[int]) -> list[int]:\n    def choose(n: int, k: int) -> int:\n        if 0 <= k <= n:\n            return factorial(n) // (factorial(k) * factorial(n - k))\n        else:\n            raise ValueError('k must be between 0 and n inclusive')\n\n    ways = [1]\n    for dist in dists:\n        new_ways = [\n            choose(ways[i - 1], 0) + choose(ways[i - 1], 1) for i in range(dist + 1)\n        ]\n        ways = new_ways\n    return ways",
    "tests": [
        "assert count_ways([3, 2, 5]) == [1, 2, 4]",
        "assert count_ways([]) == [1]",
        "assert count_ways([7]) == [1]",
        "assert count_ways([1, 2, 3, 4, 5]) == [1, 2, 4, 7]"
    ],
    "difficulty": "medium",
    "model": "llama3:latest",
    "style": "CodeChef"
}