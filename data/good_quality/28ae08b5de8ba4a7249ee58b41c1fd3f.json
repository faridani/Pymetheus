{
    "title": "Maximal Sum Contiguous Subarray",
    "description": "Given an array of integers, find the maximum sum of a contiguous subarray within the given array.\n\n#### Function Signature\n```python\ndef maximal_sum(arr: list[int]) -> int:\n```\n\n#### Input\n- `arr` (list[int]): A list of integers.\n\n#### Output\n- Returns the maximum sum of a contiguous subarray within the input array.",
    "code": "\nimport numpy as np\n\ndef maximal_sum(arr: list[int]) -> int:\n    n = len(arr)\n    max_ending_here = max_so_far = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far",
    "tests": [
        "assert maximal_sum([-2,-3,-1]) == 1",
        "assert maximal_sum([1, -3, 2, 3, -1]) == 6",
        "assert maximal_sum([0,-1,0,0,0,0,10,12]) == 21"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "Exercism"
}