{
    "title": "Hard: Optimal Path in a Grid",
    "description": "You are given a grid of size `m x n` containing non-negative integers. Each cell represents the cost to travel through that cell.  Your task is to find the minimum cost path from the top-left corner (0, 0) to the bottom-right corner (m-1, n-1). You can only move right or down at each step.\n\n#### Function Signature\n```python\ndef min_path_cost(grid: list[list[int]]) -> int:\n```\n\n#### Input\n- `grid` (list[list[int]]): A 2D list representing the grid of costs.\n\n#### Output\n- Returns an integer representing the minimum cost to reach the bottom-right corner from the top-left corner.",
    "code": "def min_path_cost(grid: list[list[int]]) -> int:\n    m, n = len(grid), len(grid[0])\n    dp = [[float('inf')] * (n + 1) for _ in range(m + 1)]\n    dp[0][1] = 0\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i-1][j-1]\n    return dp[m][n]",
    "tests": [
        "assert min_path_cost([[1, 3, 1],[1, 5, 1],[4, 2, 1]]) == 7",
        "assert min_path_cost([[1,2,3],[4,8,2],[1,5,3]]) == 11",
        "assert min_path_cost([[0,1,0],[1,0,1],[0,1,0]]) == 2"
    ],
    "difficulty": "super hard",
    "model": "gemma2:27b",
    "style": "ACM-ICPC"
}