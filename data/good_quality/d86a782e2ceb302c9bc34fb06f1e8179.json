{
    "title": "Maximal Sum of Subarray (Hard)",
    "description": "A subarray of an array is a contiguous segment of that array. Given a 2D array of integers, find the maximum sum of a subarray within the given 2D array.\n\n#### Function Signature\n```python\ndef maximal_sum_2d(arr: list[list[int]]) -> int:\n```\n\n#### Input\n- `arr` (list[list[int]]): A 2D array of integers, where each inner list represents a row in the array.\n\n#### Output\n- Returns an integer representing the maximum sum of a subarray within the given 2D array.",
    "code": "",
    "\nimport heapq\n\ndef maximal_sum_2d(arr: list[list[int]]) -> int:\n    # Find all possible subarrays\n    all_subarrays = []\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            for k in range(len(arr[0])):\n                for end_j in range(k, len(arr[0])):\n                    subarray_sum = sum(arr[i][k:end_j+1])\n                    all_subarrays.append(subarray_sum)\n\n    # Use a priority queue to find the maximum sum\n    max_heap = []\n    heapq.heapify(max_heap)\n    for num in all_subarrays:\n        if len(max_heap) < 1000:  # To avoid stack overflow\n            heapq.heappush(max_heap, -num)\n        else:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, -num)\n\n    return -max_heap[0]": "",
    "tests": [
        "assert maximal_sum_2d([[-1, 2, -3], 1, 3, -2]) == 7",
        "assert maximal_sum_2d([[5, 6], [10, 9]]) == 19",
        "assert maximal_sum_2d([[-1, 2, -3, 4], [-1, 5, -6, 7]]) == 16",
        "assert maximal_sum_2d([]) == None"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "Daily Coding Problem"
}