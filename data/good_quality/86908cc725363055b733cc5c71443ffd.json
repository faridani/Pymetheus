{
    "title": "Counting Islands",
    "description": "Given an array of strings, each representing a grid cell, find the number of islands. An island is defined as any sequence of adjacent cells that contain only '1's.\n\n#### Function Signature\n```python\ndef count_islands(grid: list[str]) -> int:\n```\n\n#### Input\n- `grid` (list[str]): A 2D grid represented as a list of strings, where each string contains characters '0' and '1', indicating land ('1') or water ('0'). The grid may have any number of rows and columns.\n\n#### Output\n- Returns the total number of islands in the given grid.",
    "code": "\nimport re\n\ndef count_islands(grid: list[str]) -> int:\n    if not grid:\n        return 0\n    \n    num_rows, num_cols = len(grid), len(grid[0])\n    visited = [[False for _ in range(num_cols)] for _ in range(num_rows)]\n    \n    def dfs(row: int, col: int) -> None:\n        if row < 0 or row >= num_rows or col < 0 or col >= num_cols or visited[row][col] or grid[row][col] == '0':\n            return\n        \n        visited[row][col] = True\n        for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nr, nc = row + dr, col + dc\n            if 0 <= nr < num_rows and 0 <= nc < num_cols and not visited[nr][nc] and grid[nr][nc] == '1':\n                dfs(nr, nc)\n    \n    count = 0\n    for row in range(num_rows):\n        for col in range(num_cols):\n            if not visited[row][col] and grid[row][col] == '1':\n                dfs(row, col)\n                count += 1\n    \n    return count",
    "tests": [
        "assert count_islands([['1', '1'], ['1', '0']]) == 2",
        "assert count_islands([['0', '1', '0'], ['1', '1', '0'], ['0', '1', '1']]) == 3",
        "assert count_islands([]) == 0",
        "assert count_islands([['0', '0', '0']]) == 0"
    ],
    "difficulty": "medium",
    "model": "llama3:latest",
    "style": "ICPC"
}