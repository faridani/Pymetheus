{
    "title": "Minimum Cost to Make All Pairs of Strings Anagrams",
    "description": "Write a function `min_cost` that takes two lists of strings `words1` and `words2` as input. The function should return the minimum number of operations (insertions, deletions, or substitutions) required to make all pairs of strings from `words1` and `words2` anagrams.\n\n#### Function Signature\n```python\ndef min_cost(words1: list[str], words2: list[str]) -> int:\n```\n\n#### Input\n- `words1` (list[str]): A list of strings.\n- `words2` (list[str]): A list of strings.\n\n#### Output\n- Returns the minimum number of operations required to make all pairs of strings from `words1` and `words2` anagrams.",
    "code": "import collections\nfrom typing import List, Dict, Tuple\n\ndef min_cost(words1: List[str], words2: List[str]) -> int:\n    # Create a hashmap for word frequencies in both lists\n    freq_map = {}\n    for word in words1 + words2:\n        if word not in freq_map:\n            freq_map[word] = 0\n        freq_map[word] += 1\n    anagram_count = sum(count * (count - 1) // 2 for count in freq_map.values())\n    # Calculate the minimum number of operations required to make all pairs of strings anagrams\n    return len(words1) + len(words2) - 2 * anagram_count",
    "tests": [
        "assert min_cost(['abc', 'def'], ['ghi', 'jkl']) == 6",
        "assert min_cost(['a'], ['b']) == 3",
        "assert min_cost(['', ''], ['', '']) == 4"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "ACM-ICPC"
}