{
    "title": "Maximum Sum of Increasing Subsequence",
    "description": "A sequence is considered increasing if each term is greater than or equal to the previous term. The maximum sum of an increasing subsequence is defined as the sum of all elements in the longest possible increasing subsequence.\n\n#### Function Signature\n```python\ndef max_increasing_subsequence_sum(arr: list[int]) -> int:\n```\n\n#### Input\n- `arr` (list[int]): A list of integers where each element represents a value in the sequence.\n\n#### Output\n- Returns the maximum sum of an increasing subsequence in the input array.",
    "code": "\nimport math\n\ndef max_increasing_subsequence_sum(arr: list[int]) -> int:\n    n = len(arr)\n    \n    # Initialize dp table\n    dp = [0] * (n + 1)\n    prev_idx = [-1] * (n + 1)\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]:\n                dp[i] = dp[j] + arr[i]\n                prev_idx[i] = j\n\n    max_sum = 0\n    curr_idx = n - 1\n    while curr_idx != -1:\n        max_sum += arr[curr_idx]\n        curr_idx = prev_idx[curr_idx]\n\n    return max_sum",
    "tests": [
        "assert max_increasing_subsequence_sum([10, 70, 40, 30]) == 100",
        "assert max_increasing_subsequence_sum([-2, 3, -1, 5, -3, 2, 1, 3, 1, 4]) == 12",
        "assert max_increasing_subsequence_sum([1, 2, 3, 4, 5]) == 15"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "CodeWars"
}