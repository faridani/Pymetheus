{
    "title": "'Anagram Detector (Hard)'",
    "description": "An anagram is a word or phrase that can be formed by rearranging the letters of another word or phrase, using all the original letters exactly once. Write a function `find_anagrams` that finds all the anagrams of a given string.\n\n#### Function Signature\n```python\ndef find_anagrams(s: str) -> list[str]:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns a list of all possible anagrams of the input string, sorted in ascending order. The returned list should only contain strings that can be formed by rearranging the letters of the input string exactly once.",
    "code": "import collections\n\ndef find_anagrams(s: str) -> list[str]:\n    # Create a dictionary to count each letter in the input string\n    char_count = collections.Counter(c for c in s if c not in ['.', ',', '!', '?'])\n    \n    # Initialize an empty list to store the results\n    results = []\n    \n    # Iterate through all possible character combinations that can be formed with the given letters\n    for length in range(1, len(s) + 1):\n        # Generate all permutations of a given length\n        for combination in itertools.permutations(list(s), length):\n            # Check if the combination is an anagram and has no repeated characters\n            if collections.Counter(combination) == char_count and len(set(combination)) == length:\n                results.append(''.join(combination))\n    \n    # Return the sorted list of anagrams\n    return sorted(results)",
    "tests": [
        "assert find_anagrams(\"listen\") == ['enlist', 'silent']",
        "assert find_anagrams(\"abcde\") == ['abced', 'dcabe', 'edcba']",
        "assert find_anagrams(\"hello world\") == []"
    ],
    "difficulty": "insanely difficult",
    "model": "mistral:latest",
    "style": "Google Code Jam"
}