{
    "title": "Hard: Scheduling Meetings",
    "description": "Given a list of meeting requests with start and end times, and a set of constraints on the order in which meetings should be scheduled, write a function `schedule_meetings` that schedules the meetings according to these constraints.\n\n#### Function Signature\n```python\ndef schedule_meetings(meeting_requests: List[Tuple[int, int]], constraints: List[Tuple[str, str]]) -> List[Tuple[int, int]]:\n```\n\n#### Input\n- `meeting_requests` (List[Tuple[int, int]]): A list of tuples representing meeting requests. Each tuple contains the start and end times of a meeting in minutes.\n- `constraints` (List[Tuple[str, str]]): A list of tuples representing constraints on the order in which meetings should be scheduled. Each tuple contains two strings, each describing a meeting request.\n\n#### Output\n- Returns a list of tuples representing the ordered schedule of meetings. Each tuple contains the start and end times of a meeting in minutes.",
    "code": "\nimport heapq\nfrom typing import List, Tuple\n\ndef schedule_meetings(meeting_requests: List[Tuple[int, int]], constraints: List[Tuple[str, str]]) -> List[Tuple[int, int]]:\n    # Create a priority queue to store the meeting requests\n    pq = []\n    for start, end in meeting_requests:\n        heapq.heappush(pq, (start, end))\n\n    # Initialize the scheduled meetings list\n    scheduled_meetings = []\n\n    while pq:\n        # Get the earliest meeting request from the constraint\n        earliest_constraint = None\n        for constraint in constraints:\n            if earliest_constraint is None or min(meeting_requests.index((int(x), int(y))) for x, y in [(constraint[0], constraint[1]), (constraint[1], constraint[0])]) < min(meeting_requests.index((x, y)) for x, y in [earliest_constraint]):\n                earliest_constraint = constraint\n\n        # Get the start and end times of the earliest meeting request\n        start_time, end_time = earliest_constraint[0].split('-'), earliest_constraint[1].split('-')\n        start_time, end_time = int(start_time[0]), int(end_time[0])\n\n        # Schedule the meeting request if it does not conflict with any previously scheduled meetings\n        while pq and (pq[0][0] < start_time or pq[0][1] > end_time):\n            heapq.heappop(pq)\n\n        # Add the scheduled meeting to the list of scheduled meetings\n        if pq:\n            scheduled_meetings.append((int(earliest_constraint[0].split('-')[0]), int(earliest_constraint[1].split('-')[0])))\n\n    return scheduled_meetings",
    "tests": [
        "assert schedule_meetings([(9, 10), (5, 6), (4, 8)], [('A', 'B'), ('C', 'D')]) == [(9, 10), (10, 11)]",
        "assert schedule_meetings([(1, 3), (2, 5), (4, 7)], [('A', 'C'), ('B', 'D')]) == [(1, 3), (3, 5), (5, 7)]"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "Exercism"
}