{
    "title": "Hard: Minimum Window Substring",
    "description": "Given a string `s` and an integer `k`, find the minimum window substring that contains at least `k` distinct characters. If no such window exists, return an empty string.\n\n#### Function Signature\n```python\ndef min_window_substring(s: str, k: int) -> str:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, and other characters.\n- `k` (int): The minimum number of distinct characters required in the window substring.\n\n#### Output\n- Returns a string representing the minimum window substring that contains at least `k` distinct characters. If no such window exists, return an empty string.",
    "code": "\nimport re\n\ndef min_window_substring(s: str, k: int) -> str:\n    if len(set(re.sub(r'\\W+', '', s))) < k:\n        return ''\n\n    left = 0\n    right = 0\n    distinct_chars = set()\n    min_length = float('inf')\n    min_window = ''\n\n    while right < len(s):\n        if len(distinct_chars) >= k:\n            if right - left + 1 < min_length:\n                min_length = right - left + 1\n                min_window = s[left:right+1]\n            distinct_chars.pop(left)\n            left += 1\n        else:\n            distinct_chars.add(s[right])\n            right += 1\n\n    return min_window",
    "tests": [
        "assert min_window_substring('abcba', 2) == 'bcb'",
        "assert min_window_substring('ababccdeef', 3) == 'cdec'",
        "assert min_window_substring('aabbccdd', 2) == 'bb'"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "Exercism"
}