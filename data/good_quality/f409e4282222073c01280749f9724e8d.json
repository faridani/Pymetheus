{
    "title": "Maximum Island Size (Hard)",
    "description": "Given a 2D grid of size m x n where each cell contains either 0 (representing land) or 1 (representing water), write a function `max_island_size` that finds the maximum size of an island. An island is defined as a group of connected cells with no water between them.\n\n#### Function Signature\n```python\ndef max_island_size(grid: list[list[int]]) -> int:\n```\n\n#### Input\n- `grid` (list[list[int]]): A 2D grid where each cell contains either 0 (representing land) or 1 (representing water).\n\n#### Output\n- Returns the maximum size of an island in the given grid.",
    "code": "\ndef max_island_size(grid: list[list[int]]) -> int:\n    if not grid:\n        return 0\n\n    def dfs(i, j):\n        if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or grid[i][j] == 1:\n            return 0\n        grid[i][j] = 1\n        return 1 + dfs(i - 1, j) + dfs(i + 1, j) + dfs(i, j - 1) + dfs(i, j + 1)\n\n    max_size = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 0:\n                size = dfs(i, j)\n                max_size = max(max_size, size)\n    return max_size",
    "tests": [
        "assert max_island_size([[0,1],[0,0]]) == 2",
        "assert max_island_size([[0,0,1,1,1],[1,0,1,1,0],[0,0,0,1,0]]) == 4",
        "assert max_island_size([]) == 0",
        "assert max_island_size([[]]) == 0"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "CodeSignal"
}