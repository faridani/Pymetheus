{
    "title": "Easy: Number of Islands",
    "description": "Given an m x n grid filled with water ('0') and land ('1'), determine the number of islands. An island is a group of 1s that are connected 4-directionally (horizontally or vertically). You may change the value of any cell with water to land.\n\n#### Function Signature\n```python\ndef numIslands(grid: List[List[str]]) -> int:\n```\n\n#### Input\n- `grid` (List[List[str]]): A 2D list representing a grid filled with '0's and '1's.\n\n#### Output\n- Returns the number of islands in the given grid.",
    "code": "\nimport copy\n\ndef numIslands(grid: List[List[str]]) -> int:\n    if not grid:\n        return 0\n    \n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == '1':\n                dfs(grid, i, j)\n                count += 1\n\n    def dfs(grid, i, j):\n        if i<0 or j<0 or i>=len(grid) or j>=len(grid[0]) or grid[i][j] != '1':\n            return\n        \n        grid[i][j] = '0'\n        \n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        for direction in directions:\n            dfs(grid, i + direction[0], j + direction[1])\n\n    return count",
    "tests": [
        "assert numIslands([['1','1','1','1','0'],['1','1','0','1','0'],['1','1','0','0','0'],['0','0','0','0','0']]) == 1",
        "assert numIslands([['1','1','0','0','0'], ['0','1','0','0','0'], ['1','1','0','0','0'], ['0','0','0','0','0']]) == 3"
    ],
    "difficulty": "medium",
    "model": "llama3:latest",
    "style": "LeetCode"
}