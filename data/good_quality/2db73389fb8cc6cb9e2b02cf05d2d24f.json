{
    "title": "Max Sum of Subarray with Different Characters",
    "description": "Given a string `s` and an integer `k`, find the maximum sum of a subarray that contains at most `k` different characters. For example, if `s = \"abcabc\"` and `k = 2`, then one possible solution is to take the subarray `\"abc\"` which has a sum of `3` (since `'a' + 'b' + 'c' = 3`) and contains only two different characters.\n\n#### Function Signature\n```python\ndef max_sum_of_subarray_with_different_chars(s: str, k: int) -> int:\n```\n\n#### Input\n- `s` (str): A string that may contain any characters.\n- `k` (int): The maximum number of different characters allowed in the subarray.\n\n#### Output\n- Returns an integer representing the maximum sum of a subarray with at most `k` different characters.",
    "code": "\nimport collections\n\ndef max_sum_of_subarray_with_different_chars(s: str, k: int) -> int:\n    # Initialize the hashmap to store character frequencies\n    char_freq = collections.defaultdict(int)\n\n    # Initialize the maximum sum and the current sum\n    max_sum = 0\n    curr_sum = 0\n\n    # Initialize the left pointer of the sliding window\n    left = 0\n\n    # Iterate over the string with the right pointer of the sliding window\n    for right in range(len(s)):\n        # Add the character at the right pointer to the hashmap and increment the current sum\n        char_freq[s[right]] += 1\n        curr_sum += ord(s[right]) - ord('a') + 1\n\n        # While there are more than `k` different characters, move the left pointer to the right\n        while len(char_freq) > k:\n            # Remove the character at the left pointer from the hashmap and decrement the current sum\n            char_freq[s[left]] -= 1\n            if char_freq[s[left]] == 0:\n                del char_freq[s[left]]\n            curr_sum -= ord(s[left]) - ord('a') + 1\n            left += 1\n\n        # Update the maximum sum\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum",
    "tests": [
        "assert max_sum_of_subarray_with_different_chars('abcabc', 2) == 3",
        "assert max_sum_of_subarray_with_different_chars('abcdefghijklmnopqrstuvwxyz', 26) == 702",
        "assert max_sum_of_subarray_with_different_chars('', 0) == 0"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "Competitive Programming"
}