{
    "title": "Sieve of Eratosthenes",
    "description": "The Sieve of Eratosthenes is an ancient algorithm for finding all prime numbers up to a given limit. Write a function `sieve_of_eratosthenes` that takes an integer `n` as input and returns a list of all prime numbers from 2 to `n`. The function should use the Sieve of Eratosthenes algorithm.\n\n#### Function Signature\n```python\ndef sieve_of_eratosthenes(n: int) -> list:\n```\n\n#### Input\n- `n` (int): A positive integer that represents the upper limit for finding prime numbers.\n\n#### Output\n- Returns a list of prime numbers from 2 to `n`.",
    "code": "import math\ndef sieve_of_eratosthenes(n: int) -> list:\n    if n < 2:\n        return []\n    sieve = [True] * (n + 1)\n    sieve[0] = sieve[1] = False\n    for i in range(2, math.isqrt(n) + 1):\n        if sieve[i]:\n            for j in range(i * i, n + 1, i):\n                sieve[j] = False\n    return [p for p in range(2, n + 1) if sieve[p]]",
    "tests": [
        "assert len(sieve_of_eratosthenes(10)) == 4",
        "assert set(sieve_of_eratosthenes(20)) == {2, 3, 5, 7, 11, 13, 17, 19}",
        "assert sieve_of_eratosthenes(1) == []"
    ],
    "difficulty": "medium",
    "model": "llama3:latest",
    "style": "Exercism"
}