{
    "title": "Hard: Domino Chain",
    "description": "In the game of dominoes, a chain of connected dominoes can be formed by matching half-dominoes with half-dominoes. Write a function `domino_chain` that takes a list of dominoes as input and returns the maximum length of chain that can be formed.\n\n#### Function Signature\n```python\ndef domino_chain(dominoes: List[Tuple[int, int]]) -> int:\n```\n\n#### Input\n- `dominoes` (List[Tuple[int, int]]): A list of dominoes, where each domino is represented as a tuple of two integers, the first integer being the left half and the second integer being the right half.\n\n#### Output\n- Returns the maximum length of chain that can be formed from the given dominoes.",
    "code": "",
    "\nfrom typing import List, Tuple\n\ndef domino_chain(dominoes: List[Tuple[int, int]]) -> int:\n    # Sort the dominoes by their left half\n    dominoes.sort(key=lambda x: x[0])\n\n    # Initialize a list to store the maximum length of chain for each domino\n    dp = [1] * len(dominoes)\n\n    # Iterate over the dominoes and update the maximum length of chain\n    for i in range(1, len(dominoes)):\n        for j in range(i):\n            if abs(dominoes[i][0] - dominoes[j][0]) <= abs(dominoes[i][1] - dominoes[j][1]):\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    # Return the maximum length of chain\n    return max(dp)": "",
    "tests": [
        "assert domino_chain([(1, 2), (3, 4), (5, 6)]) == 2",
        "assert domino_chain([(1, 1), (1, 2), (2, 2), (3, 3)]) == 3",
        "assert domino_chain([(1, 2), (3, 4), (2, 3), (5, 6)]) == 3",
        "assert domino_chain([]) == 0"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "AtCoder"
}