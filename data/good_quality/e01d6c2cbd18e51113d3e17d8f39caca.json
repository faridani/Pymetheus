{
    "title": "Hard: Maximum Path Sum in a Binary Tree",
    "description": "Given the root of a binary tree, write a function `max_path_sum` that finds the maximum possible sum path from any node to its leaf nodes. The maximum path sum should be calculated by adding the values of all the nodes on this path.\n\n#### Function Signature\n```python\ndef max_path_sum(root: TreeNode) -> int:\n```\n\n#### Input\n- `root` (TreeNode): The root of a binary tree, where each node has an integer value and left and right child pointers.\n\n#### Output\n- Returns the maximum possible sum path from any node to its leaf nodes.",
    "code": "",
    "\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef max_path_sum(root: TreeNode) -> int:\n    max_sum = float('-inf')\n\n    def dfs(node):\n        nonlocal max_sum\n        if node is None:\n            return 0\n        \n        left_sum = max(dfs(node.left), 0)\n        right_sum = max(dfs(node.right), 0)\n\n        current_sum = node.val + left_sum + right_sum\n\n        max_sum = max(max_sum, current_sum)\n\n        return node.val + max(left_sum, right_sum)\n\n    dfs(root)\n    return max_sum": "",
    "tests": [
        "assert max_path_sum(TreeNode(1, TreeNode(2), TreeNode(3))) == 6",
        "assert max_path_sum(TreeNode(-10, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7)))) == 42",
        "assert max_path_sum(None) is None",
        "assert max_path_sum(TreeNode(5)) == 5"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "Facebook Hacker Cup"
}