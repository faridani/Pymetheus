{
    "title": "Eulerian Path Finder",
    "description": "An Eulerian path in a graph is a path that uses every edge exactly once. Write a function `find_eulerian_path` that takes as input an undirected graph represented as a dictionary where the keys are node names and the values are lists of neighboring nodes. The function should return a list representing the Eulerian path. If no such path exists, it returns an empty list.\n\n#### Function Signature\n```python\ndef find_eulerian_path(graph: dict) -> list:\n```\n\n#### Input\n- `graph` (dict): An undirected graph represented as a dictionary where the keys are node names and the values are lists of neighboring nodes.\n\n#### Output\n- Returns a list representing the Eulerian path. If no such path exists, it returns an empty list.",
    "code": "\nimport copy\n\ndef find_eulerian_path(graph: dict) -> list:\n    # Create a copy of the graph\n    graph_copy = copy.deepcopy(graph)\n    \n    # Initialize the path and visited nodes\n    path = []\n    visited = set()\n    \n    def dfs(node):\n        if node not in visited:\n            visited.add(node)\n            \n            for neighbor in graph_copy[node]:\n                if neighbor not in visited:\n                    dfs(neighbor)\n            graph_copy[node] = []\n    \n    # Find an arbitrary starting point and start the DFS\n    start_node = next(iter(graph_copy))\n    dfs(start_node)\n    \n    # Reconstruct the Eulerian path by tracing back from the last node\n    current_node = list(visited)[-1]\n    while current_node:\n        for neighbor in graph_copy[current_node]:\n            if neighbor not in visited:\n                break\n        else:\n            current_node = None\n            break\n        \n        if current_node:\n            path.append(current_node)\n            current_node = None\n        \n    # Return the Eulerian path in reverse order\n    return path[::-1]",
    "tests": [
        "assert find_eulerian_path({'A': ['B', 'C'], 'B': ['A', 'D'], 'C': ['A', 'F'], 'D': ['B'], 'E': ['F'], 'F': ['C', 'E']}) == ['F', 'E', 'C', 'A', 'B', 'D']",
        "assert find_eulerian_path({'A': ['B', 'C'], 'B': ['A'], 'C': ['A']}) == []",
        "assert find_eulerian_path({'A': ['B', 'C'], 'B': ['A', 'D'], 'C': ['A'], 'D': ['B']}) == ['D', 'B', 'A', 'C']",
        "assert find_eulerian_path({'A': ['B'], 'B': ['A']}) == []"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "Codecademy"
}