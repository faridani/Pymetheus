{
    "title": "Medium: Prime Number Generator",
    "description": "\nA prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Write a function `prime_generator(n: int)` which takes an integer n as input and returns all prime numbers less than or equal to n.\n\n#### Function Signature\n```python\ndef prime_generator(n: int) -> list:\n```\n\n#### Input\n- `n` (int): A positive integer, where 1 \u2264 n \u2264 10^6\n\n#### Output\n- Returns a list of prime numbers less than or equal to n.\n\n#### Constraints and Hints\nUse the Sieve of Eratosthenes algorithm for finding all primes up to a given limit efficiently.",
    "code": "import math\n\ndef sieve_of_eratosthenes(n: int) -> list:\n    # Create a boolean array \"prime[0..n]\" and initialize all entries it as true. \n    # A value in prime[i] will finally be false if i is Not a prime, else true.\n    primes = [True for _ in range(n+1)]\n    p = 2\n    while (p * p <= n):\n        if (primes[p]):\n            for i in range(p*p, n+1, p):\n                primes[i] = False\n        p += 1\n    # Collect all prime numbers\n    prime_numbers = [p for p in range(2, n) if primes[p]]\n    return prime_numbers\n\ndef prime_generator(n: int) -> list:\n    return sieve_of_eratosthenes(n)",
    "tests": [
        "assert prime_generator(10) == [2, 3, 5, 7]",
        "assert prime_generator(20) == [2, 3, 5, 7, 11, 13, 17, 19]",
        "assert prime_generator(1) == []",
        "assert prime_generator(18) == [2, 3, 5, 7, 11, 13, 17]"
    ],
    "difficulty": "medium",
    "model": "qwen2:7b",
    "style": "CodeChef"
}