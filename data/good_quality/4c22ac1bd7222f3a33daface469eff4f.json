{
    "title": "Medium: Counting Subarrays with Given XOR",
    "description": "Given an array of integers `nums` and an integer `k`, write a function `count_subarrays` that counts the number of subarrays in `nums` whose elements' bitwise XOR is equal to `k`. A subarray is defined as a contiguous sequence of one or more elements within an array.\n\n#### Function Signature\n```python\ndef count_subarrays(nums: List[int], k: int) -> int:\n```\n\n#### Input\n- `nums` (List[int]): A list of integers.\n- `k` (int): The target XOR value.\n\n#### Output\n- Returns the count of subarrays whose elements' bitwise XOR is equal to `k`.",
    "code": "",
    "from collections import defaultdict\nfrom typing import List\n\ndef count_subarrays(nums: List[int], k: int) -> int:\n    xor = 0\n    count = 0\n    prefix_xors = defaultdict(int)\n    prefix_xors[0] = 1\n\n    for num in nums:\n        xor ^= num\n        if xor ^ k in prefix_xors:\n            count += prefix_xors[xor ^ k]\n        prefix_xors[xor] += 1\n\n    return count": "",
    "tests": [
        "assert count_subarrays([4, 2, 2, 6, 4], 6) == 4",
        "assert count_subarrays([5, 6, 7, 8, 9], 5) == 2",
        "assert count_subarrays([10, 12, 13, 14, 15], 0) == 0"
    ],
    "difficulty": "medium",
    "model": "codestral:22b",
    "style": "Google Code Jam"
}