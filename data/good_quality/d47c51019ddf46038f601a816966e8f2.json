{
    "title": "'Palindromic Substrings Count Finder (Hard)'",
    "description": "Write a function `count_palindromes` that takes a string as input and returns the count of all palindromic substrings within it. A palindrome is a sequence of characters that reads the same forwards and backwards, regardless of spaces or punctuation. Palindromes may be non-contiguous within the given string.\n\n#### Function Signature\n```python\ndef count_palindromes(s: str) -> int:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns an integer representing the total number of palindromic substrings in the input string.",
    "code": "import re\ndef count_palindromes(s: str) -> int:\n    # Find all possible substrings\n    substrings = [''.join(sub[i:j]) for i in range(len(s)) for j in range(i+1, len(s)+1)]\n    # Filter out non-palindromic substrings\n    palindromes = list(filter(lambda x: x == x[::-1], substrings))\n    # Remove duplicate palindromes and count them\n    return len(list(set(palindromes)))",
    "tests": [
        "assert count_palindromes(\"A man, a plan, a canal, Panama\") == 16",
        "assert count_palindromes(\"racecar\") == 3",
        "assert count_palindromes(\"hello\") == 0",
        "assert count_palindromes(\"No 'x' in Nixon\") == 2"
    ],
    "difficulty": "super hard",
    "model": "mistral:latest",
    "style": "HackerEarth"
}