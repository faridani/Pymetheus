{
    "title": "Counting Inversions",
    "description": "Given a list of integers, find the number of inversions. An inversion is when two elements are in the wrong order and should be swapped.\n\n#### Function Signature\n```python\ndef count_inversions(lst: list[int]) -> int:\n```\n\n#### Input\n- `lst` (list[int]): A list of integers that may contain negative numbers, zero or positive numbers.\n\n#### Output\n- Returns the number of inversions in the input list.",
    "code": "def count_inversions(lst: list[int]) -> int:\n    if len(lst) <= 1:\n        return 0\n    left_half = lst[:len(lst)//2]\n    right_half = lst[len(lst)//2:]\n    left_count = count_inversions(left_half)\n    right_count = count_inversions(right_half)\n    crossed_count = merge_and_count(left_half, right_half)\n    return left_count + right_count + crossed_count\n\ndef merge_and_count(left: list[int], right: list[int]) -> int:\n    merged = []\n    i = j = 0\n    inversions = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            j += 1\n            inversions += len(left) - i\n    merged.extend(left[i:])\n    merged.extend(right[j:])\n    return inversions",
    "tests": [
        "assert count_inversions([2,3,8,7,6,5,4,1,0]) == 15",
        "assert count_inversions([-5,-3,2,0,1]) == 3",
        "assert count_inversions([1,2,3,4,5]) == 0",
        "assert count_inversions([]) == 0"
    ],
    "difficulty": "hard",
    "model": "llama3:latest",
    "style": "Codeforces"
}