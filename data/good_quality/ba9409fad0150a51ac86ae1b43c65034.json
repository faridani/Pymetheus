{
    "title": "[Medium] Sum of Subsets",
    "description": "Given a list of integers and a target sum, write a function that finds all unique subsets of the list where the sum of elements is equal to the target sum. The solution set must not contain duplicate subsets.\n\n#### Function Signature\n```python\ndef find_subsets(nums: List[int], target: int) -> List[List[int]]:\n```\n\n#### Input\n- `nums` (List[int]): A list of integers.\n- `target` (int): The target sum to look for in the subsets.\n\n#### Output\n- Returns a list of unique subsets of `nums` where the sum of elements is equal to `target`. Each subset should be sorted and the overall solution set should be sorted lexicographically.",
    "code": "",
    "from typing import List\ndef find_subsets(nums: List[int], target: int) -> List[List[int]]:\n    def backtrack(start, path, target):\n        if target == 0:\n            res.append(path[:])\n            return\n        for i in range(start, len(nums)):\n            if i > start and nums[i] == nums[i-1]:\n                continue\n            if target - nums[i] < 0:\n                break\n            path.append(nums[i])\n            backtrack(i + 1, path, target - nums[i])\n            path.pop()\n\n    nums.sort()\n    res = []\n    backtrack(0, [], target)\n    return res": "",
    "tests": [
        "assert find_subsets([1,2,2,3], 4) == [[1, 3], [2, 2]]",
        "assert find_subsets([10, 1, 2, 7, 6, 1, 5], 8) == [[1, 1, 6], [1, 2, 5], [1, 7], [2, 6]]"
    ],
    "difficulty": "medium",
    "model": "codestral:22b",
    "style": "SPOJ"
}