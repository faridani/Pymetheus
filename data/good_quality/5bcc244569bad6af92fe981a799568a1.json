{
    "title": "Hard: Maximal Sum of Subarrays Within a Window",
    "description": "A subarray of an array is a sequence of consecutive elements within the array. A window of size w is a contiguous segment of the array with length w. We are given an integer array and two integers, k and w. Our task is to find the maximum sum of all possible windows of size w, considering only those that have at least k elements.\n\n#### Function Signature\n```python\ndef max_window_sum(arr: list[int], k: int, w: int) -> int:\n```\n\n#### Input\n- `arr` (list[int]): An integer array with arbitrary length.\n- `k` (int): The minimum number of elements required in a window.\n- `w` (int): The size of the window.\n\n#### Output\n- Returns the maximum sum of all possible windows of size w, considering only those that have at least k elements.\n\nExample: For the array [1, 2, 3, 4, 5] and k = 2, w = 3, the function should return 9 (the window [3, 4, 5] has a sum of 12, but since it has less than k elements, we ignore it; the window [1, 2, 3] has a sum of 6, and the window [4, 5] has a sum of 9, so the maximum sum is 9).",
    "code": "from typing import List\n\ndef max_window_sum(arr: List[int], k: int, w: int) -> int:\n    n = len(arr)\n    if w > n or k > n // w:\n        return -1\n    max_sum = float('-inf')\n    for i in range(n - w + 1):\n        window_sum = sum(arr[i:i+w])\n        if window_sum >= k*w and window_sum > max_sum:\n            max_sum = window_sum\n    return max_sum if max_sum != float('-inf') else -1",
    "tests": [
        "assert max_window_sum([1, 2, 3, 4, 5], 2, 3) == 9",
        "assert max_window_sum([-1000, -900, -800, -700], 1, 3) == 600",
        "assert max_window_sum([-10, -20, -30, -40], 2, 2) == -40",
        "assert max_window_sum([5], 1, 1) == 5"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "ICPC"
}