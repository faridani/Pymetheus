{
    "title": "Maximum Sum Subarray (Hard)",
    "description": "Write a function `max_sum_subarray` that finds the maximum sum of any subarray within a given array of integers.\n\n#### Function Signature\n```python\ndef max_sum_subarray(arr: list[int)) -> int:\n```\n\n#### Input\n- `arr` (list[int]): A list of integers representing the array to find the maximum sum subarray in.\n\n#### Output\n- Returns an integer representing the maximum sum of any subarray within the input array.",
    "code": "",
    "\nimport typing as t\n\ndef max_sum_subarray(arr: t.List[int]) -> int:\n    n = len(arr)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        dp[i][i] = arr[i]\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if arr[i] < 0:\n                dp[i][j] = max(dp[i][j], dp[i + 1][j])\n            else:\n                dp[i][j] = max(dp[i][j], dp[i + 1][j], dp[i][j - 1] + arr[i])\n    return dp[0][n - 1]": "",
    "tests": [
        "assert max_sum_subarray([-2, 3, -2]) == 3",
        "assert max_sum_subarray([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45",
        "assert max_sum_subarray([-1, 0, 1, 2, -1, -4, 2, 1, 0]) == 6"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "HackerEarth"
}