{
    "title": "Permutation Checker",
    "description": "Given a list of strings, check if there exists a permutation of the strings that forms a valid English sentence. A string is considered valid if it does not contain any special characters and only contains letters and spaces.\n\n#### Function Signature\n```python\ndef has_valid_permutation(lst: List[str]) -> bool:\n```\n\n#### Input\n- `lst` (List[str]): A list of strings that may contain special characters, letters, and spaces.\n\n#### Output\n- Returns `True` if there exists a permutation of the input strings that forms a valid English sentence, `False` otherwise.",
    "code": "\nimport re\nfrom itertools import permutations\n\ndef has_valid_permutation(lst: list) -> bool:\n    def is_valid_sentence(s: str) -> bool:\n        # Check if the string contains any special characters or non-alphanumeric characters\n        if not re.match('^[a-zA-Z\\s]+$', s):\n            return False\n        \n        # Split the sentence into words and check each word for validity\n        words = s.split()\n        for word in words:\n            if not re.match('^[a-zA-Z]+$', word):\n                return False\n        \n        return True\n    \n    # Generate all permutations of the input strings\n    perms = list(permutations(lst))\n    \n    # Check each permutation to see if it forms a valid English sentence\n    for perm in perms:\n        s = ' '.join(perm)\n        if is_valid_sentence(s):\n            return True\n    \n    return False",
    "tests": [
        "assert has_valid_permutation(['Hello', 'World']) == True",
        "assert has_valid_permutation(['Hello', 'World!', '@']) == False",
        "assert has_valid_permutation(['The', 'quick', 'brown', 'fox', 'jumps']) == True",
        "assert has_valid_permutation(['This', 'is', 'a', 'test', 'sentence']) == True"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "Interview Query"
}