{
    "title": "Hard: Prime Factorization of a Large Number",
    "description": "Prime factorization is the decomposition of a positive integer into its prime factors. For example, the number 12 can be factored as 2^2 * 3, which means it has two 2s and one 3. Write a function `prime_factorization` that takes an integer `n` as input and returns a list of prime factors of `n`. The function should work efficiently for large numbers.\n\n#### Function Signature\n```python\ndef prime_factorization(n: int) -> list:\n```\n\n#### Input\n- `n` (int): A positive integer to be factored.\n\n#### Output\n- Returns a list of prime factors of the input number. The list should not contain any duplicates and should be in ascending order.",
    "code": "\nimport math\n\ndef is_prime(m: int) -> bool:\n    if m < 2:\n        return False\n    for i in range(2, int(math.sqrt(m)) + 1):\n        if m % i == 0:\n            return False\n    return True\n\ndef prime_factorization(n: int) -> list:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if is_prime(i) and n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    if n > 1:\n        factors.append(n)\n    return factors",
    "tests": [
        "assert prime_factorization(315) == [3, 3, 5, 7]",
        "assert prime_factorization(1000000) == [2, 2, 2, 2, 5, 5, 11, 37, 41, 71]",
        "assert prime_factorization(23) == [23]"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "Project Euler"
}