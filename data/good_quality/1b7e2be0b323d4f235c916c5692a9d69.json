{
    "title": "Maximum Subarray",
    "description": "Given an array of integers, find the maximum sum of a subarray (a contiguous segment) within that array.\n\n#### Function Signature\n```python\ndef max_subarray_sum(arr: list[int)) -> int:\n```\n\n#### Input\n- `arr` (list[int]): A list of integers.\n\n#### Output\n- Returns the maximum sum of a subarray within the input array.",
    "code": "",
    "\nimport numpy as np\n\ndef max_subarray_sum(arr: list[int]) -> int:\n    # Calculate the cumulative sum of the array\n    cum_sum = [0] * (len(arr) + 1)\n    for i in range(len(arr)):\n        cum_sum[i + 1] = cum_sum[i] + arr[i]\n    \n    # Initialize the maximum sum and the current sum to negative infinity\n    max_sum = -float('inf')\n    curr_sum = 0\n    \n    # Iterate over the array to find the maximum subarray sum\n    for i in range(len(arr)):\n        # Update the current sum by subtracting the element at index `i` from the cumulative sum at index `i + 1`\n        curr_sum = cum_sum[i + 1] - arr[i]\n        \n        # Update the maximum sum if the current sum is greater\n        max_sum = max(max_sum, curr_sum)\n    \n    return max_sum": "",
    "tests": [
        "assert max_subarray_sum([-2,1,-3,4,-1,2,1,-5,4]) == 6",
        "assert max_subarray_sum([1, -2, 3, 10, -4, 7, 2, -5]) == 12",
        "assert max_subarray_sum([0, -1, 3, 2, -1, 2, 3, -2, 1]) == 6"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "HackerRank"
}