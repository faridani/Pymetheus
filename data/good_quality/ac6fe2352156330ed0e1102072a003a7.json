{
    "title": "Max Subarray Sum (Hard)",
    "description": "Given an array of integers, find the maximum sum of a subarray within the given array. A subarray is a contiguous segment of the original array.\n\n#### Function Signature\n```python\ndef max_subarray_sum(arr: list) -> int:\n```\n\n#### Input\n- `arr` (list): A list of integers representing the input array.\n\n#### Output\n- Returns the maximum sum of a subarray within the given array.",
    "code": "\nimport itertools\n\ndef max_subarray_sum(arr: list) -> int:\n    if not arr:\n        return 0\n\n    # Initialize maximum sum and current sum to the first element in the array\n    max_sum = current_sum = arr[0]\n    \n    for num in arr[1:]:\n        # Calculate the new current sum by adding the current number to the previous sum\n        current_sum = max(num, current_sum + num)\n        \n        # Update the maximum sum if the current sum is greater than the maximum sum\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum",
    "tests": [
        "assert max_subarray_sum([-2,1,-3,4,-1,2,1,-5,4]) == 6",
        "assert max_subarray_sum([1, -1, 5, -3, 2]) == 7",
        "assert max_subarray_sum([]) == 0"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "HackerRank"
}