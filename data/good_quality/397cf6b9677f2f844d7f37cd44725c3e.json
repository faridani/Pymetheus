{
    "title": "Maximum Island Size",
    "description": "In a given grid, you are allowed to move in any of the eight directions (up, down, left, right, and the four diagonal directions). You can consider this as a graph problem. Write a function `max_island_size` that finds the size of the largest island in the given grid.\n\n#### Function Signature\n```python\ndef max_island_size(grid: list[list[int]]) -> int:\n```\n\n#### Input\n- `grid` (list[list[int]]): A 2D list representing a graph, where 0 represents an empty cell and 1 represents an occupied cell.\n\n#### Output\n- Returns the size of the largest island in the given grid.",
    "code": "",
    "\nimport collections\n\ndef max_island_size(grid: list[list[int]]) -> int:\n    if not grid or not grid[0]:\n        return 0\n\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1), (1, 1), (-1, -1), (1, -1), (-1, 1)]\n    max_size = 0\n    visited = set()\n\n    def dfs(i: int, j: int) -> int:\n        if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or (i, j) in visited or grid[i][j] == 0:\n            return 0\n        visited.add((i, j))\n        size = 1\n        for direction in directions:\n            new_i, new_j = i + direction[0], j + direction[1]\n            size += dfs(new_i, new_j)\n        return size\n\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1 and (i, j) not in visited:\n                max_size = max(max_size, dfs(i, j))\n\n    return max_size": "",
    "tests": [
        "assert max_island_size([[0, 0, 1], [0, 1, 0]]) == 4",
        "assert max_island_size([[1, 0], [0, 1]]) == 2",
        "assert max_island_size([[1, 0], [1, 0]]) == 2",
        "assert max_island_size([[0, 0, 0], [0, 1, 0], [0, 0, 0]]) == 1"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "Google Code Jam"
}