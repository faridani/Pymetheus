{
    "title": "Hard: Graph Coloring",
    "description": "Given a graph as an adjacency list, write a function that determines the minimum number of colors needed to color the vertices such that no two adjacent vertices have the same color. The function should return the minimum number of colors used.\n\n#### Function Signature\n```\ndef min_colors(graph: dict) -> int:\n```\n\n#### Input\n- `graph` (dict): A dictionary representing an adjacency list, where each key is a vertex and its corresponding value is a list of adjacent vertices.\n\n#### Output\n- Returns the minimum number of colors used to color the graph such that no two adjacent vertices have the same color.",
    "code": "",
    "\nimport collections\n\ndef min_colors(graph: dict) -> int:\n    colors = [0] * len(graph)\n    for node in graph:\n        seen = set()\n        for neighbor in graph[node]:\n            if colors[neighbor] not in seen:\n                seen.add(colors[neighbor])\n                if seen & set(range(len(graph))) == set():\n                    return len(graph)\n    return max(colors) + 1": "",
    "tests": [
        "assert min_colors({}) == 0",
        "assert min_colors({1: [], 2: [1], 3: [2, 3]}) == 3",
        "assert min_colors({1: [2], 2: [1], 3: [4], 4: [3]}) == 4",
        "assert min_colors({0: [1, 2], 1: [0, 2], 2: [0, 1, 3], 3: [2]}) == 5"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "Internationals Olympiad"
}