{
    "title": "Maximum Sum of Subarray",
    "description": "A description of the problem in string form, the description may contain function signature, input format, output format, constraints and hints. Example: Given an array of integers, find the maximum sum of a subarray (i.e., a contiguous sequence of elements) that does not exceed a given number K.\n\n#### Function Signature\n```python\ndef max_sum_subarray(arr: list[int], k: int) -> int:\n```\n\n#### Input\n- `arr` (list[int]): A list of integers.\n- `k` (int): The maximum sum of the subarray.\n\n#### Output\n- Returns an integer representing the maximum sum of a subarray that does not exceed K.",
    "code": "\nimport heapq\n\ndef max_sum_subarray(arr: list[int], k: int) -> int:\n    heap = []\n    for num in arr:\n        heapq.heappush(heap, -num)\n    total_sum = 0\n    while True:\n        if total_sum > k:\n            break\n        total_sum -= -heap[0]\n        if len(heap) > 1 and -2 * heap[0] <= heap[1]:\n            return total_sum\n        heapq.heappop(heap)",
    "tests": [
        "assert max_sum_subarray([1, 2, 3, 4, 5], 10) == 9",
        "assert max_sum_subarray([-1, -2, 0, 1, 2], 5) == 5",
        "assert max_sum_subarray([1, 2, 3, 4, 5], 15) == 15",
        "assert max_sum_subarray([-10, -9, 0, 1, 2], 8) == 7"
    ],
    "difficulty": "hard",
    "model": "llama3:latest",
    "style": "Google Code Jam"
}