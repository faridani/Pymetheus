{
    "title": "Longest Increasing Subsequence",
    "description": "A description of the problem in string form, the description may contain function signature, input format, output format, constraints and hints. Example: The Longest Increasing Subsequence (LIS) problem is a classic problem in computer science. Given an array of integers `arr`, write a function that finds the length of the longest increasing subsequence in `arr`. An increasing subsequence is a sequence of consecutive elements that are all strictly increasing.\n\n#### Function Signature\n```python\ndef lis_length(arr: list[int]) -> int:\n```\n\n#### Input\n- `arr` (list[int]): A list of integers.\n\n#### Output\n- Returns the length of the longest increasing subsequence in the input array.",
    "code": "def lis_length(arr: list[int]) -> int:\n    n = len(arr)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)",
    "tests": [
        "assert lis_length([10, 9, 2, 5, 3, 7, 101, 18]) == 4",
        "assert lis_length([0, 1, 2, 3, 4, 5]) == 6",
        "assert lis_length([-2147483648]) == 1"
    ],
    "difficulty": "hard",
    "model": "llama3:latest",
    "style": "CodeChef"
}