{
    "title": "Sudoku Solver (Hard)",
    "description": "Given a partially filled Sudoku grid, write a function that solves it using backtracking. A Sudoku grid is a 9x9 matrix divided into nine 3x3 sub-grids or 'regions.' Some values may be already filled in according to the standard Sudoku rules.\n\n#### Function Signature\n```python\ndef solve_sudoku(grid: list[list[int]]) -> bool:\n```\n\n#### Input\n- `grid` (list[list[int]]): A 9x9 grid where each cell is either an integer from 1 to 9 or 0 if the cell is empty.\n\n#### Output\n- Returns `True` if a solution exists, `False` otherwise.",
    "code": "",
    "\nimport copy\n\ndef solve_sudoku(grid: list[list[int]]) -> bool:\n    for i in range(9):\n        for j in range(9):\n            if grid[i][j] == 0:\n                for num in range(1, 10):\n                    if is_valid_move(grid, i, j, num):\n                        grid[i][j] = num\n                        if solve_sudoku(grid):\n                            return True\n                        grid[i][j] = 0\n                return False\n\n    return True\n\n\ndef is_valid_move(grid: list[list[int]], row: int, col: int, num: int) -> bool:\n    # Check the row\n    for i in range(9):\n        if grid[row][i] == num:\n            return False\n\n    # Check the column\n    for i in range(9):\n        if grid[i][col] == num:\n            return False\n\n    # Check the 3x3 region\n    start_row = row - row % 3\n    start_col = col - col % 3\n    for i in range(3):\n        for j in range(3):\n            if grid[start_row + i][start_col + j] == num:\n                return False\n\n    return True\n\n\n# Example usage\ngrid = [[5, 0, 0, 6, 0, 7, 0, 9, 8],\n        [0, 4, 0, 1, 3, 0, 2, 5, 0],\n        [0, 9, 6, 0, 0, 0, 7, 0, 1],\n        [0, 0, 0, 8, 0, 4, 0, 3, 0],\n        [2, 0, 0, 5, 9, 0, 1, 6, 0],\n        [8, 7, 0, 0, 0, 0, 0, 9, 4],\n        [0, 3, 0, 2, 1, 0, 5, 0, 0],\n        [0, 0, 1, 0, 6, 8, 0, 2, 0],\n        [7, 0, 4, 9, 0, 3, 0, 1, 5]]\n\nprint(solve_sudoku(grid))": "",
    "tests": [
        "assert solve_sudoku([[5, 0, 0, 6, 0, 7, 0, 9, 8],\n                            [0, 4, 0, 1, 3, 0, 2, 5, 0],\n                            [0, 9, 6, 0, 0, 0, 7, 0, 1],\n                            [0, 0, 0, 8, 0, 4, 0, 3, 0],\n                            [2, 0, 0, 5, 9, 0, 1, 6, 0],\n                            [8, 7, 0, 0, 0, 0, 0, 9, 4],\n                            [0, 3, 0, 2, 1, 0, 5, 0, 0],\n                            [0, 0, 1, 0, 6, 8, 0, 2, 0],\n                            [7, 0, 4, 9, 0, 3, 0, 1, 5]]) == True",
        "assert not solve_sudoku([[0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                   [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                   [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                   [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                   [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                   [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                   [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                   [0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                   [0, 0, 0, 0, 0, 0, 0, 0, 0]])"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "Internationals Olympiad"
}