{
    "title": "Easy: Number of Islands",
    "description": "Given an `m x n` grid filled with non-negative numbers, find the number of islands. Two cells are considered connected if they are adjacent, i.e., they share a common edge or corner.\n\n#### Function Signature\n```python\ndef num_islands(grid: List[List[int]]) -> int:\n```\n\n#### Input\n- `grid` (List[List[int]]): A 2D grid filled with non-negative numbers.\n\n#### Output\n- Returns the number of islands in the given grid. An island is a group of connected cells.",
    "code": "from typing import List\n\ndef num_islands(grid: List[List[int]]) -> int:\n    if not grid or not grid[0]:\n        return 0\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1 and (i == 0 or grid[i-1][j] == 0) and (j == 0 or grid[i][j-1] == 0):\n                dfs(grid, i, j)\n                count += 1\n    return count\n\ndef dfs(grid: List[List[int]], i: int, j: int) -> None:\n    if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == 0:\n        return\n    grid[i][j] = 0\n    dfs(grid, i-1, j)\n    dfs(grid, i+1, j)\n    dfs(grid, i, j-1)\n    dfs(grid, i, j+1)",
    "tests": [
        "assert num_islands([[0,0,1,0,0],[1,0,1,1,0],[0,1,1,1,0],[1,1,1,1,0]]) == 1",
        "assert num_islands([[1,1,0,0,0],[1,1,0,0,0],[0,0,1,0,0],[0,0,0,1,1]]) == 3",
        "assert num_islands([]) == 0",
        "assert num_islands([[1,1,0]]) == 2"
    ],
    "difficulty": "medium",
    "model": "llama3:latest",
    "style": "LeetCode"
}