{
    "title": "Easy: Counting Islands",
    "description": "You are given a 2D array of size n x m, representing a map where islands can be formed. The cells that contain '1' represent land and the cells that contain '0' represent water. Write a function `count_islands` that takes this 2D array as input and returns the number of distinct islands in the map.\n\n#### Function Signature\n```python\ndef count_islands(grid: list[list[int]]) -> int:\n```\n\n#### Input\n- `grid` (list[list[int]]): A 2D array where '1' represents land and '0' represents water.\n\n#### Output\n- Returns the number of distinct islands in the map.",
    "code": "def count_islands(grid: list[list[int]]) -> int:\n    if not grid or not grid[0]:\n        return 0\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                dfs(grid, i, j)\n                count += 1\n    return count\n\ndef dfs(grid: list[list[int]], i: int, j: int):\n    if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == 0:\n        return\n    grid[i][j] = 0\n    dfs(grid, i - 1, j)\n    dfs(grid, i + 1, j)\n    dfs(grid, i, j - 1)\n    dfs(grid, i, j + 1)",
    "tests": [
        "assert count_islands([[[0,0,1],[1,1,1],[1,0,0]]]) == 1",
        "assert count_islands([[[0,0,1],[1,1,1],[1,0,0]],[[1,1,1],[1,0,0],[1,0,0]]]) == 2",
        "assert count_islands([]) == 0",
        "assert count_islands([[0,0,0]]) == 0"
    ],
    "difficulty": "easy",
    "model": "llama3:latest",
    "style": "HackerEarth"
}