{
    "title": "Permutation Checker (Hard)",
    "description": "Given a list of integers, write a function `check_permutation` that checks if any two elements in the list are permutations of each other. A permutation is an arrangement of all the elements in a specific order. For example, [1, 2, 3] and [3, 2, 1] are permutations of each other.\n\n#### Function Signature\n```python\ndef check_permutation(lst: list[int]) -> bool:\n```\n\n#### Input\n- `lst` (list[int]): A list of integers.\n\n#### Output\n- Returns `True` if any two elements in the input list are permutations of each other, `False` otherwise.",
    "code": "from itertools import permutations\n\ndef check_permutation(lst: list[int]) -> bool:\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if sorted(lst[i]) == sorted(lst[j]):\n                return True\n    return False",
    "tests": [
        "assert check_permutation([1, 2, 3]) == False",
        "assert check_permutation([1, 2, 3, 4, 5]) == False",
        "assert check_permutation([1, 2, 3, 3, 2, 1]) == True"
    ],
    "difficulty": "hard",
    "model": "llama3:latest",
    "style": "AtCoder"
}