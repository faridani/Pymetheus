{
    "title": "Maximum Sum of Subarray",
    "description": "Given an integer array `nums`, find the maximum sum of a subarray (i.e., a contiguous sequence of numbers) within the given array. Note that the subarray can be as small as one element, and as large as the entire array.\n\n#### Function Signature\n```python\ndef max_sum_subarray(nums: list[int)) -> int:\n```\n\n#### Input\n- `nums` (list[int]): A list of integers.\n\n#### Output\n- Returns the maximum sum of a subarray within the given array.",
    "code": "",
    "\nfrom typing import List\n\ndef max_sum_subarray(nums: List[int]) -> int:\n    max_sum = nums[0]\n    current_sum = nums[0]\n\n    for num in nums[1:]:\n        if current_sum < 0:\n            current_sum = num\n        else:\n            current_sum += num\n        \n        max_sum = max(max_sum, current_sum)\n\n    return max_sum": "",
    "tests": [
        "assert max_sum_subarray([-2,1,-3,4,-1,2,1,-5,4]) == 6",
        "assert max_sum_subarray([1, -1, 1, -1]) == 1",
        "assert max_sum_subarray([0, 1, -2, 3, 10, -4, 7, 2, -5]) == 18"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "HackerRank"
}