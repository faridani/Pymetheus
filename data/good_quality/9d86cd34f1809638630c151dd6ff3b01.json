{
    "title": "Maximum Sum of Alternating Subarrays",
    "description": "Given an array of integers, write a function `max_sum_alternating` that finds the maximum sum of alternating subarrays.\n\n#### Function Signature\n```python\ndef max_sum_alternating(arr: list[int)) -> int:\n```\n\n#### Input\n- `arr` (list[int]): A list of integers where each integer is between -1000 and 1000 inclusive.\n\n#### Output\n- Returns the maximum sum of alternating subarrays. If there are no possible subarrays, return 0.",
    "code": "",
    "\nimport itertools\n\ndef max_sum_alternating(arr: list[int)) -> int:\n    n = len(arr)\n    max_sum = float('-inf')\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            sum = 0\n            is_alternating = True\n            for k in itertools.cycle([i, j]):\n                if k % 2 == 0:\n                    sum += arr[k]\n                else:\n                    sum -= arr[k]\n                    is_alternating = False\n                if not is_alternating:\n                    break\n            max_sum = max(max_sum, sum)\n    \n    return max_sum": "",
    "tests": [
        "assert max_sum_alternating([1, 2, -3, 10, -4, 3, 7]) == 17",
        "assert max_sum_alternating([-5, 5, -5, 5]) == 0",
        "assert max_sum_alternating([-1000, 1000]) == 2001"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "Competitive Programming"
}