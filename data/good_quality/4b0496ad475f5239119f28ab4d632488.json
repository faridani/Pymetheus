{
    "title": "Hard: Maximum Sum of a Subarray",
    "description": "Given an array of integers, write a function `max_sum_subarray` that returns the maximum sum of a subarray within the given array. A subarray is a contiguous portion of the original array.\n\n#### Function Signature\n```python\ndef max_sum_subarray(arr: list[int]) -> int:\n```\n\n#### Input\n- `arr` (list[int]): An array of integers.\n\n#### Output\n- Returns the maximum sum of a subarray within the given array.",
    "code": "def max_sum_subarray(arr: list[int]) -> int:\n    if not arr:\n        return 0\n    current_sum = max_sum = arr[0]\n    for num in arr[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum",
    "tests": [
        "assert max_sum_subarray([-2, 3, -4, 5, -6, 7]) == 7",
        "assert max_sum_subarray([1, -2, 3, 10, -4, 7, 2, -5]) == 12",
        "assert max_sum_subarray([]) == 0",
        "assert max_sum_subarray([-1]) == -1"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "Competitive Programming"
}