{
    "title": "'Palindromic Substrings Finder (Hard)'",
    "description": "Write a function `find_substrings` that finds all the palindromic substrings of a given string. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization).\n\n#### Function Signature\n```python\ndef find_substrings(s: str) -> List[str]:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns a list of all the palindromic substrings found in the input string.",
    "code": "import re\ndef find_substrings(s: str) -> List[str]:\n    # Convert to lowercase\n    s = s.lower()\n    # Find all possible substrings of length 2 or more using regular expression\n    substrings = [substring for n in range(1, len(s) + 1) for substring in re.findall('.' * n, s)]\n    # Remove non-alphanumeric characters from each substring\n    substrings = [substring.translate(str.maketrans('', '', string.punctuation)) for substring in substrings]\n    # Find palindromic substrings by checking if the substring reads the same forwards and backwards\n    palindromes = [substring for substring in substrings if substring == substring[::-1]]\n    return palindromes",
    "tests": [
        "assert len(find_substrings('a')) == 0",
        "assert find_substrings('madam') == ['madam']",
        "assert find_substrings('racecar') == ['racecar', 'race', 'ccar', 'c', 'rac']"
    ],
    "difficulty": "super hard",
    "model": "mistral:latest",
    "style": "Internationals Olympiad"
}