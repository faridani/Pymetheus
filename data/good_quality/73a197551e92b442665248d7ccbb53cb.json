{
    "title": "Maximum Sum of Unique Elements",
    "description": "Given a list of integers, write a function that finds the maximum sum of unique elements that can be obtained by selecting one element from each pair of consecutive elements. For example, given the list [1, 2, 3, 4, 5], the maximum sum of unique elements would be 1 + 3 + 5 = 9.\n\n#### Function Signature\n```python\ndef max_sum_of_unique_elements(lst: list[int]) -> int:\n```\n\n#### Input\n- `lst` (list[int]): A list of integers.\n\n#### Output\n- Returns the maximum sum of unique elements that can be obtained by selecting one element from each pair of consecutive elements.",
    "code": "",
    "\nimport itertools\n\ndef max_sum_of_unique_elements(lst: list[int]) -> int:\n    # Generate all possible pairs\n    pairs = list(itertools.pairwise(lst))\n\n    # Initialize the maximum sum to negative infinity\n    max_sum = float('-inf')\n\n    # Iterate over each pair\n    for pair in pairs:\n        # Calculate the sum of the unique elements\n        sum_unique_elements = sum(x for x in pair if lst.index(x) % 2 == 0)\n\n        # Update the maximum sum\n        max_sum = max(max_sum, sum_unique_elements)\n\n    return max_sum": "",
    "tests": [
        "assert max_sum_of_unique_elements([1, 2, 3, 4, 5]) == 9",
        "assert max_sum_of_unique_elements([10, 20, 30, 40, 50]) == 110",
        "assert max_sum_of_unique_elements([1, 2, 3, 4]) == 6"
    ],
    "difficulty": "hard",
    "model": "llama3:latest",
    "style": "SPOJ"
}