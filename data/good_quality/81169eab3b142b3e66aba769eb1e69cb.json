{
    "title": "Longest Increasing Subsequence (Hard)",
    "description": "A description of the problem in string form, the description may contain function signature, input format, output format, constraints and hints. Example: Write a function `lis_length` that takes as input an array of integers and returns the length of the longest increasing subsequence.\n\n#### Function Signature\n```python\ndef lis_length(arr: list[int)) -> int:\n```\n\n#### Input\n- `arr` (list[int]): A list of integers that may contain positive, negative, or zero numbers.\n\n#### Output\n- Returns an integer representing the length of the longest increasing subsequence in the input array.",
    "code": "",
    "\nimport bisect\n\ndef lis_length(arr: list[int]) -> int:\n    # Initialize a list to store the lengths of the longest increasing subsequences ending at each position\n    dp = [1] * len(arr)\n\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n        dp[i] = bisect.bisect_right(dp, dp[i])\n    \n    return max(dp)": "",
    "tests": [
        "assert lis_length([10, 9, 2, 5, 3, 7, 101, 18]) == 4",
        "assert lis_length([0, 1, 0, 3, 2, 1, 4]) == 4",
        "assert lis_length([1, 2, 3, 4, 5]) == 5",
        "assert lis_length([-1, -2, -3, -4, -5]) == 1"
    ],
    "difficulty": "insanely difficult",
    "model": "llama3:latest",
    "style": "SPOJ"
}