{
    "title": "Maximal Sum of Subarray",
    "description": "Given a 2D array `matrix` containing integers, find the maximum sum of any contiguous subarray within the given matrix. The subarray must be aligned with the rows and columns of the original matrix.\n\n#### Function Signature\n```python\ndef max_sum_subarray(matrix: list[list[int]]) -> int:\n```\n\n#### Input\n- `matrix` (list[list[int]]): A 2D array containing integers.\n\n#### Output\n- Returns the maximum sum of any contiguous subarray within the given matrix.",
    "code": "def max_sum_subarray(matrix: list[list[int]]) -> int:\n    if not matrix or not matrix[0]:\n        return 0\n    m, n = len(matrix), len(matrix[0])\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    max_sum = float('-inf')\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if matrix[i-1][j-1] > 0:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i-1][j-1]\n            else:\n                dp[i][j] = max(0, dp[i-1][j], dp[i][j-1])\n            max_sum = max(max_sum, dp[i][j])\n    return max_sum",
    "tests": [
        "assert max_sum_subarray([[1, 2, -1, 4], [-3, -5, 3, 7], [0, 2, 8, -2]]) == 14",
        "assert max_sum_subarray([[-2, -3, 4, -5], [-10, 1, 2, -6]]) == 13",
        "assert max_sum_subarray([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == 30"
    ],
    "difficulty": "hard",
    "model": "llama3:latest",
    "style": "TopCoder"
}