{
    "title": "'Palindromic Substrings Checker (Medium)'",
    "description": "Given a string `s`, return the count of non-empty substrings that are palindromes.\n\n#### Function Signature\n```python\ndef count_palindromes(s: str) -> int:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns the count of non-empty substrings that are palindromes in the given string.\n\n#### Hints\n1. To check if a substring `p` is a palindrome, you can use a function similar to the one provided for the Palindrome Checker problem.\n2. Use a sliding window approach with two pointers to find all possible substrings.\n3. You may need to handle the edge cases of overlapping and non-overlapping substrings.",
    "code": "import string\ndef is_palindrome(s: str) -> bool:\n    # Convert to lowercase\n    s = s.lower()\n    # Remove non-alphanumeric characters\n    s = ''.join(char for char in s if char in string.ascii_letters + string.digits)\n    # Check if the string reads the same forwards and backwards\n    return s == s[::-1]\ndef count_palindromes(s: str) -> int:\n    # Initialize counter\n    count = 0\n    # Iterate through all possible substrings (using sliding window approach)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Check if the current substring is a palindrome\n            p = s[i:j]\n            if is_palindrome(p):\n                # Increment the counter by 1\n                count += 1\n    \n    return count",
    "tests": [
        "assert count_palindromes(\"a\") == 1",
        "assert count_palindromes(\"abba\") == 3",
        "assert count_palindromes(\"racecar\") == 4",
        "assert count_palindromes(\"hello world\") == 2"
    ],
    "difficulty": "medium",
    "model": "mistral:latest",
    "style": "AtCoder"
}