{
    "title": "Median of a Stream of Numbers",
    "description": "Design an algorithm to find the median of a stream of numbers. The median of a dataset is the middle value when it's sorted in ascending order. If the length of the dataset is odd, the median will be the middle number. If the length of the dataset is even, the median will be the average of the two middle numbers.\n\n#### Function Signature\n```python\ndef find_median(nums: list[float]) -> float:\n```\n\n#### Input\n- `nums` (list[float]): A stream of floating-point numbers.\n\n#### Output\n- Returns the median of the input stream.",
    "code": "\nimport heapq\n\ndef find_median(nums):\n    min_heap = []\n    max_heap = []\n\n    for num in nums:\n        if not max_heap or num < -max_heap[0]:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap) - num)\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(min_heap, -num)\n            heapq.heappush(max_heap, -heapq.heappop(max_heap) - num)\n\n    if len(nums) % 2 == 1:\n        return -max_heap[0]\n    else:\n        return (-min_heap[0] + -max_heap[0]) / 2",
    "tests": [
        "assert find_median([1, 3, 5]) == 3.0",
        "assert find_median([1, 2, 3, 4, 5]) == 3.0",
        "assert abs(find_median([-1, -2, -3])) - 0.0 < 0.00001",
        "assert find_median([]) == float('nan')"
    ],
    "difficulty": "medium",
    "model": "llama3:latest",
    "style": "Interview Query"
}