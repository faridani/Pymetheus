{
    "title": "Medium: Find the Closest Pair of Points",
    "description": "Given a list of 2D points, find the pair of points that are closest to each other. The input points are given as tuples of two numbers representing x and y coordinates.\n\n#### Function Signature\n```python\ndef closest_pair(points: list[tuple[int, int]]) -> tuple[tuple[int, int], tuple[int, int]]:\n```\n\n#### Input\n- `points` (list[tuple[int, int]]): A list of 2D points where each point is represented as a tuple of two integers.\n\n#### Output\n- Returns the pair of points that are closest to each other as a tuple of tuples. Each inner tuple represents a point with x and y coordinates.",
    "code": "import math\n\ndef closest_pair(points: list[tuple[int, int]]) -> tuple[tuple[int, int], tuple[int, int]]:\n    min_distance = float('inf')\n    closest_points = None\n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            distance = math.sqrt((points[i][0] - points[j][0]) ** 2 + (points[i][1] - points[j][1]) ** 2)\n            if distance < min_distance:\n                min_distance = distance\n                closest_points = (points[i], points[j])\n    return closest_points",
    "tests": [
        "assert closest_pair([(0, 0), (1, 1), (3, 4)]) == ((0, 0), (1, 1))",
        "assert closest_pair([(0, 0), (2, 2), (-1, -1)]) == ((-1, -1), (0, 0))",
        "assert closest_pair([(1, 2), (3, 4), (5, 6)]) == ((1, 2), (3, 4))"
    ],
    "difficulty": "medium",
    "model": "llama3:latest",
    "style": "Codecademy"
}