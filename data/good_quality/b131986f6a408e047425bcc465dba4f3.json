{
    "title": "Minimum Window Substring",
    "description": "Given two strings `s` and `t`, write a function `min_window_substr` that returns the minimum window substring of `s` that contains all characters of `t`. If there are multiple such windows, return the leftmost one.\n\n#### Function Signature\n```python\ndef min_window_substr(s: str, t: str) -> str:\n```\n\n#### Input\n- `s` (str): A string containing the window substring.\n- `t` (str): A string containing the characters to be found in the window substring.\n\n#### Output\n- Returns the minimum window substring of `s` that contains all characters of `t`. If no such window exists, return an empty string.",
    "code": "from collections import defaultdict\n\ndef min_window_substr(s: str, t: str) -> str:\n    if not t or not s:\n        return \"\"\n    dict_t = defaultdict(int)\n    for char in t:\n        dict_t[char] += 1\n    required_chars = len(dict_t)\n    left, right = 0, 0\n    formed_chars = 0\n    window_counts = defaultdict(int)\n    min_len_window = float('inf'), None\n    while right < len(s):\n        character = s[right]\n        window_counts[character] += 1\n        if character in dict_t and window_counts[character] == dict_t[character]: \n            formed_chars += 1\n        while left <= right and formed_chars == required_chars:\n            character = s[left]\n            if right - left + 1 < min_len_window[0]: \n                min_len_window = (right - left + 1, s[left:right+1])\n            window_counts[character] -= 1\n            if character in dict_t and window_counts[character] < dict_t[character]:\n                formed_chars -= 1\n            left += 1\n        right += 1\n    return min_len_window[1] if min_len_window[0] != float('inf') else \"\"",
    "tests": [
        "assert min_window_substr('ADOBECODEBANC', 'ABC') == 'BANC'",
        "assert min_window_substr('hello world', 'world') == 'world'",
        "assert min_window_substr('abcba', 'abc') == 'abc'",
        "assert min_window_substr('abcd', '') == ''"
    ],
    "difficulty": "medium",
    "model": "llama3:latest",
    "style": "ICPC"
}