{
    "title": "Hard - Remove Duplicates From Sorted Array",
    "description": "Given a sorted array `nums`, remove the duplicates **in-place** such that each element appears only once and returns the new length. Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n\n#### Function Signature\n```python\ndef removeDuplicates(nums: List[int]) -> int:\n```\n\n#### Input\n- `nums` (List[int]): A sorted list of integers.\n\n#### Output\n- Returns the length of the modified array which doesn't contain any duplicated numbers, and the remaining elements are not important as long as the first part of array contains unique numbers in order.\n",
    "code": "from typing import List\n\ndef removeDuplicates(nums: List[int]) -> int:\n    if len(nums) == 0: return 0\n    i = 0\n    for j in range(1, len(nums)):\n        if nums[j] != nums[i]:\n            i += 1\n            nums[i] = nums[j]\n    return i + 1\n",
    "tests": [
        "assert removeDuplicates([1, 1, 2]) == 2",
        "assert removeDuplicates([]) == 0",
        "assert removeDuplicates([1, 2, 3, 4]) == 4",
        "assert removeDuplicates([-1, -1, 0, 0, 1, 2, 2, 3, 4, 5]) == 7"
    ]
}