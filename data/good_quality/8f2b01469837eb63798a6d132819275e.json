{
    "title": "'Palindromic Substrings Counting (Hard)'",
    "description": "Given a string `s`, find the number of non-empty palindromic substrings within it. A palindromic substring is a sequence of characters that reads the same forwards and backwards, regardless of capitalization and spaces.\n\n#### Function Signature\n```python\ndef count_palindromes(s: str) -> int:\n```\n\n#### Input\n- `s` (str): A string that may contain letters, numbers, spaces, and punctuation.\n\n#### Output\n- Returns an integer representing the number of non-empty palindromic substrings within the given string.",
    "code": "import re\ndef count_palindromes(s: str) -> int:\n    # Remove non-alphanumeric characters and convert to lowercase\n    s = ''.join(char for char in s if char in string.ascii_letters + string.digits).lower()\n    # Find all palindromic substrings using regular expression\n    regex = r'(?=(.*\\b)(\\1|$))'  # Pattern matches any non-empty palindrome, backreferenced group captures the palindrome itself\n    match_iter = re.finditer(regex, s, re.M)\n    # Return the count of matched substrings\n    return len(match_iter)",
    "tests": [
        "assert count_palindromes(\"A man, a plan, a canal: Panama\") == 10",
        "assert count_palindromes(\"racecar\") == 2",
        "assert count_palindromes(\"hello\") == 1",
        "assert count_palindromes(\"No 'x' in Nixon\") == 6"
    ],
    "difficulty": "hard",
    "model": "mistral:latest",
    "style": "Google Code Jam"
}