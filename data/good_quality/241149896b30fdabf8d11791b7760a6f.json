{
    "title": "Maximum Subarray Sum",
    "description": "Given an integer array `nums`, return the maximum sum of a subarray (subsequence) that can be obtained by rearranging the elements within `nums`. \n\n#### Function Signature\n```\ndef max_subarray_sum(nums: list[int]) -> int:\n```\n\n#### Input\n- `nums` (list[int]): A non-empty array of integers.\n\n#### Output\n- Returns the maximum sum of a subarray that can be obtained by rearranging the elements within `nums`.\n\nExample: For input `[3, 2, -1, 4, -5]`, the output should be `6`, because the maximum sum of a subarray is obtained by rearranging the elements to form the subarray `[4, 2, 3]` with a sum of `6`.",
    "code": "\ndef max_subarray_sum(nums: list[int]) -> int:\n    n = len(nums)\n    nums.sort()\n    return sum(nums[-(n//2+1):])",
    "tests": [
        "assert max_subarray_sum([3, 2, -1, 4, -5]) == 6",
        "assert max_subarray_sum([-1, 0, 1, 2, -1]) == 4",
        "assert max_subarray_sum([-1, -2, -3, 4, 5]) == 9"
    ],
    "difficulty": "medium",
    "model": "llama3:latest",
    "style": "LeetCode"
}