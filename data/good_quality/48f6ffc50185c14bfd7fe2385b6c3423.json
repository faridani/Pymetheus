{
    "title": "Maximum Sum of Rectangle Submatrix",
    "description": "Given a 2D binary matrix `matrix` with dimensions `m x n`, where each element is either 0 or 1, return the maximum sum of a rectangle submatrix that can be formed by selecting some rows and columns from the original matrix.\n\n#### Function Signature\n```python\ndef max_sum_of_rectangle_submatrix(matrix: list[list[int]]) -> int:\n```\n\n#### Input\n- `matrix` (list[list[int]]): A 2D binary matrix with dimensions `m x n`, where each element is either 0 or 1.\n\n#### Output\n- Returns the maximum sum of a rectangle submatrix that can be formed by selecting some rows and columns from the original matrix.",
    "code": "\ndef max_sum_of_rectangle_submatrix(matrix: list[list[int]]) -> int:\n    if not matrix:\n        return 0\n\n    m, n = len(matrix), len(matrix[0])\n    prefix_sum = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if matrix[i - 1][j - 1] == 1:\n                prefix_sum[i][j] = prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1] + 1\n            else:\n                prefix_sum[i][j] = prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1]\n\n    max_sum = float('-inf')\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(i):\n                for col in range(j):\n                    sum_of_rectangle_submatrix = prefix_sum[i][j] - prefix_sum[i][col] - prefix_sum[k][j] + prefix_sum[k][col]\n                    max_sum = max(max_sum, sum_of_rectangle_submatrix)\n    return max_sum",
    "tests": [
        "assert max_sum_of_rectangle_submatrix([[0, 1, 0], [1, 1, 0], [0, 1, 1]]) == 2",
        "assert max_sum_of_rectangle_submatrix([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) == 9",
        "assert max_sum_of_rectangle_submatrix([]) == 0",
        "assert max_sum_of_rectangle_submatrix([[1]]) == 1"
    ],
    "difficulty": "hard",
    "model": "llama3:latest",
    "style": "Exercism"
}