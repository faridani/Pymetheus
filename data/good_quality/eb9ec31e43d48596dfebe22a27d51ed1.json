{
    "title": "Longest Common Subsequence",
    "description": "\nGiven two strings, find the length of their longest common subsequence. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n#### Function Signature\n\n```python\ndef longest_common_subsequence(str1: str, str2: str) -> int:\n```\n\n#### Input\n- `str1` (str): A string containing lowercase English letters.\n- `str2` (str): Another string containing lowercase English letters.\n\n#### Output\n- Returns an integer representing the length of the longest common subsequence between `str1` and `str2`.\n\n#### Constraints\n\n- Both strings will have a maximum length of 1000 characters each.\n\n#### Example:\n\nInput: str1 = \"abcde\", str2 = \"ace\"\nOutput: 3\nExplanation: The longest common subsequences are 'a', 'c' or 'e'.\n\nExample:\nInput: str1 = \"anagram\", str2 = \"mangaar\"\nOutput: 5\nExplanation: The longest common subsequences are 'anagr' or 'manga'.",
    "code": "def longest_common_subsequence(str1: str, str2: str) -> int:\n    m, n = len(str1), len(str2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]",
    "tests": [
        "assert longest_common_subsequence(\"abcde\", \"ace\") == 3",
        "assert longest_common_subsequence(\"anagram\", \"mangaar\") == 5",
        "assert longest_common_subsequence(\"python\", \"java\") == 2",
        "assert longest_common_subsequence(\"ababc\", \"cabca\") == 4"
    ],
    "difficulty": "hard",
    "model": "qwen2:7b",
    "style": "Interview Query"
}