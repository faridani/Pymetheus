{
    "title": "Hard: Sudoku Solver",
    "description": "Write a function `solve_sudoku` that takes a 2D list of strings representing a partially filled-in standard 9x9 Sudoku grid. The valid characters in the grid are '0' to '8' (representing empty cells) and '.' (representing full cells). The function should return `True` if it's possible to fill the entire grid with numbers from 1 to 9, without repeating any number in each row or column, and `False` otherwise.\n\n#### Function Signature\n```\ndef solve_sudoku(grid: list[list[str]]) -> bool:\n```\n\n#### Input\n- `grid` (list[list[str]]): A 2D list of strings representing a partially filled-in standard 9x9 Sudoku grid. The valid characters in the grid are '0' to '8' (representing empty cells) and '.' (representing full cells).\n\n#### Output\n- Returns `True` if it's possible to fill the entire grid with numbers from 1 to 9, without repeating any number in each row or column, and `False` otherwise.",
    "code": "",
    "\ndef solve_sudoku(grid: list[list[str]]) -> bool:\n    def is_valid_move(row: int, col: int, num: str) -> bool:\n        for i in range(9):\n            if grid[row][i] == num or grid[i][col] == num:\n                return False\n        start_row = row - row % 3\n        start_col = col - col % 3\n        for i in range(3):\n            for j in range(3):\n                if grid[start_row + i][start_col + j] == num:\n                    return False\n        return True\n\n    def solve(grid: list[list[str]]) -> bool:\n        for row in range(9):\n            for col in range(9):\n                if grid[row][col] == '0':\n                    for num in '123456789':\n                        if is_valid_move(row, col, num):\n                            grid[row][col] = num\n                            if solve(grid):\n                                return True\n                            else:\n                                grid[row][col] = '0'\n                    return False\n        return True\n\n    return solve(grid)": "",
    "tests": [
        "assert solve_sudoku([['5', '3', '.', '.', '7', '.', '.', '.'], ['6', '.', '.', '1', '9', '5', '.', '.'], ['.', '9', '8', '.', '.', '.', '.', '6', '.'], ['1', '6', '.', '.', '.', '.', '2', '8', '.'], ['.', '.', '.', '4', '1', '9', '.', '7', '5'], ['10', '3', '.', '1', '2', '.', '.', '6', '.'], ['9', '7', '.', '.', '.', '.', '4', '8', '.'], ['.', '4', '.', '8', '3', '.', '.', '2', '.'], ['1', '8', '.', '.', '6', '3', '.', '.', '4']]) == True",
        "assert solve_sudoku([['5', '3', '.', '.', '7', '.', '.', '.'], ['6', '.', '.', '1', '9', '5', '.', '.'], ['.', '9', '8', '.', '.', '.', '.', '6', '.'], ['1', '6', '.', '.', '.', '.', '2', '8', '.'], ['.', '.', '.', '4', '1', '9', '.', '7', '5'], ['10', '3', '.', '1', '2', '.', '.', '6', '.'], ['9', '7', '.', '.', '.', '.', '4', '8', '.'], ['.', '4', '.', '8', '3', '.', '.', '2', '.'], ['1', '8', '.', '.', '6', '3', '.', '.', '4'], ['5', '.', '.', '6', '.', '.', '9', '7', '.']]) == True",
        "assert solve_sudoku([['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '2', '5', '.', '.', '1', '.', '.', '.'], ['.', '.', '1', '.', '3', '.', '8', '.', '.'], ['4', '6', '.', '.', '.', '.', '.', '7', '.'], ['.', '.', '4', '3', '.', '.', '9', '.', '.'], ['7', '5', '.', '2', '8', '.', '.', '1', '.'], ['.', '9', '.', '4', '1', '.', '.', '3', '.'], ['.', '.', '6', '7', '.', '.', '.', '2', '.'], ['1', '3', '.', '5', '9', '.', '.', '8', '.']]) == False"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "Interview Query"
}