{
    "title": "Hard - Maximum Sum of a Subsequence",
    "description": "Given an array of integers `nums` and an integer `k`, find the maximum sum of a subsequence such that each element appears exactly once. For example, given the array `[1, 2, 3, 4, 5]` and `k = 2`, one possible subsequence is `[1, 3]` which has a sum of `4`. Note that the order of elements in the subsequence does not matter.\n\n#### Function Signature\n```python\ndef max_subsequence_sum(nums: list[int], k: int) -> int:\n```\n\n#### Input\n- `nums` (list[int]): A list of integers.\n- `k` (int): The length of the subsequence.\n\n#### Output\n- Returns the maximum sum of a subsequence with exactly `k` elements, each appearing once.",
    "code": "from typing import List\n\ndef max_subsequence_sum(nums: List[int], k: int) -> int:\n    nums.sort()\n    max_sum = 0\n    for i in range(len(nums) - k + 1):\n        subsequence_sum = sum(nums[i:i+k])\n        if subsequence_sum > max_sum:\n            max_sum = subsequence_sum\n    return max_sum",
    "tests": [
        "assert max_subsequence_sum([1, 2, 3, 4, 5], 2) == 4",
        "assert max_subsequence_sum([-10, -20, 0, 30, 40], 3) == 60",
        "assert max_subsequence_sum([100, 200, 300, 400, 500], 1) == 100",
        "assert max_subsequence_sum([-5, 0, 5, 10, -20], 2) == 15"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "Codeforces"
}