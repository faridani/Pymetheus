{
    "title": "Maximum Sum of Subarray",
    "description": "Given a list of integers, find the maximum sum of a contiguous subarray (a subarray that contains every element between two indices). For example, if we have the array [3, 2, -1, 4, -3, 5], one possible solution is the subarray [4, -3, 5] with a sum of 6. Write a function `max_sum_subarray` that finds the maximum sum of a contiguous subarray.\n\n#### Function Signature\n```python\ndef max_sum_subarray(arr: list[int)) -> int:\n```\n\n#### Input\n- `arr` (list[int]): A list of integers.\n\n#### Output\n- Returns the maximum sum of a contiguous subarray.",
    "code": "",
    "\ndef max_sum_subarray(arr: list[int)) -> int:\n    if not arr:\n        return 0\n    max_current = max_global = arr[0]\n    for i in range(1, len(arr)):\n        max_current = max(arr[i-1], 0) + arr[i]\n        max_global = max(max_global, max_current)\n    return max_global": "",
    "tests": [
        "assert max_sum_subarray([3, 2, -1, 4, -3, 5]) == 6",
        "assert max_sum_subarray([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6",
        "assert max_sum_subarray([1]) == 1",
        "assert max_sum_subarray([]) == 0"
    ],
    "difficulty": "super hard",
    "model": "llama3:latest",
    "style": "CodeWars"
}