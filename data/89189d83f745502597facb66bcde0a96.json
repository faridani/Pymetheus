{
    "title": "Hard - Word Ladder",
    "description": "Given two words `beginWord` and `endWord`, and a dictionary `wordList`, return the length of the shortest transformation sequence from `beginWord` to `endWord`, such that:\n\n1. Only one letter can be changed at a time.\n2. Each transformed word must exist in the `wordList`. \n\nReturn 0 if there is no such transformation sequence.\nAll words have the same length.\n\n#### Function Signature\n```python\ndef ladderLength(beginWord: str, endWord: str, wordList: list[str]) -> int:\n```\n\n#### Input\n- `beginWord` (str): The starting word.\n- `endWord` (str): The target word.\n- `wordList` (list[str]): A list of valid words.\n\n#### Output\n- Returns the length of the shortest transformation sequence, or 0 if no such sequence exists.",
    "code": "from collections import deque\n\ndef ladderLength(beginWord: str, endWord: str, wordList: list[str]) -> int:\n    if endWord not in wordList:\n        return 0\n    wordList = set(wordList)\n    queue = deque([(beginWord, 1)])\n    visited = {beginWord}\n    while queue:\n        current_word, level = queue.popleft()\n        for i in range(len(current_word)):\n            for char in 'abcdefghijklmnopqrstuvwxyz':\n                next_word = current_word[:i] + char + current_word[i+1:]\n                if next_word == endWord:\n                    return level + 1\n                if next_word in wordList and next_word not in visited:\n                    queue.append((next_word, level + 1))\n                    visited.add(next_word)\n    return 0",
    "tests": [
        "assert ladderLength('hit', 'cog', ['hot','dot','dog','lot','log','cog']) == 5",
        "assert ladderLength('hit', 'cog', ['hot','dot','dog','lot','log']) == 0"
    ],
    "difficulty": "hard",
    "model": "gemma2:27b"
}