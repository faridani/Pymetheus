{
    "title": "Polynomial Root Finder (Medium)",
    "description": "Given a polynomial equation in the form of a list of coefficients, write a function to find its roots. The polynomial coefficients are given in descending order and the degree of the polynomial is the length of the list.\n\n#### Function Signature\n```python\ndef find_roots(coefficients: List[float]) -> List[float]:\n```\n\n#### Input\n- `coefficients` (List[float]): A list of floating point numbers representing the coefficients in descending order. The degree of the polynomial is equal to the length of the list.\n\n#### Output\n- Returns a list of roots, sorted by their real part from smallest to largest and imaginary parts from smallest to largest if complex.\n",
    "code": "import math\ndef find_roots(coefficients: List[float]) -> List[complex]:\n    # Find the degree of the polynomial\nd = len(coefficients)\n    # Perform a Horner's method recursion to calculate the roots\nn = [0] * d\nforn i in range(d):\n        n[i] = coefficients[i]\n        for j in range(1, i+1):\n            n[i] -= coefficients[i-j]*n[i-j]\n    # Calculate the roots using the formula (n[0] + sqrt(n[1]**2 - 4*n[2])) / (2*n[2])\nn_real = [(n[0]+complex(n[1],0))/(2*n[2]) for n in n]\n    # Sort the roots by their real parts\nsorted_roots = sorted(n_real, key=lambda x: x.real)\n    return sorted_roots",
    "tests": [
        "assert find_roots([1, 0, -1]) == [-1+0j]",
        "assert find_roots([1, -4, 15, 0, -16]) == [2-3j, -(2+3j)]",
        "assert find_roots([0.25, 0.75, 2.25]) == [-0.5-0.5j, 1.5]",
        "assert find_roots([4, -8, 8]) == []"
    ]
}